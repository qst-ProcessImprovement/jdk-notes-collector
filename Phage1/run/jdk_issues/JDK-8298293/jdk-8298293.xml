<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:39:00 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8298293] NMT: os::realloc() should verify that flags do not change between reallocations</title>
                <link>https://bugs.openjdk.org/browse/JDK-8298293</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Currently we have:&lt;br/&gt;
&lt;br/&gt;
void* os::realloc(void *memblock, size_t size, MEMFLAGS memflags, const NativeCallStack&amp;amp; stack)&lt;br/&gt;
&lt;br/&gt;
The API is allowing to change the MEMFLAGS when we simply reallocate memory. This API design seems to ask for trouble, but is necessary since it maps into native realloc, so we are allowed to do realloc(NULL), which will behave the same as malloc()&lt;br/&gt;
&lt;br/&gt;
Still, we can do better and assert that &amp;quot;flags&amp;quot; do not change for a particular allocation.</description>
                <environment></environment>
        <key id="5089120">JDK-8298293</key>
            <summary>NMT: os::realloc() should verify that flags do not change between reallocations</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gziemski">Gerard Ziemski</assignee>
                                    <reporter username="gziemski">Gerard Ziemski</reporter>
                        <labels>
                            <label>nmt</label>
                    </labels>
                <created>Wed, 7 Dec 2022 08:19:31 -0800</created>
                <updated>Tue, 16 Jan 2024 12:02:31 -0800</updated>
                            <resolved>Mon, 13 Feb 2023 10:16:07 -0800</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                                <comments>
                            <comment id="14559585" author="dukebot" created="Mon, 13 Feb 2023 10:16:06 -0800"  >Changeset: c37e9d1c&lt;br/&gt;
Author:    Gerard Ziemski &amp;lt;&lt;a href=&apos;mailto:gziemski@openjdk.org&apos;&gt;gziemski@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-13 18:14:31 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/c37e9d1c8de3d7401422a08342473f803650c4e2&quot;&gt;https://git.openjdk.org/jdk/commit/c37e9d1c8de3d7401422a08342473f803650c4e2&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14557296" author="roboduke" created="Fri, 3 Feb 2023 15:13:10 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12422&quot;&gt;https://git.openjdk.org/jdk/pull/12422&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-03 23:02:53 +0000</comment>
                            <comment id="14556285" author="gziemski" created="Tue, 31 Jan 2023 09:18:47 -0800"  >Here, we are not passing flags into handle_realloc(), and later we assume mtNMT:&lt;br/&gt;
&lt;br/&gt;
void* os::realloc(void *memblock, size_t size, MEMFLAGS memflags, const NativeCallStack&amp;amp; stack) {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Special handling for NMT preinit phase before arguments are parsed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void* rc = NULL;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (NMTPreInit::handle_realloc(&amp;amp;rc, memblock, size)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return rc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}</comment>
                            <comment id="14554821" author="gziemski" created="Thu, 26 Jan 2023 14:07:33 -0800"  >Interestingly enough I see failures with the added asserts:&lt;br/&gt;
&lt;br/&gt;
#  assert(memflags == header-&amp;gt;flags()) failed: weird NMT flags mismatch [Logging != Native Memory Tracking]&lt;br/&gt;
&lt;br/&gt;
V  [libjvm.dylib+0x988437]  report_vm_error(char const*, int, char const*, char const*, ...)+0xd7&lt;br/&gt;
V  [libjvm.dylib+0x11edb85]  os::realloc(void*, unsigned long, MEMFLAGS, NativeCallStack const&amp;amp;)+0x1d5&lt;br/&gt;
V  [libjvm.dylib+0x5b819f]  ReallocateHeap(char*, unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum)+0x5f&lt;br/&gt;
V  [libjvm.dylib+0xfe38a4]  LogConfiguration::disable_outputs()+0x104&lt;br/&gt;
V  [libjvm.dylib+0xfe3e34]  LogConfiguration::disable_logging()+0x24&lt;br/&gt;
V  [libjvm.dylib+0x3c26]  LogTestFixture::~LogTestFixture()+0x26&lt;br/&gt;
V  [libjvm.dylib+0x561ee]  AsyncLogTest_asynclog_vm_Test::~AsyncLogTest_asynclog_vm_Test()+0xe&lt;br/&gt;
V  [libjvm.dylib+0x16d35a9]  testing::TestInfo::Run()+0x279&lt;br/&gt;
V  [libjvm.dylib+0x16d3dc7]  testing::TestCase::Run()+0xf7&lt;br/&gt;
V  [libjvm.dylib+0x16df7f7]  testing::internal::UnitTestImpl::RunAllTests()+0x5b7&lt;br/&gt;
V  [libjvm.dylib+0x16df1df]  testing::UnitTest::Run()+0x6f&lt;br/&gt;
V  [libjvm.dylib+0x311d]  runUnitTestsInner(int, char**)+0x4ad&lt;br/&gt;
C  [gtestLauncher+0x3f89]  main+0x29&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14554165" author="gziemski" created="Tue, 24 Jan 2023 13:13:52 -0800"  >Yes the realloc() API should take &amp;quot;flags&amp;quot;, as we can write code in a very clean way without using malloc(), but just realloc(), i.e. realloc() can be used with NULL pointer, to mimic malloc(), which is how we indeed use it in several places already.&lt;br/&gt;
&lt;br/&gt;
I wonder, however, whether adding an assert to realloc() to make sure we are not changing the flags would be useful?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5088426">JDK-8297718</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5092871">JDK-8301403</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zizv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17338"><![CDATA[b10]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>