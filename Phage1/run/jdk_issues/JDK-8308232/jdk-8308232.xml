<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:00:50 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8308232] nsk/jdb tests don&apos;t pass -verbose flag to the debuggee</title>
                <link>https://bugs.openjdk.org/browse/JDK-8308232</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Some nsk/jdb tests are all run in verbose mode. For example:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;* @run main/othervm&lt;br/&gt;
&amp;nbsp;*      nsk.jdb.kill.kill001.kill001&lt;br/&gt;
&amp;nbsp;*      -arch=${os.family}-${os.simpleArch}&lt;br/&gt;
&amp;nbsp;*      -waittime=5&lt;br/&gt;
&amp;nbsp;*      -verbose&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
This means all log.display() output appears in the log file, but only for the main test. -verbose is not passed to the debuggee. I think part of the problem may be that jdb is being used to launch the debuggee, but it should still be possible to tell jdb to include -verbose in the arguments.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5101076">JDK-8308232</key>
            <summary>nsk/jdb tests don&apos;t pass -verbose flag to the debuggee</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cjplummer">Chris Plummer</assignee>
                                    <reporter username="cjplummer">Chris Plummer</reporter>
                        <labels>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>noreg-self</label>
                    </labels>
                <created>Tue, 16 May 2023 12:46:55 -0700</created>
                <updated>Thu, 13 Jun 2024 16:41:30 -0700</updated>
                            <resolved>Thu, 1 Jun 2023 08:30:32 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-svc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14636133" author="roboduke" created="Thu, 21 Dec 2023 19:14:58 -0800"  >[jdk11u-fix-request] Approval Request from Amos&lt;br/&gt;
&#8220;Backporting for parity with jdk 11.0.22-oracle. No risk, test fix. Clean backport. SAP nightlies passed on 2023-12-21&#8221;</comment>
                            <comment id="14634549" author="roboduke" created="Thu, 14 Dec 2023 23:48:54 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2397&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2397&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-15 07:42:56 +0000</comment>
                            <comment id="14603172" author="mdoerr" created="Thu, 10 Aug 2023 03:37:47 -0700"  >Fix Request (17u):&lt;br/&gt;
Should get backported for parity with 17.0.9-oracle. Recognized as clean backport (context differs because Loom is not it 17u, see PR). nsk/jdb tests have passed.</comment>
                            <comment id="14603171" author="roboduke" created="Thu, 10 Aug 2023 03:36:41 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1655&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1655&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-10 10:29:33 +0000</comment>
                            <comment id="14586361" author="dukebot" created="Thu, 1 Jun 2023 08:30:31 -0700"  >Changeset: c6f20db9&lt;br/&gt;
Author:    Chris Plummer &amp;lt;&lt;a href=&apos;mailto:cjplummer@openjdk.org&apos;&gt;cjplummer@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-01 15:28:58 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/c6f20db945c6217aea84cebd6c97dbf8b93c48a4&quot;&gt;https://git.openjdk.org/jdk/commit/c6f20db945c6217aea84cebd6c97dbf8b93c48a4&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14585829" author="roboduke" created="Tue, 30 May 2023 17:33:39 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14236&quot;&gt;https://git.openjdk.org/jdk/pull/14236&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-31 00:27:16 +0000</comment>
                            <comment id="14585822" author="cjplummer" created="Tue, 30 May 2023 16:51:51 -0700"  >The following fix was proposed:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- String cmdline = classToExecute + &amp;quot; &amp;quot; + ArgumentHandler.joinArguments(argumentHandler.getArguments(), &amp;quot; &amp;quot;);&lt;br/&gt;
+ String cmdline = classToExecute + &amp;quot; &amp;quot; + ArgumentHandler.joinArguments(argumentHandler.getRawArguments(), &amp;quot; &amp;quot;); &lt;br/&gt;
&lt;br/&gt;
But as described in the previous comment, the complexity of the arguments is causing some sort of quoting issue on Windows, and the argument passing ends up being very broken when trying to pass all the raw arguments.&lt;br/&gt;
&lt;br/&gt;
Most of raw arguments are not needed by the debuggee, such as -debugee.vmkeys and -debugee.vmkind. They are relics from before vmtestbase was converted to jtreg. It seems the only two that the debuggee might actually care about are -verbose and -waittime. Doing the following will pass these, and works on Windows:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;String cmdline = classToExecute + &amp;quot; &amp;quot; + ArgumentHandler.joinArguments(argumentHandler.getArguments(), &amp;quot; &amp;quot;);&lt;br/&gt;
+                cmdline += &amp;quot; -waittime &amp;quot; + argumentHandler.getWaitTime();&lt;br/&gt;
+                if (argumentHandler.verbose()) {&lt;br/&gt;
+                    cmdline += &amp;quot; -verbose&amp;quot;;&lt;br/&gt;
+                }&lt;br/&gt;
</comment>
                            <comment id="14584655" author="cjplummer" created="Thu, 25 May 2023 13:34:54 -0700"  >Unfortunately on Windows this solution is not working well. There seems to be some sort of Windows argument parsing bug. On linux in the log I see the arguments being passed to jdb using --connect:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[4]: &amp;gt;-connect&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[5]: &amp;gt;com.sun.jdi.CommandLineLaunch:vmexec=java,options= &amp;lt;snip&amp;gt;,main=nsk.jdb.wherei.wherei001.wherei001A  -arch=linux-x64   -waittime=5   -verbose   -debugee.vmkind=java   -transport.address=dynamic   -jdb=&amp;lt;snip&amp;gt;   -java.options=&amp;lt;snip&amp;gt;   -workdir=.   -debugee.vmkeys=&amp;lt;snip&amp;gt;&amp;lt;&lt;br/&gt;
&lt;br/&gt;
The important part of the above is the main=nsk.jdb.wherei.wherei001.wherei001A part, followed by the arguments to pass to the debuggee. When later the jdb &amp;quot;run&amp;quot; command is used, you see everything after main= echoed:&lt;br/&gt;
&lt;br/&gt;
Sending command: run &lt;br/&gt;
reply[0]: run nsk.jdb.wherei.wherei001.wherei001a  -arch=linux-x64   -waittime=5   -verbose   -debugee.vmkind=java   -transport.address=dynamic   -jdb=&amp;lt;snip&amp;gt;   -java.options=&amp;lt;snip&amp;gt;   -workdir=.   -debugee.vmkeys=&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
For windows the -connect argument looks similar:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[4]: &amp;gt;-connect&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[5]: &amp;gt;com.sun.jdi.CommandLineLaunch:vmexec=java,options= &amp;lt;snip&amp;gt;,main=nsk.jdb.wherei.wherei001.wherei001a  -arch=windows-x64   -waittime=5   -debugee.vmkind=java   -transport.address=dynamic   -jdb=&amp;lt;snip&amp;gt;   -java.options=&amp;lt;snip&amp;gt;   -workdir=.   -debugee.vmkeys=&amp;lt;snip&amp;gt;&amp;lt;&lt;br/&gt;
&lt;br/&gt;
But the arguments are messed up when passed to the run command. Everything after main= up to the -worddir=. argument has been removed, including the debuggee name:&lt;br/&gt;
&lt;br/&gt;
Sending command: run &lt;br/&gt;
reply[0]: run &amp;quot;   -workdir=.   -debugee.vmkeys=&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
This might be a jdb argument parsing bug and not a test bug. It could be related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8234808&quot; title=&quot;jdb quoted option parsing broken&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8234808&quot;&gt;&lt;strike&gt;JDK-8234808&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14583936" author="cjplummer" created="Tue, 23 May 2023 14:44:41 -0700"  >I dug into the logging and argument passing a bit more, and found that it is possible to get the -verbose argument passed on from the debugger to the debuggee. The fix ends up being very simple:&lt;br/&gt;
&lt;br/&gt;
diff --git a/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java b/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java&lt;br/&gt;
index 28aa1972cb4..497c2fd1e8c 100644&lt;br/&gt;
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java&lt;br/&gt;
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/Launcher.java&lt;br/&gt;
@@ -225,7 +225,7 @@ public class Launcher extends DebugeeBinder {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connect.append(&amp;quot;\&amp;quot;&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-                String cmdline = classToExecute + &amp;quot; &amp;quot; + ArgumentHandler.joinArguments(argumentHandler.getArguments(), &amp;quot; &amp;quot;);&lt;br/&gt;
+                String cmdline = classToExecute + &amp;quot; &amp;quot; + ArgumentHandler.joinArguments(argumentHandler.getRawArguments(), &amp;quot; &amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (System.getProperty(&amp;quot;main.wrapper&amp;quot;) != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmdline = MainWrapper.class.getName() + &amp;quot; &amp;quot; + System.getProperty(&amp;quot;main.wrapper&amp;quot;) +  &amp;quot; &amp;quot; + cmdline;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
First some background. jdb supports the following command:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;run [class [args]]        -- start execution of application&amp;#39;s main class&lt;br/&gt;
&lt;br/&gt;
However, our jdb tests just use &amp;quot;run&amp;quot; with no arguments. The main class was determined when jdb was launched using the &amp;quot;main&amp;quot; argument of the jdb -connect argument. For example, you&amp;#39;ll see the following in the log, which represents all the args passd to jdb:&lt;br/&gt;
&lt;br/&gt;
Launching process by array of args: &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[0]: &amp;gt;/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/images/jdk/bin/jdb&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[1]: &amp;gt;-J-XX:MaxRAMPercentage=1.78571&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[2]: &amp;gt;-J-Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[3]: &amp;gt;-J-Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[4]: &amp;gt;-trackallthreads&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[5]: &amp;gt;-connect&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[6]: &amp;gt;com.sun.jdi.CommandLineLaunch:vmexec=java,options= &amp;quot;-XX:MaxRAMPercentage=1.78571&amp;quot; &amp;quot;-Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20&amp;quot; &amp;quot;-Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp&amp;quot;,main=nsk.jdb.kill.kill001.kill001a&amp;lt;&lt;br/&gt;
&lt;br/&gt;
Notice the last argument[5] is the -connect argument, and argument[6] is the data part of the -connect argument. That last part of it is main=nsk.jdb.kill.kill001.kill001a. This is the default that is used for &amp;quot;[class [args]]&amp;quot; when a no argument &amp;quot;run&amp;quot; command is executed.  It&amp;#39;s actually possible to add onto this so you have something like &amp;quot;main=nsk.jdb.kill.kill001.kill001a -verbose&amp;quot;. Then when you do a jdb &amp;quot;run&amp;quot; command, both the main class and the args are automatically included. The code is already trying to add the app arguments:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String cmdline = classToExecute + &amp;quot; &amp;quot; + ArgumentHandler.joinArguments(argumentHandler.getArguments(), &amp;quot; &amp;quot;);&lt;br/&gt;
&lt;br/&gt;
However, getArguments() is normally empty in our tests. It looks like it is suppose to contain app arguments, which are ones that don&amp;#39;t start with a &amp;#39;-&amp;#39;. However, for our jdb debuggees, they all know how to parse options like -waittime and -verbose because they also use ArgumentHandler. ArgumentHandler (actually its superclass ArgumentParser) parses the arguments and stores them as properties. Those that are not parsed end up in &amp;quot;arguments&amp;quot;, whereas &amp;quot;rawArguments&amp;quot; contains all the original arguments, including -verbose and -waittime. Since ArgumentParser stores them as properties, they are queried with ArgumentParser APIs such as:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public boolean verbose() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return options.getProperty(&amp;quot;verbose&amp;quot;) != null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Since currently only &amp;quot;arguments&amp;quot; is added after the debuggee class name, we usually see no app arguments being passed. By passing &amp;quot;rawArguments&amp;quot; instead, we see all arguments being passed, including some that probably are not appropriate for the debuggee, but end up getting ignored. I don&amp;#39;t think the debuggee queries anything other the -verbose and -waittime. Here&amp;#39;s an example of the jdb args passed when rawArguments are used instead:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args[6]: &amp;gt;com.sun.jdi.CommandLineLaunch:vmexec=java,options= &amp;quot;-XX:MaxRAMPercentage=1.78571&amp;quot; &amp;quot;-Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20&amp;quot; &amp;quot;-Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp&amp;quot;,main=nsk.jdb.kill.kill001.kill001a  -arch=linux-x64   -waittime=5   -verbose   -debugee.vmkind=java   -transport.address=dynamic   -jdb=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/images/jdk/bin/jdb   -java.options=&amp;quot;-XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp &amp;quot;   -workdir=.   -jdb.option=&amp;quot;-trackallthreads&amp;quot;   -debugee.vmkeys=&amp;quot;-XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdb_kill_kill001/tmp &amp;quot;&amp;lt;&lt;br/&gt;
&lt;br/&gt;
Search for main=nsk.jdb.kill.kill001.kill001a and see all the args included after it. I doubt any of the debuggees care about anything other than -waittime and -verbose. In fact any debuggee currently calling arguments.waittime() or arguments.verbose() is not getting the right result. Using the above fixes this. See kill001a.java as an example:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;argumentHandler = new JdbArgumentHandler(args);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log = new Log(out, argumentHandler);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;waitTime = argumentHandler.getWaitTime() * 60 * 1000;&lt;br/&gt;
&lt;br/&gt;
This currently gets two things wrong. Since args is empty, the Log object is created with verbose disabled (always). Also, argumentHandler.getWaitTime() always ends up being the default of two minutes. By making sure args is the full set of arguments (rawArguments), this code starts to do as intended.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5106107">JDK-8312613</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106467">JDK-8312961</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106795">JDK-8313254</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107901">JDK-8314175</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5117775">JDK-8322722</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5103786">JDK-8310551</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129259">JDK-8332113</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31jr7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="370"><![CDATA[debugger]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>