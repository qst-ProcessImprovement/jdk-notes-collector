<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:03:24 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8325567] jspawnhelper without args fails with segfault</title>
                <link>https://bugs.openjdk.org/browse/JDK-8325567</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When `jspawnhelper` is run without args it outputs:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;This command is not for general use and should only be run as the result of a call to ProcessBuilder.start() or Runtime.exec() in a java application&amp;quot;&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310265&quot; title=&quot;(process) jspawnhelper should not use argv[0]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310265&quot;&gt;&lt;strike&gt;JDK-8310265&lt;/strike&gt;&lt;/a&gt; broke this. Now `jspawnhelper` fails with sigfault because of the change:&lt;br/&gt;
&lt;br/&gt;
-    /* argv[0] contains the fd number to read all the child info */&lt;br/&gt;
+   /* argv[1] contains the fd number to read all the child info */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int r, fdin, fdout;&lt;br/&gt;
&lt;br/&gt;
-    r = sscanf (argv[argc-1], &amp;quot;%d:%d&amp;quot;, &amp;amp;fdin, &amp;amp;fdout);&lt;br/&gt;
+   r = sscanf (argv[1], &amp;quot;%d:%d&amp;quot;, &amp;amp;fdin, &amp;amp;fdout);&lt;br/&gt;
&lt;br/&gt;
Without args, argc is 1, so argv[1] is an out of bound access.</description>
                <environment></environment>
        <key id="5121109">JDK-8325567</key>
            <summary>jspawnhelper without args fails with segfault</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="easlan">Elif Aslan</assignee>
                                    <reporter username="eastigeevich">Evgeny Astigeevich</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                            <label>regression</label>
                            <label>starter</label>
                    </labels>
                <created>Fri, 9 Feb 2024 09:50:17 -0800</created>
                <updated>Thu, 25 Sep 2025 14:48:58 -0700</updated>
                            <resolved>Fri, 8 Mar 2024 14:12:53 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                                <comments>
                            <comment id="14679337" author="roboduke" created="Wed, 5 Jun 2024 17:04:12 -0700"  >[jdk17u-fix-request] Approval Request from Elif Aslan&lt;br/&gt;
Clean backport to address the segmentation fault issue that occurs when jspawnhelper is called without arguments. There is a new test added to verify the behavior in such cases.New regression test fails without the fix, and passes with the change.</comment>
                            <comment id="14664322" author="goetz" created="Wed, 10 Apr 2024 03:01:34 -0700"  >Maybe this is an issue for skara?&lt;br/&gt;
It could check whether the change is backported to earlier releases, and not label &amp;quot;ready&amp;quot;&lt;br/&gt;
if it is not.&lt;br/&gt;
There could be a command \ignore_earlier_releases or the like for cases where this is not applicable.</comment>
                            <comment id="14664308" author="coffeys" created="Wed, 10 Apr 2024 02:13:57 -0700"  >Thanks for highlighting these issues [~goetz] - I&amp;#39;m following up and will reply back shortly.</comment>
                            <comment id="14664034" author="goetz" created="Tue, 9 Apr 2024 05:48:55 -0700"  >Hi Sean, &lt;br/&gt;
Some more examples where also Oracle does not follow this rule: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8324933&quot; title=&quot;ConcurrentHashTable::statistics_calculate synchronization is expensive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8324933&quot;&gt;&lt;strike&gt;JDK-8324933&lt;/strike&gt;&lt;/a&gt;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8326106&quot; title=&quot;Write and clear stack trace table outside of safepoint&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8326106&quot;&gt;&lt;strike&gt;JDK-8326106&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
And even for LTS releases: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318322&quot; title=&quot;Update IANA Language Subtag Registry to Version 2023-10-16&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318322&quot;&gt;&lt;strike&gt;JDK-8318322&lt;/strike&gt;&lt;/a&gt;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327631&quot; title=&quot;Update IANA Language Subtag Registry to Version 2024-03-07&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327631&quot;&gt;&lt;strike&gt;JDK-8327631&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14663278" author="coffeys" created="Fri, 5 Apr 2024 08:43:27 -0700"  >Thanks for sharing your thoughts. I&amp;#39;ve done my fair share of backports also and I don&amp;#39;t see porting to the newest Update release as a major cost. The patch applies 99.9% of the time (given how little the code would have diverged from the main line in a few months)., Having an engineer decide if the patch should go into the latest JDK Update release is probably just as tricky a task for some. At Oracle, my understanding is that a backported fix always goes into the latest JDK Update release before porting to older JDK family releases. I appreciate that this process gets blurry as we approach rampdown of the X.0.2 (non-LTS) update releases since there&amp;#39;s little merit to integrating fixes late in the release cycle if they won&amp;#39;t be released in the actual product.&lt;br/&gt;
&lt;br/&gt;
My main concern is the image of OpenJDK product quality here. Having users on the latest update release enjoying the latest JDK language features shouldn&amp;#39;t come with the baggage of them wondering whether the product may be defective compared to older JDK family releases.</comment>
                            <comment id="14662981" author="goetz" created="Thu, 4 Apr 2024 13:05:27 -0700"  >I agree with both of you, fixes should be backported to the youngest supported release first, but there is a point where it&amp;#39;s no more worth while if a release is coming to it&amp;#39;s end. Actually fixes reaching 22.0.2 are only 2-3 months productive. But this one might be a nice-to-have.</comment>
                            <comment id="14662851" author="shade" created="Thu, 4 Apr 2024 04:41:08 -0700"  >The backports always come with a cost/benefit choice. The backporting cost is not as trivial as issuing /backport command. The benefit is often taken down by user impact and release lifecycle. We often make a deliberate choice not to backport things that do not have a favorable cost/benefit ratio, and often that choice is JDK-version specific. Of course, it is preferable to maintain the inclusivity for fixes, so that all JDKs &amp;gt;= $X have the fix, but it is a preference, not the rule. Sometimes, skipping backports to STS-es is a practical thing to do. I personally appreciate this practice after doing hundreds of backports across many releases :)&lt;br/&gt;
&lt;br/&gt;
Take this concrete patch as the example: it is not that clear the time spent triaging, backporting, testing, following up on problems for a patch that does not have a direct user impact for a release that would be EOL in 5 months is a time well spent. For 21u and 17u the cost/benefit calculation is offset by the eventual backport of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt; made clean by this one.</comment>
                            <comment id="14662831" author="coffeys" created="Thu, 4 Apr 2024 03:23:18 -0700"  >Thanks for the feedback [~shade] - I&amp;#39;m surprised to see this practice happening to be honest. Users of OpenJDK 22u should enjoy at least the same level of quality as that on the earlier OpenJDK 21u releases. Yes - there is some extra overhead to integration for 22u. The Skara infrastructure has made this trivial though via the /backport command functionality.</comment>
                            <comment id="14662814" author="roboduke" created="Thu, 4 Apr 2024 02:07:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/126&quot;&gt;https://git.openjdk.org/jdk22u/pull/126&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-04 09:02:11 +0000</comment>
                            <comment id="14662813" author="roboduke" created="Thu, 4 Apr 2024 02:03:58 -0700"  >[jdk22u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to improve jspawnhelper resiliency and provide the grounds for later backports. Relevant tests pass, including the new test. Risk is low: touches the production code paths, but in simple manner.</comment>
                            <comment id="14662805" author="shade" created="Thu, 4 Apr 2024 01:41:32 -0700"  >For some patches, it just adds to churn to backport to STS releases that would EOL very soon anyway. I also personally see there is often an implicit division of labor: backoports to 22u and other STSes are normally done by Oracle folks, while we are doing the LTS backports that Oracle folks do not normally do. We can do a jdk22u backport for this one too, of course.</comment>
                            <comment id="14662793" author="coffeys" created="Thu, 4 Apr 2024 01:24:48 -0700"  >[~easlan] [~goetz]  - is there a reason why these fixes aren&amp;#39;t ported to jdk22u project first ? I thought that was best practice. </comment>
                            <comment id="14662616" author="roboduke" created="Wed, 3 Apr 2024 08:49:59 -0700"  >[jdk21u-fix-request] Approval Request from Elif Aslan&lt;br/&gt;
Clean backport to address the segmentation fault issue that occurs when jspawnhelper is called without arguments,.</comment>
                            <comment id="14661006" author="roboduke" created="Wed, 27 Mar 2024 09:01:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/414&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/414&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-27 15:54:06 +0000</comment>
                            <comment id="14661000" author="roboduke" created="Wed, 27 Mar 2024 08:55:26 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2339&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2339&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-27 15:51:18 +0000</comment>
                            <comment id="14655947" author="dukebot" created="Fri, 8 Mar 2024 14:12:52 -0800"  >Changeset: 26274709&lt;br/&gt;
Author:    Elif Aslan &amp;lt;&lt;a href=&apos;mailto:elifasln@amazon.com&apos;&gt;elifasln@amazon.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Evgeny Astigeevich &amp;lt;&lt;a href=&apos;mailto:eastigeevich@openjdk.org&apos;&gt;eastigeevich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-03-08 22:09:18 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/262747094670b00ac63463a059074afa9b81d8a4&quot;&gt;https://git.openjdk.org/jdk/commit/262747094670b00ac63463a059074afa9b81d8a4&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14654401" author="roboduke" created="Mon, 4 Mar 2024 13:23:46 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18112&quot;&gt;https://git.openjdk.org/jdk/pull/18112&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-04 21:19:26 +0000</comment>
                            <comment id="14653807" author="shade" created="Fri, 1 Mar 2024 00:27:27 -0800"  >Thanks! This Ubuntu observation/bug actually contributes a lot for understanding some of the customer failures we have seen with jspawnhelper crashes -- thanks for linking it here. And it gives &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt; even more importance, even if it is nominally not a JDK bug to run into jspawnhelper incompatibilities due to issues with distro upgrade processes. Please track/work &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt; and see what makes sense to add there from your PR, when the PR for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt; appears.</comment>
                            <comment id="14653803" author="JIRAUSER20910" created="Fri, 1 Mar 2024 00:02:56 -0800"  >I apologise for making the PR, I have closed it, and I agree that the root cause is probably best resolved in unattended upgrades. &lt;br/&gt;
&lt;br/&gt;
Regarding the crash itself, probably its still worth adding a check for argc and shutdown cleanly.</comment>
                            <comment id="14653800" author="shade" created="Thu, 29 Feb 2024 23:57:02 -0800"  >I agree with David here. Upgrading the JDK like this is not safe. The fact that jspawnhelper falls into this trap is the _easily observable_ failure mode, but there would be many more. This is an unattended upgrades problem, the unattended upgrades should either never upgrade openjdk packages, or suggest restarting the Java services if openjdk package is upgraded.&lt;br/&gt;
&lt;br/&gt;
Process-wise, I believe jspawnhelper compatibility checks should be covered by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt;, not this bug. This bug is specifically about not crashing with SEGV. Also, it is a considerably bad contribution style to suggest a PR for the bug already assigned to somebody else, at least for this reason: assignee usually understands much more context, and probably invested considerable time in it. If you wanted to do this work, you needed to ask first to hand over the bug assignment. I suggest Vladimir to close his PR and work it out the rest with Chad in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14653714" author="dholmes" created="Thu, 29 Feb 2024 22:13:59 -0800"  >&amp;gt; Unattended upgrades will replace the Java machine, but the active process will still use the old protocol. &lt;br/&gt;
&lt;br/&gt;
That seems like extremely bad practice! If you replace the JDK/JRE on disk while there is still a running Java process then it could try and load incompatible libraries from the new on-disk image. That could result in all manner of errors!</comment>
                            <comment id="14653694" author="roboduke" created="Thu, 29 Feb 2024 19:16:53 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18074&quot;&gt;https://git.openjdk.org/jdk/pull/18074&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-01 01:50:46 +0000</comment>
                            <comment id="14653666" author="JIRAUSER20910" created="Thu, 29 Feb 2024 15:37:54 -0800"  >This is a real problem for the long running Java processes, such as Jenkins workers. &lt;br/&gt;
Unattended upgrades will replace the Java machine, but the active process will still use the old protocol. &lt;br/&gt;
jspawnhelper should probably fall back on old behaviour in this case. &lt;br/&gt;
&lt;br/&gt;
See [1] for investigation by Dimitry Andric. &lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://bugs.launchpad.net/ubuntu/+source/openjdk-17/+bug/2055280&quot;&gt;https://bugs.launchpad.net/ubuntu/+source/openjdk-17/+bug/2055280&lt;/a&gt;</comment>
                            <comment id="14652321" author="rriggs" created="Mon, 26 Feb 2024 10:52:05 -0800"  >Please set the fix-version to &amp;quot;TBD&amp;quot; until the fix is pushed. tnx</comment>
                            <comment id="14648236" author="shade" created="Mon, 12 Feb 2024 02:43:29 -0800"  >I read the adjacent code, and cannot see how JDK could get into this condition. The only invocation of jspawnhelper is here, and it always comes with proper arguments: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/1358850aa63a2874031ca33eba278432fd09d6ab/src/java.base/unix/native/libjava/ProcessImpl_md.c#L497-L504&quot;&gt;https://github.com/openjdk/jdk/blob/1358850aa63a2874031ca33eba278432fd09d6ab/src/java.base/unix/native/libjava/ProcessImpl_md.c#L497-L504&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
So this would only affect whoever is invoking jspawnhelper directly. But that would also run into problems when jspawnhelper protocol changes like in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310265&quot; title=&quot;(process) jspawnhelper should not use argv[0]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310265&quot;&gt;&lt;strike&gt;JDK-8310265&lt;/strike&gt;&lt;/a&gt;. Whoever uses jspawnhelper directly is in the world of (self-inflicted) pain at that point. I believe we should still plug this corner case to at least keep printing the warning message correctly.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5126205">JDK-8329687</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5126437">JDK-8329879</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128280">JDK-8331355</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131270">JDK-8333747</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5103462">JDK-8310265</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121194">JDK-8325621</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22711">21</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34xoj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17407"><![CDATA[b14]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="190"><![CDATA[java.lang]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>