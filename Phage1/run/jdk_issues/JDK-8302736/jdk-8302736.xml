<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 16:55:24 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302736] Major performance regression in Math.log on aarch64</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302736</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
aarch64, Apple M1 Max, macOS 13.2.1&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
Math.log using the generic dlog intrinsic is much slower than StrictMath.log on aarch64.&lt;br/&gt;
&lt;br/&gt;
Caused by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8215133&quot; title=&quot;AARCH64: disable Math.log intrinsic publishing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8215133&quot;&gt;&lt;strike&gt;JDK-8215133&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
Related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8210858&quot; title=&quot;AArch64: remove Math.log intrinsic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8210858&quot;&gt;&lt;strike&gt;JDK-8210858&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
javac Main.java&lt;br/&gt;
java Main&lt;br/&gt;
java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog Main&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
The elapsed time without additional options is less than or equal to the time with the _dlog intrinsic disabled.&lt;br/&gt;
ACTUAL -&lt;br/&gt;
java Main&lt;br/&gt;
6200ms&lt;br/&gt;
&lt;br/&gt;
java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog Main&lt;br/&gt;
860ms&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
import java.util.Random;&lt;br/&gt;
import java.util.concurrent.TimeUnit;&lt;br/&gt;
&lt;br/&gt;
public class Main {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final Random random = new Random();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final double[] values = new double[100_000_000];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; values.length; i++)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values[i] = random.nextDouble();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.gc();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final long start = System.nanoTime();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double blackhole = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; values.length; i++)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blackhole += Math.log(values[i]);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final long elapsed = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(elapsed + &amp;quot;ms (&amp;quot; + blackhole + &amp;quot;)&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
Disable the _dlog intrinsic on aarch64 like -XX:DisableIntrinsic=_dlog do and use the StrictMath implementation.&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5094211">JDK-8302736</key>
            <summary>Major performance regression in Math.log on aarch64</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tholenstein">Tobias Holenstein</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>dcsswa</label>
                            <label>intrinsic</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>oracle-triage-21</label>
                            <label>performance</label>
                            <label>webbug</label>
                    </labels>
                <created>Wed, 15 Feb 2023 03:00:45 -0800</created>
                <updated>Fri, 12 Apr 2024 09:02:19 -0700</updated>
                            <resolved>Wed, 24 May 2023 00:32:19 -0700</resolved>
                                    <version>11.0.2</version>
                    <version>17</version>
                    <version>19.0.2</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14597617" author="goetz" created="Thu, 20 Jul 2023 08:03:21 -0700"  >[11u notice]&lt;br/&gt;
&lt;br/&gt;
If this was adressed for 11, we should seek a more restricted solution. See also discussion in backport PR for 17.&lt;br/&gt;
&lt;br/&gt;
Also remember to take along the follow-up fix.</comment>
                            <comment id="14596799" author="goetz" created="Tue, 18 Jul 2023 00:38:49 -0700"  >Sure, but only once I have a review for the change.</comment>
                            <comment id="14596527" author="aph" created="Mon, 17 Jul 2023 02:33:10 -0700"  >Did you mean to add a fix request tag?</comment>
                            <comment id="14596526" author="roboduke" created="Mon, 17 Jul 2023 02:33:06 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1588&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1588&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-17 09:26:21 +0000</comment>
                            <comment id="14596522" author="goetz" created="Mon, 17 Jul 2023 02:27:35 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.9-oracle.&lt;br/&gt;
Medium risk, rather new change but small. Affects only mac on aarch64.&lt;br/&gt;
I had to resolve and skipped changes that are relevant for loom.&lt;br/&gt;
SAP nighlty testing passed.&lt;br/&gt;
</comment>
                            <comment id="14584011" author="dukebot" created="Wed, 24 May 2023 00:32:18 -0700"  >Changeset: 466ec300&lt;br/&gt;
Author:    Tobias Holenstein &amp;lt;&lt;a href=&apos;mailto:tholenstein@openjdk.org&apos;&gt;tholenstein@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-24 07:29:25 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/466ec300fc8e5702553123cf2fa4b0d8c7d552d9&quot;&gt;https://git.openjdk.org/jdk/commit/466ec300fc8e5702553123cf2fa4b0d8c7d552d9&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14580530" author="roboduke" created="Wed, 10 May 2023 05:51:25 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13606&quot;&gt;https://git.openjdk.org/jdk/pull/13606&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-24 08:10:02 +0000</comment>
                            <comment id="14580471" author="aph" created="Wed, 10 May 2023 01:31:58 -0700"  >This is another case of a general bug in the way WX is handled.&lt;br/&gt;
&lt;br/&gt;
Instead of flipping WX when needed, there is a general presumption that when we&amp;#39;re in VM code we should enable WXWrite. This is an example of temporal coupling, a classic code smell. As long as we insist on trying to maintain this convention, things will continue to break.</comment>
                            <comment id="14569423" author="akozlov" created="Fri, 24 Mar 2023 10:52:49 -0700"  >Looks pretty good to me. The suggested path is a quick and straightforward fix for the problem, while the more generic fix for too many LEAF functions to handle WX will take a longer time and will require some effort to make it right. Probably we need to move WXWrite from LEAF entry down to NativeCall:set_*, where it feels more natural.</comment>
                            <comment id="14569401" author="JIRAUSER19707" created="Fri, 24 Mar 2023 09:40:10 -0700"  >I tested removing the `WXWrite` from `VM_LEAF_BASE` and then building the VM fails on macOs aarch64 with:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
Stack: [0x000000016f768000,0x000000016f96b000],  sp=0x000000016f968fe0,  free space=2051k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x7ccd1c]  NativeCall::set_destination_mt_safe(unsigned char*, bool)+0xc8&lt;br/&gt;
V  [libjvm.dylib+0x891e44]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x240&lt;br/&gt;
v  ~BufferBlob::I2C/C2I adapters 0x000000010a0d12a4&lt;br/&gt;
J 7 c1 java.lang.String.hashCode()I java.base (60 bytes) @ 0x0000000102b51f08 [0x0000000102b51d00+0x0000000000000208]&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
`SharedRuntime::fixup_callers_callsite` is `JRT_LEAF` and accesses the Code Cache via `call-&amp;gt;set_destination_mt_safe(entry_point)`. Therefore we need `ThreadWXEnable` &lt;br/&gt;
&lt;br/&gt;
But the math functions I tested without the `WXWrite` and all tests passed. We could solve this Bug like that and investigate which `JRT_LEAF` functions need the `WXWrite` in a different RFE. What do you think?&lt;br/&gt;
</comment>
                            <comment id="14569320" author="akozlov" created="Fri, 24 Mar 2023 03:52:55 -0700"  >Indeed, thanks for the detailed analysis! :)&lt;br/&gt;
&lt;br/&gt;
For these math function WX switching is not required. Probably in some other cases functions defined with VM_BASE_IMPL do access CodeCache for writing. I need to check the code why it&amp;#39;s there. Another approach would be to remove WX management from these functions and leave that only where it is really required. </comment>
                            <comment id="14569311" author="thartmann" created="Fri, 24 Mar 2023 03:18:48 -0700"  >Couldn&amp;#39;t we defer the WXWrite to the safepoint? And actually, no safepoint should happen when entering via VM_LEAF_BASE, right?</comment>
                            <comment id="14569310" author="thartmann" created="Fri, 24 Mar 2023 03:17:41 -0700"  >[~akozlov], [~vkempik], [~burban], what do you think?</comment>
                            <comment id="14569307" author="thartmann" created="Fri, 24 Mar 2023 03:11:46 -0700"  >Thanks for this thorough analysis, Toby!&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s an explanation for what &amp;quot;WXWrite&amp;quot; actually does:&lt;br/&gt;
&lt;a href=&quot;https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon&quot;&gt;https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I assume that setting WXWrite is required because entering the VM might trigger a safepoint and that might trigger writing into executable memory:&lt;br/&gt;
&lt;br/&gt;
// JavaThread state should be changed only after taking WXWrite. The state&lt;br/&gt;
// change may trigger a safepoint, that would need WXWrite to do bookkeeping&lt;br/&gt;
// in the codecache.&lt;br/&gt;
&lt;br/&gt;
I think it&amp;#39;s best to hand this over to the macOS/AArch64 Port (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8253795&quot; title=&quot;Implementation of JEP 391: macOS/AArch64 Port&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8253795&quot;&gt;&lt;strike&gt;JDK-8253795&lt;/strike&gt;&lt;/a&gt;) experts to check if there&amp;#39;s anything we can do about the performance of enabling/disabling write protections. If not, we should probably prefer the Java version over the intrinsics.</comment>
                            <comment id="14569122" author="JIRAUSER19707" created="Thu, 23 Mar 2023 09:02:29 -0700"  >				|	Linux x64				|	Linux aarch64			|	macOS aarch64&lt;br/&gt;
---&lt;br/&gt;
Math.exp			|	4.996 ns/ops			|	16.444 ns/ops			|	**75.032 ns/ops**&lt;br/&gt;
StrictMath.exp		|	10.201 ns/ops			|	17.950 ns/ops			|	6.292 ns/ops&lt;br/&gt;
-------&lt;br/&gt;
Math.log			|	7.106 ns/ops			|	12.406 ns/ops			|	**62.073 ns/ops**&lt;br/&gt;
StrictMath.log		|	8.881 ns/ops			|	13.228 ns/ops			|	4.512 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.log10		|	7.811 ns/ops			|	16.180 ns/ops			|	**67.623 ns/ops**&lt;br/&gt;
StrictMath.log10	|	12.724 ns/ops			|	16.968 ns/ops			|	6.611 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.pow		|	1.958 ns/ops			|	**4.693 ns/ops**		|	**46.393 ns/ops**&lt;br/&gt;
StrictMath.pow	|	2.516 ns/ops			|	3.342 ns/ops			|	2.052 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.ceil			|	**2.237 ns/ops**		|	0.748 ns/ops			|	 0.569 ns/ops&lt;br/&gt;
StrictMath.ceil		|	1.513 ns/ops			|	1.670 ns/ops			|	0.844 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.floor		|	**2.236 ns/ops**		|	0.728 ns/ops			|	0.602 ns/ops&lt;br/&gt;
StrictMath.floor	|	1.051 ns/ops			|	1.336 ns/ops			|	0.771 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.rint			|	**2.236 ns/ops**		|	 0.728 ns/ops			|	0.567 ns/ops&lt;br/&gt;
StrictMath.rint		|	0.980 ns/ops			|	1.363 ns/ops			|	0.739 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.sin			|	**9.597 ns/ops**		|	8.264 ns/ops			|	3.738 ns/ops&lt;br/&gt;
StrictMath.sin		|	8.093 ns/ops			|	14.754 ns/ops			|	8.711 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.cos			|	**9.424 ns/ops**		|	8.394 ns/ops			|	3.427 ns/ops&lt;br/&gt;
StrictMath.cos		|	7.602 ns/ops			|	14.055 ns/ops			|	8.102 ns/ops&lt;br/&gt;
---&lt;br/&gt;
Math.tan			|	14.159 ns/ops			|	23.009 ns/ops			|	**80.358 ns/ops**&lt;br/&gt;
StrictMath.tan		|	15.769 ns/ops			|	28.939 ns/ops			|	13.166 ns/ops</comment>
                            <comment id="14569118" author="JIRAUSER19707" created="Thu, 23 Mar 2023 09:00:51 -0700"  >The class`java.lang.Math` contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. The numeric methods of class `java.lang.StrictMath`  are defined to return the bit-for-bit same results on all platforms. The implementations of the equivalent functions in class `java.lang.Math` do not have this requirement.  This relaxation permits better-performing implementations where strict reproducibility is not required. By default most of the `java.lang.Math` methods simply call the equivalent method in `java.lang.StrictMath` for their implementation.  Code generators (like C2) are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of `java.lang.Math` methods.  Such higher-performance implementations still must conform to the specification for `java.lang.Math`&lt;br/&gt;
&lt;br/&gt;
I ran JMH benchmarks `org.openjdk.bench.java.lang.StrictMathBench` and  `org.openjdk.bench.java.lang.MathBench` on `Linux x64` , `Linux aarch64`  and `macOS aarch64`. It would be exprected that `java.lang.Math` is equally or faster than `java.lang.StrictMath` . But this is not always the case. Especially `exp`, `log`, `log10`, `pow` and `tan` on `macOS aarch64` are by around a factor 10 slower. &lt;br/&gt;
&lt;br/&gt;
On `macOS aarch64` C2 generates `StubRoutines` for `Math.sin` and `Math.cos`.  And a for `Math.tan`, `Math.exp`, `Math.log`, `Math.pow` and `Math.log10`  a call to a `c++` function. This happens in `LibraryCallKit::inline_math_native`  with funcAddr `CAST_FROM_FN_PTR(address, SharedRuntime::dsin)`&lt;br/&gt;
&lt;br/&gt;
To the shared runtime functions: &lt;br/&gt;
```c++&lt;br/&gt;
static jdouble dtan(jdouble x);&lt;br/&gt;
static jdouble dlog(jdouble x);&lt;br/&gt;
static jdouble dlog10(jdouble x);&lt;br/&gt;
static jdouble dexp(jdouble x);&lt;br/&gt;
static jdouble dpow(jdouble x, jdouble y);&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
- Which are implemented in `sharedRuntimeTrans.cpp`:&lt;br/&gt;
```c++&lt;br/&gt;
JRT_LEAF(jdouble, SharedRuntime::dlog10(jdouble x))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return __ieee754_log10(x);&lt;br/&gt;
JRT_END&lt;br/&gt;
&lt;br/&gt;
JRT_LEAF(jdouble, SharedRuntime::dexp(jdouble x))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return __ieee754_exp(x);&lt;br/&gt;
JRT_END&lt;br/&gt;
&lt;br/&gt;
JRT_LEAF(jdouble, SharedRuntime::dpow(jdouble x, jdouble y))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return __ieee754_pow(x, y);&lt;br/&gt;
JRT_END&lt;br/&gt;
&lt;br/&gt;
JRT_LEAF(jdouble, SharedRuntime::dlog(jdouble x))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return __ieee754_log(x);&lt;br/&gt;
JRT_END&lt;br/&gt;
```&lt;br/&gt;
- And in `sharedRuntimeTrig.cpp`:&lt;br/&gt;
```c++&lt;br/&gt;
JRT_LEAF(jdouble, SharedRuntime::dtan(jdouble x))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[...]&lt;br/&gt;
JRT_END&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
- The `JRT_LEAF`  makro :&lt;br/&gt;
```c++&lt;br/&gt;
#define JRT_LEAF(result_type, header)                                \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;result_type header {                                               \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VM_LEAF_BASE(result_type, header)                                  \&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
- Whereas `VM_LEAF_BASE`  is&lt;br/&gt;
```c++&lt;br/&gt;
// LEAF routines do not lock, GC or throw exceptions&lt;br/&gt;
&lt;br/&gt;
// On macos/aarch64 we need to maintain the W^X state of the thread.  So we&lt;br/&gt;
// take WXWrite on the enter to VM from the &amp;quot;outside&amp;quot; world, so the rest of JVM&lt;br/&gt;
// code can assume writing (but not executing) codecache is always possible&lt;br/&gt;
// without preliminary actions.&lt;br/&gt;
// JavaThread state should be changed only after taking WXWrite. The state&lt;br/&gt;
// change may trigger a safepoint, that would need WXWrite to do bookkeeping&lt;br/&gt;
// in the codecache.&lt;br/&gt;
&lt;br/&gt;
#define VM_LEAF_BASE(result_type, header)                            \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;debug_only(NoHandleMark __hm;)                                     \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite,                    \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread::current()));    \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os::verify_stack_alignment();                                      \&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
- The reason for the 10x slowdown on macOS aarch64 seems to be `WXWrite`  - Without that the performance is as expected (similar to StrictMath)</comment>
                            <comment id="14561057" author="thartmann" created="Fri, 17 Feb 2023 07:11:01 -0800"  >Toby, please have a look.</comment>
                            <comment id="14561054" author="thartmann" created="Fri, 17 Feb 2023 07:07:21 -0800"  >ILW = Performance with intrinsic is worse than without, _dlog intrinsic on Mac M1, disable intrinsic = MMM = P3</comment>
                            <comment id="14561052" author="thartmann" created="Fri, 17 Feb 2023 07:01:09 -0800"  >The stub for the _dlog intrinsic was disabled by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8215133&quot; title=&quot;AARCH64: disable Math.log intrinsic publishing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8215133&quot;&gt;&lt;strike&gt;JDK-8215133&lt;/strike&gt;&lt;/a&gt; which should lead to LibraryCallKit::inline_math_native emitting a direct call to SharedRuntime::dlog -&amp;gt; __ieee754_log. I&amp;#39;m not sure why that one is so slow on Mac M1.</comment>
                            <comment id="14561030" author="thartmann" created="Fri, 17 Feb 2023 06:32:43 -0800"  >But I can reproduce this on a Mac M1 machine:&lt;br/&gt;
&lt;br/&gt;
jdk-19.0.2.jdk/Contents/Home/bin/java Main      &lt;br/&gt;
6267ms (-9.99850495092053E7)&lt;br/&gt;
6290ms (-1.000038166303315E8)&lt;br/&gt;
6290ms (-1.0001351541276565E8)&lt;br/&gt;
&lt;br/&gt;
jdk-19.0.2.jdk/Contents/Home/bin/java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog  Main&lt;br/&gt;
861ms (-9.99948939255735E7)&lt;br/&gt;
874ms (-9.999978828501564E7)&lt;br/&gt;
872ms (-1.0000045283484954E8)&lt;br/&gt;
&lt;br/&gt;
Same with latest JDK 21 (21-ea+10-LTS-784) and also with JDK 17.0.7. So this is not a (recent) regression.&lt;br/&gt;
</comment>
                            <comment id="14561027" author="thartmann" created="Fri, 17 Feb 2023 06:25:57 -0800"  >I can not reproduce this on Linux aarch64 (Ampere A1) with JDK 19.0.2:&lt;br/&gt;
&lt;br/&gt;
19.0.2/bin/java Main&lt;br/&gt;
1386ms (-1.0000181323473875E8)&lt;br/&gt;
1431ms (-9.999069243067198E7)&lt;br/&gt;
1431ms (-1.0000593490621991E8)&lt;br/&gt;
1431ms (-1.000068413622054E8)&lt;br/&gt;
&lt;br/&gt;
jdk-19.0.2/bin/java -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_dlog Main&lt;br/&gt;
1923ms (-1.0000122097311078E8)&lt;br/&gt;
1924ms (-1.000130371487033E8)&lt;br/&gt;
1925ms (-1.0000553223919515E8)&lt;br/&gt;
1923ms (-9.999498701601629E7)&lt;br/&gt;
</comment>
                            <comment id="14560988" author="sswsharm" created="Fri, 17 Feb 2023 03:22:40 -0800"  >Issue is not reproduced on Windows OS&lt;br/&gt;
&lt;br/&gt;
OS : Windows 10 (x64)&lt;br/&gt;
JDK 19.0.2: Pass&lt;br/&gt;
&lt;br/&gt;
The elapsed time without additional options is less than the time with the _dlog intrinsic disabled.&lt;br/&gt;
&lt;br/&gt;
The description mentions that the issue is only reproducible on Mac M1 aarch64, moving it to dev team for further analysis.&lt;br/&gt;
&lt;br/&gt;
ILW = issue in Mac M1 aarch64, reproducible with single test , no workaround available =  MLM = P4&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105297">JDK-8311924</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5105915">JDK-8312449</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4978031">JDK-8215133</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5100587">JDK-8307817</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5122810">JDK-8327036</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110448">JDK-8316392</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5126779">JDK-8330171</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103101" name="JMH result.png" size="259695" author="tholenstein" created="Thu, 23 Mar 2023 09:01:00 -0700"/>
                            <attachment id="102697" name="Main.java" size="795" author="sswsharm" created="Fri, 17 Feb 2023 03:19:18 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30e43:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>