<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:07:46 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303069] Memory leak in CompilerOracle::parse_from_line</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303069</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Direct leak of 56 byte(s) in 1 object(s) allocated from:                                                                                                                                                                                                                                    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7f312f8b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69                                                                                                                                                                                    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7f312beaefbf in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&amp;amp;) src/hotspot/share/runtime/os.cpp:654                                                                                                                                                                   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x7f3129a1dd17 in AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&amp;amp;, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:42                                                                                                                         &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x7f3129a1dd17 in AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/allocation.cpp:52                                                                                                                                                 &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x7f312a467c9e in CHeapObjBase::operator new(unsigned long, MEMFLAGS) src/hotspot/share/memory/allocation.hpp:183                                                                                                                                                                    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#5 0x7f312a467c9e in CHeapObj&amp;lt;(MEMFLAGS)7&amp;gt;::operator new(unsigned long) src/hotspot/share/memory/allocation.hpp:237                                                                                                                                                                     &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#6 0x7f312a467c9e in TypedMethodOptionMatcher::clone() src/hotspot/share/compiler/compilerOracle.cpp:246                                                                                                                                                                                &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#7 0x7f312a46a95e in CompilerOracle::parse_from_line(char*) src/hotspot/share/compiler/compilerOracle.cpp:867                                                                                                                                                                           &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#8 0x7f312a46dec1 in CompilerOracle::parse_from_string(char const*, void (*)(char*)) src/hotspot/share/compiler/compilerOracle.cpp:989                                                                                                                                                  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#9 0x7f312a46dec1 in compilerOracle_init() src/hotspot/share/compiler/compilerOracle.cpp:993                                                                                                                                                                                            &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#10 0x7f312ae59bd8 in init_globals() src/hotspot/share/runtime/init.cpp:156                                                                                                                                                                                                             &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#11 0x7f312c89b1b7 in Threads::create_vm(JavaVMInitArgs*, bool*) src/hotspot/share/runtime/threads.cpp:568                                                                                                                                                                              &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#12 0x7f312b24c353 in JNI_CreateJavaVM_inner src/hotspot/share/prims/jni.cpp:3588                                                                                                                                                                                                       &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#13 0x7f312b24c353 in JNI_CreateJavaVM src/hotspot/share/prims/jni.cpp:3674                                                                                                                                                                                                             &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#14 0x7f312f7bfe25 in InitializeJVM src/java.base/share/native/libjli/java.c:1459                                                                                                                                                                                                       &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#15 0x7f312f7bfe25 in JavaMain src/java.base/share/native/libjli/java.c:413                                                                                                                                                                                                             &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#16 0x7f312f7c8708 in ThreadJavaMain src/java.base/unix/native/libjli/java_md.c:650                                                                                                                                                                                                     &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#17 0x7f312f65afd3 in start_thread nptl/pthread_create.c:442</description>
                <environment></environment>
        <key id="5094838">JDK-8303069</key>
            <summary>Memory leak in CompilerOracle::parse_from_line</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dfenacci">Damon Fenacci</assignee>
                                    <reporter username="jcking">Justin King</reporter>
                        <labels>
                            <label>compilercontrol</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk20u-fix-SQE-ok-next</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>lsan</label>
                            <label>noreg-hard</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-21</label>
                            <label>starter</label>
                    </labels>
                <created>Wed, 22 Feb 2023 05:36:50 -0800</created>
                <updated>Thu, 4 May 2023 04:04:55 -0700</updated>
                            <resolved>Fri, 17 Mar 2023 06:27:48 -0700</resolved>
                                    <version>17</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14577600" author="roboduke" created="Fri, 28 Apr 2023 04:36:01 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1310&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1310&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-28 11:29:43 +0000</comment>
                            <comment id="14577598" author="goetz" created="Fri, 28 Apr 2023 04:24:49 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.8-oracle.&lt;br/&gt;
Low risk, trivial change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14571684" author="roboduke" created="Tue, 4 Apr 2023 06:36:50 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/48&quot;&gt;https://git.openjdk.org/jdk20u/pull/48&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-04 13:26:20 +0000</comment>
                            <comment id="14571672" author="thartmann" created="Tue, 4 Apr 2023 06:26:53 -0700"  >Fix Request (JDK 20u)&lt;br/&gt;
Fixes a memory leak. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.</comment>
                            <comment id="14567763" author="dukebot" created="Fri, 17 Mar 2023 06:27:47 -0700"  >Changeset: 384a8b85&lt;br/&gt;
Author:    Damon Fenacci &amp;lt;&lt;a href=&apos;mailto:damon.fenacci@oracle.com&apos;&gt;damon.fenacci@oracle.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-17 13:24:55 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/384a8b85a7266b920242ea73baf578577ca588ec&quot;&gt;https://git.openjdk.org/jdk/commit/384a8b85a7266b920242ea73baf578577ca588ec&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14567494" author="roboduke" created="Thu, 16 Mar 2023 08:38:48 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13060&quot;&gt;https://git.openjdk.org/jdk/pull/13060&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-16 14:08:13 +0000</comment>
                            <comment id="14567358" author="JIRAUSER20518" created="Thu, 16 Mar 2023 00:21:56 -0700"  >The issue is indeed due to the blackhole compile command without enabling UnlockExperimentalVMOptions. We bail out but never delete the option and don&amp;#39;t add it to the list (register_command in compilerOracle.cpp:312)</comment>
                            <comment id="14562465" author="JIRAUSER20603" created="Thu, 23 Feb 2023 07:30:44 -0800"  >FYI It is reported during the test `compiler/blackhole/BlackholeExperimentalUnlockTest.java`. Based on the stderr `OpenJDK 64-Bit Server VM warning: Blackhole compile option is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions` I think you are correct in that there is an error and it leaks the memory.</comment>
                            <comment id="14562410" author="thartmann" created="Thu, 23 Feb 2023 00:34:21 -0800"  >Ah, maybe it&amp;#39;s when there&amp;#39;s a parse error and we bail out. In that case, the VM will only print a warning and not exit.</comment>
                            <comment id="14562409" author="thartmann" created="Thu, 23 Feb 2023 00:30:50 -0800"  >[~jcking], do you know why lsan thinks that there is a leak? Maybe I&amp;#39;m missing something.</comment>
                            <comment id="14562407" author="thartmann" created="Thu, 23 Feb 2023 00:29:27 -0800"  >I quickly had a look at the code and I&amp;#39;m not sure if there is really a leak. While parsing the CompileCommand, a TypedMethodOptionMatcher is cloned and added to a linked list in register_command. That list is live and reachable via the option_list field during the entire lifetime of the VM.&lt;br/&gt;
&lt;br/&gt;
ILW = Potential (benign) memory leak when parsing CompileCommands, with CompileCommands, no workaround = MLH = P4</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5097352">JDK-8305133</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098225">JDK-8305849</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099665">JDK-8307041</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5100107">JDK-8307439</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5038723">JDK-8259316</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30hzf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17352"><![CDATA[b15]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>