<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:52:45 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303513] C2: LoadKlassNode::make fails with &apos;expecting TypeKlassPtr&apos;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303513</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>RunThese8M/RunThese30M fails with &amp;quot;assert(adr_type != 0LL) failed: expecting TypeKlassPtr&amp;quot; on a fastdebug build of Generational ZGC (see attached HotSpot error files, pid78296 for windows-x64 and pid1054514 for linux-x64). The failure is observed on a Generational ZGC build using -XX:+UseZGC, but it is not GC-specific (can also be reproduced using -XX:+UseParallelGC -XX:-UseCompressedOops).&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (c:\sb\prod\1677586887\workspace\open\src\hotspot\share\opto\memnode.cpp:2289), pid=78296, tid=48652&lt;br/&gt;
#  assert(adr_type != 0LL) failed: expecting TypeKlassPtr&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:1229395 128231 %     4       javasoft.sqe.tests.api.java.util.Collections.ncopies.Stream::lambda$getStreamFactory$2 @ 11 (73 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000002fc8e00000,0x0000002fc8f00000]&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
(...)&lt;br/&gt;
V  [jvm.dll+0xbaebeb]  LoadKlassNode::make+0x5b  (memnode.cpp:2289)&lt;br/&gt;
V  [jvm.dll+0xdf4b83]  SubTypeCheckNode::load_klass+0x153  (subtypenode.cpp:212)&lt;br/&gt;
V  [jvm.dll+0xdf51eb]  SubTypeCheckNode::verify+0x32b  (subtypenode.cpp:183)&lt;br/&gt;
V  [jvm.dll+0xdf4973]  SubTypeCheckNode::Ideal+0x2a3  (subtypenode.cpp:113)&lt;br/&gt;
V  [jvm.dll+0xcac915]  PhaseIterGVN::transform_old+0xe5  (phaseX.cpp:1356)&lt;br/&gt;
V  [jvm.dll+0xca8cb3]  PhaseIterGVN::optimize+0x2b3  (phaseX.cpp:1206)&lt;br/&gt;
V  [jvm.dll+0x51c682]  Compile::Optimize+0x1b2  (compile.cpp:2218)&lt;br/&gt;
V  [jvm.dll+0x51a43b]  Compile::Compile+0x16bb  (compile.cpp:834)&lt;br/&gt;
(...)&lt;br/&gt;
&lt;br/&gt;
FAILURE ANALYSIS&lt;br/&gt;
&lt;br/&gt;
The failure is caused by an implicit assumption made by the verification code within SubTypeCheckNode::Ideal() [1]. This code wrongly assumes that if obj_or_subklass (the ObjOrSubKlass input of the SubTypeCheck node) is a klass or OOP pointer, then &amp;#39;obj_or_subklass-&amp;gt;bottom_type() != TOP&amp;#39;. This assumption does not hold if obj_or_subklass is a projection of the TOP constant node, which can happen within IGVN e.g. if &amp;#39;obj_or_subklass-&amp;gt;in(0)&amp;#39; is an unreachable call node that gets replaced with TOP, as can be seen in before-after-removing-call.png (attached).&lt;br/&gt;
&lt;br/&gt;
The consequence is that &amp;#39;adr&amp;#39;, the node computing the klass address of obj_or_subklass [2], has bottom type TOP, which triggers the reported assertion failure in LoadKlassNode::make() [3]. The failure is not specific to ZGC. It has only been observed with this GC configuration because a specific intermediate Idealization step in the IGVN sequence that leads to the above situation is only performed if UseCompressedOops is disabled. This step replaces a LoadP node with the value stored by a dominating StoreP node that writes into the same address, as can be seen in before-after-load-idealization.png (attached).&lt;br/&gt;
&lt;br/&gt;
This Idealization is not performed if UseCompressedOops is enabled because, unlike LoadP, the corresponding LoadN node is not recorded for IGVN upon creation -- only its successor DecodeN node is [4,5]. This missing optimization opportunity should be addressed separately.&lt;br/&gt;
&lt;br/&gt;
SUGGESTED SOLUTION&lt;br/&gt;
&lt;br/&gt;
To skip verification of SubtypeCheck nodes [1] if &amp;#39;obj_or_subklass-&amp;gt;bottom_type == TOP&amp;#39;. This is a low-risk fix affecting debug-only code. An alternative, more invasive solution, would be to skip the entire SubtypeCheckNode::Ideal() call in this case.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/subtypenode.cpp#L113&quot;&gt;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/subtypenode.cpp#L113&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/subtypenode.cpp#L211&quot;&gt;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/subtypenode.cpp#L211&lt;/a&gt;&lt;br/&gt;
[3] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/memnode.cpp#L2289&quot;&gt;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/memnode.cpp#L2289&lt;/a&gt;&lt;br/&gt;
[4] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/bac02b6e9d9e1e93db27c7888188f29631e07f47/src/hotspot/share/opto/graphKit.cpp#L1561-L1566&quot;&gt;https://github.com/openjdk/jdk/blob/bac02b6e9d9e1e93db27c7888188f29631e07f47/src/hotspot/share/opto/graphKit.cpp#L1561-L1566&lt;/a&gt;&lt;br/&gt;
[5] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/memnode.cpp#L956&quot;&gt;https://github.com/openjdk/jdk/blob/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c/src/hotspot/share/opto/memnode.cpp#L956&lt;/a&gt;</description>
                <environment></environment>
        <key id="5095380">JDK-8303513</key>
            <summary>C2: LoadKlassNode::make fails with &apos;expecting TypeKlassPtr&apos;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rcastanedalo">Roberto Castaneda Lozano</assignee>
                                    <reporter username="rcastanedalo">Roberto Castaneda Lozano</reporter>
                        <labels>
                            <label>c2</label>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-21</label>
                            <label>test-bigapps-runThese</label>
                            <label>tier3</label>
                    </labels>
                <created>Thu, 2 Mar 2023 03:37:20 -0800</created>
                <updated>Wed, 12 Jul 2023 13:11:30 -0700</updated>
                            <resolved>Thu, 15 Jun 2023 03:11:26 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14590064" author="dcubed" created="Sat, 17 Jun 2023 06:29:30 -0700"  >The fix for this bug is integrated in jdk-22+3-94 and in jdk-21+28-2346.</comment>
                            <comment id="14589566" author="roboduke" created="Thu, 15 Jun 2023 03:32:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/21&quot;&gt;https://git.openjdk.org/jdk21/pull/21&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-15 10:25:30 +0000</comment>
                            <comment id="14589561" author="dukebot" created="Thu, 15 Jun 2023 03:11:25 -0700"  >Changeset: 83d92672&lt;br/&gt;
Author:    Roberto Casta&amp;#xF1;eda Lozano &amp;lt;&lt;a href=&apos;mailto:rcastanedalo@openjdk.org&apos;&gt;rcastanedalo@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-15 10:08:28 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/83d92672d4c2637fc37ddd873533c85a9b083904&quot;&gt;https://git.openjdk.org/jdk/commit/83d92672d4c2637fc37ddd873533c85a9b083904&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14589236" author="roboduke" created="Wed, 14 Jun 2023 02:51:58 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14463&quot;&gt;https://git.openjdk.org/jdk/pull/14463&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-14 08:23:44 +0000</comment>
                            <comment id="14584941" author="kvn" created="Fri, 26 May 2023 09:02:00 -0700"  >Okay. Good analysis.</comment>
                            <comment id="14584872" author="rcastanedalo" created="Fri, 26 May 2023 02:40:43 -0700"  >[~kvn] Thanks for the pointer, I checked but the failure is still reproducible after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308583&quot; title=&quot;SIGSEGV in GraphKit::gen_checkcast&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308583&quot;&gt;&lt;strike&gt;JDK-8308583&lt;/strike&gt;&lt;/a&gt;, see failure analysis in the updated description above.</comment>
                            <comment id="14584573" author="kvn" created="Thu, 25 May 2023 09:08:45 -0700"  >Is it possible that it relates to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308583&quot; title=&quot;SIGSEGV in GraphKit::gen_checkcast&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308583&quot;&gt;&lt;strike&gt;JDK-8308583&lt;/strike&gt;&lt;/a&gt;? See Roland&amp;#39;s fix for it.</comment>
                            <comment id="14579808" author="rcastanedalo" created="Mon, 8 May 2023 08:10:00 -0700"  >before-igvn.pdf shows the relevant subgraph before IGVN. The failing SubTypeCheck node is &amp;#39;1885 SubTypeCheck&amp;#39;. After some GVN iterations, &amp;#39;1787 Phi&amp;#39; is optimized away and &amp;#39;1805 Proj&amp;#39; becomes the ObjOrSubKlass input of 1885 (see on-failure.pdf). &amp;#39;1800 CallStaticJava&amp;#39; is also optimized away and replaced by the TOP node as input to 1805, causing the discrepancy between phase-&amp;gt;type(1805 Proj) (non-TOP) and (1805 Proj)-&amp;gt;bottom_type() (TOP) which ultimately leads to the assertion failure.</comment>
                            <comment id="14579315" author="rcastanedalo" created="Fri, 5 May 2023 01:50:06 -0700"  >This issue is dependent on/triggered by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297933&quot; title=&quot;[REDO] Compiler should only use verified interface types for optimization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297933&quot;&gt;&lt;strike&gt;JDK-8297933&lt;/strike&gt;&lt;/a&gt; (cannot be reproduced if &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297933&quot; title=&quot;[REDO] Compiler should only use verified interface types for optimization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297933&quot;&gt;&lt;strike&gt;JDK-8297933&lt;/strike&gt;&lt;/a&gt; is reverted).</comment>
                            <comment id="14578797" author="rcastanedalo" created="Wed, 3 May 2023 07:53:03 -0700"  >Observations:&lt;br/&gt;
1. The failure can be reproduced on both the Generational ZGC repo and the integration PR in mainline.&lt;br/&gt;
2. Through the entire SubTypeCheckNode::Ideal(), in(ObjOrSubKlass) is a projection with the &amp;#39;top&amp;#39; node (1 Con) as input (possibly the projection of a call node that has been optimized away).&lt;br/&gt;
3. Through the entire SubTypeCheckNode::Ideal(), phase-&amp;gt;type(in(ObjOrSubKlass))-&amp;gt;isa_oopptr() holds, but in(ObjOrSubKlass)-&amp;gt;bottom_type() is TOP. The reason for this discrepancy is that phase-&amp;gt;type(in(ObjOrSubKlass)) has not been updated yet, whereas in(ObjOrSubKlass)-&amp;gt;bottom_type(), as a projection node, trivially propagates the TOP type from its input (the &amp;#39;top&amp;#39; node) [1]. This causes adr-&amp;gt;bottom_type() within SubTypeCheckNode::load_klass() to return TOP [2], which is unexpected by LoadKlassNode::make(..., adr, ...) [3] and triggers the assertion failure.&lt;br/&gt;
4. On entry of SubTypeCheckNode::Ideal(), it is common to observe phase-&amp;gt;type(in(ObjOrSubKlass)) != in(ObjOrSubKlass)-&amp;gt;Value(phase), this can be seen e.g. in compiler/arraycopy/stress/TestStressArrayCopy.java:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- phase-&amp;gt;type(in(ObjOrSubKlass)): java/lang/Object:NotNull *&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- in(ObjOrSubKlass)-&amp;gt;Value(phase): java/lang/Object (java/util/stream/Sink,java/util/function/Consumer):NotNull *&lt;br/&gt;
5. The failure is independent of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299155&quot; title=&quot;C2: SubTypeCheckNode::verify() should not produce dependencies / oop pool entries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299155&quot;&gt;&lt;strike&gt;JDK-8299155&lt;/strike&gt;&lt;/a&gt; (can also be reproduced after reverting it).&lt;br/&gt;
6. The failure is dependent/triggered by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297933&quot; title=&quot;[REDO] Compiler should only use verified interface types for optimization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297933&quot;&gt;&lt;strike&gt;JDK-8297933&lt;/strike&gt;&lt;/a&gt; (cannot be reproduced after reverting it).&lt;br/&gt;
7. At the point of failure, a very large number of classes is loaded (hundreds of thousands)&lt;br/&gt;
8. Removing the verification code does not lead to other C2 failures or obvious miscompilations, however it uncovers another issue which is likely unrelated (similarly to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8234355&quot; title=&quot;Buffer overflow in jcmd GC.class_stats due to too many classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8234355&quot;&gt;&lt;strike&gt;JDK-8234355&lt;/strike&gt;&lt;/a&gt;, the JVM crashes when running the &amp;#39;VM.class_hierarchy&amp;#39; diagnostic command due to the large number of loaded classes).&lt;br/&gt;
9. In generational ZGC, class unloading tends to be less frequent than in non-generational ZGC, since it is only triggered by major collections. This might explain why the issue is only reproducible with generational ZGC.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/multnode.cpp#L117&quot;&gt;https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/multnode.cpp#L117&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/addnode.cpp#L633-L634&quot;&gt;https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/addnode.cpp#L633-L634&lt;/a&gt;&lt;br/&gt;
[3] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/memnode.cpp#L2288-L2289&quot;&gt;https://github.com/openjdk/jdk/blob/dc4096ce136c867e0806070a2d7c8b4efef5294c/src/hotspot/share/opto/memnode.cpp#L2288-L2289&lt;/a&gt;</comment>
                            <comment id="14564081" author="thartmann" created="Thu, 2 Mar 2023 04:30:14 -0800"  >ILW = Assert during C2 compilation, intermittent with long running stress test - only reproduced twice so far with generational ZGC, no known workaround but disable compilation of affected method = HLM = P3</comment>
                            <comment id="14564074" author="thartmann" created="Thu, 2 Mar 2023 04:20:16 -0800"  >Smells like &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297933&quot; title=&quot;[REDO] Compiler should only use verified interface types for optimization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297933&quot;&gt;&lt;strike&gt;JDK-8297933&lt;/strike&gt;&lt;/a&gt;, where [~epeter] reported something similar with the first version of the patch. Actually, the code path that fails was just added recently by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299155&quot; title=&quot;C2: SubTypeCheckNode::verify() should not produce dependencies / oop pool entries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299155&quot;&gt;&lt;strike&gt;JDK-8299155&lt;/strike&gt;&lt;/a&gt;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5103302">JDK-8310137</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5103406">JDK-8310219</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103755">JDK-8310524</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4748053">JDK-8059299</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="104040" name="before-after-load-idealization.png" size="502722" author="rcastanedalo" created="Fri, 26 May 2023 02:37:10 -0700"/>
                            <attachment id="104041" name="before-after-removing-call.png" size="460052" author="rcastanedalo" created="Fri, 26 May 2023 02:37:10 -0700"/>
                            <attachment id="103754" name="before-igvn.pdf" size="4762" author="rcastanedalo" created="Mon, 8 May 2023 08:09:27 -0700"/>
                            <attachment id="103647" name="hs_err_pid1054514.log" size="1267850" author="rcastanedalo" created="Fri, 28 Apr 2023 04:38:47 -0700"/>
                            <attachment id="102872" name="hs_err_pid78296.log" size="513756" author="rcastanedalo" created="Thu, 2 Mar 2023 03:35:48 -0800"/>
                            <attachment id="103828" name="on-failure.pdf" size="2953" author="rcastanedalo" created="Mon, 15 May 2023 06:52:10 -0700"/>
                            <attachment id="102873" name="replay_pid78296.log" size="20018055" author="rcastanedalo" created="Thu, 2 Mar 2023 03:35:55 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30lbv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>