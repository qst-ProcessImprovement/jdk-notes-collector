<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:44:51 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8318757] VM_ThreadDump asserts in interleaved ObjectMonitor::deflate_monitor calls</title>
                <link>https://bugs.openjdk.org/browse/JDK-8318757</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK22 CI:&lt;br/&gt;
&lt;br/&gt;
applications/runthese/RunThese8H.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s snippets from the hs_err_pid file:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/afbc6042-3a24-4198-9369-18c663a3f74c-S26242/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9bb4b2f2-b367-4f77-8070-a87bcc8390e0/runs/b97f4c9a-293f-423a-9fb9-8eaa8a0903d7/workspace/open/src/hotspot/share/runtime/objectMonitor.inline.hpp:123), pid=1966066, tid=1966105&lt;br/&gt;
#  assert(prev == old_value) failed: unexpected prev owner=0x0000000000000002, expected=0x0000000000000000&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+21) (fastdebug build 22-ea+21-1634)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+21-1634, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x1463f3e]  ObjectMonitor::deflate_monitor()+0x87e&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f955802b180):  VMThread &amp;quot;VM Thread&amp;quot;          [id=1966105, stack(0x00007f9540457000,0x00007f9540557000) (1024K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f9540457000,0x00007f9540557000],  sp=0x00007f95405554a0,  free space=1017k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x1463f3e]  ObjectMonitor::deflate_monitor()+0x87e  (objectMonitor.inline.hpp:123)&lt;br/&gt;
V  [libjvm.so+0x17348a6]  ObjectSynchronizer::deflate_monitor_list(Thread*, LogStream*, elapsedTimer*, ObjectMonitorsHashtable*)+0xa6  (synchronizer.cpp:1603)&lt;br/&gt;
V  [libjvm.so+0x1734adc]  ObjectSynchronizer::deflate_idle_monitors(ObjectMonitorsHashtable*)+0x18c  (synchronizer.cpp:1687)&lt;br/&gt;
V  [libjvm.so+0x1880da8]  VM_ThreadDump::doit()+0x148  (vmOperations.cpp:289)&lt;br/&gt;
V  [libjvm.so+0x18815ff]  VM_Operation::evaluate()+0x13f  (vmOperations.cpp:71)&lt;br/&gt;
V  [libjvm.so+0x18a2251]  VMThread::evaluate_operation(VM_Operation*)+0x111  (vmThread.cpp:281)&lt;br/&gt;
V  [libjvm.so+0x18a2d8f]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)&lt;br/&gt;
V  [libjvm.so+0x18a2f74]  VMThread::loop()+0x84  (vmThread.cpp:502)&lt;br/&gt;
V  [libjvm.so+0x18a3082]  VMThread::run()+0x92  (vmThread.cpp:175)&lt;br/&gt;
V  [libjvm.so+0x179c5da]  Thread::call_run()+0xba  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x14a6e2a]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)</description>
                <environment></environment>
        <key id="5113126">JDK-8318757</key>
            <summary>VM_ThreadDump asserts in interleaved ObjectMonitor::deflate_monitor calls</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stefank">Stefan Karlsson</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>genzgc</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>sync</label>
                            <label>test-bigapps-runThese</label>
                            <label>tier3</label>
                            <label>tier8</label>
                            <label>zgc</label>
                    </labels>
                <created>Tue, 24 Oct 2023 13:48:49 -0700</created>
                <updated>Tue, 28 May 2024 11:24:04 -0700</updated>
                            <resolved>Thu, 16 Nov 2023 06:36:32 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14656748" author="roboduke" created="Tue, 12 Mar 2024 04:37:20 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
This resolves potentially catastrophic bug in monitor deflation due to interleaving with thread dumping code that is frequently exercised by profilers. This is a part of atomic 21u integration, see 21u-dev PR for more details. Applies cleanly, but the new test needs -XX:+UnlockExperimentalVMOptions to gain access to -XX:LockingMode. After that amendment, all tests pass. Was in mainline for several months. Small bugtail: needs &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8320515&quot; title=&quot;assert(monitor-&amp;gt;object_peek() != nullptr) failed: Owned monitors should not have a dead object&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8320515&quot;&gt;&lt;strike&gt;JDK-8320515&lt;/strike&gt;&lt;/a&gt; as the followup.</comment>
                            <comment id="14655425" author="roboduke" created="Thu, 7 Mar 2024 02:13:11 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/337&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/337&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-06 19:12:00 +0000</comment>
                            <comment id="14627585" author="roboduke" created="Mon, 20 Nov 2023 04:34:21 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/384&quot;&gt;https://git.openjdk.org/jdk21u/pull/384&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-20 12:28:56 +0000</comment>
                            <comment id="14626899" author="dukebot" created="Thu, 16 Nov 2023 06:36:31 -0800"  >Changeset: 87be6b69&lt;br/&gt;
Author:    Stefan Karlsson &amp;lt;&lt;a href=&apos;mailto:stefank@openjdk.org&apos;&gt;stefank@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-16 14:33:50 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/87be6b69fe985eee01fc3344f9153d774db792c1&quot;&gt;https://git.openjdk.org/jdk/commit/87be6b69fe985eee01fc3344f9153d774db792c1&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14625238" author="shade" created="Thu, 9 Nov 2023 06:07:11 -0800"  >This looks a generic bug in monitor deflation, and it blocks &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319048&quot; title=&quot;Monitor deflation unlink phase prolongs time to safepoint&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319048&quot;&gt;&lt;strike&gt;JDK-8319048&lt;/strike&gt;&lt;/a&gt; that would expose the same trouble on unlinking path quite reliably. The unlinking code is already broken, but it fails rarely since it does not check for safepoints too often (the trouble that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319048&quot; title=&quot;Monitor deflation unlink phase prolongs time to safepoint&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319048&quot;&gt;&lt;strike&gt;JDK-8319048&lt;/strike&gt;&lt;/a&gt; would fix).</comment>
                            <comment id="14623971" author="roboduke" created="Mon, 6 Nov 2023 01:52:22 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16519&quot;&gt;https://git.openjdk.org/jdk/pull/16519&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-06 09:46:11 +0000</comment>
                            <comment id="14622583" author="stefank" created="Wed, 1 Nov 2023 00:04:20 -0700"  >[~pchilanomate] Thanks for taking a look at this bug. Yes, I&amp;#39;d be happy to polish and try to get my patch upstreamed. My intention was to first discuss it with [~dcubed]. Dan could you ping me when you have time to discuss my proposed rewrite?</comment>
                            <comment id="14622572" author="pchilanomate" created="Tue, 31 Oct 2023 21:47:18 -0700"  >I attached a reproducer. The problem is what [~stefank] pointed out about concurrent deflation operations by the VMThread and MonitorDeflationThread.&lt;br/&gt;
In particular, in ObjectMonitor::deflate_monitor() the conditional &amp;quot;if (ObjectSynchronizer::is_final_audit() &amp;amp;&amp;amp; owner_is_DEFLATER_MARKER())&amp;quot; doesn&amp;#39;t consider that the call could be made by the VMThread due to a VM_ThreadDump operation, so in the cases where the monitor has already been deflated, instead of bailing out we continue and hit the assert when expecting the owner to be null.&lt;br/&gt;
&lt;br/&gt;
After fixing that small bug running the reproducer results in SIGSEGV or NMT verification code crashes instead, revealing a bigger issue: after the VM_ThreadDump finishes, if the MonitorDeflationThread was blocked in deflate_monitor_list() or unlink_deflated() it will resume iterating the list from monitors that could have already been deleted by the VMThread. &lt;br/&gt;
&lt;br/&gt;
So regarding the solutions, we can either keep the current overall logic and guard against this case (we could add a check after the MonitorDeflationThread unblocks to see if another deflation operation happened, and in that case restart the iteration from the head again) or we can go with [~stefank] approach of rewriting VM_ThreadDump so we avoid deflating in that operation and instead we just collect in a table the monitors we care about. [~stefank] I looked at your prototype and seems you have already figured out all the details, want to give your patch a try?</comment>
                            <comment id="14622513" author="stefank" created="Tue, 31 Oct 2023 11:51:38 -0700"  >FWIW, I have a prototype to rewrite VM_DumpThreads. As a part of that patch I remove the problematic monitor deflation from VM_DumpThreads:&lt;br/&gt;
&lt;a href=&quot;https://github.com/stefank/jdk/tree/object-monitor-dump&quot;&gt;https://github.com/stefank/jdk/tree/object-monitor-dump&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
As I see it VM_DumpThreads doesn&amp;#39;t have to deflate monitors and even get better performance if we *instead* apply a correct filter over those monitors that we want to collect into the table. Experiments I did with millions of ObjectMonitors matched that assumption. There might be some benefits of cleaning out the _in_use_list, but I think that could be handled by triggering the MonitorDeflationThread to do an async deflation pass, instead of doing it in a safepoint operation.</comment>
                            <comment id="14622509" author="stefank" created="Tue, 31 Oct 2023 11:38:16 -0700"  >[~dcubed] I think this has started to happen now because the test was updated a week ago.</comment>
                            <comment id="14622499" author="mseledtsov" created="Tue, 31 Oct 2023 11:18:44 -0700"  >ILW = HLH = P2&lt;br/&gt;
Priority may change if we have a known work-around.</comment>
                            <comment id="14622485" author="dcubed" created="Tue, 31 Oct 2023 10:46:52 -0700"  >[~stefank] - Thanks for the analysis. Do you have any theory about why this&lt;br/&gt;
failure mode started about a week ago? The possibility of two threads both&lt;br/&gt;
doing monitor deflation has been in the code for a very long time, but this&lt;br/&gt;
failure mode is recent... We used to have quite elaborate mechanisms in&lt;br/&gt;
place to keep the two threads from messing with each other, but all that was&lt;br/&gt;
simplified when [~eosterlund] (and I) got rid of Type Stable Memory and&lt;br/&gt;
greatly simplified the list management stuff.</comment>
                            <comment id="14622483" author="stefank" created="Tue, 31 Oct 2023 10:23:48 -0700"  >I peeked at the core file for one of the problematic cases. Two threads are running monitor deflation. The first thread is the crashing VMThread running a safepointed VM_ThreadDump, which include a monitor deflation pass. The other thread is the MonitorDeflationThread that runs an async monitor deflation pass:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;SafepointSynchronize::block &lt;br/&gt;
&amp;nbsp;SafepointMechanism::process&lt;br/&gt;
&amp;nbsp;SafepointMechanism::process_if_requested&lt;br/&gt;
&amp;nbsp;ThreadBlockInVMPreprocess&amp;lt;void (JavaThread*)&amp;gt;::~ThreadBlockInVMPreprocess&lt;br/&gt;
&amp;nbsp;ThreadBlockInVM::~ThreadBlockInVM&lt;br/&gt;
&amp;nbsp;ObjectSynchronizer::chk_for_block_req&lt;br/&gt;
&amp;nbsp;ObjectSynchronizer::deflate_monitor_list&lt;br/&gt;
&amp;nbsp;ObjectSynchronizer::deflate_idle_monitors&lt;br/&gt;
&amp;nbsp;MonitorDeflationThread::monitor_deflation_thread_entry&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The stack trace doesn&amp;#39;t contain all frames so I&amp;#39;m guessing how this thread got to chk_for_block_req. It seems likely that the thread is inside the loop that is deflating object monitors on the _in_use_list list, but that it hasn&amp;#39;t reached the point where it tries to unlink the deflated monitors. In the deflation loop we have checks to see if it is time safepoint (chk_for_block_req). At some point it *is* time to block (the stack trace above), and the VMThread starts to run the VM_ThreadDump safepoint operation, which also tries to deflate monitors on the _in_use_list. I think this is what then causes the assert to fail. The MonitorDeflationThread sets the _owner to DEFLATER_MARKER (value 0x2) and release the _object OopHandle. Then when the VMThread finds this ObjectMonitor it sees that _object is &amp;quot;cleared&amp;quot; and expects _owner to be nullptr and not 0x2.&lt;br/&gt;
&lt;br/&gt;
The assert seems to come from this path:&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (obj == nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// If the object died, we can recycle the monitor without racing with&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Java threads. The GC already broke the association with the object.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set_owner_from(nullptr, DEFLATER_MARKER);&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
So, I think the problem is that we have these two interleaved monitor deflation passes.</comment>
                            <comment id="14622417" author="dcubed" created="Tue, 31 Oct 2023 07:21:05 -0700"  >I was wondering if the dangling 0x2 was due to an anonymous owner&lt;br/&gt;
value being accidentally left behind. However, that&amp;#39;s not the case:&lt;br/&gt;
&lt;br/&gt;
src/hotspot/share/runtime/objectMonitor.hpp:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Separate _header and _owner on different cache lines since both can&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// have busy multi-threaded access. _header and _object are set at initial&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// inflation. The _object does not change, so it is a good choice to share&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// its cache line with _header.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;DEFINE_PAD_MINUS_SIZE(0, OM_CACHE_LINE_SIZE, sizeof(volatile markWord) +&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sizeof(WeakHandle));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Used by async deflation as a marker in the _owner field.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Note that the choice of the two markers is peculiar:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// - They need to represent values that cannot be pointers. In particular,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//   we achieve this by using the lowest two bits.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// - ANONYMOUS_OWNER should be a small value, it is used in generated code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//   and small values encode much better.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// - We test for anonymous owner by testing for the lowest bit, therefore&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//   DEFLATER_MARKER must *not* have that bit set.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#define DEFLATER_MARKER reinterpret_cast&amp;lt;void*&amp;gt;(2) &lt;br/&gt;
public:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// NOTE: Typed as uintptr_t so that we can pick it up in SA, via vmStructs.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const uintptr_t ANONYMOUS_OWNER = 1; &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
So we have a dangling DEFLATER_MARKER value. Please note that we&lt;br/&gt;
have only seen this failure starting a week ago (2023.10.24) so I think this&lt;br/&gt;
failure mode is due to a somewhat recent change.&lt;br/&gt;
&lt;br/&gt;
I still suspect that this bug is due to something in the LM_LIGHTWEIGHT&lt;br/&gt;
implementation, but I don&amp;#39;t have a smoking gun yet.</comment>
                            <comment id="14621652" author="dcubed" created="Fri, 27 Oct 2023 07:27:21 -0700"  >Here&amp;#39;s snippets from the hs_err_pid file from the jdk-22+22-1699-tier3 sighting:&lt;br/&gt;
&lt;br/&gt;
applications/runthese/RunThese30M.java&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/afbc6042-3a24-4198-9369-18c663a3f74c-S38645/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c338546e-d243-4a4b-a798-bb484eb5f7a6/runs/9b6b9c1a-1ca6-401a-9f55-af2ee98bdfe8/workspace/open/src/hotspot/share/runtime/objectMonitor.inline.hpp:123), pid=628310, tid=628349&lt;br/&gt;
#  assert(prev == old_value) failed: unexpected prev owner=0x0000000000000002, expected=0x0000000000000000&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+22) (fastdebug build 22-ea+22-1699)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+22-1699, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x1464bee]  ObjectMonitor::deflate_monitor()+0x87e&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007ff8a002b180):  VMThread &amp;quot;VM Thread&amp;quot;          [id=628349, stack(0x00007ff880374000,0x00007ff880474000) (1024K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007ff880374000,0x00007ff880474000],  sp=0x00007ff8804724a0,  free space=1017k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x1464bee]  ObjectMonitor::deflate_monitor()+0x87e  (objectMonitor.inline.hpp:123)&lt;br/&gt;
V  [libjvm.so+0x173bcd6]  ObjectSynchronizer::deflate_monitor_list(Thread*, LogStream*, elapsedTimer*, ObjectMonitorsHashtable*)+0xa6  (synchronizer.cpp:1603)&lt;br/&gt;
V  [libjvm.so+0x173bf0c]  ObjectSynchronizer::deflate_idle_monitors(ObjectMonitorsHashtable*)+0x18c  (synchronizer.cpp:1687)&lt;br/&gt;
V  [libjvm.so+0x18880f8]  VM_ThreadDump::doit()+0x148  (vmOperations.cpp:289)&lt;br/&gt;
V  [libjvm.so+0x188894f]  VM_Operation::evaluate()+0x13f  (vmOperations.cpp:71)&lt;br/&gt;
V  [libjvm.so+0x18a95a1]  VMThread::evaluate_operation(VM_Operation*)+0x111  (vmThread.cpp:281)&lt;br/&gt;
V  [libjvm.so+0x18aa0df]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)&lt;br/&gt;
V  [libjvm.so+0x18aa2c4]  VMThread::loop()+0x84  (vmThread.cpp:502)&lt;br/&gt;
V  [libjvm.so+0x18aa3d2]  VMThread::run()+0x92  (vmThread.cpp:175)&lt;br/&gt;
V  [libjvm.so+0x17a3a0a]  Thread::call_run()+0xba  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x14a7aca]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5124418">JDK-8328334</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="5113463">JDK-8319048</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114511">JDK-8319896</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5115435">JDK-8320721</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5057657">JDK-8273107</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5115194">JDK-8320515</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129538">JDK-8332506</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="106978" name="ConcurrentDeflation.java" size="3077" author="pchilanomate" created="Tue, 31 Oct 2023 21:34:57 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33ls3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>