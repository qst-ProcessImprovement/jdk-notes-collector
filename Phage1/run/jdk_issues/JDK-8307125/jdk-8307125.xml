<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 19:03:19 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8307125] compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java hits assert(!Continuation::is_frame_in_continuation(thread(), fr())) failed: No support for deferred values in continuations </title>
                <link>https://bugs.openjdk.org/browse/JDK-8307125</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Test&lt;br/&gt;
compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java when executed with test thread factory plugin&lt;br/&gt;
hits &lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S79032/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/750846d8-d033-408e-81ca-585a129691d7/runs/2557e57f-d43b-4f45-909b-c725b6a3a577/workspace/open/src/hotspot/share/runtime/vframe_hp.cpp:112), pid=430325, tid=430475&lt;br/&gt;
#  assert(!Continuation::is_frame_in_continuation(thread(), fr())) failed: No support for deferred values in continuations&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-04-28-0130129.leonid.mesnik.jdk-ttf-build)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-04-28-0130129.leonid.mesnik.jdk-ttf-build, mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x181226e]  compiledVFrame::update_deferred_value(BasicType, int, jvalue)+0x33e&lt;br/&gt;
&amp;nbsp;....&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f1bcc5572d0):  JavaThread &amp;quot;ForkJoinPool-1-worker-1&amp;quot; daemon [_thread_in_vm, id=430475, stack(0x00007f1ba5bfb000,0x00007f1ba5cfc000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f1ba5bfb000,0x00007f1ba5cfc000],  sp=0x00007f1ba5cf7290,  free space=1008k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x181226e]  compiledVFrame::update_deferred_value(BasicType, int, jvalue)+0x33e  (vframe_hp.cpp:112)&lt;br/&gt;
V  [libjvm.so+0x1011200]  c2v_materializeVirtualObjects(JNIEnv_*, _jobject*, _jobject*, bool)+0xa00  (jvmciCompilerToVM.cpp:1649)&lt;br/&gt;
j  jdk.vm.ci.hotspot.CompilerToVM.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+0 &lt;a href=&apos;mailto:jdk.internal.vm.ci@21-internal&apos;&gt;jdk.internal.vm.ci@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.vm.ci.hotspot.CompilerToVMHelper.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+5 &lt;a href=&apos;mailto:jdk.internal.vm.ci@21-internal&apos;&gt;jdk.internal.vm.ci@21-internal&lt;/a&gt;&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.check(I)V+202&lt;br/&gt;
J 578 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.recurse(II)V (70 bytes) @ 0x00007f1bbc7a3c08 [0x00007f1bbc7a3bc0+0x0000000000000048]&lt;br/&gt;
J 586 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame2(Ljava/lang/String;I)V (115 bytes) @ 0x00007f1bbc7acdd8 [0x00007f1bbc7acd80+0x0000000000000058]&lt;br/&gt;
J 585 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x00007f1bbc7a9eac [0x00007f1bbc7a9e60+0x000000000000004c]&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.test()V+117&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.main([Ljava/lang/String;)V+37&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x00000001000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x00000001000c5000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134&lt;br/&gt;
j  java.lang.VirtualThread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+65 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.enter0()V+4 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
J 308  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt; (0 bytes) @ 0x00007f1bbc773ec4 [0x00007f1bbc773d60+0x0000000000000164]&lt;br/&gt;
j  jdk.internal.vm.Continuation.run()V+122 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.runContinuation()V+76 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$$Lambda+0x00000001000ad970.run()V+4 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask.doExec()I+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f1bbc1c5d21&lt;br/&gt;
V  [libjvm.so+0xe55d02]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x462  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0xe562e3]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x283  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0xe564f1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)&lt;br/&gt;
V  [libjvm.so+0xfa5666]  thread_entry(JavaThread*, JavaThread*)+0x96  (jvm.cpp:2918)&lt;br/&gt;
V  [libjvm.so+0xe87e9e]  JavaThread::thread_main_inner()+0x17e  (javaThread.cpp:717)&lt;br/&gt;
V  [libjvm.so+0x1758538]  Thread::call_run()+0xb8  (thread.cpp:215)&lt;br/&gt;
V  [libjvm.so+0x145984a]  thread_native_entry(Thread*)+0x11a  (os_linux.cpp:740)&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  jdk.vm.ci.hotspot.CompilerToVM.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+0 &lt;a href=&apos;mailto:jdk.internal.vm.ci@21-internal&apos;&gt;jdk.internal.vm.ci@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.vm.ci.hotspot.CompilerToVMHelper.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+5 &lt;a href=&apos;mailto:jdk.internal.vm.ci@21-internal&apos;&gt;jdk.internal.vm.ci@21-internal&lt;/a&gt;&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.check(I)V+202&lt;br/&gt;
J 578 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.recurse(II)V (70 bytes) @ 0x00007f1bbc7a3c08 [0x00007f1bbc7a3bc0+0x0000000000000048]&lt;br/&gt;
J 586 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame2(Ljava/lang/String;I)V (115 bytes) @ 0x00007f1bbc7acdd8 [0x00007f1bbc7acd80+0x0000000000000058]&lt;br/&gt;
J 585 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x00007f1bbc7a9eac [0x00007f1bbc7a9e60+0x000000000000004c]&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.test()V+117&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.main([Ljava/lang/String;)V+37&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x00000001000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x00000001000c5000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134&lt;br/&gt;
j  java.lang.VirtualThread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+65 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.enter0()V+4 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
J 308  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt; (0 bytes) @ 0x00007f1bbc773ec4 [0x00007f1bbc773d60+0x0000000000000164]&lt;br/&gt;
j  jdk.internal.vm.Continuation.run()V+122 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.runContinuation()V+76 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$$Lambda+0x00000001000ad970.run()V+4 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask.doExec()I+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f1bbc1c5d21&lt;br/&gt;
Registers:&lt;br/&gt;
RAX=0x00007f1bd5fa7000, RBX=0x00007f1b748588d0, RCX=0x00007f1bd4eef1e0, RDX=0x00007f1bd4eef210&lt;br/&gt;
RSP=0x00007f1ba5cf7290, RBP=0x00007f1ba5cf7330, RSI=0x0000000000000070, RDI=0x00007f1bd4eeef78&lt;br/&gt;
R8 =0x0000000000000001, R9 =0x0000000000000000, R10=0x0000000000000000, R11=0x0000000000000000&lt;br/&gt;
R12=0x00007f1ba5cf72c0, R13=0x0000000000000000, R14=0x00007f1b74859d40, R15=0x00007f1b748588d0&lt;br/&gt;
RIP=0x00007f1bd4be926e, EFLAGS=0x0000000000010202, CSGSFS=0x002b000000000033, ERR=0x0000000000000006&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRAPNO=0x000000000000000e</description>
                <environment></environment>
        <key id="5099761">JDK-8307125</key>
            <summary>compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java hits assert(!Continuation::is_frame_in_continuation(thread(), fr())) failed: No support for deferred values in continuations </summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dnsimon">Douglas Simon</assignee>
                                    <reporter username="lmesnik">Leonid Mesnik</reporter>
                        <labels>
                            <label>jvmci</label>
                            <label>loom</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-21</label>
                    </labels>
                <created>Fri, 28 Apr 2023 10:51:22 -0700</created>
                <updated>Mon, 21 Jul 2025 21:50:34 -0700</updated>
                            <resolved>Thu, 25 May 2023 09:29:09 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                                                                <comments>
                            <comment id="14584577" author="dukebot" created="Thu, 25 May 2023 09:29:07 -0700"  >Changeset: 89b3c375&lt;br/&gt;
Author:    Doug Simon &amp;lt;&lt;a href=&apos;mailto:dnsimon@openjdk.org&apos;&gt;dnsimon@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-25 16:26:26 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/89b3c375ac55f960dbeac8a2355e528450e610a1&quot;&gt;https://git.openjdk.org/jdk/commit/89b3c375ac55f960dbeac8a2355e528450e610a1&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14578804" author="roboduke" created="Wed, 3 May 2023 08:03:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13777&quot;&gt;https://git.openjdk.org/jdk/pull/13777&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-03 12:43:29 +0000</comment>
                            <comment id="14578728" author="rpressler" created="Wed, 3 May 2023 03:13:56 -0700"  >There is no plan to support deferred locals in virtual threads directly. However, we would like to ultimately allow continuations unroll compiled frames that have been marked for deoptimization into interpreted frames before freezing, at least in some situations. As a side effect this will &amp;quot;support&amp;quot; deferred locals as they will be inserted into the interpreted frames when unrolled. However, that work has not started.</comment>
                            <comment id="14578726" author="chumer" created="Wed, 3 May 2023 03:06:25 -0700"  >To give a bit of context: In Truffle a number of optimizations are reliant on lazily materializing caller frames. As you can imagine keeping frames virtual allows us effective stack allocate them and therefore allows us to be competitive with regular native frames. So we keep frames virtual optimistically until we find out we need to materialize them, which will always be materialized for future frame allocations. We will have a tough time knowing which frames to materialize beforehand. So our peak performance would suffer significantly on VirtualThreads.  Likewise, the Truffle debugger also uses this mechanism to inspect and modify Truffle natively compiled frames.&lt;br/&gt;
&lt;br/&gt;
We can speculate that we are not executing on VirtualThreads, enabling these optimizations for regular threads and disabling them for VirtualThreads. We can keep the optimized frames read-only for virtual threads for the debugger. &lt;br/&gt;
&lt;br/&gt;
All this machinery requires many changes on our end to support. It would be good to know if it is worth it or if VirtualThreads will ultimately support deferred locals. We only need to materialize the VirtualFrame on the stack. We can mark all the locals we may need to materialize of which methods ahead of time.&lt;br/&gt;
&lt;br/&gt;
A few more side notes on this:&lt;br/&gt;
* We want to move away from the JVMCI Frame API in favor of using the StackWalker API. But we miss the capability to modify frames there. I think it is in our interest to move these two worlds together, ultimately.&lt;br/&gt;
* We currently do not allow Truffle languages to enter virtual threads with the optimized Truffle runtime. We would love to support VirtualThreads and bring it to many of our language implementations.&lt;br/&gt;
&lt;br/&gt;
[~rpressler] What would you recommend we do?</comment>
                            <comment id="14578707" author="dnsimon" created="Wed, 3 May 2023 02:21:40 -0700"  >Thanks for the clarification [~rpressler]. This means in the short term we will need to add something jdk.vm.ci.code.stack.InspectedFrame#canMaterializeVirtualObjects which will return false for virtual threads until such time that the necessary support is added.&lt;br/&gt;
I guess this means there&amp;#39;s also no immediate plans to allow local variable reflection in the java.lang.StackWalker API either (whether for virtual or non-virtual threads)?&lt;br/&gt;
&lt;br/&gt;
Note that this places a limitation on com.oracle.truffle.api.frame.FrameInstance#getFrame[1] in terms of preventing write access to local variables of frames of virtual threads. (cc [~chumer])&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/oracle/graal/blob/12022ff745f743894ecbac8db2235a5dfbdc63a4/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/frame/FrameInstance.java#L97&quot;&gt;https://github.com/oracle/graal/blob/12022ff745f743894ecbac8db2235a5dfbdc63a4/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/frame/FrameInstance.java#L97&lt;/a&gt;</comment>
                            <comment id="14578705" author="rpressler" created="Wed, 3 May 2023 02:06:25 -0700"  >[~dnsimon] That is correct, and has always been the case: deferred locals are not supported in virtual threads. That&amp;#39;s also why virtual threads do not support setting locals when debugging in frames other than the topmost (current) one. Supporting deferred locals is complicated, and the right way to do it is to allow the continuation code to unroll compiled frames to interpreted frames before they&amp;#39;re frozen (as opposed to waiting for the frames to be deoptimized when returned to). We may need the capability to construct interpreted frames on demand if and when we support serialization of continuations, but other than that there is currently no ongoing work to specifically support deferred locals.</comment>
                            <comment id="14578701" author="dnsimon" created="Wed, 3 May 2023 01:44:14 -0700"  >If I interpret this failure correctly, it means jdk.vm.ci.code.stack.InspectedFrame#materializeVirtualObjects cannot work on virtual threads. Is that right [~alanb]?</comment>
                            <comment id="14578374" author="dnsimon" created="Tue, 2 May 2023 10:30:47 -0700"  >I added some tracing and for this stack:&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000016d7f0000,0x000000016d9f3000],  sp=0x000000016d9efff0,  free space=2047k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x12b08b4]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x4bc  (vframe_hp.cpp:117)&lt;br/&gt;
V  [libjvm.dylib+0x12b1250]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40&lt;br/&gt;
V  [libjvm.dylib+0x66fd94]  report_vm_error(char const*, int, char const*, char const*, ...)+0x6c&lt;br/&gt;
V  [libjvm.dylib+0x129cbac]  compiledVFrame::update_deferred_value(BasicType, int, jvalue)+0x188&lt;br/&gt;
V  [libjvm.dylib+0xb568dc]  c2v_materializeVirtualObjects(JNIEnv_*, _jobject*, _jobject*, bool)+0xc5c&lt;br/&gt;
j  jdk.vm.ci.hotspot.CompilerToVM.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+0 &lt;a href=&apos;mailto:jdk.internal.vm.ci@21-internal&apos;&gt;jdk.internal.vm.ci@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.vm.ci.hotspot.CompilerToVMHelper.materializeVirtualObjects(Ljdk/vm/ci/hotspot/HotSpotStackFrameReference;Z)V+5 &lt;a href=&apos;mailto:jdk.internal.vm.ci@21-internal&apos;&gt;jdk.internal.vm.ci@21-internal&lt;/a&gt;&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.check(I)V+202&lt;br/&gt;
J 574 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.recurse(II)V (70 bytes) @ 0x000000011801cbf0 [0x000000011801cb80+0x0000000000000070]&lt;br/&gt;
J 577 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame2(Ljava/lang/String;I)V (115 bytes) @ 0x000000011802462c [0x00000001180245c0+0x000000000000006c]&lt;br/&gt;
J 576 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x0000000118021a6c [0x0000000118021a00+0x000000000000006c]&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.test()V+117&lt;br/&gt;
j  compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.main([Ljava/lang/String;)V+37&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x00000003000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x00000003000c5000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I see that the assertion is failing for this frame:&lt;br/&gt;
&lt;br/&gt;
J 576 c2 compiler.jvmci.compilerToVM.MaterializeVirtualObjectTest.testFrame(Ljava/lang/String;I)V (55 bytes) @ 0x0000000118021a6c [0x0000000118021a00+0x000000000000006c]&lt;br/&gt;
&lt;br/&gt;
What exactly is Continuation::is_frame_in_continuation testing? Why might it be true for this frame but not the frames for the C2 compiled frames (i.e. MaterializeVirtualObjectTest.testFrame2 and MaterializeVirtualObjectTest.recurse) just below it?&lt;br/&gt;
</comment>
                            <comment id="14578179" author="alanb" created="Tue, 2 May 2023 00:08:32 -0700"  >There&amp;#39;s no support for deferred value with virtual threads.  This shouldn&amp;#39;t be an issue for JVMTI SetLocalXXX as the spec only requires that an implementation support setting locals in the top-most frame of a virtual thread that is suspended at an event. If I read this bug report correctly, it looks like the Graal JIT also makes use of this feature.&lt;br/&gt;
</comment>
                            <comment id="14578164" author="thartmann" created="Mon, 1 May 2023 23:14:39 -0700"  >Doug, please have a look.</comment>
                            <comment id="14578163" author="thartmann" created="Mon, 1 May 2023 23:14:03 -0700"  >ILW = Assert during materialization of virtual objects, JVMCI test with Loom (preview feature), disable thread factory plugin = HLM = P3</comment>
                            <comment id="14577722" author="lmesnik" created="Fri, 28 Apr 2023 10:57:27 -0700"  >To reproduce fix run test with following command-line:&lt;br/&gt;
make -- run-test JTREG_TEST_THREAD_FACTORY=Virtual  TEST=compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5071507">JDK-8284161</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5165495">JDK-8362968</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31bmz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>