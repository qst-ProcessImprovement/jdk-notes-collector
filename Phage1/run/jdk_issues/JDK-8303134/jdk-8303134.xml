<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:51:33 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303134] JFR: Missing stack trace during chunk rotation stress</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303134</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The test TestChunkIntegrity.java fails on Windows. &lt;br/&gt;
&lt;br/&gt;
Can easily be reproduce 1 out 30 times on Windows and Linux-&lt;br/&gt;
&lt;br/&gt;
Veryfying chunk: disassembled\\recording_00.jfr 0&lt;br/&gt;
Veryfying chunk: disassembled\\recording_01.jfr 2359&lt;br/&gt;
Veryfying chunk: disassembled\\recording_02.jfr 6221&lt;br/&gt;
Failure file with only event 700 written to: failure.jfr&lt;br/&gt;
----------System.err:(12/781)----------&lt;br/&gt;
java.lang.AssertionError: Stack trace was null. Event number 700&lt;br/&gt;
	at jdk.jfr.jvm.TestChunkIntegrity.assertStressEvent(TestChunkIntegrity.java:153)&lt;br/&gt;
	at jdk.jfr.jvm.TestChunkIntegrity.main(TestChunkIntegrity.java:130)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
The test is currently mark as &amp;quot;@ignored&amp;quot;, but it should be fixed.</description>
                <environment></environment>
        <key id="5094920">JDK-8303134</key>
            <summary>JFR: Missing stack trace during chunk rotation stress</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mgronlun">Markus Gr&#246;nlund</assignee>
                                    <reporter username="egahlin">Erik Gahlin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Feb 2023 12:10:07 -0800</created>
                <updated>Thu, 7 Aug 2025 18:38:17 -0700</updated>
                            <resolved>Fri, 14 Jul 2023 05:52:24 -0700</resolved>
                                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14596296" author="dukebot" created="Fri, 14 Jul 2023 05:52:20 -0700"  >Changeset: c199b8c7&lt;br/&gt;
Author:    Markus Gr&amp;#xF6;nlund &amp;lt;&lt;a href=&apos;mailto:mgronlun@openjdk.org&apos;&gt;mgronlun@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-14 12:49:08 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk21/commit/c199b8c761c14542953a01c1efd6ccec95179234&quot;&gt;https://git.openjdk.org/jdk21/commit/c199b8c761c14542953a01c1efd6ccec95179234&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14596286" author="roboduke" created="Fri, 14 Jul 2023 04:47:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/129&quot;&gt;https://git.openjdk.org/jdk21/pull/129&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-14 11:38:32 +0000</comment>
                            <comment id="14593405" author="roboduke" created="Mon, 3 Jul 2023 11:40:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14761&quot;&gt;https://git.openjdk.org/jdk/pull/14761&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-03 18:33:30 +0000</comment>
                            <comment id="14593398" author="mgronlun" created="Mon, 3 Jul 2023 11:27:00 -0700"  >Detailed analysis of problematic sites:&lt;br/&gt;
&lt;br/&gt;
src/hotspot/share/runtime/objectMonitor.cpp: 389&lt;br/&gt;
&lt;br/&gt;
JavaMonitorEnter:&lt;br/&gt;
&lt;br/&gt;
JFR_ONLY(JfrConditionalFlushWithStacktrace&amp;lt;EventJavaMonitorEnter&amp;gt; flush(current);) is a construct that was used pre-emptively before getting the monitor. It flushed the threads buffer and captured the current stack trace before entering. The problem happens here because entering a contended monitor could lead to the thread waiting with a safepoint check. That is, JFR could issue a safepoint to evolve the epoch during the time the thread was blocked on the monitor. Hence, the stack trace information would be stale once written to the event. The fix is to only pre-emptively flush the buffer but not take the stack trace pre-emptively.&lt;br/&gt;
&lt;br/&gt;
StringPool:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static long storeString(String s) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long sid = sidIdx.getAndIncrement();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/* we can race, but it is ok */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cache.put(s, sid);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized (StringPool.class) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVM.addStringConstant(sid, s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentSizeUTF16 += s.length();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return sid;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Here the thread adds a string to the string pool cache before being serialized to the JVM (under the StringPool.class lock). Other threads could pick up the not yet written string id before the string was committed to the JVM. Also, the string pool was cleared on every rotation, which was wasteful. A new generational scheme is introduced to help keep the strings in the cache and only write them to the JVM when needed (i.e. in a new epoch).&lt;br/&gt;
&lt;br/&gt;
General issues with missing classes and stack traces:&lt;br/&gt;
&lt;br/&gt;
The most general problematic site involves how the EventWriter writes data to the underlying native memory buffer. It consists in using the APIs in Unsafe. Unfortunately, Unsafe methods are not safepoint agnostic. This means that when writing the current position to the start position of the underlying buffer (i.e. committing an event), the thread would perform a safepoint check on the native to VM transition. If JFR is safepointing to evolve the epoch, the thread will block before the actual write. When the thread awakes from the safepoint and performs the commit, the data is already stale (artefacts tagged in the previous epoch).&lt;br/&gt;
&lt;br/&gt;
We must rely on a transactional commit write mechanism to circumvent potential safepoint checks in the critical path. Therefore, a new native method JVM.commit() is added (for the interpreter and C1), complemented with a new C2 intrinsic.&lt;br/&gt;
&lt;br/&gt;
These do not perform a transition from native to vm but stay in native until the buffer data has been committed. We instead take the safepoint check on the way back to Java, because, at this time, the event is already committed.&lt;br/&gt;
&lt;br/&gt;
New platform-specific stubs act as trampolines for jumping back into the JVM from the new C2 intrinsic on the slow path.</comment>
                            <comment id="14593333" author="mgronlun" created="Mon, 3 Jul 2023 03:29:20 -0700"  >Increasing the priority for this as it involves data loss. The root causes have been found, it involves problematic interaction with safepoint poll sites, especially when using Unsafe and the interpreter. Epoch shifts happens during safepoints, so the commit mechanism must be very detailed to avoid ending up in a pending safepoint before the data is committed. It involves a new intrinsic for JVM.commit().&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105488">JDK-8312086</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106426">JDK-8312920</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="5153753">JDK-8352696</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5167878">JDK-8365071</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5108796">JDK-8314958</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110596">JDK-8316525</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5152961">JDK-8352066</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30ihn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17416"><![CDATA[b32]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="374"><![CDATA[jfr]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>