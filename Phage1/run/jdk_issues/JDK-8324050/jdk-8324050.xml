<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:21:53 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8324050] Issue store-store barrier after re-materializing objects during deoptimization</title>
                <link>https://bugs.openjdk.org/browse/JDK-8324050</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>In &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322854&quot; title=&quot;Incorrect rematerialization of scalar replaced objects in C2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322854&quot;&gt;&lt;strike&gt;JDK-8322854&lt;/strike&gt;&lt;/a&gt; comments [~jrose] wrote:&lt;br/&gt;
&lt;br/&gt;
The JIT might scalar-replace a string, but then generate it onto the heap. (This is for deoptimization, recovery from an uncommon event, previously speculated against.) In that case the JIT generates the string object not by executing code but interpreting debug-info. If that generation process failed to issue a store-store barrier, on a CPU that needed it, and there was no other store-store barrier issued (during the course of deoptimization), then conceivably you might get a race.&lt;br/&gt;
&lt;br/&gt;
I agree. Consider next case where object escapes after deoptimization:&lt;br/&gt;
&lt;br/&gt;
public class Test {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int _i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static Test _t; // Externally visible static field&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Test(int i) { _i = i; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void test(int i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test t = new Test(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == foo()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Rare case so C2 generates uncommon trap.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Object &amp;#39;t&amp;#39; does not escape from EA POV since&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// it is referenced only by uncommon trap.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// It will escape after deoptimization.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test::_t = t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}</description>
                <environment></environment>
        <key id="5119266">JDK-8324050</key>
            <summary>Issue store-store barrier after re-materializing objects during deoptimization</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kvn">Vladimir Kozlov</assignee>
                                    <reporter username="kvn">Vladimir Kozlov</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2-ea</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>oracle-triage-23</label>
                    </labels>
                <created>Wed, 17 Jan 2024 12:03:36 -0800</created>
                <updated>Tue, 5 Mar 2024 01:40:29 -0800</updated>
                            <resolved>Mon, 22 Jan 2024 14:51:57 -0800</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14643351" author="roboduke" created="Wed, 24 Jan 2024 01:17:57 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2172&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2172&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-24 09:12:48 +0000</comment>
                            <comment id="14643350" author="roboduke" created="Wed, 24 Jan 2024 01:17:24 -0800"  >[jdk17u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Semi-clean (copyright years conflict) backport to improve deopt reliability. Adds the barrier on uncommonly used path. The functional and performance risk is low.</comment>
                            <comment id="14643204" author="roboduke" created="Tue, 23 Jan 2024 12:00:13 -0800"  >[jdk22u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to improve deopt reliability. Adds the barrier on uncommonly used path. The functional and performance risk is low.</comment>
                            <comment id="14643203" author="roboduke" created="Tue, 23 Jan 2024 11:58:35 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to improve deopt reliability. Adds the barrier on uncommonly used path. The functional and performance risk is low.</comment>
                            <comment id="14642866" author="roboduke" created="Tue, 23 Jan 2024 02:13:04 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/211&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/211&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-23 10:03:29 +0000</comment>
                            <comment id="14642858" author="roboduke" created="Tue, 23 Jan 2024 02:07:21 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/28&quot;&gt;https://git.openjdk.org/jdk22u/pull/28&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-23 10:00:53 +0000</comment>
                            <comment id="14642460" author="dukebot" created="Mon, 22 Jan 2024 14:51:56 -0800"  >Changeset: 52523d33&lt;br/&gt;
Author:    Vladimir Kozlov &amp;lt;&lt;a href=&apos;mailto:kvn@openjdk.org&apos;&gt;kvn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-22 22:50:32 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/52523d33dde797bf03b15a05bb227b19b22c06be&quot;&gt;https://git.openjdk.org/jdk/commit/52523d33dde797bf03b15a05bb227b19b22c06be&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14642000" author="roboduke" created="Fri, 19 Jan 2024 14:10:23 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17503&quot;&gt;https://git.openjdk.org/jdk/pull/17503&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-19 22:00:15 +0000</comment>
                            <comment id="14641416" author="thartmann" created="Wed, 17 Jan 2024 22:32:42 -0800"  >ILW = Missing barrier after object re-materialization during deopt, never observed, no workaround but disable scalar replacement = HLM = P3</comment>
                            <comment id="14641351" author="kvn" created="Wed, 17 Jan 2024 15:55:59 -0800"  >Note, I think it is &amp;quot;almost&amp;quot; impossible to hit this issue because there is a lot of VM&amp;#39;s runtime code between the code which rematerialize an object during deoptimization and a code in Interpreter which is executed after deoptimization and which may execute a store instruction that makes the object accessible by other threads.&lt;br/&gt;
&lt;br/&gt;
Because of that I can&amp;#39;t create a test which may trigger the issue and added `noreg-hard` label.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322854&quot; title=&quot;Incorrect rematerialization of scalar replaced objects in C2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322854&quot;&gt;&lt;strike&gt;JDK-8322854&lt;/strike&gt;&lt;/a&gt; has regression tests which trigger access to re-materialized object from other threads. But that issue is different - incorrect object re-materialization.</comment>
                            <comment id="14641294" author="kvn" created="Wed, 17 Jan 2024 12:08:32 -0800"  >We should add OrderAccess::storestore(); after we re-assigned fields values to re-allocated objects.&lt;br/&gt;
I think we need it there and not after reallocation because at BCI we are returning to these fields have these values.&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5119962">JDK-8324652</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120217">JDK-8324849</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120236">JDK-8324863</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5122700">JDK-8326926</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5122730">JDK-8326956</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5117929">JDK-8322854</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34meb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>