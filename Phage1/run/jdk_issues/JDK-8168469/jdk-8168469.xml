<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:35:47 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8168469] Memory leak in JceSecurity</title>
                <link>https://bugs.openjdk.org/browse/JDK-8168469</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>FULL PRODUCT VERSION :&lt;br/&gt;
Issue exists since Java 1.5&lt;br/&gt;
&lt;br/&gt;
ADDITIONAL OS VERSION INFORMATION :&lt;br/&gt;
All Platforms&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
javax.crypto.JceSecurity holds a static map of all Provider instances ever inspected for code integrity.  This leaks memory when Provider instances are continuously, created, used, and de-referenced in application code.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
In a tight loop, create a new Provider, do some operation with it that ensures verification, and then de-reference it in application code.  This will eventually lead to an OutOfMemoryError.&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
No OutOfMemoryError&lt;br/&gt;
ACTUAL -&lt;br/&gt;
OutOfMemoryError&lt;br/&gt;
&lt;br/&gt;
ERROR MESSAGES/STACK TRACES THAT OCCUR :&lt;br/&gt;
java.lang.OutOfMemoryError: GC overhead limit exceeded&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
REPRODUCIBILITY :&lt;br/&gt;
This bug can be reproduced often.&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
with Xmx=256m, this will throw an OutOfMemoryError:&lt;br/&gt;
&lt;br/&gt;
for (int i = 0; i &amp;lt; 10000; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SunJCE jceProvider = new SunJCE();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cipher c = Cipher.getInstance(&amp;quot;AES&amp;quot;, jceProvider);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;Provider, Object&amp;gt; map = Collections.synchronizedMap(new WeakHashMap&amp;lt;&amp;gt;());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Class cl = Class.forName(&amp;quot;javax.crypto.JceSecurity&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Field field = cl.getDeclaredField(&amp;quot;verificationResults&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;field.setAccessible(true);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Field modifiersField = Field.class.getDeclaredField( &amp;quot;modifiers&amp;quot; );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;modifiersField.setAccessible( true );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;modifiersField.setInt( field, field.getModifiers() &amp;amp; ~Modifier.FINAL );&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;Provider, Object&amp;gt; verificationResults = (Map&amp;lt;Provider, Object&amp;gt;) field.get(null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.putAll(verificationResults);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;field.set(null, map);&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4904668">JDK-8168469</key>
            <summary>Memory leak in JceSecurity</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="valeriep">Valerie Peng</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcs-pso</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Thu, 20 Oct 2016 09:59:31 -0700</created>
                <updated>Wed, 20 Sep 2023 03:27:51 -0700</updated>
                            <resolved>Fri, 12 May 2023 12:25:59 -0700</resolved>
                                    <version>8</version>
                                    <fixVersion>21</fixVersion>
                                    <component>security-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14604790" author="schernyshev" created="Thu, 17 Aug 2023 12:46:06 -0700"  >Fix Request (17u)&lt;br/&gt;
&lt;br/&gt;
Memory leak affects 17u version. The -Xmx128m heap is exhausted after ~1000 iterations. The patch applied almost cleanly (had to fix the copyright header). Tier1/2 showed no regressions.</comment>
                            <comment id="14604703" author="roboduke" created="Thu, 17 Aug 2023 07:09:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1671&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1671&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-17 14:03:59 +0000</comment>
                            <comment id="14581301" author="dukebot" created="Fri, 12 May 2023 12:25:57 -0700"  >Changeset: a284920b&lt;br/&gt;
Author:    Sergey Chernyshev &amp;lt;&lt;a href=&apos;mailto:serge.chernyshev@bell-sw.com&apos;&gt;serge.chernyshev@bell-sw.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Valerie Peng &amp;lt;&lt;a href=&apos;mailto:valeriep@openjdk.org&apos;&gt;valeriep@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-12 19:24:45 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a284920b3432b00496a2a32a284a91a9bd49fb06&quot;&gt;https://git.openjdk.org/jdk/commit/a284920b3432b00496a2a32a284a91a9bd49fb06&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14576816" author="roboduke" created="Tue, 25 Apr 2023 14:23:26 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13658&quot;&gt;https://git.openjdk.org/jdk/pull/13658&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-25 21:16:41 +0000</comment>
                            <comment id="14030850" author="wetmore" created="Fri, 9 Dec 2016 12:34:53 -0800"  >The problem is that unknown JCE providers must be verified and in our impl, either Boolean.TRUE or Exception is being stored in an IdentityHashMap cache, which short-circuits the verification step on successive operations.&lt;br/&gt;
&lt;br/&gt;
This test is creating a new provider for every crypto operation:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (1) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Provider p = new SunJCE();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cipher c = Cipher.getInstance(&amp;quot;AES&amp;quot;, p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c.init(...);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c.doFinal();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
This is not the way the JCE code is generally used, but it could be done this way if an app doesn&amp;#39;t have permission to add it to the list of providers.  We did have a similar problem that we fixed years ago in our own code (1.4) and the unit test case often breaks whenever memory modeling gets changed.&lt;br/&gt;
&lt;br/&gt;
As for the proposed solution, the submitter gave a patch using a WeakHashMap and the Provider&amp;#39;s java.lang.Class instead of the Provider Object.  This might be correct since Class is final.&lt;br/&gt;
&lt;br/&gt;
WeakHashMap uses:&lt;br/&gt;
&lt;br/&gt;
hash:  calls Object.hashCode() (would have preferred identityHashCode()) , this resolves to the raw Object.hashCode() since there is no override in Class.&lt;br/&gt;
&lt;br/&gt;
eq:  which does &amp;quot;x == y || x.equals(y)&amp;quot; and which also resolves to the raw Object.equals() that is &amp;quot;x == y&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
My only concern is if a Class can somehow successfully be created/rigged with an appropriate equals()/hashCode() and be misverified.  A little more investigation needed.&lt;br/&gt;
</comment>
                            <comment id="14014633" author="mullan" created="Fri, 21 Oct 2016 13:21:14 -0700"  >See &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/security-dev/2016-October/015008.html&quot;&gt;http://mail.openjdk.java.net/pipermail/security-dev/2016-October/015008.html&lt;/a&gt; for more details and a potential patch for the issue from the submitter.</comment>
                            <comment id="14014445" author="psonal" created="Fri, 21 Oct 2016 02:39:03 -0700"  >Moving across to dev-team for evaluation.</comment>
                            <comment id="14014443" author="psonal" created="Fri, 21 Oct 2016 02:37:26 -0700"  >To reproduce, run the attached test case with Xmx256m.&lt;br/&gt;
Following are the results:&lt;br/&gt;
JDK 8u112 - Fail&lt;br/&gt;
JDK 8u122ea - Fail&lt;br/&gt;
JDK 9ea - could not test&lt;br/&gt;
&lt;br/&gt;
Output on JDK 8u versions:&lt;br/&gt;
Exception in thread &amp;quot;main&amp;quot; java.lang.OutOfMemoryError: GC overhead limit exceeded&lt;br/&gt;
	at java.util.zip.InflaterInputStream.&amp;lt;init&amp;gt;(InflaterInputStream.java:88)&lt;br/&gt;
	at java.util.zip.ZipFile$ZipFileInflaterInputStream.&amp;lt;init&amp;gt;(ZipFile.java:393)&lt;br/&gt;
	at java.util.zip.ZipFile.getInputStream(ZipFile.java:374)&lt;br/&gt;
	at java.util.jar.JarFile.getInputStream(JarFile.java:464)&lt;br/&gt;
	at javax.crypto.JarVerifier.verifySingleJar(JarVerifier.java:430)&lt;br/&gt;
	at javax.crypto.JarVerifier.verifyJars(JarVerifier.java:325)&lt;br/&gt;
	at javax.crypto.JarVerifier.verify(JarVerifier.java:253)&lt;br/&gt;
	at javax.crypto.JceSecurity.verifyProviderJar(JceSecurity.java:159)&lt;br/&gt;
	at javax.crypto.JceSecurity.getVerificationResult(JceSecurity.java:185)&lt;br/&gt;
	at javax.crypto.Cipher.getInstance(Cipher.java:653)&lt;br/&gt;
	at JI9044691.main(JI9044691.java:13)&lt;br/&gt;
</comment>
                            <comment id="14014398" author="psonal" created="Thu, 20 Oct 2016 23:55:22 -0700"  >openjdk mailing thread containing patch submitted by the submitter:&lt;br/&gt;
&lt;a href=&quot;http://mail.openjdk.java.net/pipermail/security-dev/2016-October/015008.html&quot;&gt;http://mail.openjdk.java.net/pipermail/security-dev/2016-October/015008.html&lt;/a&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5110672">JDK-8316589</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="65190" name="9044691.patch" size="2845" author="wetmore" created="Fri, 9 Dec 2016 12:07:50 -0800"/>
                            <attachment id="64145" name="JI9044691.java" size="452" author="psonal" created="Fri, 21 Oct 2016 02:35:14 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i24ghr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="229"><![CDATA[javax.crypto]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>