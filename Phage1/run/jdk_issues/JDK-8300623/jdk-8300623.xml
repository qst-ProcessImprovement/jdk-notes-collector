<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 15:53:26 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8300623] Lambda deserialization regression involving Enum method reference</title>
                <link>https://bugs.openjdk.org/browse/JDK-8300623</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>In the following example, serializing a lambda and reading it back in succeeds on JDK 19 and fails on JDK 20.&lt;br/&gt;
&lt;br/&gt;
I think the culprit is &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8059632&quot; title=&quot;Method reference compilation uses incorrect qualifying type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8059632&quot;&gt;&lt;strike&gt;JDK-8059632&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
import java.io.InputStream;&lt;br/&gt;
import java.io.ObjectInputStream;&lt;br/&gt;
import java.io.ObjectOutputStream;&lt;br/&gt;
import java.io.OutputStream;&lt;br/&gt;
import java.io.Serializable;&lt;br/&gt;
import java.nio.file.Files;&lt;br/&gt;
import java.nio.file.Paths;&lt;br/&gt;
import java.util.Arrays;&lt;br/&gt;
import java.util.function.Predicate;&lt;br/&gt;
&lt;br/&gt;
@SuppressWarnings(&amp;quot;unchecked&amp;quot;)&lt;br/&gt;
public class T {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum E {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ONE,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TWO,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;THREE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static void main(String[] args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E e = E.ONE;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Predicate&amp;lt;E&amp;gt; p = (Serializable &amp;amp; Predicate&amp;lt;E&amp;gt;) e::equals;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try (OutputStream os = Files.newOutputStream(Paths.get(&amp;quot;o&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ObjectOutputStream oos = new ObjectOutputStream(os)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oos.writeObject(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try (InputStream is = Files.newInputStream(Paths.get(&amp;quot;o&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ObjectInputStream ois = new ObjectInputStream(is)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p = (Predicate&amp;lt;E&amp;gt;) ois.readObject();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.stream(E.values()).filter(p).forEachOrdered(System.err::println);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
$ java -fullversion&lt;br/&gt;
openjdk full version &amp;quot;19.0.2+7-44&amp;quot;&lt;br/&gt;
$ javac T.java&lt;br/&gt;
$ java T&lt;br/&gt;
$ java T&lt;br/&gt;
ONE &lt;br/&gt;
&lt;br/&gt;
$ java -fullversion&lt;br/&gt;
openjdk full version &amp;quot;20-ea+31-2311&amp;quot;&lt;br/&gt;
$ javac T.java&lt;br/&gt;
$ java T&lt;br/&gt;
Exception in thread &amp;quot;main&amp;quot; java.io.InvalidObjectException: ReflectiveOperationException during deserialization&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:280)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1190)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2289)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1760)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:538)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:496)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at T.main(T.java:29)&lt;br/&gt;
Caused by: java.lang.reflect.InvocationTargetException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:278)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... 8 more&lt;br/&gt;
Caused by: java.lang.IllegalArgumentException: Invalid lambda deserialization&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at T.$deserializeLambda$(T.java:11)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... 10 more</description>
                <environment></environment>
        <key id="5091913">JDK-8300623</key>
            <summary>Lambda deserialization regression involving Enum method reference</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jlahoda">Jan Lahoda</assignee>
                                    <reporter username="cushon">Liam Miller-Cushon</reporter>
                        <labels>
                            <label>jdk20-fix-request</label>
                            <label>jdk20-fix-yes</label>
                            <label>regression</label>
                    </labels>
                <created>Wed, 18 Jan 2023 16:48:13 -0800</created>
                <updated>Wed, 17 Jan 2024 09:35:12 -0800</updated>
                            <resolved>Mon, 23 Jan 2023 22:42:00 -0800</resolved>
                                    <version>20</version>
                                    <fixVersion>20</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14554514" author="vromero" created="Wed, 25 Jan 2023 12:51:41 -0800"  >Dan mentioned that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8172815&quot; title=&quot;MethodHandles.Lookup.revealDirect performs access checking against wrong class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8172815&quot;&gt;JDK-8172815&lt;/a&gt;, is related and it could be blocking this current issue</comment>
                            <comment id="14553941" author="forax" created="Tue, 24 Jan 2023 00:39:07 -0800"  >For the records, the problem is that the compiler generates a check if the SerializedLambda correspond to a serializable lambda that was created in the current class or not.&lt;br/&gt;
The problem is that the SerializedLambda instance is created by the jdk runtime, the LambdaMetaFactory which uses runtime information while the check is generated by the compiler which uses compile time informations, sometimes they disagree. I believe that the only way to solve that is that the generated bytecode should do a runtime call to the a new static method of the LambdaMetaFactory to create a second SerializedLambda from the compiler static information and compare the two SerializedLambda.&lt;br/&gt;
</comment>
                            <comment id="14553919" author="dukebot" created="Mon, 23 Jan 2023 22:41:58 -0800"  >Changeset: a3ed7e94&lt;br/&gt;
Author:    Jan Lahoda &amp;lt;&lt;a href=&apos;mailto:jlahoda@openjdk.org&apos;&gt;jlahoda@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-24 06:40:06 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk20/commit/a3ed7e94a23c0c89138d831f4b36b26dce5b3d01&quot;&gt;https://git.openjdk.org/jdk20/commit/a3ed7e94a23c0c89138d831f4b36b26dce5b3d01&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14553590" author="briangoetz" created="Mon, 23 Jan 2023 10:52:57 -0800"  >Fix request approved</comment>
                            <comment id="14553453" author="roboduke" created="Mon, 23 Jan 2023 03:48:27 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20/pull/113&quot;&gt;https://git.openjdk.org/jdk20/pull/113&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-23 11:12:08 +0000</comment>
                            <comment id="14553445" author="jlahoda" created="Mon, 23 Jan 2023 03:21:55 -0800"  >Fix Request&lt;br/&gt;
&lt;br/&gt;
This is an unintended regression in (de-)serialization caused by the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8059632&quot; title=&quot;Method reference compilation uses incorrect qualifying type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8059632&quot;&gt;&lt;strike&gt;JDK-8059632&lt;/strike&gt;&lt;/a&gt;. Unfortunately, the fix for the regression will require some discussion. The proposal is therefore to rollback the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8059632&quot; title=&quot;Method reference compilation uses incorrect qualifying type&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8059632&quot;&gt;&lt;strike&gt;JDK-8059632&lt;/strike&gt;&lt;/a&gt;. The rollback applies without manual changes. Testing: Mach5 tier1-3, all passing.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5092393">JDK-8301029</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5093000">JDK-8301526</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5093013">JDK-8301539</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5092103">JDK-8300787</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4748673">JDK-8059632</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5068896">JDK-8282080</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zzxn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17421"><![CDATA[b33]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>