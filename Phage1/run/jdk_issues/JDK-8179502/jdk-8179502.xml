<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:37:11 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8179502] Enhance OCSP, CRL and Certificate Fetch Timeouts</title>
                <link>https://bugs.openjdk.org/browse/JDK-8179502</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>A DESCRIPTION OF THE REQUEST :&lt;br/&gt;
The current OCSP implementation of  Java has the unit of timeout in seconds. This means that the OCSP client will have to wait for min. 1 sec before timing out the connection. 1 sec is a huge amount of time in modern electronic communications. I request that in the default OCSP the timeout is changed from seconds to miliseconds.&lt;br/&gt;
&lt;br/&gt;
Below is the problematic code : &lt;br/&gt;
&lt;br/&gt;
Class : sun.security.provider.certpath.OCSP&lt;br/&gt;
&lt;br/&gt;
private static final int DEFAULT_CONNECT_TIMEOUT = 15000;&lt;br/&gt;
private static final int CONNECT_TIMEOUT = initializeTimeout();&lt;br/&gt;
&lt;br/&gt;
private static int initializeTimeout() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer tmp = java.security.AccessController.doPrivileged(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new GetIntegerAction(&amp;quot;com.sun.security.ocsp.timeout&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tmp == null || tmp &amp;lt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return DEFAULT_CONNECT_TIMEOUT;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Convert to milliseconds, as the system property will be&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// specified in seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return tmp * 1000;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
In this we can clearly see that the min non zero value returned from initializeTimeout() method would be 1000 miliseconds (1sec)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
JUSTIFICATION :&lt;br/&gt;
The current OCSP implementation of  Java the unit of timeout is seconds. This means that the OCSP client will have to wait for min. 1 sec before timing out the connection. 1 sec is a huge amount of time in modern electronic communications. I request that in the default OCSP the timeout is changed from seconds to miliseconds.&lt;br/&gt;
&lt;br/&gt;
In addition, two other related enhancements should be made:&lt;br/&gt;
1. Properties that deal with CRL fetching and reading (com.sun.security.crl.timeout and com.sun.security.crl.readtimeout) should also be extended to allow for millisecond granularity.&lt;br/&gt;
2. Properties that fetch certificates based on the AIA extension should have configurable timeouts.  This will require two new properties: com.sun.security.cert.timeout and com.sun.security.cert.readtimeout.  These will be specified with the same syntax as the properties above (numeric value only interpreted as seconds, a numeric value ending in case-insensitive &amp;quot;ms&amp;quot; to be interpreted in milliseconds).  In addition, these property timeouts will only be acted upon when the com.sun.security.enableAIAcaIssuers property is set to true, as this is required for certificate fetching from the AIA extension.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4922662">JDK-8179502</key>
            <summary>Enhance OCSP, CRL and Certificate Fetch Timeouts</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jnimeh">Jamil Nimeh</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcs-pso</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>release-note=yes</label>
                            <label>reproducer-other</label>
                            <label>webbug</label>
                    </labels>
                <created>Mon, 1 May 2017 17:42:26 -0700</created>
                <updated>Fri, 17 Jan 2025 08:59:08 -0800</updated>
                            <resolved>Tue, 23 May 2023 14:33:24 -0700</resolved>
                                    <version>8</version>
                    <version>9</version>
                                    <fixVersion>21</fixVersion>
                                    <component>security-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                                                                            <comments>
                            <comment id="14736763" author="abakhtin" created="Wed, 8 Jan 2025 08:45:57 -0800"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
Oracle plans to add this enhancement to 17.0.15-oracle&lt;br/&gt;
I&amp;#39;d like to backport it for parity with Oracle.&lt;br/&gt;
&lt;br/&gt;
Risk minimum, compatibility issue is addressed</comment>
                            <comment id="14736098" author="abakhtin" created="Mon, 6 Jan 2025 20:16:30 -0800"  >Hi [~goetz],&lt;br/&gt;
&lt;br/&gt;
CSR &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8337407&quot;&gt;https://bugs.openjdk.org/browse/JDK-8337407&lt;/a&gt; is approved and PR is reviewed.&lt;br/&gt;
Oracle agreed on the implementation with JDK17 backward compatibility fix: &lt;a href=&quot;https://github.com/openjdk/jdk17u-dev/pull/2747&quot;&gt;https://github.com/openjdk/jdk17u-dev/pull/2747&lt;/a&gt; (see discussion in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8345114)&quot;&gt;https://bugs.openjdk.org/browse/JDK-8345114)&lt;/a&gt; </comment>
                            <comment id="14720853" author="goetz" created="Mon, 11 Nov 2024 06:42:52 -0800"  >Hi [~aph], &lt;br/&gt;
the reason stated for this backport is &amp;quot;parity with Oracle&amp;quot;. But Oracle did not yet integrate this backport. Probably they have a good reason not to do so. I commented about this in the PR. Also, if they do so, the corresponding documentation will get updated, if they don&amp;#39;t but we do, the documentation will be wrong.&lt;br/&gt;
Further, as this is a larger change in a delicate part of the JVM having listed four related issues (two of them not relevant for the backport), I don&amp;#39;t buy that the risk is low. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8309754&quot; title=&quot;java/security/cert/CertPathValidator/OCSP/OCSPTimeout.java failed with &amp;quot;Expected to pass, found 1 soft fail exceptions&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8309754&quot;&gt;JDK-8309754&lt;/a&gt; still has no solution.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14720728" author="aph" created="Mon, 11 Nov 2024 05:32:32 -0800"  >[~goetz], why is this one deferred? I know some people are waiting for it.</comment>
                            <comment id="14716769" author="abakhtin" created="Fri, 25 Oct 2024 11:43:16 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d like to backport this enhancement to improve the timeout adjustment for OCSP GET requests and parity with Oracle.&lt;br/&gt;
Risk is minimal. All related tests are passed.&lt;br/&gt;
</comment>
                            <comment id="14699341" author="roboduke" created="Mon, 19 Aug 2024 23:46:17 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2754&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2754&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-31 13:53:39 +0000</comment>
                            <comment id="14693188" author="roboduke" created="Sun, 28 Jul 2024 15:08:56 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2747&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2747&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-28 22:02:37 +0000</comment>
                            <comment id="14588213" author="jnimeh" created="Fri, 9 Jun 2023 09:33:34 -0700"  >Created &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8309740&quot; title=&quot;Expand timeout windows for tests in JDK-8179502&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8309740&quot;&gt;&lt;strike&gt;JDK-8309740&lt;/strike&gt;&lt;/a&gt; to deal with this issue.</comment>
                            <comment id="14588182" author="jnimeh" created="Fri, 9 Jun 2023 08:03:18 -0700"  >[~mbaesken] One other question related to the above test failures: The tests run multiple times with different combinations of client/server timeout values.  For each of the three tests, is it just one combination of client/server timeouts that has issues, or multiple combinations?  Knowing which ones are problematic in your environment would be helpful.</comment>
                            <comment id="14588177" author="jnimeh" created="Fri, 9 Jun 2023 07:47:32 -0700"  >That was my fear.  Sounds like the timeout windows need to be loosened across all three tests.  Thanks for the info.</comment>
                            <comment id="14588176" author="mbaesken" created="Fri, 9 Jun 2023 07:45:52 -0700"  >&amp;gt; Out of curiosity, there are two other tests as part of this fix that have similar timeout windows...have they been running OK?&lt;br/&gt;
&lt;br/&gt;
I see 12 failures since May  (introduction of the new tests)  for the test  CRLReadTimeout.java , they look like this  (failures are mostly from Linux)  :&lt;br/&gt;
---------------------------------------------------&lt;br/&gt;
:stdErr:&lt;br/&gt;
Sat Jun 03 21:17:24 CEST 2023&lt;br/&gt;
&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions&lt;br/&gt;
	at CRLReadTimeout.testTimeout(CRLReadTimeout.java:117)&lt;br/&gt;
	at CRLReadTimeout.main(CRLReadTimeout.java:77)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Regarding OCSPTimeout.java I see  4 failures  , all from Windows .&lt;br/&gt;
Example :&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
--------------------------------&lt;br/&gt;
java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions&lt;br/&gt;
	at OCSPTimeout.main(OCSPTimeout.java:116)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
</comment>
                            <comment id="14588173" author="jnimeh" created="Fri, 9 Jun 2023 07:09:23 -0700"  >[~mbaesken]  These timeout-exercising tests always make me a bit nervous when I have to write them.  I run hundreds of iterations on mach5, but they always seem to behave a bit differently when run in a full-blown CI environment.  In this case, I think I allowed a margin of 500 - 750ms for the server to return the certificate to the client.  In my testing it was long enough, but apparently not when it gets into CI.  I&amp;#39;m pretty sure expanding that window would be sufficient to allow the test to run to completion consistently.  I will file a bug and look into this.  Other than that, the test should contain all the resources it needs within the test body itself.&lt;br/&gt;
&lt;br/&gt;
Out of curiosity, there are two other tests as part of this fix that have similar timeout windows...have they been running OK?</comment>
                            <comment id="14588167" author="mbaesken" created="Fri, 9 Jun 2023 06:52:00 -0700"  >&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8179502&quot; title=&quot;Enhance OCSP, CRL and Certificate Fetch Timeouts&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8179502&quot;&gt;&lt;strike&gt;JDK-8179502&lt;/strike&gt;&lt;/a&gt; introduced a new test  sun/security/x509/URICertStore/AIACertTimeout.java .&lt;br/&gt;
This one fails rather often (approx. every day)  on various test machines (mostly Linux).&lt;br/&gt;
&lt;br/&gt;
sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target&lt;br/&gt;
	at java.base/sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:146)&lt;br/&gt;
	at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:127)&lt;br/&gt;
	at java.base/java.security.cert.CertPathBuilder.build(CertPathBuilder.java:297)&lt;br/&gt;
	at AIACertTimeout.main(AIACertTimeout.java:96)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
&lt;br/&gt;
Any idea what might happen here ? Does the test maybe require something that is problematic on our infrastructure ?</comment>
                            <comment id="14583932" author="dukebot" created="Tue, 23 May 2023 14:33:22 -0700"  >Changeset: 2836c34b&lt;br/&gt;
Author:    Jamil Nimeh &amp;lt;&lt;a href=&apos;mailto:jnimeh@openjdk.org&apos;&gt;jnimeh@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-23 21:32:28 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/2836c34b64e4626e25c86a53e5bef2bf32f95d2e&quot;&gt;https://git.openjdk.org/jdk/commit/2836c34b64e4626e25c86a53e5bef2bf32f95d2e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14583013" author="jnimeh" created="Fri, 19 May 2023 15:51:00 -0700"  >[~rgallard] I have created &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308460&quot; title=&quot;Document OCSP, CRL and Certificate fetching timeout properties (JDK-8179502)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308460&quot;&gt;&lt;strike&gt;JDK-8308460&lt;/strike&gt;&lt;/a&gt; as a doc subtask.  I&amp;#39;ve added a couple recent changes to the CSR and that has been linked to the doc subtask for ease of reference.</comment>
                            <comment id="14580237" author="mullan" created="Tue, 9 May 2023 08:04:09 -0700"  >[~jnimeh] Please add a release note and add a docs subtask for documenting the new syntax of the properties in the PKI Programmer&amp;#39;s Guide. Also, it looks like the &amp;quot;com.sun.security.ocsp.timeout&amp;quot; property was never documented.</comment>
                            <comment id="14578441" author="roboduke" created="Tue, 2 May 2023 14:55:12 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13762&quot;&gt;https://git.openjdk.org/jdk/pull/13762&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-02 21:12:31 +0000</comment>
                            <comment id="14081494" author="mullan" created="Wed, 3 May 2017 07:50:20 -0700"  >I think this is a worthwhile enhancement. According to &lt;a href=&quot;https://twitter.com/rmhrisk/status/322438951392657408&quot;&gt;https://twitter.com/rmhrisk/status/322438951392657408&lt;/a&gt; - the average OCSP response time is 250ms, so a timeout of less than 1 second does seem like it could be useful. However, we can&amp;#39;t just change it to milliseconds as that would break anyone using seconds as the value. We could add a new property that takes the value in milliseconds, or maybe we could enhance the current property to recognize seconds as well as milliseconds as &amp;quot;ms&amp;quot;, ex: &amp;quot;com.sun.security.ocsp.timeout=500ms&amp;quot;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5135402">JDK-8337406</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5137281">JDK-8338808</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5092025">JDK-8300722</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5092087">JDK-8300812</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5109967">JDK-8315979</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5102831">JDK-8309740</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147802">JDK-8347506</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101521">JDK-8308601</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5102850">JDK-8309754</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5136132">JDK-8337826</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                                              <subtask id="5101365">JDK-8308460</subtask>
                                                              <subtask id="5101499">JDK-8308582</subtask>
                                                              <subtask id="5148207">JDK-8347865</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i27hs3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17436"><![CDATA[b24]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="195"><![CDATA[java.security]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>