<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:55:33 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8329665] fatal error: memory leak: allocating without ResourceMark</title>
                <link>https://bugs.openjdk.org/browse/JDK-8329665</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>There are two places in Loom code that call f.oops_interpreted_do() to process oops in the stackChunk. Although not obvious this call seem to require to have a ResourceMark and there are several contexts where these are call where we don&amp;#39;t have one:&lt;br/&gt;
&lt;br/&gt;
STDOUT:&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (open/src/hotspot/share/memory/resourceArea.cpp:66), pid=788653, tid=788679&lt;br/&gt;
#  fatal error: memory leak: allocating without ResourceMark&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (23.0) (fastdebug build 23-internal-2024-04-03-1654274.pchilano...)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 23-internal-2024-04-03-1654274.pchilano..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x15d9e26]  ResourceArea::verify_has_resource_mark() [clone .part.0]+0x26&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: open/build/linux-x64/test-support/jtreg_test_jdk_jdk_internal_vm_Continuation_OSRTest_java/scratch/0/core.788653&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# open/build/linux-x64/test-support/jtreg_test_jdk_jdk_internal_vm_Continuation_OSRTest_java/scratch/0/hs_err_pid788653.log&lt;br/&gt;
[6.537s][warning][os] Loading hsdis library failed&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f5865a02000,0x00007f5865b02000],  sp=0x00007f5865afd380,  free space=1004k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x15d9e26]  ResourceArea::verify_has_resource_mark() [clone .part.0]+0x26  (resourceArea.cpp:66)&lt;br/&gt;
V  [libjvm.so+0x15da456]  (arena.hpp:140)&lt;br/&gt;
V  [libjvm.so+0x149626b]  InterpreterOopMap::resource_copy(OopMapCacheEntry*)+0xdb  (oopMapCache.cpp:440)&lt;br/&gt;
V  [libjvm.so+0x149678b]  OopMapCache::compute_one_oop_map(methodHandle const&amp;amp;, int, InterpreterOopMap*)+0x7b  (oopMapCache.cpp:620)&lt;br/&gt;
V  [libjvm.so+0x13c80fa]  Method::mask_for(int, InterpreterOopMap*)+0x6a  (method.cpp:318)&lt;br/&gt;
V  [libjvm.so+0xc0bc7f]  frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) const+0x42f  (frame.cpp:957)&lt;br/&gt;
V  [libjvm.so+0x164b73d]  void StackChunkFrameStream&amp;lt;(ChunkFrames)1&amp;gt;::iterate_oops&amp;lt;StackChunkVerifyOopsClosure, RegisterMap&amp;gt;(StackChunkVerifyOopsClosure*, RegisterMap const*) const [clon&lt;br/&gt;
e .part.0]+0x6d  (stackChunkFrameStream.inline.hpp:360)&lt;br/&gt;
V  [libjvm.so+0x1658c57]  void stackChunkOopDesc::iterate_stack&amp;lt;(ChunkFrames)1, VerifyStackChunkFrameClosure&amp;gt;(VerifyStackChunkFrameClosure*)+0xa37  (debug.hpp:66)&lt;br/&gt;
V  [libjvm.so+0x164dc66]  stackChunkOopDesc::verify(unsigned long*, int*, int*, int*)+0x196  (stackChunkOop.inline.hpp:197)&lt;br/&gt;
V  [libjvm.so+0xa3d745]  Continuation::debug_verify_continuation(oop)+0x1a5  (continuation.cpp:379)&lt;br/&gt;
V  [libjvm.so+0xa4374d]  verify_continuation(oop) [clone .isra.0]+0x3d  (continuationFreezeThaw.cpp:177)&lt;br/&gt;
V  [libjvm.so+0xa4de60]  freeze_epilog(JavaThread*, ContinuationWrapper&amp;amp;) [clone .isra.0]+0x50  (continuationFreezeThaw.cpp:1536)&lt;br/&gt;
V  [libjvm.so+0xa5a404]  int freeze_internal&amp;lt;Config&amp;lt;(oop_kind)0, G1BarrierSet&amp;gt; &amp;gt;(JavaThread*, long*)+0x344  (continuationFreezeThaw.cpp:1612)&lt;br/&gt;
V  [libjvm.so+0xa5a92b]  int freeze&amp;lt;Config&amp;lt;(oop_kind)0, G1BarrierSet&amp;gt; &amp;gt;(JavaThread*, long*)+0x5b  (continuationFreezeThaw.cpp:272)&lt;br/&gt;
J 233  jdk.internal.vm.Continuation.doYield()I &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt; (0 bytes) @ 0x00007f58804f71f5 [0x00007f58804f71a0+0x0000000000000055]&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5126182">JDK-8329665</key>
            <summary>fatal error: memory leak: allocating without ResourceMark</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pchilanomate">Patricio Chilano Mateo</assignee>
                                    <reporter username="pchilanomate">Patricio Chilano Mateo</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>interpreter</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Thu, 4 Apr 2024 06:55:14 -0700</created>
                <updated>Wed, 25 Sep 2024 13:39:31 -0700</updated>
                            <resolved>Tue, 16 Apr 2024 07:12:20 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14686024" author="stuefe" created="Mon, 1 Jul 2024 05:50:28 -0700"  >This fix is not safe, unfortunately, since there is no guarantee that the oop closure we call in the RM scope won&amp;#39;t allocate and retain resource memory.&lt;br/&gt;
</comment>
                            <comment id="14679182" author="roboduke" created="Wed, 5 Jun 2024 06:55:22 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to resolve a memory leak. Stands on its own, also pre-requisite for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325469&quot; title=&quot;Freeze/Thaw code can crash in the presence of OSR frames&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325469&quot;&gt;&lt;strike&gt;JDK-8325469&lt;/strike&gt;&lt;/a&gt; backport. Risk is low-medium: adds a missing RM, but removes the opportunistic RA cleanup for OopMap. Was in mainline for several weeks without bugtail. All tests pass.</comment>
                            <comment id="14679115" author="roboduke" created="Wed, 5 Jun 2024 03:35:20 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/669&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/669&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-05 10:31:32 +0000</comment>
                            <comment id="14665627" author="dukebot" created="Tue, 16 Apr 2024 07:12:19 -0700"  >Changeset: e073d5b3&lt;br/&gt;
Author:    Patricio Chilano Mateo &amp;lt;&lt;a href=&apos;mailto:pchilanomate@openjdk.org&apos;&gt;pchilanomate@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-04-16 14:09:44 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e073d5b37422c2adad18db520c5f4fcf120c147b&quot;&gt;https://git.openjdk.org/jdk/commit/e073d5b37422c2adad18db520c5f4fcf120c147b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14662977" author="roboduke" created="Thu, 4 Apr 2024 12:49:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18632&quot;&gt;https://git.openjdk.org/jdk/pull/18632&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-04 16:23:50 +0000</comment>
                            <comment id="14662895" author="pchilanomate" created="Thu, 4 Apr 2024 07:11:43 -0700"  >Calling OopMapCache::compute_one_oop_map() will compute the oop map for a given method-bci in a temporary OopMapCacheEntry and then it will copy the relevant information to the InterpreterOopMap object passed as argument. This operation might allocate from the resource area if the _bit_mask size is &amp;gt; N * BitsPerWord, which depends on the amount of locals + expression stack. The ~InterpreterOopMap will actually check if the _bit_mask was allocated in the resource area and in that case it will free it. So the ResourceMark is not strictly needed except that in debug mode we will actually hit the assert if there is not one in scope when trying to allocate the _bit_mask.&lt;br/&gt;
&lt;br/&gt;
This issue was found while running a reproducer for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325469&quot; title=&quot;Freeze/Thaw code can crash in the presence of OSR frames&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325469&quot;&gt;&lt;strike&gt;JDK-8325469&lt;/strike&gt;&lt;/a&gt;, which contains a method where locals alone are greater than N * BitsPerWord.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5131219">JDK-8333715</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5140020">JDK-8340971</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5120996">JDK-8325469</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5133142">JDK-8335409</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i35sbf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17414"><![CDATA[b19]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>