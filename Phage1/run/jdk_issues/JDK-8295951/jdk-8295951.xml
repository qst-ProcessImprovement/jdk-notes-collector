<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:16:59 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8295951] intermittent cmp_baseline task failures with CDS files</title>
                <link>https://bugs.openjdk.org/browse/JDK-8295951</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The Mach5 Tier5 cmp-baseline task has been failing intermittently&lt;br/&gt;
on macosx-aarch64 and macosx-x64. The files being complained&lt;br/&gt;
about are related to CDS.</description>
                <environment></environment>
        <key id="5086190">JDK-8295951</key>
            <summary>intermittent cmp_baseline task failures with CDS files</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ccheung">Calvin Cheung</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>cds</label>
                            <label>intermittent</label>
                            <label>jdk20u-fix-SQE-ok</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>tier5</label>
                    </labels>
                <created>Wed, 26 Oct 2022 09:20:02 -0700</created>
                <updated>Tue, 28 Feb 2023 04:37:52 -0800</updated>
                            <resolved>Tue, 31 Jan 2023 08:54:24 -0800</resolved>
                                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14560508" author="roboduke" created="Wed, 15 Feb 2023 14:38:40 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/5&quot;&gt;https://git.openjdk.org/jdk20u/pull/5&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-15 22:28:49 +0000</comment>
                            <comment id="14559026" author="ccheung" created="Thu, 9 Feb 2023 22:15:56 -0800"  >JDK 20u fix justification:&lt;br/&gt;
&lt;br/&gt;
The fix is small and is in the HelloClasslist.java app which is used for generating a classlist during JDK build time. The classlist will be used for generating CDS archives during JDK build time.&lt;br/&gt;
&lt;br/&gt;
With the fix, we should not see intermittent build failure in JDK 20 due to this bug.</comment>
                            <comment id="14556271" author="dukebot" created="Tue, 31 Jan 2023 08:54:22 -0800"  >Changeset: e193a0b7&lt;br/&gt;
Author:    Calvin Cheung &amp;lt;&lt;a href=&apos;mailto:ccheung@openjdk.org&apos;&gt;ccheung@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-31 16:51:45 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e193a0b72a143889170b64da19fb22f7f8555e89&quot;&gt;https://git.openjdk.org/jdk/commit/e193a0b72a143889170b64da19fb22f7f8555e89&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14556270" author="ccheung" created="Tue, 31 Jan 2023 08:49:47 -0800"  >Instead of changing core-libs classes, a fix is to always load the java/util/concurrent/atomic/Striped64$Cellclass from the HelloClasslist.java app so that the generated classlist and CDS archive would be the same as the baseline build.</comment>
                            <comment id="14555208" author="roboduke" created="Fri, 27 Jan 2023 16:35:16 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12272&quot;&gt;https://git.openjdk.org/jdk/pull/12272&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-28 00:29:29 +0000</comment>
                            <comment id="14542034" author="iklam" created="Thu, 1 Dec 2022 13:44:20 -0800"  >Suggested fix:&lt;br/&gt;
&lt;br/&gt;
The randomness of Striped64.getProbe(), as noted from the previous comment, comes from here:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/ThreadLocalRandom.java#L400-L402&quot;&gt;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/ThreadLocalRandom.java#L400-L402&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final AtomicLong seeder&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= new AtomicLong(RandomSupport.mixMurmur64(System.currentTimeMillis()) ^&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RandomSupport.mixMurmur64(System.nanoTime()));&lt;br/&gt;
&lt;br/&gt;
We can consider a fix similar to this (see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8241071&quot; title=&quot;Generation of classes.jsa with -Xshare:dump is not deterministic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8241071&quot;&gt;&lt;strike&gt;JDK-8241071&lt;/strike&gt;&lt;/a&gt; for details)&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/ImmutableCollections.java#L76-L83&quot;&gt;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/ImmutableCollections.java#L76-L83&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// When running with -Xshare:dump, the VM will supply a &amp;quot;random&amp;quot; seed that&amp;#39;s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// derived from the JVM build/version, so can we generate the exact same&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// CDS archive for the same JDK build. This makes it possible to verify the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// consistency of the JDK build.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long seed = CDS.getRandomSeedForDumping();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (seed == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;seed = System.nanoTime();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
</comment>
                            <comment id="14542032" author="iklam" created="Thu, 1 Dec 2022 13:39:12 -0800"  >We found the difference in the classlist:&lt;br/&gt;
&lt;br/&gt;
[2022-11-20T01:37:12,523Z] JDK Other files with binary differences... &lt;br/&gt;
[2022-11-20T01:37:12,929Z] ./lib/classlist &lt;br/&gt;
[2022-11-20T01:37:12,929Z] 737a738 &lt;br/&gt;
[2022-11-20T01:37:12,929Z] &amp;gt; java/util/concurrent/atomic/Striped64$Cell &lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s related to this code: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/atomic/LongAdder.java#L85&quot;&gt;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/atomic/LongAdder.java#L85&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
public class LongAdder extends Striped64 implements Serializable {&lt;br/&gt;
....&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void add(long x) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cell[] cs; long b, v; int m; Cell c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((cs = cells) != null || !casBase(b = base, b + x)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int index = getProbe();  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HERE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean uncontended = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cs == null || (m = cs.length - 1) &amp;lt; 0 ||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(c = cs[index &amp;amp; m]) == null ||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!(uncontended = c.cas(v = c.value, v + x)))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;longAccumulate(x, null, uncontended, index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
the value of getProbe() seems to be random. And it seems like only some rare occasions, due to a specific value returned by Striped64.getProbe(), we will (because of a contention??) call longAccumulate(), which does this to cause the Striped64$Cell class to be loaded:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/atomic/Striped64.java#L229-L241&quot;&gt;https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/atomic/Striped64.java#L229-L241&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
final void longAccumulate(long x, LongBinaryOperator fn,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean wasUncontended, int index) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cellsBusy == 0) {       // Try to attach new Cell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cell r = new Cell(x);   // Optimistically create</comment>
                            <comment id="14534626" author="ccheung" created="Thu, 3 Nov 2022 09:08:32 -0700"  >I couldn&amp;#39;t reproduce the issue using the same hosts where the bug was spotted.&lt;br/&gt;
&lt;br/&gt;
This is similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8283220&quot; title=&quot;$JAVA_HOME/lib/classlist is not deterministic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8283220&quot;&gt;&lt;strike&gt;JDK-8283220&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
In order to get more info when there is difference in the classlist, the subtask of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8283220&quot; title=&quot;$JAVA_HOME/lib/classlist is not deterministic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8283220&quot;&gt;&lt;strike&gt;JDK-8283220&lt;/strike&gt;&lt;/a&gt; (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8283238&quot; title=&quot;make/scripts/compare.sh should show the diff when classlist does not match&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8283238&quot;&gt;&lt;strike&gt;JDK-8283238&lt;/strike&gt;&lt;/a&gt;) should be implemented first.</comment>
                            <comment id="14533619" author="mseledtsov" created="Tue, 1 Nov 2022 11:15:04 -0700"  >ILW = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5094750">JDK-8303014</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5095178">JDK-8303345</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5070364">JDK-8283220</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2z1hn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>