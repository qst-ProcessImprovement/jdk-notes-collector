<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:51:23 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303086] SIGSEGV in JavaThread::is_interp_only_mode()</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303086</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test crashed with a SIGSEGV in JavaThread::is_interp_only_mode():&lt;br/&gt;
&lt;br/&gt;
serviceability/jvmti/stress/StackTrace/Suspended/GetStackTraceSuspendedStressTest.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s snippets from the hs_err_pid file:&lt;br/&gt;
&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x0000000109ebf5cc, pid=5235, tid=25603&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (slowdebug build 21-internal-LTS-2023-02-16-1211495.dcubed...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 21-internal-LTS-2023-02-16-1211495.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.dylib+0xebf5cc]  JavaThread::is_interp_only_mode()+0x14&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000000133810a10):  JavaThread &amp;quot;JVMTI agent thread&amp;quot; daemon [_thread_in_vm, id=25603, stack(0x000000016d998000,0x000000016db9b000)] _threads_hazard_ptr=0x0000000125558250, _nested_threads_hazard_ptr_cnt=1, _nested_threads_hazard_ptr=0x0000000125558250&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000016d998000,0x000000016db9b000],  sp=0x000000016db9a6e0,  free space=2057k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0xebf5cc]  JavaThread::is_interp_only_mode()+0x14&lt;br/&gt;
V  [libjvm.dylib+0xb6a700]  JvmtiThreadState::is_interp_only_mode()+0x44&lt;br/&gt;
V  [libjvm.dylib+0xb6c660]  JvmtiEventControllerPrivate::recompute_thread_enabled(JvmtiThreadState*)+0x164&lt;br/&gt;
V  [libjvm.dylib+0xb6c91c]  JvmtiEventControllerPrivate::recompute_enabled()+0x1f0&lt;br/&gt;
V  [libjvm.dylib+0xb6df20]  JvmtiEventControllerPrivate::set_user_enabled(JvmtiEnvBase*, JavaThread*, Handle, jvmtiEvent, bool)+0x1a4&lt;br/&gt;
V  [libjvm.dylib+0xb6e570]  JvmtiEventController::set_user_enabled(JvmtiEnvBase*, JavaThread*, oopDesc*, jvmtiEvent, bool)+0xfc&lt;br/&gt;
V  [libjvm.dylib+0xb52588]  JvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x1a4&lt;br/&gt;
V  [libjvm.dylib+0xafad3c]  jvmti_SetEventNotificationMode(_jvmtiEnv*, jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x140&lt;br/&gt;
C  [libGetStackTraceSuspendedStress.dylib+0x3b18]  _jvmtiEnv::SetEventNotificationMode(jvmtiEventMode, jvmtiEvent, _jobject*, ...)+0x3c&lt;br/&gt;
C  [libGetStackTraceSuspendedStress.dylib+0x5e50]  check_vthread_consistency_suspended(_jvmtiEnv*, JNIEnv_*, _jobject*)+0xc0&lt;br/&gt;
C  [libGetStackTraceSuspendedStress.dylib+0x4d80]  agentProc(_jvmtiEnv*, JNIEnv_*, void*)+0x19c&lt;br/&gt;
C  [libGetStackTraceSuspendedStress.dylib+0x545c]  agent_thread_wrapper(_jvmtiEnv*, JNIEnv_*, void*)+0x54&lt;br/&gt;
V  [libjvm.dylib+0xb801d8]  JvmtiAgentThread::call_start_function()+0x74&lt;br/&gt;
V  [libjvm.dylib+0xb8010c]  JvmtiAgentThread::start_function_wrapper(JavaThread*, JavaThread*)+0x60&lt;br/&gt;
V  [libjvm.dylib+0x90be18]  JavaThread::thread_main_inner()+0x108&lt;br/&gt;
V  [libjvm.dylib+0x90bd04]  JavaThread::run()+0x124&lt;br/&gt;
V  [libjvm.dylib+0xff82b0]  Thread::call_run()+0x154&lt;br/&gt;
V  [libjvm.dylib+0xdb6ed4]  thread_native_entry(Thread*)+0x138&lt;br/&gt;
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x0000000000000560</description>
                <environment></environment>
        <key id="5094856">JDK-8303086</key>
            <summary>SIGSEGV in JavaThread::is_interp_only_mode()</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sspitsyn">Serguei Spitsyn</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>loom</label>
                    </labels>
                <created>Wed, 22 Feb 2023 11:04:33 -0800</created>
                <updated>Tue, 25 Jul 2023 04:27:14 -0700</updated>
                            <resolved>Fri, 30 Jun 2023 14:00:35 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14594104" author="roboduke" created="Wed, 5 Jul 2023 13:17:56 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/96&quot;&gt;https://git.openjdk.org/jdk21/pull/96&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-05 19:33:16 +0000</comment>
                            <comment id="14593151" author="dukebot" created="Fri, 30 Jun 2023 14:00:34 -0700"  >Changeset: 971c2efb&lt;br/&gt;
Author:    Serguei Spitsyn &amp;lt;&lt;a href=&apos;mailto:sspitsyn@openjdk.org&apos;&gt;sspitsyn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-30 20:58:15 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/971c2efb698065c65dcf7373d8c3027f58d5f503&quot;&gt;https://git.openjdk.org/jdk/commit/971c2efb698065c65dcf7373d8c3027f58d5f503&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14593034" author="roboduke" created="Fri, 30 Jun 2023 04:33:56 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14728&quot;&gt;https://git.openjdk.org/jdk/pull/14728&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-30 11:27:58 +0000</comment>
                            <comment id="14588566" author="dcubed" created="Mon, 12 Jun 2023 09:28:14 -0700"  >Here&amp;#39;s the logs from my jdk-21+26 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+26_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+26_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23644  06-09-2023 17:22   jdk-21+26_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;111383  06-09-2023 17:22   jdk-21+26_1/failures.macosx-aarch64/hs_err_pid55884.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;135027                     2 files</comment>
                            <comment id="14587105" author="dcubed" created="Mon, 5 Jun 2023 09:06:10 -0700"  >Here&amp;#39;s the logs from my jdk-21+25 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+25_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+25_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23156  06-03-2023 05:48   jdk-21+25_2/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;111617  06-03-2023 05:48   jdk-21+25_2/failures.macosx-aarch64/hs_err_pid54687.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;134773                     2 files</comment>
                            <comment id="14586742" author="mwthomps" created="Fri, 2 Jun 2023 14:22:44 -0700"  >ILW=MMH=P3</comment>
                            <comment id="14585734" author="dcubed" created="Tue, 30 May 2023 12:46:44 -0700"  >Here&amp;#39;s the logs from my jdk-21+24 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+24_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+24_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23249  05-26-2023 04:46   jdk-21+24_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;111505  05-26-2023 04:46   jdk-21+24_1/failures.macosx-aarch64/hs_err_pid69175.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;134754                     2 files</comment>
                            <comment id="14583456" author="pchilanomate" created="Mon, 22 May 2023 13:15:00 -0700"  >[~dcubed] Unfortunately &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307365&quot; title=&quot;JvmtiStressModule hit SIGSEGV in JvmtiEventControllerPrivate::recompute_thread_enabled&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8307365&quot;&gt;&lt;strike&gt;JDK-8307365&lt;/strike&gt;&lt;/a&gt;&amp;#xA0;will not fix this issue. The problem here is that calling SetEventNotificationMode() targeting a single thread will just disable mount/unmount transitions for that particular thread, but when we later call recompute_enable() we will loop over all JvmtiThreadStates. The issue with that is that in the transitions the _thread field of a JvmtiThreadState can change from non-null to null (or the other way around). So in the crashing case we read a non-null value of _thread for the JvmtiThreadState of some thread that is transitioning, but then when we try to dereference it we first read it again and now the value is null so we crash in the dereference.&lt;br/&gt;
&lt;br/&gt;
This is the code where we crash:&lt;br/&gt;
&lt;br/&gt;
bool is_interp_only_mode()                {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
The crash actually depends on the compiler generating the extra load instead of using the first one. That&amp;#39;s why we are only seeing this crash in slowdebug mode.&lt;br/&gt;
&lt;br/&gt;
You can reproduce the crash easily in slowdebug mode using this patch:&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/hotspot/share/prims/jvmtiThreadState.hpp b/src/hotspot/share/prims/jvmtiThreadState.hpp&lt;br/&gt;
index 8340a44d142..6136fe08358 100644&lt;br/&gt;
--- a/src/hotspot/share/prims/jvmtiThreadState.hpp&lt;br/&gt;
+++ b/src/hotspot/share/prims/jvmtiThreadState.hpp&lt;br/&gt;
@@ -259,7 +259,12 @@ class JvmtiThreadState : public CHeapObj&amp;lt;mtInternal&amp;gt; {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// Used by the interpreter for fullspeed debugging support&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;bool is_interp_only_mode()                {&lt;br/&gt;
-    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
+    if (_thread == nullptr) {&lt;br/&gt;
+      return _saved_interp_only_mode != 0;&lt;br/&gt;
+    } else {&lt;br/&gt;
+      os::naked_short_sleep(1);&lt;br/&gt;
+      return _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
+    }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;void enter_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;void leave_interp_only_mode();</comment>
                            <comment id="14583445" author="dcubed" created="Mon, 22 May 2023 12:04:33 -0700"  >[~pchilanomate]&amp;#39;s fix for the following bug:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307365&quot; title=&quot;JvmtiStressModule hit SIGSEGV in JvmtiEventControllerPrivate::recompute_thread_enabled&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8307365&quot;&gt;&lt;strike&gt;JDK-8307365&lt;/strike&gt;&lt;/a&gt; JvmtiStressModule hit SIGSEGV in JvmtiEventControllerPrivate::recompute_thread_enabled&lt;br/&gt;
&lt;br/&gt;
is not included in jdk-21+23, but will be included in the jdk-21+24 snapshot.&lt;br/&gt;
I&amp;#39;m wondering if the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307365&quot; title=&quot;JvmtiStressModule hit SIGSEGV in JvmtiEventControllerPrivate::recompute_thread_enabled&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8307365&quot;&gt;&lt;strike&gt;JDK-8307365&lt;/strike&gt;&lt;/a&gt; will also address this bug (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303086&quot; title=&quot;SIGSEGV in JavaThread::is_interp_only_mode()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303086&quot;&gt;&lt;strike&gt;JDK-8303086&lt;/strike&gt;&lt;/a&gt;).</comment>
                            <comment id="14583443" author="dcubed" created="Mon, 22 May 2023 12:01:00 -0700"  >Here&amp;#39;s the logs from my jdk-21+23 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+23_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+23_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23163  05-21-2023 09:16   jdk-21+23_3/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;111453  05-21-2023 09:16   jdk-21+23_3/failures.macosx-aarch64/hs_err_pid49648.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;134616                     2 files</comment>
                            <comment id="14580288" author="pchilanomate" created="Tue, 9 May 2023 10:35:55 -0700"  >I looked at this crash and we are indeed accessing a JvmtiThreadState while the corresponding thread is transitioning. &lt;br/&gt;
&lt;br/&gt;
In this test the SetEventNotificationMode() operation is made on a particular vthread, meaning the JvmtiVTMSTransitionDisabler only disables transitions for this vthread. But when we call recompute_enabled() we process all states. One of this states happens to be from a thread that is transitioning so we hit the issue that Dan pointed out:&lt;br/&gt;
&lt;br/&gt;
- We read _thread from the JvmtiThreadState and see that is not null&lt;br/&gt;
- Thread goes through a mount/unmount transition where the call to rebind_to_jvmti_thread_state_of() sets _thread to null.&lt;br/&gt;
- We read _thread again from the JvmtiThreadState state and crash when dereferencing it.&lt;br/&gt;
&lt;br/&gt;
The bug is easily reproducible just by adding a os::naked_short_sleep() call between between the first and second read of _thread.&lt;br/&gt;
&#8232;There is another place in method JvmtiEventControllerPrivate::recompute_thread_enabled() where it seems this crash could happen:&lt;br/&gt;
&lt;br/&gt;
if (state-&amp;gt;get_thread() != nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The JavaThread for carrier or mounted virtual thread case.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Update the cached value for thread-specific should_post_on_exceptions value.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool should_post_on_exceptions = (any_env_enabled &amp;amp; SHOULD_POST_ON_EXCEPTIONS_BITS) != 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;state-&amp;gt;set_should_post_on_exceptions(should_post_on_exceptions);&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
where set_should_post_on_exceptions() is defined as:&lt;br/&gt;
&lt;br/&gt;
inline void JvmtiThreadState::set_should_post_on_exceptions(bool val) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;get_thread_or_saved()-&amp;gt;set_should_post_on_exceptions_flag(val ? JNI_TRUE : JNI_FALSE);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
But that would require the &amp;quot;if (any_env_enabled != was_any_env_enabled)&amp;quot; conditional to be true for other threads besides the one we actually requested the operation on. For this test that never happens. But if it is possible in other cases then we would crash there too.&lt;br/&gt;
</comment>
                            <comment id="14576089" author="dcubed" created="Mon, 24 Apr 2023 08:28:18 -0700"  >Here&amp;#39;s the logs from my jdk-21+19 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+19_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+19_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23150  04-21-2023 04:49   jdk-21+19_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;109924  04-21-2023 04:49   jdk-21+19_1/failures.macosx-aarch64/hs_err_pid18550.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;133074                     2 files</comment>
                            <comment id="14574238" author="dcubed" created="Mon, 17 Apr 2023 09:09:06 -0700"  >Here&amp;#39;s the logs from my jdk-21+18 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+18_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+18_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23772  04-14-2023 00:46   jdk-21+18_1/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;110690  04-14-2023 00:46   jdk-21+18_1/failures.macosx-aarch64/hs_err_pid9574.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;134462                     2 files</comment>
                            <comment id="14572713" author="dcubed" created="Mon, 10 Apr 2023 07:11:54 -0700"  >Here&amp;#39;s the logs from my jdk-21+17 stress run sighting on linux-x64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+17_linux-x64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+17_linux-x64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;22475  2023-04-07 02:39   jdk-21+17_1/failures.linux-x86_64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;22475                     1 file</comment>
                            <comment id="14565128" author="dcubed" created="Tue, 7 Mar 2023 12:23:25 -0800"  >[~sspitsyn] - I think you mean a different bug. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299240&quot; title=&quot;rank of JvmtiVTMSTransition_lock can be safepoint&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299240&quot;&gt;&lt;strike&gt;JDK-8299240&lt;/strike&gt;&lt;/a&gt; is fixed in jdk-21+11.</comment>
                            <comment id="14564132" author="sspitsyn" created="Thu, 2 Mar 2023 07:39:28 -0800"  >Thanks, Dan.&lt;br/&gt;
Let&amp;#39;s see if it is failing in the jdk main line.&lt;br/&gt;
I&amp;#39;m suspecting that this can be fixed by the &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299240&quot;&gt;https://bugs.openjdk.org/browse/JDK-8299240&lt;/a&gt; .</comment>
                            <comment id="14563868" author="dcubed" created="Wed, 1 Mar 2023 08:37:20 -0800"  >&amp;gt; Are there any links to these stress test runs?&lt;br/&gt;
&lt;br/&gt;
These stress test runs are done on machines in my lab so there are&lt;br/&gt;
no usable links. However, I did include zip files containing the logs and&lt;br/&gt;
the hs_err_pid files from the runs.&lt;br/&gt;
&lt;br/&gt;
I did not see the failure in jdk-21+9 stress testing. However, I suspect that&lt;br/&gt;
the failure mode can be intermittent.</comment>
                            <comment id="14563680" author="sspitsyn" created="Tue, 28 Feb 2023 19:34:44 -0800"  >Dan, thank you for great analysis as it helps a lot!&lt;br/&gt;
Is this started failing in the jdk-21+10 or it was also observed earlier?&lt;br/&gt;
&lt;br/&gt;
I wonder if it was a regression from this fix integration:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298853&quot;&gt;https://bugs.openjdk.org/browse/JDK-8298853&lt;/a&gt; :&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;JvmtiVTMSTransitionDisabler should support disabling one virtual thread transitions&lt;br/&gt;
&lt;br/&gt;
VTMS transitions of the target thread are supposed to be disabled because&lt;br/&gt;
the JVMTI code is executed in a context of JvmtiVTMSTransitionDisabler:&lt;br/&gt;
&lt;br/&gt;
JvmtiEnv::SetEventNotificationMode(jvmtiEventMode mode, jvmtiEvent event_type, jthread event_thread,   ...) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;. . . . . .&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JvmtiVTMSTransitionDisabler disabler(event_thread);      &amp;lt;== There is a disabler here!&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (event_thread == nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;. . . . . .&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JvmtiEventController::set_user_enabled(this, nullptr, (oop) nullptr, event_type, enabled);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// We have a specified event_thread.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadsListHandle tlh;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;. . . . . .&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JvmtiEventController::set_user_enabled(this, java_thread, thread_obj, event_type, enabled);   &amp;lt;== This call is executed&lt;br/&gt;
&lt;br/&gt;
Your suggestion fix is good as a work around.&lt;br/&gt;
However, it seems, there is a bug somewhere in the implementation which would be nice to identify.&lt;br/&gt;
&lt;br/&gt;
Also, I wonder if this problem was fixed with the integration of this one:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299240&quot;&gt;https://bugs.openjdk.org/browse/JDK-8299240&lt;/a&gt; :&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;rank of JvmtiVTMSTransition_lock can be safepoint&lt;br/&gt;
&lt;br/&gt;
Are there any links to these stress test runs?&lt;br/&gt;
</comment>
                            <comment id="14563617" author="dcubed" created="Tue, 28 Feb 2023 14:13:59 -0800"  >Here&amp;#39;s the logs from my jdk-21+11 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+11_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+11_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23694  02-25-2023 06:00   jdk-21+11_2/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;110824  02-25-2023 06:00   jdk-21+11_2/failures.macosx-aarch64/hs_err_pid27685.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;134518                     2 files</comment>
                            <comment id="14562364" author="dholmes" created="Wed, 22 Feb 2023 17:48:23 -0800"  >Sorry Dan tl;dr :)</comment>
                            <comment id="14562363" author="dcubed" created="Wed, 22 Feb 2023 16:59:13 -0800"  >[~dholmes] - please see the proposed fix at the end of this comment:&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303086?focusedCommentId=14562326&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14562326&quot;&gt;https://bugs.openjdk.org/browse/JDK-8303086?focusedCommentId=14562326&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14562326&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;gt; _thread should be read only once in this kind of check.&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s exactly what I proposed...</comment>
                            <comment id="14562351" author="dholmes" created="Wed, 22 Feb 2023 16:29:14 -0800"  >A racy is_interp_mode is also suspected in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8302351&quot; title=&quot;&amp;quot;assert(!JavaThread::current()-&amp;gt;is_interp_only_mode() || !nm-&amp;gt;method()-&amp;gt;is_continuation_enter_intrinsic() || ContinuationEntry::is_interpreted_call(return_pc)) failed: interp_only_mode but not in enterSpecial interpreted entry&amp;quot; in fixup_callers_callsite&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8302351&quot;&gt;&lt;strike&gt;JDK-8302351&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;gt;  return _thread == nullptr ? _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode(); &lt;br/&gt;
&lt;br/&gt;
_thread should be read only once in this kind of check.</comment>
                            <comment id="14562330" author="dcubed" created="Wed, 22 Feb 2023 14:32:02 -0800"  >It looks like is_interp_only_mode was recently changed during the&lt;br/&gt;
work to convert NULL -&amp;gt; nullptr, but the bug exists before that:&lt;br/&gt;
&lt;br/&gt;
9583e3657e43    (Alan Bateman   2022-05-07 08:06:16 +0000       236)  bool is_interp_only_mode()                {&lt;br/&gt;
9583e3657e43    (Alan Bateman   2022-05-07 08:06:16 +0000       237)    return _thread == NULL ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
9583e3657e43    (Alan Bateman   2022-05-07 08:06:16 +0000       238)  }&lt;br/&gt;
&lt;br/&gt;
9583e3657e43 is the original integration of JEP-425.</comment>
                            <comment id="14562326" author="dcubed" created="Wed, 22 Feb 2023 14:15:16 -0800"  >So here&amp;#39;s the code that sets the JvmtiThreadState::_thread field:&lt;br/&gt;
&lt;br/&gt;
void JvmtiThreadState::set_thread(JavaThread* thread) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_saved = nullptr;  // Common case.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!_is_virtual &amp;amp;&amp;amp; thread == nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Save JavaThread* if carrier thread is being detached.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread_saved = _thread;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread = thread;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Based on the above code and what I found in the core file, I think the&lt;br/&gt;
carrier thread was detached from JavaThread* 0x0000000135029410&lt;br/&gt;
at the same time that the crashing code was calling:&lt;br/&gt;
&lt;br/&gt;
JavaThread::is_interp_only_mode()&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t know if asynchronous carrier thread unmounting is allowed, but&lt;br/&gt;
if it is, then this code is bad:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Used by the interpreter for fullspeed debugging support&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_interp_only_mode()                {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
because we can see a non-nullptr value here:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread == nullptr &lt;br/&gt;
&lt;br/&gt;
and then try to use then non-nullptr value here:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread-&amp;gt;is_interp_only_mode()&lt;br/&gt;
&lt;br/&gt;
and crash. A better way to write this function is:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Used by the interpreter for fullspeed debugging support&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_interp_only_mode()                {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread* jt = _thread;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return jt == nullptr ?  _saved_interp_only_mode != 0 : jt-&amp;gt;is_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}</comment>
                            <comment id="14562323" author="dcubed" created="Wed, 22 Feb 2023 14:07:48 -0800"  >Here&amp;#39;s the backtrace from lldb:&lt;br/&gt;
&lt;br/&gt;
(lldb) bt&lt;br/&gt;
warning: could not execute support code to read Objective-C class data in the process. This may reduce the quality of type information available.&lt;br/&gt;
* thread #22, stop reason = signal SIGSTOP&lt;br/&gt;
&amp;nbsp;&amp;nbsp;* frame #0: 0x00000001a2a6ce28 libsystem_kernel.dylib`__pthread_kill + 8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #1: 0x00000001a2a9f43c libsystem_pthread.dylib`pthread_kill + 292&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #2: 0x00000001a29e7454 libsystem_c.dylib`abort + 124&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #3: 0x0000000109dc37a0 libjvm.dylib`os::abort(dump_core=true, siginfo=0x000000016db9a290, context=0x000000016db9a2f8) at os_posix.cpp:2014:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #4: 0x000000010a0a58d0 libjvm.dylib`VMError::report_and_die(id=11, message=0x0000000000000000, detail_fmt=&amp;quot;%s&amp;quot;, detail_args=&amp;quot;\x9eL\U0000001a\n\U00000001&amp;quot;, thread=0x0000000133810a10, pc=&amp;quot;\taE\xb9?\U00000001&amp;quot;, siginfo=0x000000016db9a290, context=0x000000016db9a2f8, filename=0x0000000000000000, lineno=0, size=0) at vmError.cpp:1687:7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #5: 0x000000010a0a49fc libjvm.dylib`VMError::report_and_die(thread=0x0000000133810a10, sig=11, pc=&amp;quot;\taE\xb9?\U00000001&amp;quot;, siginfo=0x000000016db9a290, context=0x000000016db9a2f8, detail_fmt=&amp;quot;%s&amp;quot;) at vmError.cpp:1339:3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #6: 0x000000010a0a5974 libjvm.dylib`VMError::report_and_die(thread=0x0000000133810a10, sig=11, pc=&amp;quot;\taE\xb9?\U00000001&amp;quot;, siginfo=0x000000016db9a290, context=0x000000016db9a2f8) at vmError.cpp:1345:3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #7: 0x0000000109ee0d40 libjvm.dylib`::JVM_handle_bsd_signal(sig=11, info=0x000000016db9a290, ucVoid=0x000000016db9a2f8, abort_if_unrecognized=1) at signals_posix.cpp:655:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #8: 0x0000000109ee22c0 libjvm.dylib`javaSignalHandler(sig=11, info=0x000000016db9a290, context=0x000000016db9a2f8) at signals_posix.cpp:666:9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #9: 0x00000001a2aeac44 libsystem_platform.dylib`_sigtramp + 56&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #10: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x0000000000000000) at jvmtiThreadState.hpp:241:74&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #11: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x00000001254507c0) at jvmtiThreadState.hpp:241:74&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #12: 0x0000000109b6c660 libjvm.dylib`JvmtiEventControllerPrivate::recompute_thread_enabled(state=0x00000001254507c0) at jvmtiEventController.cpp:593:31&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #13: 0x0000000109b6c91c libjvm.dylib`JvmtiEventControllerPrivate::recompute_enabled() at jvmtiEventController.cpp:668:33&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #14: 0x0000000109b6df20 libjvm.dylib`JvmtiEventControllerPrivate::set_user_enabled(env=0x000000013430d670, thread=0x0000000135808e10, thread_oop_h=Handle @ 0x000000016db9a9f8, event_type=JVMTI_EVENT_SINGLE_STEP, enabled=false) at jvmtiEventController.cpp:907:3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #15: 0x0000000109b6e570 libjvm.dylib`JvmtiEventController::set_user_enabled(env=0x000000013430d670, thread=0x0000000135808e10, thread_oop=0x00000007fa678b98, event_type=JVMTI_EVENT_SINGLE_STEP, enabled=false) at jvmtiEventController.cpp:1060:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #16: 0x0000000109b52588 libjvm.dylib`JvmtiEnv::SetEventNotificationMode(this=0x000000013430d670, mode=JVMTI_DISABLE, event_type=JVMTI_EVENT_SINGLE_STEP, event_thread=0x00000001254a1f48) at jvmtiEnv.cpp:603:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #17: 0x0000000109afad3c libjvm.dylib`jvmti_SetEventNotificationMode(env=0x000000013430d670, mode=JVMTI_DISABLE, event_type=JVMTI_EVENT_SINGLE_STEP, event_thread=0x00000001254a1f48) at jvmtiEnter.cpp:5321:22&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #18: 0x0000000104bdfb18 libGetStackTraceSuspendedStress.dylib`_jvmtiEnv::SetEventNotificationMode(this=0x000000013430d670, mode=JVMTI_DISABLE, event_type=JVMTI_EVENT_SINGLE_STEP, event_thread=0x00000001254a1f48) at jvmti.h:2522:12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #19: 0x0000000104be1e50 libGetStackTraceSuspendedStress.dylib`check_vthread_consistency_suspended(jvmti=0x000000013430d670, jni=0x0000000133810d38, vthread=0x00000001254a1f48) at libGetStackTraceSuspendedStress.cpp:131:16&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #20: 0x0000000104be0d80 libGetStackTraceSuspendedStress.dylib`agentProc(jvmti=0x000000013430d670, jni=0x0000000133810d38, arg=0x0000000000000000) at libGetStackTraceSuspendedStress.cpp:206:9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #21: 0x0000000104be145c libGetStackTraceSuspendedStress.dylib`agent_thread_wrapper(jvmti_env=0x000000013430d670, agentJNI=0x0000000133810d38, arg=0x0000000000000000) at jvmti_thread.h:179:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #22: 0x0000000109b801d8 libjvm.dylib`JvmtiAgentThread::call_start_function(this=0x0000000133810a10) at jvmtiImpl.cpp:89:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #23: 0x0000000109b8010c libjvm.dylib`JvmtiAgentThread::start_function_wrapper(thread=0x0000000133810a10, __the_thread__=0x0000000133810a10) at jvmtiImpl.cpp:83:14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #24: 0x000000010990be18 libjvm.dylib`JavaThread::thread_main_inner(this=0x0000000133810a10) at javaThread.cpp:710:5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #25: 0x000000010990bd04 libjvm.dylib`JavaThread::run(this=0x0000000133810a10) at javaThread.cpp:695:3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #26: 0x0000000109ff82b0 libjvm.dylib`Thread::call_run(this=0x0000000133810a10) at thread.cpp:224:9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #27: 0x0000000109db6ed4 libjvm.dylib`thread_native_entry(thread=0x0000000133810a10) at os_bsd.cpp:572:11&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame #28: 0x00000001a2a9f878 libsystem_pthread.dylib`_pthread_start + 320&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing frame and &amp;#39;this&amp;#39; is nullptr:&lt;br/&gt;
&lt;br/&gt;
(lldb) frame select 10&lt;br/&gt;
frame #10: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x0000000000000000) at jvmtiThreadState.hpp:241:74&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;238 	&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;239 	  // Used by the interpreter for fullspeed debugging support&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;240 	  bool is_interp_only_mode()                {&lt;br/&gt;
-&amp;gt; 241 	    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;242 	  }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;243 	  void enter_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;244 	  void leave_interp_only_mode();&lt;br/&gt;
(lldb) print this&lt;br/&gt;
(JvmtiThreadState *) $0 = nullptr&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s not good so let&amp;#39;s check the previous frame:&lt;br/&gt;
&lt;br/&gt;
(lldb) up&lt;br/&gt;
frame #11: 0x0000000109b6a700 libjvm.dylib`JvmtiThreadState::is_interp_only_mode(this=0x00000001254507c0) at jvmtiThreadState.hpp:241:74&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;238 	&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;239 	  // Used by the interpreter for fullspeed debugging support&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;240 	  bool is_interp_only_mode()                {&lt;br/&gt;
-&amp;gt; 241 	    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;242 	  }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;243 	  void enter_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;244 	  void leave_interp_only_mode();&lt;br/&gt;
(lldb) print this&lt;br/&gt;
(JvmtiThreadState *) $1 = 0x00000001254507c0&lt;br/&gt;
(lldb) print *this&lt;br/&gt;
(JvmtiThreadState) $2 = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_saved = 0x0000000135029410&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_oop_h = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_obj = 0x0000000134048728&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmti_event_queue = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_is_virtual = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_hide_single_stepping = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_interp_only_mode = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_step_for_popframe = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_step_for_earlyret = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_hide_level = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_exception_state = ES_CLEARED&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_class_being_redefined = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_class_load_kind = jvmti_class_load_kind_load&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_classes_being_redefined = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_cur_stack_depth = -99&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_saved_interp_only_mode = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_event_enable = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_event_enabled = (_enabled_bits = 0, _init_guard = JEE_INIT_GUARD)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_head_env_thread_state = 0x00000001254508a0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_next = 0x0000000125450670&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_prev = 0x0000000125450910&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_dynamic_code_event_collector = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_vm_object_alloc_event_collector = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_sampled_object_alloc_event_collector = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_the_class_for_redefinition_verification = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_scratch_class_for_redefinition_verification = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_debuggable = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_earlyret_state = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_earlyret_tos = ilgl&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_earlyret_value = (z = &amp;#39;\0&amp;#39;, b = &amp;#39;\0&amp;#39;, c = 0, s = 0, i = 0, j = 0, f = 0, d = 0, l = 0x0000000000000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_earlyret_oop = nullptr&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Okay so we have a JvmtiThreadState &amp;#39;this&amp;#39;, but the _thread field is nullptr so&lt;br/&gt;
when we called JavaThread::is_interp_only_mode() using that _thread field&lt;br/&gt;
we got a nullptr &amp;#39;this&amp;#39; value.&lt;br/&gt;
&lt;br/&gt;
Let&amp;#39;s go up another frame:&lt;br/&gt;
&lt;br/&gt;
(lldb) up&lt;br/&gt;
frame #12: 0x0000000109b6c660 libjvm.dylib`JvmtiEventControllerPrivate::recompute_thread_enabled(state=0x00000001254507c0) at jvmtiEventController.cpp:593:31&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;590 	  }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;591 	  // compute interp_only mode&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;592 	  bool should_be_interp = (any_env_enabled &amp;amp; INTERP_EVENT_BITS) != 0 || has_frame_pops;&lt;br/&gt;
-&amp;gt; 593 	  bool is_now_interp = state-&amp;gt;is_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;594 	&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;595 	  if (should_be_interp != is_now_interp) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;596 	    if (should_be_interp) {&lt;br/&gt;
&lt;br/&gt;
Let&amp;#39;s see the code for is_interp_only_mode():&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_interp_only_mode()                {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread-&amp;gt;is_interp_only_mode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Hmm... if the _thread field is nullptr, then we&amp;#39;re supposed to return:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_saved_interp_only_mode != 0&lt;br/&gt;
&lt;br/&gt;
but the crash stack says that we called:&lt;br/&gt;
&lt;br/&gt;
_thread-&amp;gt;is_interp_only_mode() instead and crashed with SIGSEGV.&lt;br/&gt;
&lt;br/&gt;
Now I have to wonder if the JvmtiThreadState::_thread field can change&lt;br/&gt;
while this code is executing...&lt;br/&gt;
&lt;br/&gt;
Let&amp;#39;s try to figure out which thread we had and perhaps this value from&lt;br/&gt;
JvmtiThreadState will do the trick:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_saved = 0x0000000135029410&lt;br/&gt;
&lt;br/&gt;
(lldb) print *(JavaThread*)state-&amp;gt;_thread_saved&lt;br/&gt;
(JavaThread) $5 = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Thread = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadShadow = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_pending_exception = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_exception_file = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_exception_line = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_nmethod_disarmed_guard_value = 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_gc_data = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[0] = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1] = 8192&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2] = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[3] = 17433981653976477952&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[4] = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[5] = 2048&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[6] = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[7] = 5169760768&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[8] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[9] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[10] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[11] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[12] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[13] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[14] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[15] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[16] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[17] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[18] = 17433981653976478193&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_threads_hazard_ptr = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_threads_list_ptr = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_nested_threads_hazard_ptr_cnt = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_suspendible_thread = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_last_handle_mark = 0x000000016e7e29e8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_threads_do_token = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_rcu_counter = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_missed_ic_stub_refill_verifier = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_skip_gcalot = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_tlab = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_start = 0x00000007fa1ec098&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_top = 0x00000007fa1f0e10&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_pf_top = 0x00000007fa1ec0c0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_end = 0x00000007fa1ffc00&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_allocation_end = 0x00000007fa1ffc00&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_desired_size = 60293&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_refill_waste_limit = 942&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_allocated_before_last_gc = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_bytes_since_last_sample_point = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_number_of_refills = 3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_refill_waste = 261&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_gc_waste = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_slow_allocations = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_allocated_size = 80676&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_allocation_fraction = (_average = 0.999998033, _sample_count = 1, _weight = 35, _is_old = false, _last_sample = 0.999998033)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_allocated_bytes = 561552&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_heap_sampler = (_bytes_until_sample = 800497)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_statistical_info = (_start_time_stamp = 1277841645146583, _define_class_count = 10)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_jfr_thread_local = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_java_event_writer = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_java_buffer = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_native_buffer = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_shelved_buffer = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_load_barrier_buffer_epoch_0 = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_load_barrier_buffer_epoch_1 = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_checkpoint_buffer_epoch_0 = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_checkpoint_buffer_epoch_1 = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stackframes = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_dcmd_arena = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_ptr = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_vthread_id = 134&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_jvm_thread_id = 149&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread_id_alias = 18446744073709551615&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_data_lost = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_trace_id = 18446744073709551615&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_parent_trace_id = 148&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_user_time = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_cpu_time = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_wallclock_time = 1277841645146750&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_trace_hash = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stackdepth = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_entering_suspend_flag = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_critical_section = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_vthread_epoch = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_vthread_excluded = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_jvm_thread_excluded = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_vthread = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_dead = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_current_pending_raw_monitor = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_run_state = RUN&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_unhandled_oops = 0xf1f1f1f1f1f1f1f1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_osthread = 0x0000000134244e50&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_resource_area = 0x0000000134244060&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_current_resource_mark = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_handle_area = 0x0000000134244510&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_metadata_handles = 0x0000000134244670&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_base = 0x000000016e7e3000 &amp;quot;\xdf\xc9C\x937\xbb\x85)&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_size = 2109440&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_lgrp_id = -1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_owned_locks = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_jvmti_env_iteration_count = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_ParkEvent = 0x0000000134244900&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_hashStateW = 1851578994&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_hashStateX = 222519383&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_hashStateY = 1221354648&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_hashStateZ = 1553654197&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_wx_init = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_wx_state = WXWrite&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_on_thread_list = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_threadObj = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_obj = 0x000000013372e260&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_vthread = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_obj = 0x000000013372e268&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmti_vthread = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_obj = 0x000000013372e270&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_scopedValueCache = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_obj = 0x000000013372e278&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_java_call_counter = 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_anchor = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_last_Java_sp = 0x000000016e7e21f0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_last_Java_pc = 0x000000011b818264 &amp;quot;\xa8&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_last_Java_fp = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_entry_point = 0x0000000109a10a24 (libjvm.dylib`thread_entry(JavaThread*, JavaThread*) at jvm.cpp:2920)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jni_environment = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;functions = 0x000000010a4a88c0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_deopt_mark = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_deopt_nmethod = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_vframe_array_head = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_vframe_array_last = 0x0000000134a2da10&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmti_deferred_updates = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_callee_target = 0x000000015807bd40&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_vm_result = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_vm_result_2 = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_deferred_card_mark = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_start = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_word_size = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_current_pending_monitor = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_current_pending_monitor_is_from_java = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_current_waiting_monitor = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_active_handles = 0x00000001340588b0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_free_handle_block = 0x0000000134245120&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_Stalled = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_monitor_chunks = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_suspend_flags = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_state = _thread_blocked&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_poll_data = (_polling_word = 18446744073709551614, _polling_page = 4374495232)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_safepoint_state = 0x0000000134244e10&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_saved_exception_pc = 0x000000011b81d770 &amp;quot;\x88\xe3A\xf9\xffc(\xebH&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_requires_cross_modify_fence = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_no_safepoint_count = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_visited_for_critical_count = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_terminated = _not_terminated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_in_deopt_handler = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_doing_unsafe_access = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_do_not_unlock_if_synchronized = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_carrier_thread_suspended = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_is_in_VTMS_transition = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_is_in_tmp_VTMS_transition = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_is_VTMS_transition_disabler = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jni_attach_state = _not_attaching_via_jni&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_deoptimization = -1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_monitorenter = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_transfer_to_interpreter = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_in_retryable_allocation = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_failed_speculation = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmci = (_implicit_exception_pc = 0x0000000000000000, _alternate_call_target = 0x0000000000000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_libjvmci_runtime = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmci_counters = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmci_reserved0 = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmci_reserved1 = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmci_reserved_oop0 = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_stack_overflow_state = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_guard_state = stack_guard_enabled&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_overflow_limit = 0x000000016e5fc000 &amp;quot;&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_reserved_stack_activation = 0x000000016e7e3000 &amp;quot;\xdf\xc9C\x937\xbb\x85)&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_shadow_zone_safe_limit = 0x000000016e608000 &amp;quot;&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_shadow_zone_growth_watermark = 0x000000016e7defc0 &amp;quot;&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_base = 0x000000016e7e3000 &amp;quot;\xdf\xc9C\x937\xbb\x85)&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_stack_end = 0x000000016e5e0000 &amp;quot;&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_exception_oop = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_exception_pc = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_exception_handler_pc = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_is_method_handle_return = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jni_active_critical = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_pending_jni_exception_check_fn = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_depth_first_number = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_popframe_condition = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_frames_to_pop_failed_realloc = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_cont_entry = 0x000000016e7e22a0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_cont_fastpath = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_cont_fastpath_thread_state = 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_held_monitor_count = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jni_monitor_count = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_stack_watermarks = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_head = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_handshake = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_handshakee = 0x0000000135029410&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_queue = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_first = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_lock = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Mutex = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_owner = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_lock = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PlatformMutex = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_impl = 0x0000000134244a40&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_impl = 0x0000000134244aa0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_name = 0x0000000134244af0 &amp;quot;HandshakeState_lock&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_allow_vm_block = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_rank = nosafepoint&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_next = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_last_owner = 0x0000000135029410&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_skip_rank_check = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_active_handshaker = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_async_exceptions_blocked = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_suspended = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_async_suspend_handshake = false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_popframe_preserved_args = 0x0000000000000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_popframe_preserved_args_size = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_jvmti_thread_state = 0x00000001336aafc0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_interp_only_mode = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_should_post_on_exceptions_flag = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_thread_stat = 0x0000000134244b20&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_parker = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PlatformParker = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_counter = 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_cur_index = -1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_mutex = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[0] = (__sig = 1297437786, __opaque = char [56] @ 0x0000000166ab4980)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_cond = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[0] = (__sig = 1129270852, __opaque = char [40] @ 0x0000000166ab49c0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1] = (__sig = 1129270852, __opaque = char [40] @ 0x0000000166ab49f0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_class_to_be_initialized = nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;_SleepEvent = 0x0000000134244d00&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
The JavaThread&amp;#39;s   _jvmti_thread_state = 0x00000001336aafc0 value&lt;br/&gt;
matches the current JvmtiThreadState so it looks like&lt;br/&gt;
_thread_saved = 0x0000000135029410 is a valid JavaThread*.&lt;br/&gt;
&lt;br/&gt;
That JavaThread* value also appears on the current threads list:&lt;br/&gt;
&lt;br/&gt;
Threads class SMR info:&lt;br/&gt;
_java_thread_list=0x0000000125558250, length=22, elements={&lt;br/&gt;
0x0000000135808210, 0x000000013582b610, 0x000000013582e410, 0x000000013582f010,&lt;br/&gt;
0x000000012580ae10, 0x000000013582fc10, 0x000000012580ba10, 0x000000013500c410,&lt;br/&gt;
0x0000000126008210, 0x00000001348c5810, 0x00000001348d6010, 0x0000000133810a10,&lt;br/&gt;
0x0000000136011410, 0x0000000135028c10, 0x0000000135808e10, 0x000000012584d410,&lt;br/&gt;
0x0000000135830810, 0x0000000135029410, 0x0000000136011c10, 0x0000000135831010,&lt;br/&gt;
0x000000013582c210, 0x00000001338b8410&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
so it is a valid and protected JavaThread*.</comment>
                            <comment id="14562120" author="dcubed" created="Wed, 22 Feb 2023 11:07:13 -0800"  >Here&amp;#39;s the logs from my jdk-21+10 stress run sighting on macosx-aarch64:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l jdk-21+10_macosx-aarch64.8303086.zip&lt;br/&gt;
Archive:  jdk-21+10_macosx-aarch64.8303086.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23717  02-18-2023 05:06   jdk-21+10_2/failures.macosx-aarch64/GetStackTraceSuspendedStressTest.jtr.slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;111326  02-22-2023 14:04   jdk-21+10_2/failures.macosx-aarch64/hs_err_pid5235.log&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;135043                     2 files</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5104875">JDK-8311543</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106391">JDK-8312884</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5104472">JDK-8311177</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5104526">JDK-8311218</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102760" name="jdk-21+10_macosx-aarch64.8303086.zip" size="23803" author="dcubed" created="Wed, 22 Feb 2023 11:07:08 -0800"/>
                            <attachment id="102835" name="jdk-21+11_macosx-aarch64.8303086.zip" size="23777" author="dcubed" created="Tue, 28 Feb 2023 14:13:55 -0800"/>
                            <attachment id="103382" name="jdk-21+17_linux-x64.8303086.zip" size="3637" author="dcubed" created="Mon, 10 Apr 2023 07:11:48 -0700"/>
                            <attachment id="103470" name="jdk-21+18_macosx-aarch64.8303086.zip" size="23796" author="dcubed" created="Mon, 17 Apr 2023 09:09:00 -0700"/>
                            <attachment id="103537" name="jdk-21+19_macosx-aarch64.8303086.zip" size="23635" author="dcubed" created="Mon, 24 Apr 2023 08:28:06 -0700"/>
                            <attachment id="103920" name="jdk-21+23_macosx-aarch64.8303086.zip" size="23786" author="dcubed" created="Mon, 22 May 2023 12:00:51 -0700"/>
                            <attachment id="104117" name="jdk-21+24_macosx-aarch64.8303086.zip" size="23751" author="dcubed" created="Tue, 30 May 2023 12:46:38 -0700"/>
                            <attachment id="104192" name="jdk-21+25_macosx-aarch64.8303086.zip" size="23798" author="dcubed" created="Mon, 5 Jun 2023 09:06:05 -0700"/>
                            <attachment id="104261" name="jdk-21+26_macosx-aarch64.8303086.zip" size="23777" author="dcubed" created="Mon, 12 Jun 2023 09:28:06 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30i3f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="372"><![CDATA[jvmti]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>