<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:22:20 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8316401] sun/tools/jhsdb/JStackStressTest.java failed with &quot;InternalError: We should have found a thread that owns the anonymous lock&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8316401</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in an adhoc Tier5 job that is testing:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8315880&quot; title=&quot;Change LockingMode default from LM_LEGACY to LM_LIGHTWEIGHT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8315880&quot;&gt;&lt;strike&gt;JDK-8315880&lt;/strike&gt;&lt;/a&gt; Change LockingMode default from LM_LEGACY to LM_LIGHTWEIGHT&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(7/346)----------&lt;br/&gt;
command: main JStackStressTest&lt;br/&gt;
reason: User specified action: run main/timeout=240 JStackStressTest &lt;br/&gt;
started: Sun Sep 17 22:21:56 UTC 2023&lt;br/&gt;
Mode: othervm [test requires non-default system module]&lt;br/&gt;
Additional options from @modules: --add-modules jdk.hotspot.agent,java.management&lt;br/&gt;
finished: Sun Sep 17 22:22:08 UTC 2023&lt;br/&gt;
elapsed time (seconds): 11.96&lt;br/&gt;
----------configuration:(3/61)----------&lt;br/&gt;
Boot Layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;add modules: jdk.hotspot.agent java.management&lt;br/&gt;
&lt;br/&gt;
----------System.out:(135/8723)----------&lt;br/&gt;
Starting Jshell&lt;br/&gt;
[JShell]:/opt/mach5/mesos/work_dir/jib-master/install/2023-09-17-1736580.daniel.daugherty.8315880_for_jdk22.git/linux-x64-debug.jdk/jdk-22/fastdebug/bin/jshell -J-Xmx768m -J-XX:MaxRAMPercentage=4.16667 -J-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-x64/jdk-20_linux-x64_bin.tar.gz/jdk-20 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S179455/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/647b6357-7ad2-47b6-a884-93007503a691/runs/fb791c2d-470c-40ea-99a6-ffd196fc0b7a/testoutput/test-support/jtreg_open_test_jdk_svc_tools/tmp -J-ea -J-esa&lt;br/&gt;
[2023-09-17T22:21:56.889643057Z] Gathering output for process 590799&lt;br/&gt;
###### Starting jstack iteration 1 against 590799&lt;br/&gt;
[2023-09-17T22:21:57.092332068Z] Gathering output for process 590855&lt;br/&gt;
[2023-09-17T22:21:59.775374274Z] Waiting for completion for process 590855&lt;br/&gt;
[2023-09-17T22:21:59.775620992Z] Waiting for completion finished for process 590855&lt;br/&gt;
Output and diagnostic info for process 590855 was saved into &amp;#39;pid-590855-output.log&amp;#39;&lt;br/&gt;
jhsdb jstack stdout:&lt;br/&gt;
Attaching to process ID 590799, please wait...&lt;br/&gt;
Debugger attached successfully.&lt;br/&gt;
Server compiler detected.&lt;br/&gt;
JVM version is 22-internal-2023-09-17-1736580.daniel.daugherty.8315880forjdk22.git&lt;br/&gt;
Deadlock Detection:&lt;br/&gt;
&lt;br/&gt;
No deadlocks found.&lt;br/&gt;
&lt;br/&gt;
&amp;quot;main&amp;quot; #1 prio=5 tid=0x00007f5b6802b560 nid=590802 runnable [0x00007f5b6de81000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: RUNNABLE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread state: _thread_in_vm&lt;br/&gt;
&amp;nbsp;- java.util.stream.Nodes.builder() @bci=0, line=179 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- java.util.stream.Nodes.builder(long, java.util.function.IntFunction) @bci=26, line=169 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- java.util.stream.ReferencePipeline.makeNodeBuilder(long, java.util.function.IntFunction) @bci=2, line=135 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- java.util.stream.AbstractPipeline.evaluate(java.util.Spliterator, boolean, java.util.function.IntFunction) @bci=23, line=573 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- java.util.stream.AbstractPipeline.evaluateToArrayNode(java.util.function.IntFunction) @bci=74, line=260 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- java.util.stream.ReferencePipeline.toArray(java.util.function.IntFunction) @bci=4, line=616 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- jdk.internal.jshell.tool.JShellTool$Options.selectOptions(java.util.function.Predicate) @bci=35, line=326 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- jdk.internal.jshell.tool.JShellTool$Options.remoteVmOptions() @bci=6, line=330 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- jdk.internal.jshell.tool.JShellTool.resetState() @bci=148, line=1106 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- jdk.internal.jshell.tool.JShellTool.start(java.lang.String[]) @bci=44, line=955 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- jdk.internal.jshell.tool.JShellToolBuilder.start(java.lang.String[]) @bci=5, line=261 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- jdk.internal.jshell.tool.JShellToolProvider.main(java.lang.String[]) @bci=4, line=120 (Interpreted frame)&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
jhsdb jstack stderr:&lt;br/&gt;
&lt;br/&gt;
###### End of all output for iteration 1 which took 2711ms&lt;br/&gt;
[2023-09-17T22:21:59.781166361Z] Waiting for completion for process 590855&lt;br/&gt;
[2023-09-17T22:21:59.781288311Z] Waiting for completion finished for process 590855&lt;br/&gt;
###### Starting jstack iteration 2 against 590799&lt;br/&gt;
[2023-09-17T22:21:59.799234929Z] Gathering output for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.895444885Z] Waiting for completion for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.895737860Z] Waiting for completion finished for process 591292&lt;br/&gt;
Output and diagnostic info for process 591292 was saved into &amp;#39;pid-591292-output.log&amp;#39;&lt;br/&gt;
jhsdb jstack stdout:&lt;br/&gt;
Attaching to process ID 590799, please wait...&lt;br/&gt;
Debugger attached successfully.&lt;br/&gt;
Server compiler detected.&lt;br/&gt;
JVM version is 22-internal-2023-09-17-1736580.daniel.daugherty.8315880forjdk22.git&lt;br/&gt;
Deadlock Detection:&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
jhsdb jstack stderr:&lt;br/&gt;
java.lang.InternalError: We should have found a thread that owns the anonymous lock&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.owningThreadFromMonitor(Threads.java:244)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:88)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)&lt;br/&gt;
&lt;br/&gt;
###### End of all output for iteration 2 which took 2112ms&lt;br/&gt;
[2023-09-17T22:22:01.896570437Z] Waiting for completion for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.896724810Z] Waiting for completion finished for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.896844778Z] Waiting for completion for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.896938326Z] Waiting for completion finished for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.910460800Z] Waiting for completion for process 591292&lt;br/&gt;
[2023-09-17T22:22:01.910652533Z] Waiting for completion finished for process 591292&lt;br/&gt;
[JShell] |  Welcome to JShell -- Version 22-internal&lt;br/&gt;
[JShell] |  For an introduction type: /help intro&lt;br/&gt;
[JShell] |  Goodbye&lt;br/&gt;
jshell Output: |  Welcome to JShell -- Version 22-internal&lt;br/&gt;
|  For an introduction type: /help intro&lt;br/&gt;
|  Goodbye&lt;br/&gt;
&lt;br/&gt;
jshell&amp;gt; &lt;br/&gt;
----------System.err:(40/2464)----------&lt;br/&gt;
&amp;nbsp;stdout: [Attaching to process ID 590799, please wait...&lt;br/&gt;
Debugger attached successfully.&lt;br/&gt;
Server compiler detected.&lt;br/&gt;
JVM version is 22-internal-2023-09-17-1736580.daniel.daugherty.8315880forjdk22.git&lt;br/&gt;
Deadlock Detection:&lt;br/&gt;
&lt;br/&gt;
];&lt;br/&gt;
&amp;nbsp;stderr: [java.lang.InternalError: We should have found a thread that owns the anonymous lock&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.owningThreadFromMonitor(Threads.java:244)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:88)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)&lt;br/&gt;
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)&lt;br/&gt;
]&lt;br/&gt;
&amp;nbsp;exitValue = 1&lt;br/&gt;
&lt;br/&gt;
[JShell] jshell&amp;gt; &lt;br/&gt;
java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]&lt;br/&gt;
	at JStackStressTest.testjstack(JStackStressTest.java:78)&lt;br/&gt;
	at JStackStressTest.main(JStackStressTest.java:107)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1570)&lt;br/&gt;
Caused by: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]&lt;br/&gt;
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)&lt;br/&gt;
	at JStackStressTest.testjstack(JStackStressTest.java:70)&lt;br/&gt;
	... 5 more&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]&lt;br/&gt;
JavaTest Message: shutting down test&lt;br/&gt;
&lt;br/&gt;
STATUS:Failed.`main&amp;#39; threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]&lt;br/&gt;
----------rerun:(38/7573)*----------&lt;br/&gt;
&lt;br/&gt;
This error mesg from jhsdb:&lt;br/&gt;
&lt;br/&gt;
&amp;gt; jhsdb jstack stderr:&lt;br/&gt;
&amp;gt; java.lang.InternalError: We should have found a thread that owns the&lt;br/&gt;
&amp;gt; anonymous lock&lt;br/&gt;
&lt;br/&gt;
could indicate a bug in the LM_LIGHTWEIGHT locking code.&lt;br/&gt;
I have not seen any sightings of this test failing like this in&lt;br/&gt;
the Oracle CIs. I&amp;#39;m starting this bug off in hotspot/runtime for&lt;br/&gt;
initial triage.</description>
                <environment></environment>
        <key id="5110463">JDK-8316401</key>
            <summary>sun/tools/jhsdb/JStackStressTest.java failed with &quot;InternalError: We should have found a thread that owns the anonymous lock&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rkennke">Roman Kennke</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>LM_LIGHTWEIGHT</label>
                            <label>amazon-interest</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>lilliput</label>
                            <label>tier5</label>
                            <label>tier6</label>
                    </labels>
                <created>Sun, 17 Sep 2023 19:00:17 -0700</created>
                <updated>Mon, 8 Apr 2024 01:21:38 -0700</updated>
                            <resolved>Fri, 29 Sep 2023 04:15:21 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                    <version>repo-lilliput-17</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14663277" author="roboduke" created="Fri, 5 Apr 2024 08:36:49 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/lilliput-jdk17u/pull/71&quot;&gt;https://git.openjdk.org/lilliput-jdk17u/pull/71&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-05 15:31:29 +0000</comment>
                            <comment id="14628830" author="roboduke" created="Fri, 24 Nov 2023 05:39:17 -0800"  >[jdk21u-fix-request] Approval Request from Roman Kennke&lt;br/&gt;
The fix relaxes an exception in the SA related to lightweight locking to print a warning instead. The fix is in mainline since end of september and has not accrued a bug-tail. Lightweight locking has been implemented in JDK21 but is not enabled by default.</comment>
                            <comment id="14628829" author="roboduke" created="Fri, 24 Nov 2023 05:30:49 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/402&quot;&gt;https://git.openjdk.org/jdk21u/pull/402&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-24 13:25:26 +0000</comment>
                            <comment id="14614938" author="dukebot" created="Fri, 29 Sep 2023 04:15:20 -0700"  >Changeset: bd918f49&lt;br/&gt;
Author:    Roman Kennke &amp;lt;&lt;a href=&apos;mailto:rkennke@openjdk.org&apos;&gt;rkennke@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-09-29 11:14:13 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/bd918f49d29bcbc699e07b4ef8d23cfe1abd32df&quot;&gt;https://git.openjdk.org/jdk/commit/bd918f49d29bcbc699e07b4ef8d23cfe1abd32df&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14614560" author="dholmes" created="Wed, 27 Sep 2023 21:40:48 -0700"  >Yep sorry that is what I meant.</comment>
                            <comment id="14614543" author="cjplummer" created="Wed, 27 Sep 2023 19:15:02 -0700"  >&amp;gt;  So I think all we can do here in this JBS issue is change the error message to something less dramatic. &lt;br/&gt;
&lt;br/&gt;
There error message isn&amp;#39;t the problem. It&amp;#39;s the exception being thrown. So the fix is don&amp;#39;t throw the exception and instead provide just the error (or warning) message. </comment>
                            <comment id="14614495" author="dholmes" created="Wed, 27 Sep 2023 15:12:38 -0700"  >Thanks [~dlong] I had missed that! As Chris says this is just an intermediate state that we happen to observe. I&amp;#39;m wondering though whether we can detect that a GC is in progress and so report the owner can&amp;#39;t be located rather than we have an error.&lt;br/&gt;
&lt;br/&gt;
In theory we could teach the SA to look for forwarding pointers but I&amp;#39;m not sure it is worth the effort - we need to examine the internals of every object the lockStacks. And we would need to check in both directions. It may also be something that is GC specific.&lt;br/&gt;
&lt;br/&gt;
So I think all we can do here in this JBS issue is change the error message to something less dramatic.</comment>
                            <comment id="14614396" author="cjplummer" created="Wed, 27 Sep 2023 08:21:21 -0700"  >[~dholmes]For EventSetImpl objects, elementData and pkt fields being the same is  sure sign that they are the same objects.&lt;br/&gt;
&lt;br/&gt;
[~dlong] Well, not missing, but GC hasn&amp;#39;t gotten to it yet. This is the type of situation that can arise what when SA inspects the JVM while it&amp;#39;s in the middle of a GC.</comment>
                            <comment id="14614236" author="dlong" created="Tue, 26 Sep 2023 23:40:51 -0700"  >Nice catch.  The mark word of the first object has the same value 0xd050ce33 as the second object, so it appears the first is being forwarded to the second.  Does this mean there is a missing resolve() call?</comment>
                            <comment id="14614220" author="dholmes" created="Tue, 26 Sep 2023 21:30:22 -0700"  >[~cjplummer] had a theory that we may be inspecting things during a GC and so the target oop may have been moved, but the move is not yet reflected in the oop stored in the lockStack - hence it is not found. This seems to be the case. I added some diagnostics to print information about the target object and the threads and their lockstacks at the time of the failure. Here is the object we are looking for:&lt;br/&gt;
&lt;br/&gt;
Oop for com/sun/tools/jdi/EventSetImpl @ 0x00000000d07fd688 (object size = 40)&lt;br/&gt;
&amp;nbsp;- _mark:	 {0} :3494956595&lt;br/&gt;
&amp;nbsp;- _metadata._compressed_klass:	 {8} :InstanceKlass for com/sun/tools/jdi/EventSetImpl&lt;br/&gt;
&amp;nbsp;- modCount:	 {12} :0&lt;br/&gt;
&amp;nbsp;- elementData:	 {20} :ObjArray @ 0x00000000d004ac18&lt;br/&gt;
&amp;nbsp;- size:	 {16} :0&lt;br/&gt;
&amp;nbsp;- vm:	 {28} :Oop for com/sun/tools/jdi/VirtualMachineImpl @ 0x00000000d076a9f0&lt;br/&gt;
&amp;nbsp;- pkt:	 {32} :Oop for com/sun/tools/jdi/Packet @ 0x00000000d07fd5f8&lt;br/&gt;
&amp;nbsp;- suspendPolicy:	 {24} :0&lt;br/&gt;
&amp;nbsp;- internalEventSet:	 {36} :null&lt;br/&gt;
&lt;br/&gt;
and here is the lockStack[0] entry for the &amp;quot;JDI Internal Event Handler&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Oop for com/sun/tools/jdi/EventSetImpl @ 0x00000000d050ce30 (object size = 40)&lt;br/&gt;
&amp;nbsp;- _mark:	 {0} :2143279601282&lt;br/&gt;
&amp;nbsp;- _metadata._compressed_klass:	 {8} :InstanceKlass for com/sun/tools/jdi/EventSetImpl&lt;br/&gt;
&amp;nbsp;- modCount:	 {12} :0&lt;br/&gt;
&amp;nbsp;- elementData:	 {20} :ObjArray @ 0x00000000d004ac18&lt;br/&gt;
&amp;nbsp;- size:	 {16} :0&lt;br/&gt;
&amp;nbsp;- vm:	 {28} :Oop for com/sun/tools/jdi/VirtualMachineImpl @ 0x00000000d076a9f0&lt;br/&gt;
&amp;nbsp;- pkt:	 {32} :Oop for com/sun/tools/jdi/Packet @ 0x00000000d07fd5f8&lt;br/&gt;
&amp;nbsp;- suspendPolicy:	 {24} :0&lt;br/&gt;
&amp;nbsp;- internalEventSet:	 {36} :null&lt;br/&gt;
&lt;br/&gt;
Whilst the &amp;quot;addresses&amp;quot; of these two oops are different, the fields appear to have the same values, indicating they are in fact the same object. Also note that the oop we are looking for has a markWord that indicates that the oop has been marked by the GC.</comment>
                            <comment id="14613938" author="dholmes" created="Mon, 25 Sep 2023 19:11:29 -0700"  >Ah! Now I understand. So not at a safepoint but in a fixed state.&lt;br/&gt;
&lt;br/&gt;
In that case this is not a SA issue as the anonymous owner should indeed be found.</comment>
                            <comment id="14613935" author="cjplummer" created="Mon, 25 Sep 2023 19:02:27 -0700"  >There is no snapshot. The process is suspended and its thread and memory state are analyzed. There is no execution of the process while this is done. If SA resumes the process (which is what SA calls a &amp;quot;detach&amp;quot;), then SA drops all knowledge it had of the process that it learned while it was suspended, and will start from scratch the next time the process is attached to and suspended again.</comment>
                            <comment id="14613932" author="dholmes" created="Mon, 25 Sep 2023 18:50:40 -0700"  >If the thread snapshot and heap snapshot are not taken together atomically - which they are not for a live process - then the two can easily be inconsistent with each other. In that case any &amp;quot;errors&amp;quot; should not produce warnings because there is nothing (likely) wrong with the application code and so nothing for the end user to fix based on the warning. The flaw is in the SA methodology when applied to live processes.</comment>
                            <comment id="14613931" author="cjplummer" created="Mon, 25 Sep 2023 18:46:37 -0700"  >It is not (usually) at a safepoint, and it does (usually) still work well. However, the whole point of this test is to at least sometime have the JVM in a state where it can&amp;#39;t work, and make sure there is some sort of reasonable or graceful failure. The SA jstack code is suppose to catch these failures and print a warning message, and not allow the failure exception to propagate, resulting in an exit(1).&lt;br/&gt;
&lt;br/&gt;
Note SA is mostly meant for debugging a hung or crashed process (core dump) where there is little else that can be done but attempt to get data from a JVM whose current state my be inconsistent. This is very different from the jcmd jstack or attach API stackdump (dumpstack?) support, which is done on a running JVM that can be forced to safepoint (if it is not stuck) before dumping the stack. If the process is stuck, then you are back to using SA.</comment>
                            <comment id="14613930" author="dholmes" created="Mon, 25 Sep 2023 18:06:07 -0700"  >[~cjplummer] surely jstack does its thread dump and deadlock detection at a safepoint? It could not reasonably work otherwise.</comment>
                            <comment id="14613715" author="cjplummer" created="Mon, 25 Sep 2023 10:41:50 -0700"  >SA makes a best effort to do whatever the user requested, with the understanding that there may be inaccuracies or errors (exceptions) due to the inconsistent state of the JVM. So it has a &amp;quot;try and and prepare to fail approach&amp;quot;. If it had a &amp;quot;don&amp;#39;t try because it might not be safe approach&amp;quot;, most of the SA functionality would be eliminated.</comment>
                            <comment id="14613684" author="roboduke" created="Mon, 25 Sep 2023 09:26:16 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15907&quot;&gt;https://git.openjdk.org/jdk/pull/15907&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-25 16:16:51 +0000</comment>
                            <comment id="14613674" author="rkennke" created="Mon, 25 Sep 2023 08:55:05 -0700"  >Ok, that is interesting to know. So I think that this particular code path should not iterate threads to begin with. If it encounters an anon-locked object, it should just say so (or ignore it). Iterating threads outside of a safepoint might not only lead to wrong results, IOW, threads would change their locked state at any time, but even worse, they may go out of existence or new threads may appear, possibly leading to crashes or other errors.&lt;br/&gt;
&lt;br/&gt;
It looks to me like this code is only ever called from printing code. And since it&amp;#39;s unprecise to begin with for the above mentioned reasons, even with the old stack-locking impl, we could simply remove the line that throws the exception and return null instead.&lt;br/&gt;
&lt;br/&gt;
It looks to me like the old stack-locking code (in owningThreadFromMonitor(Address)) also iterates threads. Is that safe (enough)? In particular, when new threads are added to the threads list or threads cease to exist?</comment>
                            <comment id="14613666" author="cjplummer" created="Mon, 25 Sep 2023 08:16:07 -0700"  >This particular test is one that does attach to an active process, and then does a stack dump. SA is expected to have issues on occasion with the stack dump, but SA to deal with them gracefully, and not produce &amp;quot;Error&amp;quot; messages or exit with an exception. So if anything the issue here might just be that the error message and exception is unexpected, but the error itself is not. SA might just need to learn to expect this issue during the deadlock detection.</comment>
                            <comment id="14613665" author="cjplummer" created="Mon, 25 Sep 2023 08:08:22 -0700"  >I should add that in order to avoid many test failures due to this, we try to make sure the test&amp;#39;s debuggee process has reach some sort of stable point, and is hopefully idle at the time of the attach.</comment>
                            <comment id="14613663" author="cjplummer" created="Mon, 25 Sep 2023 08:06:37 -0700"  >[~rkennke]&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I am trying to reproduce. In the meantime, can you confirm if the relevant SA code runs only at a safepoint? Because if not, then this would be a race. &lt;br/&gt;
&lt;br/&gt;
I can confirm that that is NOT the case. SA can attach to the JVM at any point during the JVM&amp;#39;s execution. Hotspot data structures can possibly be in an inconsistent state when the attach is done (or the core is dump). SA attempts to at least detect errors and catch exceptions that arise from this, but often falls on it&amp;#39;s face when the timing of the attach is &amp;quot;unfortunate&amp;quot;.</comment>
                            <comment id="14613659" author="rkennke" created="Mon, 25 Sep 2023 08:01:58 -0700"  >Is there anything special needed to reproduce the failure? I&amp;#39;m trying:&lt;br/&gt;
CONF=linux-x86_64-server-fastdebug make run-test TEST=&amp;#39;sun/tools/jhsdb/JStackStressTest.java&amp;#39;&lt;br/&gt;
&lt;br/&gt;
But several attempts did not fail.</comment>
                            <comment id="14613652" author="rkennke" created="Mon, 25 Sep 2023 07:39:42 -0700"  >I am trying to reproduce. In the meantime, can you confirm if the relevant SA code runs only at a safepoint? Because if not, then this would be a race.</comment>
                            <comment id="14613416" author="dholmes" created="Sun, 24 Sep 2023 16:57:39 -0700"  >FWIW we are starting to see a number of new bugs being filed with regard to broken locking with the new locking mode ref: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316746&quot; title=&quot;Top of lock-stack does not match the unlocked object&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316746&quot;&gt;&lt;strike&gt;JDK-8316746&lt;/strike&gt;&lt;/a&gt;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316751&quot; title=&quot;IllegalMonitorStateException: current thread is not owner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316751&quot;&gt;&lt;strike&gt;JDK-8316751&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14613243" author="dcubed" created="Fri, 22 Sep 2023 09:46:09 -0700"  >[~mseledtsov]&lt;br/&gt;
&amp;gt; it looks like SA might need to know about anonymous owners for light-weight locking mode.&lt;br/&gt;
&lt;br/&gt;
Based on this part of the error mesg:&lt;br/&gt;
&amp;gt; We should have found a thread that owns the anonymous lock&lt;br/&gt;
&lt;br/&gt;
I think we have at least some support for LM_LIGHTWEIGHT locking&lt;br/&gt;
in SA. &amp;quot;anonymous lock&amp;quot; is a concept that came in with that code IIRC...</comment>
                            <comment id="14612999" author="dcubed" created="Thu, 21 Sep 2023 14:12:53 -0700"  >The fix for:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8315880&quot; title=&quot;Change LockingMode default from LM_LEGACY to LM_LIGHTWEIGHT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8315880&quot;&gt;&lt;strike&gt;JDK-8315880&lt;/strike&gt;&lt;/a&gt; Change LockingMode default from LM_LEGACY to LM_LIGHTWEIGHT&lt;br/&gt;
&lt;br/&gt;
was integrated in jdk-22+17-1240 and this failure in the JDK22 CI happened after&lt;br/&gt;
that integration.</comment>
                            <comment id="14612367" author="cjplummer" created="Tue, 19 Sep 2023 14:59:17 -0700"  >I don&amp;#39;t believe this relates to the reason the test was problem listed. More likely it has to do with using LM_LIGHTWEIGHT.&lt;br/&gt;
&lt;br/&gt;
I wonder if this is related to the problem seen in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316417&quot; title=&quot;ObjectMonitorIterator does not return the most recent monitor and is incorrect if no monitors exists&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316417&quot;&gt;&lt;strike&gt;JDK-8316417&lt;/strike&gt;&lt;/a&gt;, which is currently out for review. Although &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316417&quot; title=&quot;ObjectMonitorIterator does not return the most recent monitor and is incorrect if no monitors exists&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316417&quot;&gt;&lt;strike&gt;JDK-8316417&lt;/strike&gt;&lt;/a&gt; was only noticed by observation, not any test failure, I wonder if using LM_LIGHTWEIGHT has made it start to cause a problem with this test, and fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316417&quot; title=&quot;ObjectMonitorIterator does not return the most recent monitor and is incorrect if no monitors exists&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316417&quot;&gt;&lt;strike&gt;JDK-8316417&lt;/strike&gt;&lt;/a&gt; will fix this CR also.&lt;br/&gt;
&lt;br/&gt;
UPDATE: Actually now I don&amp;#39;t think this issue will be addressed by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316417&quot; title=&quot;ObjectMonitorIterator does not return the most recent monitor and is incorrect if no monitors exists&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316417&quot;&gt;&lt;strike&gt;JDK-8316417&lt;/strike&gt;&lt;/a&gt;. I think Mikhailo is closer to pointing out the underlying issue.</comment>
                            <comment id="14612315" author="mseledtsov" created="Tue, 19 Sep 2023 11:16:37 -0700"  >Runtime Triage: change the sub-component to SA because it looks like SA might need to know about anonymous owners for light-weight locking mode.</comment>
                            <comment id="14611906" author="dcubed" created="Mon, 18 Sep 2023 14:53:01 -0700"  >Thanks for the heads up!</comment>
                            <comment id="14611903" author="dholmes" created="Mon, 18 Sep 2023 14:41:58 -0700"  >Note this test was only just removed from the ProblemList - see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8316148&quot; title=&quot;Remove sun/tools/jhsdb/JStackStressTest.java from problem list&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8316148&quot;&gt;&lt;strike&gt;JDK-8316148&lt;/strike&gt;&lt;/a&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5115499">JDK-8320783</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5110162">JDK-8316148</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110479">JDK-8316417</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5109863">JDK-8315880</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i335dv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17354"><![CDATA[b18]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="2072"><![CDATA[svc-agent]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>