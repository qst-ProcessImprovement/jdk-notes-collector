<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 15:04:49 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8299074] nmethod marked for deoptimization is not deoptimized</title>
                <link>https://bugs.openjdk.org/browse/JDK-8299074</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Has only been seen on linux-aarch64 so far, debug versions seem to be not affected. The VM had additional arguments:&lt;br/&gt;
&lt;br/&gt;
-Xcomp -XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=1&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;ve got a stack trace:&lt;br/&gt;
&lt;br/&gt;
java.lang.Error: Exception occurred during test execution&lt;br/&gt;
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:42)&lt;br/&gt;
	at compiler.codecache.stress.UnexpectedDeoptimizationAllTest.main(UnexpectedDeoptimizationAllTest.java:67)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
Caused by: java.lang.NullPointerException: Cannot invoke &amp;quot;[Ljava.lang.Class;.clone()&amp;quot; because &amp;quot;this.parameterTypes&amp;quot; is null&lt;br/&gt;
	at java.base/java.lang.reflect.Method.getParameterTypes(Method.java:316)&lt;br/&gt;
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.slotCount(MethodHandleAccessorFactory.java:348)&lt;br/&gt;
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.useNativeAccessor(MethodHandleAccessorFactory.java:332)&lt;br/&gt;
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(MethodHandleAccessorFactory.java:96)&lt;br/&gt;
	at java.base/jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(ReflectionFactory.java:200)&lt;br/&gt;
	at java.base/java.lang.reflect.Constructor.acquireConstructorAccessor(Constructor.java:547)&lt;br/&gt;
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:497)&lt;br/&gt;
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)&lt;br/&gt;
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:304)&lt;br/&gt;
	at java.base/java.lang.Class.newInstance(Class.java:685)&lt;br/&gt;
	at compiler.codecache.stress.Helper$TestCase.get(Helper.java:124)&lt;br/&gt;
	at compiler.codecache.stress.CodeCacheStressRunner.test(CodeCacheStressRunner.java:47)&lt;br/&gt;
	at jdk.test.lib.TimeLimitedRunner.call(TimeLimitedRunner.java:71)&lt;br/&gt;
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:40)&lt;br/&gt;
	... 5 more&lt;br/&gt;
&lt;br/&gt;
Different failure mode:&lt;br/&gt;
&lt;br/&gt;
java.lang.Error: Exception occurred during test execution&lt;br/&gt;
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:42)&lt;br/&gt;
	at compiler.codecache.stress.UnexpectedDeoptimizationAllTest.main(UnexpectedDeoptimizationAllTest.java:67)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
Caused by: java.lang.NullPointerException: Cannot read the array length because &amp;quot;this.parameterTypes&amp;quot; is null&lt;br/&gt;
	at java.base/java.lang.reflect.Method.getParameterCount(Method.java:323)&lt;br/&gt;
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.useNativeAccessor(MethodHandleAccessorFactory.java:324)&lt;br/&gt;
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(MethodHandleAccessorFactory.java:96)&lt;br/&gt;
	at java.base/jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(ReflectionFactory.java:200)&lt;br/&gt;
	at java.base/java.lang.reflect.Constructor.acquireConstructorAccessor(Constructor.java:547)&lt;br/&gt;
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:497)&lt;br/&gt;
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)&lt;br/&gt;
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:304)&lt;br/&gt;
	at java.base/java.lang.Class.newInstance(Class.java:685)&lt;br/&gt;
	at compiler.codecache.stress.Helper$TestCase.get(Helper.java:124)&lt;br/&gt;
	at compiler.codecache.stress.CodeCacheStressRunner.test(CodeCacheStressRunner.java:47)&lt;br/&gt;
	at jdk.test.lib.TimeLimitedRunner.call(TimeLimitedRunner.java:71)&lt;br/&gt;
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:40)</description>
                <environment></environment>
        <key id="5090079">JDK-8299074</key>
            <summary>nmethod marked for deoptimization is not deoptimized</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thartmann">Tobias Hartmann</assignee>
                                    <reporter username="enikitin">Evgeny Nikitin</reporter>
                        <labels>
                            <label>atr</label>
                            <label>intermittent</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-21</label>
                    </labels>
                <created>Mon, 19 Dec 2022 23:24:06 -0800</created>
                <updated>Tue, 7 Feb 2023 00:03:18 -0800</updated>
                            <resolved>Wed, 18 Jan 2023 00:17:13 -0800</resolved>
                                    <version>17</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14555986" author="rehn" created="Tue, 31 Jan 2023 01:19:55 -0800"  >Before bug fix did we do 10 deopt handshakes during jetty startup benchmark, now 39 instead.&lt;br/&gt;
I think the best option is do somekind of epoch based deoptimization and remove locks held while performing the actual stack deopt.</comment>
                            <comment id="14553961" author="thartmann" created="Tue, 24 Jan 2023 01:31:03 -0800"  >Yes, [~rehn] is investigating.</comment>
                            <comment id="14553955" author="mbaesken" created="Tue, 24 Jan 2023 01:11:25 -0800"  >WIth changing the test timeout to&lt;br/&gt;
- * @run driver compiler.jsr292.ContinuousCallSiteTargetChange&lt;br/&gt;
+ * @run driver/timeout=1500 compiler.jsr292.ContinuousCallSiteTargetChange&lt;br/&gt;
&lt;br/&gt;
we do not observe the issue any longer. But I guess with the startup regressions observed and reported in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300926&quot; title=&quot;Several startup regressions  ~6-70% in 21-b6 all platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300926&quot;&gt;&lt;strike&gt;JDK-8300926&lt;/strike&gt;&lt;/a&gt; ,   you plan some kind of fix so adjusting the test timeout is not desired ?&lt;br/&gt;
</comment>
                            <comment id="14553931" author="thartmann" created="Mon, 23 Jan 2023 23:55:34 -0800"  >[~mbaesken], thanks for the details, we observed the issue as well now, see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300926&quot; title=&quot;Several startup regressions  ~6-70% in 21-b6 all platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300926&quot;&gt;&lt;strike&gt;JDK-8300926&lt;/strike&gt;&lt;/a&gt;. I&amp;#39;ll take a look.</comment>
                            <comment id="14552736" author="mbaesken" created="Thu, 19 Jan 2023 06:04:56 -0800"  >We only observed the timeouts in our fastdebug nightly tests, not in the  release nightly tests. So I think most likely with even higher timeouts the test would come to a successful end as well in fastdebug.&lt;br/&gt;
However also in the release nightly tests  compiler/jsr292/ContinuousCallSiteTargetChange.java  got much slower compared to the previous days (factor  20 - 100, dependent on platform and build type).</comment>
                            <comment id="14552698" author="thartmann" created="Thu, 19 Jan 2023 04:07:24 -0800"  >I think it could be that we are now calling Deoptimization::deoptimize_all_marked more often in scenarios like ContinuousCallSiteTargetChange.java where multiple threads mark nmethods for deoptimization. That could of course affect the tests runtime negatively due to the overhead of handshakes etc.&lt;br/&gt;
&lt;br/&gt;
We haven&amp;#39;t seen any timeouts with that test yet though. Can you reproduce it and is the test just slower or running forever?</comment>
                            <comment id="14552691" author="mbaesken" created="Thu, 19 Jan 2023 03:54:31 -0800"  >We see today some timeouts in the test compiler/jsr292/ContinuousCallSiteTargetChange.java . Could this be related ?&lt;br/&gt;
(some timeout issues of this test were addressed in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8234146&quot;&gt;https://bugs.openjdk.org/browse/JDK-8234146&lt;/a&gt; previously)</comment>
                            <comment id="14552218" author="dukebot" created="Wed, 18 Jan 2023 00:17:11 -0800"  >Changeset: 66f7387b&lt;br/&gt;
Author:    Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-18 08:15:19 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/66f7387b5ffa53861b92b068fb9832fc433d9f79&quot;&gt;https://git.openjdk.org/jdk/commit/66f7387b5ffa53861b92b068fb9832fc433d9f79&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14551452" author="roboduke" created="Mon, 16 Jan 2023 07:58:24 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12012&quot;&gt;https://git.openjdk.org/jdk/pull/12012&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-16 15:51:28 +0000</comment>
                            <comment id="14550990" author="thartmann" created="Fri, 13 Jan 2023 04:23:17 -0800"  >Thanks Robbin, I think I&amp;#39;ll go with the solution of calling Deoptimization::deoptimize_all_marked() when we observed a marked nmethod (no matter if we marked it ourselves or another thread did). I&amp;#39;ll look at the other methods as well.</comment>
                            <comment id="14550953" author="rehn" created="Fri, 13 Jan 2023 00:47:45 -0800"  >I find only DependencyContext that consider if the method is already marked or not.&lt;br/&gt;
Thus can return 0 if the method is already marked and then caller skips calling  Deoptimization::deoptimize_all_marked().&lt;br/&gt;
If the caller now assumes that the methods are already deoptimiaezd we have a bug.&lt;br/&gt;
&lt;br/&gt;
I find these suspicious places:&lt;br/&gt;
MethodHandles::flush_dependent_nmethods()&lt;br/&gt;
MHN_clearCallSiteContext&lt;br/&gt;
CodeCache::flush_dependents_on&lt;br/&gt;
&lt;br/&gt;
Non-problematic use-cases, but if someone clever adds a check to already marked it may create a bug:&lt;br/&gt;
CodeCache::flush_dependents_on_method</comment>
                            <comment id="14550949" author="rehn" created="Fri, 13 Jan 2023 00:30:40 -0800"  >It seems like logical issue to assume that something marked for deopt can be assumed to also *be* deopt.&lt;br/&gt;
(probably me that introduced this logical issue since we used to barrier this with a safepoint)&lt;br/&gt;
I think your assessment for the bug in question is correct and your suggested fix would fix this case.&lt;br/&gt;
&lt;br/&gt;
But anytime the code make Deoptimization::deoptimize_all_marked() depended on if we marked anything and do not consider if it was already marked we could have a bug.&lt;br/&gt;
&lt;br/&gt;
So for a more general solution we should either always call Deoptimization::deoptimize_all_marked(), I don&amp;#39;t think that would be noticeable performance-wise in general workload (maybe in some test).&lt;br/&gt;
&lt;br/&gt;
A better solution might be to make the call to Deoptimization::deoptimize_all_marked() dependent on if we marked or anyone else marked the nmethod we are concerned about.&lt;br/&gt;
&lt;br/&gt;
Yes could also use a lock and serialize the marked+deopt stage, but I&amp;#39;m a bit worried that when we do thread local deopts would need to grab the global lock.</comment>
                            <comment id="14550758" author="thartmann" created="Thu, 12 Jan 2023 07:55:45 -0800"  >The problem is a race condition between one thread repeatedly calling WB_DeoptimizeAll and the main thread checking nmethod dependencies on class loading and also attempting marking/deoptimization of nmethods due to dependency violations. Details below.&lt;br/&gt;
&lt;br/&gt;
Thread1: useNativeAccessor is compiled under the assumption that java.lang.reflect.Executable has only one implementer java.lang.reflect.Method. A corresponding dependency is registered in the nmethod.&lt;br/&gt;
&lt;br/&gt;
Thread2: Calls Whitebox API method WB_DeoptimizeAll -&amp;gt; CodeCache::mark_all_nmethods_for_deoptimization() that marks useNativeAccessor for deoptimization. &lt;br/&gt;
&lt;br/&gt;
Thread1: Triggers class loading of java.lang.reflect.Constructor and CodeCache::flush_dependents_on -&amp;gt; CodeCache::mark_for_deoptimization -&amp;gt; ... -&amp;gt; DependencyContext::mark_dependent_nmethods detects that useNativeAccessor needs to be deoptimized now that java.lang.reflect.Executable has more than one implementer. However, the nmethod is already marked for deoptimization (most nmethods are) and therefore ignored. The marked counter is 0 and therefore Deoptimization::deoptimize_all_marked() is not executed either. The thread continues execution and ends up crashing because a java.lang.reflect.Constructor object is passed to compiled useNativeAccessor which can not handle it.&lt;br/&gt;
&lt;br/&gt;
Thread2: Is still in WB_DeoptimizeAll, marking nmethods for deoptimization but didn&amp;#39;t get a chance to call Deoptimization::deoptimize_all_marked() yet.&lt;br/&gt;
&lt;br/&gt;
Before &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8221734&quot; title=&quot;Deoptimize with handshakes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8221734&quot;&gt;&lt;strike&gt;JDK-8221734&lt;/strike&gt;&lt;/a&gt; in JDK 13, WB_DeoptimizeAll acquired the Compile_lock but it got removed:&lt;br/&gt;
&lt;a href=&quot;http://hg.openjdk.java.net/jdk/jdk/rev/9b70ebd131b4#l15.7&quot;&gt;http://hg.openjdk.java.net/jdk/jdk/rev/9b70ebd131b4#l15.7&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I think it should be restored. [~rehn] what do you think?</comment>
                            <comment id="14550384" author="thartmann" created="Wed, 11 Jan 2023 07:58:59 -0800"  >Updated ILW = Incorrect execution of C1 compiled code, reproducible with test that stresses deoptimization, disable CHA = HLM = P3</comment>
                            <comment id="14550382" author="thartmann" created="Wed, 11 Jan 2023 07:56:44 -0800"  >We SIGSEGV at 0x0000fffd19c45a68 in C1 compiled method &amp;#39;useNativeAccessor(Executable member)&amp;#39; (see attached hs_err_pid985220.log) because the field &amp;#39;Method::parameterTypes&amp;#39; appears to be NULL when calling &amp;#39;getParameterCount()&amp;#39; on the &amp;#39;member&amp;#39; argument:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd19c45a5c:   ldr	x1, [sp,#96]    // Load &amp;#39;member&amp;#39; argument from stack&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd19c45a60:   ldr	w0, [x1,#48]    // Load &amp;#39;parameterTypes&amp;#39; field from &amp;#39;member&amp;#39; which is a &amp;#39;Method&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd19c45a64:   lsl	x0, x0, #3      // Load parameterTypes.length&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd19c45a68:   ldr	w2, [x0,#12]        ; implicit exception: dispatches to 0x0000fffd19c45bfc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;[...]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd19c45bfc:   bl	0x0000fffd190cfc80  ; ImmutableOopMap {c_rarg1=Oop c_rarg0=Oop [96]=Oop }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;*arraylength {reexecute=0 rethrow=0 return_oop=0}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.lang.reflect.Method::&lt;a href=&apos;mailto:getParameterCount@4&apos;&gt;getParameterCount@4&lt;/a&gt; (line 323)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - jdk.internal.reflect.MethodHandleAccessorFactory::&lt;a href=&apos;mailto:useNativeAccessor@29&apos;&gt;useNativeAccessor@29&lt;/a&gt; (line 324)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;   {runtime_call throw_null_pointer_exception Runtime1 stub}&lt;br/&gt;
&lt;br/&gt;
Looking at the stack trace, &amp;#39;useNativeAccessor&amp;#39; was called with a &amp;#39;java/lang/reflect/Constructor&amp;#39; argument but we are in inlined &amp;#39;java.lang.reflect.Method::getParameterCount&amp;#39; instead of &amp;#39;java.lang.reflect.Constructor::getParameterCount&amp;#39; and therefore load garbage:&lt;br/&gt;
&lt;br/&gt;
J 510 c1 jdk.internal.reflect.MethodHandleAccessorFactory.useNativeAccessor(Ljava/lang/reflect/Executable;)Z &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt; (74 bytes)&lt;br/&gt;
J 2909 c1 jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl; &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt; (84 bytes)&lt;br/&gt;
&lt;br/&gt;
Looks like at compile time, &amp;#39;Method&amp;#39; was the only implementer of &amp;#39;Executable&amp;#39; and we therefore speculatively inlined &amp;#39;java.lang.reflect.Method::getParameterCount&amp;#39; at the virtual call site. A dependency should ensure that the nmethod is deoptimized when class loading invalidates that assumption. For some reason, that didn&amp;#39;t work in this case.&lt;br/&gt;
&lt;br/&gt;
UPDATE:&lt;br/&gt;
I verified that the dependencies are there in the nmethod:&lt;br/&gt;
&lt;br/&gt;
Dependencies:&lt;br/&gt;
Dependency of type unique_concrete_method_4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;context = *java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = {method} {0x0000000800043198} &amp;#39;getModifiers&amp;#39; &amp;#39;()I&amp;#39; in &amp;#39;java/lang/reflect/Method&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class   = java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = *{method} {0x0000000800433620} &amp;#39;getModifiers&amp;#39; &amp;#39;()I&amp;#39; in &amp;#39;java/lang/reflect/Executable&amp;#39;&lt;br/&gt;
Dependency of type unique_concrete_method_4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;context = *java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = {method} {0x00000008000434b0} &amp;#39;getParameterCount&amp;#39; &amp;#39;()I&amp;#39; in &amp;#39;java/lang/reflect/Method&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class   = java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = *{method} {0x0000000800433990} &amp;#39;getParameterCount&amp;#39; &amp;#39;()I&amp;#39; in &amp;#39;java/lang/reflect/Executable&amp;#39;&lt;br/&gt;
Dependency of type unique_concrete_method_4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;context = *java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = {method} {0x0000000800043400} &amp;#39;isVarArgs&amp;#39; &amp;#39;()Z&amp;#39; in &amp;#39;java/lang/reflect/Method&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class   = java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = {method} {0x00000008004338e0} &amp;#39;isVarArgs&amp;#39; &amp;#39;()Z&amp;#39; in &amp;#39;java/lang/reflect/Executable&amp;#39;&lt;br/&gt;
Dependency of type unique_concrete_method_4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;context = *java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = {method} {0x00000008000432a0} &amp;#39;getParameterTypes&amp;#39; &amp;#39;()[Ljava/lang/Class;&amp;#39; in &amp;#39;java/lang/reflect/Method&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class   = java.lang.reflect.Executable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method  = *{method} {0x0000000800433728} &amp;#39;getParameterTypes&amp;#39; &amp;#39;()[Ljava/lang/Class;&amp;#39; in &amp;#39;java/lang/reflect/Executable&amp;#39;&lt;br/&gt;
</comment>
                            <comment id="14549279" author="thartmann" created="Fri, 6 Jan 2023 07:46:26 -0800"  >This also reproduces with JDK 19 but only with --enable-preview -DhelperVirtualThread=true which uses virtual threads in the test (Virtual Threads were added in JDK 19 b21 with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8284161&quot; title=&quot;Implementation of Virtual Threads (Preview)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8284161&quot;&gt;&lt;strike&gt;JDK-8284161&lt;/strike&gt;&lt;/a&gt;). This might therefore well be a Loom related issue.&lt;br/&gt;
&lt;br/&gt;
Attached 8299074.diff modifies the test to reproduce the issue more reliably (still needs to be executed in a loop with &amp;quot;-Xcomp -XX:TieredStopAtLevel=1&amp;quot;).</comment>
                            <comment id="14548970" author="thartmann" created="Thu, 5 Jan 2023 06:58:24 -0800"  >I can reproduce this and it fails first with JDK 20 b3 (jdk-20+3-101).&lt;br/&gt;
&lt;br/&gt;
EDIT: It also reproduces with earlier versions (1/100) but just triggers much more often after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288425&quot; title=&quot;Footprint regression due MH creation when initializing StringConcatFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288425&quot;&gt;&lt;strike&gt;JDK-8288425&lt;/strike&gt;&lt;/a&gt; in JDK 20 b3 (3/10).</comment>
                            <comment id="14546908" author="chagedorn" created="Tue, 20 Dec 2022 10:05:30 -0800"  >ILW = Test failure with C1, only on linux-aarch64 product seen so far and single test, no workaround = MLH = P4</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5092266">JDK-8300926</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4987060">JDK-8221734</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102238" name="8299074.diff" size="3392" author="thartmann" created="Sun, 8 Jan 2023 22:30:51 -0800"/>
                            <attachment id="102241" name="hs_err_pid985220.log" size="146004" author="thartmann" created="Sun, 8 Jan 2023 23:40:00 -0800"/>
                            <attachment id="102242" name="hs_err_pid987126.log" size="115666" author="thartmann" created="Sun, 8 Jan 2023 23:46:45 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zooz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>