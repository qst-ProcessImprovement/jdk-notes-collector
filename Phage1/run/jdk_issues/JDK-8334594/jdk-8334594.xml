<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:12:59 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8334594] Generational ZGC: Deadlock after OopMap rewrites in 8331572</title>
                <link>https://bugs.openjdk.org/browse/JDK-8334594</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>In one of our internal tests we have found this deadlock:&lt;br/&gt;
&lt;br/&gt;
0) Various threads are waiting for the GC to hand out freed memory.&lt;br/&gt;
&lt;br/&gt;
1) The GC is blocked on the Service_lock:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mutex::lock_without_safepoint_check()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;OopMapCache::trigger_cleanup()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZGenerationYoung::pause_relocate_start()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZGenerationYoung::collect(ZYoungType, ConcurrentGCTimer*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZDriverMinor::gc(ZDriverRequest const&amp;amp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZThread::run_service()&lt;br/&gt;
&lt;br/&gt;
2) The Service_lock is held by the ServiceThread, which is stalling because it is waiting for the GC to give it memory&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PlatformMonitor::wait(unsigned long)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZRelocateQueue::add_and_wait(ZForwarding*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZRelocate::relocate_object(ZForwarding*, zaddress_unsafe) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZUncoloredRootProcessWeakOopClosure::do_root(zaddress_unsafe*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZNMethod::nmethod_oops_do_inner(nmethod*, OopClosure*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZBarrierSetNMethod::nmethod_entry_barrier(nmethod*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JvmtiDeferredEventQueue::oops_do(OopClosure*, NMethodClosure*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// vvv Lock taken in this frame vvv  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;ServiceThread::oops_do_no_frames(OopClosure*, NMethodClosure*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZStackWatermark::process_head(void*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZStackWatermark::start_processing_impl(void*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermark::start_processing()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermark::on_safepoint()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;SafepointMechanism::process(JavaThread*, bool, bool) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;StringTable::clean_dead_entries(JavaThread*) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;StringTable::do_concurrent_work(JavaThread*)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ServiceThread::service_thread_entry</description>
                <environment></environment>
        <key id="5132237">JDK-8334594</key>
            <summary>Generational ZGC: Deadlock after OopMap rewrites in 8331572</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="stefank">Stefan Karlsson</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>genzgc</label>
                            <label>hgupdate-sync</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>regression</label>
                    </labels>
                <created>Thu, 20 Jun 2024 01:03:23 -0700</created>
                <updated>Wed, 8 Jan 2025 04:35:16 -0800</updated>
                            <resolved>Mon, 24 Jun 2024 01:49:59 -0700</resolved>
                                    <version>21</version>
                    <version>23</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14697008" author="roboduke" created="Thu, 8 Aug 2024 12:34:55 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Follow-up for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331572&quot; title=&quot;Allow using OopMapCache outside of STW GC phases&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331572&quot;&gt;&lt;strike&gt;JDK-8331572&lt;/strike&gt;&lt;/a&gt;. Applies cleanly. All tests pass.</comment>
                            <comment id="14684859" author="stefank" created="Wed, 26 Jun 2024 00:41:07 -0700"  >Post-integration triaging:&lt;br/&gt;
I(mpact)L(ikelyhood)W(orkaround) = HLH =&amp;gt; P2 (Could maybe also be HMH =&amp;gt; P1)</comment>
                            <comment id="14684099" author="roboduke" created="Mon, 24 Jun 2024 04:25:17 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/610&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/610&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-28 09:44:28 +0000</comment>
                            <comment id="14684035" author="roboduke" created="Mon, 24 Jun 2024 02:08:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19851&quot;&gt;https://git.openjdk.org/jdk/pull/19851&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-24 09:02:30 +0000</comment>
                            <comment id="14684017" author="dukebot" created="Mon, 24 Jun 2024 01:49:56 -0700"  >Changeset: 05ff3185&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-06-24 08:46:10 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/05ff3185edd25b381a97f6879f496e97b62dddc2&quot;&gt;https://git.openjdk.org/jdk/commit/05ff3185edd25b381a97f6879f496e97b62dddc2&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14683204" author="coleenp" created="Thu, 20 Jun 2024 05:37:33 -0700"  >The jvmti code was there first, and then we piled on the other cleanup actions.  They really should be separate.</comment>
                            <comment id="14683149" author="shade" created="Thu, 20 Jun 2024 02:24:25 -0700"  >&amp;gt; An alternative is to figure out if we can stop guarding _jvmti_service_queue with the Service_lock, and instead use another lock. It feels safer to not do any oop processing while holding the Service_lock. &lt;br/&gt;
&lt;br/&gt;
True. I felt queasy about taking a service lock when doing the original &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331572&quot; title=&quot;Allow using OopMapCache outside of STW GC phases&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331572&quot;&gt;&lt;strike&gt;JDK-8331572&lt;/strike&gt;&lt;/a&gt;, even for a simple notification. I thought the intention for Service lock to be a low-level lock that is almost always safe to take for a short time. This apparently violated with _jvmti_service_queue locking. &lt;br/&gt;
&lt;br/&gt;
That said, this surprise tells me there might be other/similar landmines lurking. So I now PRed the fix that side-steps the notification problem, getting us back to state before &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331572&quot; title=&quot;Allow using OopMapCache outside of STW GC phases&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331572&quot;&gt;&lt;strike&gt;JDK-8331572&lt;/strike&gt;&lt;/a&gt;. This would also allow us to cleanly backport &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331572&quot; title=&quot;Allow using OopMapCache outside of STW GC phases&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331572&quot;&gt;&lt;strike&gt;JDK-8331572&lt;/strike&gt;&lt;/a&gt; later.</comment>
                            <comment id="14683145" author="roboduke" created="Thu, 20 Jun 2024 02:16:21 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19800&quot;&gt;https://git.openjdk.org/jdk/pull/19800&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-20 09:11:04 +0000</comment>
                            <comment id="14683143" author="stefank" created="Thu, 20 Jun 2024 02:14:18 -0700"  >An alternative is to figure out if we can stop guarding _jvmti_service_queue with the Service_lock, and instead use another lock. It feels safer to not do any oop processing while holding the Service_lock.&lt;br/&gt;
&lt;br/&gt;
About if this only happens with GenZGC. I&amp;#39;m not sure. I think at least singlegen ZGC might be affected by this. Say that it runs a relocation start safepoint, and before it runs the doit_epilogue the ServiceThread runs the code above and runs out of memory. The GC never gets to the part where it can start relocate and hand back memory to the stalling ServiceThread.&lt;br/&gt;
</comment>
                            <comment id="14683135" author="shade" created="Thu, 20 Jun 2024 02:00:51 -0700"  >Have a candidate fix, will PR shortly. AFAIU, this realistically only affects GenZGC, since it overlaps service thread oop walks in one collection with GC safepoints from another concurrent collection?</comment>
                            <comment id="14683125" author="shade" created="Thu, 20 Jun 2024 01:30:31 -0700"  >Oooof. I think we can relax our opportunistic notification of `ServiceThread` in `OopMapCache::trigger_cleanup`? Something like &amp;quot;try to lock ServiceLock for notification, and give up delivering the notification if not currently possible&amp;quot;. Something like:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
void OopMapCache::trigger_cleanup() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (has_cleanup_work() &amp;amp;&amp;amp; Service_lock-&amp;gt;try_lock()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Service_lock-&amp;gt;notify_all();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Service_lock-&amp;gt;unlock();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5132833">JDK-8335140</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133151">JDK-8335417</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5137109">JDK-8338672</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5128532">JDK-8331572</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36t2r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17314"><![CDATA[b04]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>