<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:36:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8298162] Test PrintClasses hits assert when run with code that retransform classes</title>
                <link>https://bugs.openjdk.org/browse/JDK-8298162</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The test PrintClasses runs two jcmd on its own process and if run with JFR the second jcmd triggers an assertion in the JVM:&lt;br/&gt;
assert(field_holder() == ik) failed: must be already initialized to this class&lt;br/&gt;
&lt;br/&gt;
Can be reproduced with:&lt;br/&gt;
test TEST=runtime/CommandLine/PrintClasses.java JTREG=&amp;quot;JAVA_OPTIONS=-XX:StartFlightRecording&amp;quot;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5088970">JDK-8298162</key>
            <summary>Test PrintClasses hits assert when run with code that retransform classes</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="coleenp">Coleen Phillimore</assignee>
                                    <reporter username="sjohanss">Stefan Johansson</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Dec 2022 02:25:43 -0800</created>
                <updated>Tue, 3 Jan 2023 11:34:09 -0800</updated>
                            <resolved>Tue, 20 Dec 2022 06:12:11 -0800</resolved>
                                    <version>20</version>
                                    <fixVersion>20</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14546834" author="dukebot" created="Tue, 20 Dec 2022 06:12:10 -0800"  >Changeset: 03afec16&lt;br/&gt;
Author:    Coleen Phillimore &amp;lt;&lt;a href=&apos;mailto:coleenp@openjdk.org&apos;&gt;coleenp@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2022-12-20 14:09:22 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk20/commit/03afec16f8abecb845eb14db5b51eaac9131a3c8&quot;&gt;https://git.openjdk.org/jdk20/commit/03afec16f8abecb845eb14db5b51eaac9131a3c8&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14546482" author="roboduke" created="Mon, 19 Dec 2022 11:02:55 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20/pull/57&quot;&gt;https://git.openjdk.org/jdk20/pull/57&lt;/a&gt;&lt;br/&gt;
Date: 2022-12-19 18:56:57 +0000</comment>
                            <comment id="14546183" author="coleenp" created="Fri, 16 Dec 2022 11:55:48 -0800"  >I don&amp;#39;t think scratch classes should be printed.  The user shouldn&amp;#39;t be interested in them. They&amp;#39;re supposed to be removed once they&amp;#39;re not needed any longer, but maybe they haven&amp;#39;t been removed yet.&lt;br/&gt;
&lt;br/&gt;
Maybe it is better to fix the assert to allow ik-&amp;gt;is_scratch_class().  Excluding scratch classes for ClassLoaderDataGraph::classes_do() is a bit more complicated because the call in RedefineClasses wants to walk the scratch classes and there might be some MethodData cleanup that needs to walk the scratch classes from the CLD. The other callers aren&amp;#39;t interested in the scratch classes.  The scratch classes were originally left on the CLD::_klasses list so GC could find them when they pointed directly to oops.  Given that this is no longer the case, maybe we can do something different.  Not for JDK 20 though.</comment>
                            <comment id="14545388" author="mgronlun" created="Wed, 14 Dec 2022 06:24:57 -0800"  >The reason this happens when run with StartFlightRecording is that JFR retransforms a few classes on startup. This leaves scratch klasses in the ClassLoaderDataGraph.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;kb&lt;br/&gt;
&amp;nbsp;# RetAddr               : Args to Child                                                           : Call Site&lt;br/&gt;
00 00007ff8`5feada88     : 00000000`00000001 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!NtTerminateProcess+0x14&lt;br/&gt;
01 00007ff8`5ef5e0ab     : 00000000`00000001 00000000`00000000 00007ff8`5db9d3a0 000000be`95ffee20 : ntdll!RtlExitUserProcess+0xb8&lt;br/&gt;
02 00007ff8`5db005bc     : 00000000`00000001 00000000`00000000 000000be`95ffee08 00007ff8`5dbd0e40 : KERNEL32!ExitProcessImplementation+0xb&lt;br/&gt;
03 00007ff8`5db0045f     : 00000000`00000001 00000000`00000000 000000be`95ffee10 000000be`95ffee00 : ucrtbase!exit_or_terminate_process+0x44&lt;br/&gt;
04 00007fff`bf6ed170     : 0000024a`0b11d9b0 00000000`00000000 0000024a`00000000 00000000`00000001 : ucrtbase!common_exit+0x6f&lt;br/&gt;
05 00007fff`bf6e8268     : ffffffff`00000001 00007fff`00000001 00000000`00000614 00007fff`00001826 : jvm!os::win32::exit_process_or_thread+0x610 [d:\dev\github\jdk\open\src\hotspot\os\windows\os_windows.cpp @ 4142] &lt;br/&gt;
06 00007fff`bf990a09     : 000000be`e0000001 00000000`00000000 00000000`00000000 00000000`00000000 : jvm!os::abort+0x188 [d:\dev\github\jdk\open\src\hotspot\os\windows\os_windows.cpp @ 1233] &lt;br/&gt;
07 00007fff`bf990b31     : 000000be`e0000000 00007fff`bfece288 00007fff`bfece828 000000be`95fff380 : jvm!VMError::report_and_die+0xd19 [d:\dev\github\jdk\open\src\hotspot\share\utilities\vmError.cpp @ 1691] &lt;br/&gt;
08 00007fff`bef0e88d     : 0000024a`0b153370 00000000`00000000 00007fff`bfece890 0000024a`00000069 : jvm!VMError::report_and_die+0x81 [d:\dev\github\jdk\open\src\hotspot\share\utilities\vmError.cpp @ 1352] &lt;br/&gt;
09 00007fff`bf0c3e70     : 00007fff`bfece890 000000be`00000069 00007fff`bfece288 00007fff`bfece828 : jvm!report_vm_error+0x9d [d:\dev\github\jdk\open\src\hotspot\share\utilities\debug.cpp @ 287] &lt;br/&gt;
0a 00007fff`bf247036     : 000000be`95fff400 00000008`00100800 0000024a`00000006 0000024a`0b430b90 : jvm!fieldDescriptor::reinitialize+0xb0 [d:\dev\github\jdk\open\src\hotspot\share\runtime\fieldDescriptor.cpp @ 105] &lt;br/&gt;
0b 00007fff`bf24bdc6     : 00000008`00100800 000000be`95fff5c0 00000000`00000000 00007ff8`28261404 : jvm!InstanceKlass::print_nonstatic_fields+0x1e6 [d:\dev\github\jdk\open\src\hotspot\share\oops\instanceKlass.cpp @ 1687] &lt;br/&gt;
0c 00007fff`bf24d8ce     : 00000008`00100800 000000be`963ff800 0000024a`7ecaf4d0 2aaaaaa9`ff646b61 : jvm!InstanceKlass::print_on+0xcd6 [d:\dev\github\jdk\open\src\hotspot\share\oops\instanceKlass.cpp @ 3471] &lt;br/&gt;
0d 00007fff`bee4b261     : 000000be`95fff790 00000008`00100800 00000000`00000000 0000024a`0b153370 : jvm!PrintClassClosure::do_klass+0x2ce [d:\dev\github\jdk\open\src\hotspot\share\oops\instanceKlass.cpp @ 2074] &lt;br/&gt;
0e 00007fff`bee4e61f     : 0000024a`7ebea370 000000be`95fff790 00043f90`6448eec1 00007fff`bf24d5e8 : jvm!ClassLoaderData::classes_do+0x51 [d:\dev\github\jdk\open\src\hotspot\share\classfile\classLoaderData.cpp @ 341] &lt;br/&gt;
0f 00007fff`bf07a220     : 000000be`95fff790 000000be`963ff800 0000024a`6b5c6701 00007fff`bf99a7b6 : jvm!ClassLoaderDataGraph::classes_do+0x3f [d:\dev\github\jdk\open\src\hotspot\share\classfile\classLoaderDataGraph.cpp @ 385] &lt;br/&gt;
10 00007fff`bf9993c2     : 000000be`963ff648 00007fff`bec76a30 ffffffff`ffffffff 00007fff`be92cee3 : jvm!VM_PrintClasses::doit+0x30 [d:\dev\github\jdk\open\src\hotspot\share\services\diagnosticCommand.cpp @ 963] &lt;br/&gt;
11 00007fff`bf9af0de     : 000000be`963ff648 0000024a`00000001 000000be`95000000 00000000`00000000 : jvm!VM_Operation::evaluate+0xa2 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmOperations.cpp @ 72] &lt;br/&gt;
12 00007fff`bf9af433     : 0000024a`0b153370 000000be`963ff648 00007fff`c072d4a5 00007fff`c06e0548 : jvm!VMThread::evaluate_operation+0x5e [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 282] &lt;br/&gt;
13 00007fff`bf9af7a1     : 0000024a`0b153370 000000be`963ff648 00000001`0b11dc01 10000000`00000000 : jvm!VMThread::inner_execute+0x2e3 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 430] &lt;br/&gt;
14 00007fff`bf9afa69     : 0000024a`0b153370 0000024a`00000002 0000024a`00000000 0000024a`0b1535b4 : jvm!VMThread::loop+0xe1 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 496] &lt;br/&gt;
15 00007fff`bf8f7cbc     : 0000024a`0b153370 00000000`00000003 00000000`00000000 00007fff`bf8f7a94 : jvm!VMThread::run+0xd9 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 180] &lt;br/&gt;
16 00007fff`bf6ec1d8     : 0000024a`0b153370 00000000`00000000 0000024a`7eaf6ef0 00007ff8`5daf3036 : jvm!Thread::call_run+0x15c [d:\dev\github\jdk\open\src\hotspot\share\runtime\thread.cpp @ 229] &lt;br/&gt;
17 00007ff8`5db01bb2     : 0000024a`0b153370 00000000`00000000 00000000`00000000 00000000`00000000 : jvm!thread_native_entry+0x108 [d:\dev\github\jdk\open\src\hotspot\os\windows\os_windows.cpp @ 547] &lt;br/&gt;
18 00007ff8`5ef57034     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ucrtbase!thread_start&amp;lt;unsigned int (__cdecl*)(void *),1&amp;gt;+0x42&lt;br/&gt;
19 00007ff8`5fea26a1     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : KERNEL32!BaseThreadInitThunk+0x14&lt;br/&gt;
1a 00000000`00000000     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21&lt;br/&gt;
&lt;br/&gt;
void fieldDescriptor::reinitialize(InstanceKlass* ik, int index) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (_cp.is_null() || field_holder() != ik) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_cp = constantPoolHandle(Thread::current(), ik-&amp;gt;constants());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// _cp should now reference ik&amp;#39;s constant pool; i.e., ik is now field_holder.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(field_holder() == ik, &amp;quot;must be already initialized to this class&amp;quot;); &amp;lt;&amp;lt;------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
dx -r1 (*((jvm!InstanceKlassMiscStatus *)0x80010092e))&lt;br/&gt;
(*((jvm!InstanceKlassMiscStatus *)0x80010092e))                 [Type: InstanceKlassMiscStatus]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[+0x000] _flags           : 0x4202 [Type: unsigned short]&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Binary:  00000000 00000000 00000000 00000000 00000000 00000000 01000010 00000010&lt;br/&gt;
&lt;br/&gt;
Bit value 0n512 == 0x200 is set, this implies the InstanceKlass is a scratch klass. And a scratch klass constant pool holder is != ik, because it is it is pointing to the original InstanceKlass of the retransform (i.e. not the scratch klass itself).&lt;br/&gt;
&lt;br/&gt;
Should VM_PrintClasses also print scratch klasses? It happens when the &amp;quot;verbose&amp;quot; option is set.&lt;br/&gt;
&lt;br/&gt;
I could workaround this issue by updating the assert like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ik-&amp;gt;is_scratch_class() || field_holder() == ik, &amp;quot;must be already initialized to this class&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
but I think the more accurate question is whether scratch klasses should be printed at all? </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5090161">JDK-8299153</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zi2j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17413"><![CDATA[b29]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="372"><![CDATA[jvmti]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>