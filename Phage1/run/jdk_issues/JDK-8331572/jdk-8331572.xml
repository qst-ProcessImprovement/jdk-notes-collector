<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:00:09 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8331572] Allow using OopMapCache outside of STW GC phases</title>
                <link>https://bugs.openjdk.org/browse/JDK-8331572</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>`Method::mask_for` is used on hot paths in concurrent stack processing, see screenshot. The method actually caches the OopMaps when GC is active:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
void Method::mask_for(int bci, InterpreterOopMap* mask) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;methodHandle h_this(Thread::current(), this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Only GC uses the OopMapCache during thread stack root scanning&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// any other uses generate an oopmap but do not save it in the cache.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Universe::heap()-&amp;gt;is_gc_active()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;method_holder()-&amp;gt;mask_for(h_this, bci, mask);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OopMapCache::compute_one_oop_map(h_this, bci, mask);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
...but GC active is only set by `IsGCActiveMark`, which e.g. for Shenandoah is only set in `ShenandoahGCPauseMark`. The problem is that `CollectedHeap::is_gc_active` is specified to answer `true` only for STW GCs. &lt;br/&gt;
&lt;br/&gt;
So when we run in concurrent phases, we just compute the oop maps and drop them on the floor after use. We should consider relaxing this check and allowing collected heap implementations to cache oop maps even in concurrent phases.&lt;br/&gt;
&lt;br/&gt;
This might need adjustments in how OopMapCache does locking, mostly for lock ordering with the locks that concurrent GCs hold, see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331714&quot; title=&quot;Make OopMapCache installation lock-free&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331714&quot;&gt;&lt;strike&gt;JDK-8331714&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
The slowness in processing interpreter frames can be replicated with Shenandoah like this:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
% cat ManyThreadsStacks.java &lt;br/&gt;
public class ManyThreadStacks {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static final int THREADS = 1024;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static final int DEPTH = 1024;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static volatile Object sink;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String... args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int t = 0; t &amp;lt; DEPTH; t++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int ft = t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Thread(() -&amp;gt; work(1024)).start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sink = new byte[100_000];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void work(int depth) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;work(depth - 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(100);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
% build/linux-aarch64-server-release/images/jdk/bin/java -Xmx1g -Xms1g -XX:+UseShenandoahGC -Xlog:gc -Xint ManyThreadsStacks.java 2&amp;gt;&amp;amp;1 | grep &amp;quot;marking roots&amp;quot;&lt;br/&gt;
[1.259s][info][gc] GC(0) Concurrent marking roots 73.293ms&lt;br/&gt;
[1.350s][info][gc] GC(1) Concurrent marking roots 73.405ms&lt;br/&gt;
[1.441s][info][gc] GC(2) Concurrent marking roots 73.303ms&lt;br/&gt;
[1.532s][info][gc] GC(3) Concurrent marking roots 73.115ms&lt;br/&gt;
[1.622s][info][gc] GC(4) Concurrent marking roots 73.156ms&lt;br/&gt;
[1.813s][info][gc] GC(5) Concurrent marking roots 73.998ms&lt;br/&gt;
&lt;br/&gt;
# With the patch that enables access to OopMapCache from concurrent phases:&lt;br/&gt;
&lt;br/&gt;
% build/linux-aarch64-server-release/images/jdk/bin/java -Xmx1g -Xms1g -XX:+UseShenandoahGC -Xlog:gc -Xint ManyThreadsStacks.java 2&amp;gt;&amp;amp;1 | grep &amp;quot;marking roots&amp;quot;&lt;br/&gt;
[1.191s][info][gc] GC(0) Concurrent marking roots 6.273ms&lt;br/&gt;
[1.214s][info][gc] GC(1) Concurrent marking roots 6.183ms&lt;br/&gt;
[1.235s][info][gc] GC(2) Concurrent marking roots 6.150ms&lt;br/&gt;
[1.254s][info][gc] GC(3) Concurrent marking roots 6.280ms&lt;br/&gt;
[1.274s][info][gc] GC(4) Concurrent marking roots 6.178ms&lt;br/&gt;
```</description>
                <environment></environment>
        <key id="5128532">JDK-8331572</key>
            <summary>Allow using OopMapCache outside of STW GC phases</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>gc-shenandoah</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Thu, 2 May 2024 06:47:04 -0700</created>
                <updated>Wed, 8 Jan 2025 04:31:45 -0800</updated>
                            <resolved>Tue, 21 May 2024 07:58:42 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14697007" author="roboduke" created="Thu, 8 Aug 2024 12:34:43 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Considerably improves concurrent GC performance with lots of threads. Does not apply cleanly, since it requires some hooks into cleanup sequence in JDK 21, see PR. Provides a firmer ground for backport bugfixes in OopMapCache. All tests pass. Was in mainline for 9+ weeks. There is a little bugtail, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8334594&quot; title=&quot;Generational ZGC: Deadlock after OopMap rewrites in 8331572&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8334594&quot;&gt;&lt;strike&gt;JDK-8334594&lt;/strike&gt;&lt;/a&gt;, relaxing a too strong locked signalling. The risk is medium-low: changes a common path, but comes with only a little bugtail. The performance and maintenance benefits after related follow-up backports likely outweigh that risk.</comment>
                            <comment id="14683105" author="stefank" created="Thu, 20 Jun 2024 01:04:47 -0700"  >This seems to be causing a deadlocked that I&amp;#39;ve reported as &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8334594&quot; title=&quot;Generational ZGC: Deadlock after OopMap rewrites in 8331572&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8334594&quot;&gt;&lt;strike&gt;JDK-8334594&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14678853" author="roboduke" created="Tue, 4 Jun 2024 10:06:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/610&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/610&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-28 09:44:28 +0000</comment>
                            <comment id="14674939" author="dukebot" created="Tue, 21 May 2024 07:58:40 -0700"  >Changeset: d999b81e&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-05-21 14:56:53 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/d999b81e7110751be402012e1ed41b3256f5895e&quot;&gt;https://git.openjdk.org/jdk/commit/d999b81e7110751be402012e1ed41b3256f5895e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14673408" author="roboduke" created="Tue, 14 May 2024 11:24:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19229&quot;&gt;https://git.openjdk.org/jdk/pull/19229&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-14 12:31:08 +0000</comment>
                            <comment id="14673183" author="shade" created="Tue, 14 May 2024 02:46:11 -0700"  >Right. I am repurposing this issue to work out the solution that gets rids of GC checks completely. Your idea of using the GlobalCounter looks very promising for solving the reclamation races, I&amp;#39;ll credit you as the contributor, Zhengyu :)</comment>
                            <comment id="14671935" author="zgu" created="Wed, 8 May 2024 06:58:26 -0700"  >Stack walk is unrelated to any GCs. I filed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8317466&quot; title=&quot;Enable interpreter oopMapCache for concurrent GCs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8317466&quot;&gt;&lt;strike&gt;JDK-8317466&lt;/strike&gt;&lt;/a&gt; mainly wanted to address stack walk (but I thought using concurrent GCs as a cover was more convincing :-)). I want to point out that slowness of stack walk is a pain point in real production systems. &lt;br/&gt;
&lt;br/&gt;
We use Parallel GC, stack walk number was magnitude better when oopMapCache was enabled.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14671814" author="shade" created="Wed, 8 May 2024 00:55:16 -0700"  >Looking closer at &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8186042&quot; title=&quot;Optimize OopMapCache lookup&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8186042&quot;&gt;&lt;strike&gt;JDK-8186042&lt;/strike&gt;&lt;/a&gt;, I think the *had* the OopMapCache not guarded by any GC checks:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://github.com/openjdk/jdk/commit/96aa3d9dbe18f2e721cd3f2858907e19fbba0df4&quot;&gt;https://github.com/openjdk/jdk/commit/96aa3d9dbe18f2e721cd3f2858907e19fbba0df4&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
So maybe we should consider just using the cache without any GC checks again. [~coleenp], do you remember why we introduced the GC checks on those paths? Was it to manage _old_entries at the GC vmops epilogs?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5137108">JDK-8338671</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="5128536">JDK-8331573</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128736">JDK-8331714</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4937514">JDK-8186042</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111670">JDK-8317466</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5132237">JDK-8334594</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111400">JDK-8317240</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109102" name="profile-shenandoah-conc.png" size="87743" author="shade" created="Thu, 2 May 2024 06:47:24 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i366s3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17436"><![CDATA[b24]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>