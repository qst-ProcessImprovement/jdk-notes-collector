<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:42:24 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8231349] Move intrinsic stubs generation to compiler runtime initialization code</title>
                <link>https://bugs.openjdk.org/browse/JDK-8231349</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>During the JVM bootstrap we go through StubGenerator::generate_all() to generate a number of specialized routines. Many are used by interpreter and compiled code alike. As we add more such specialized routines, we incur a bootstrap cost, as evidenced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8270323&quot; title=&quot;Regression &amp;gt; 3% in Perfstartup-Noop-G1 in 18-b4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8270323&quot;&gt;&lt;strike&gt;JDK-8270323&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
During C2 initialization, we also spend ~10 ms in a single thread generating stubs, most of which are not used early on. This happens in OptoRuntime::generate, generating 14 different stubs. By making this initialization happen on-demand, we would see less CPU spent early on things that might not be used, and we could see useful C2 compilations happen sooner, both of which could be beneficial to startup time.&lt;br/&gt;
&lt;br/&gt;
Both cases could benefit from a lazy initialization scheme where uninitialized stubs are generated on demand.</description>
                <environment></environment>
        <key id="5000720">JDK-8231349</key>
            <summary>Move intrinsic stubs generation to compiler runtime initialization code</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kvn">Vladimir Kozlov</assignee>
                                    <reporter username="redestad">Claes Redestad</reporter>
                        <labels>
                            <label>c2</label>
                            <label>performance</label>
                            <label>startup</label>
                    </labels>
                <created>Mon, 23 Sep 2019 01:41:14 -0700</created>
                <updated>Thu, 30 Mar 2023 01:55:35 -0700</updated>
                            <resolved>Thu, 23 Mar 2023 12:17:38 -0700</resolved>
                                    <version>11</version>
                    <version>12</version>
                    <version>13</version>
                    <version>14</version>
                    <version>19</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14569169" author="dukebot" created="Thu, 23 Mar 2023 12:17:37 -0700"  >Changeset: 3859faf1&lt;br/&gt;
Author:    Vladimir Kozlov &amp;lt;&lt;a href=&apos;mailto:kvn@openjdk.org&apos;&gt;kvn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-23 19:15:34 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/3859faf183c241f124879d6a7264b43a6b42b418&quot;&gt;https://git.openjdk.org/jdk/commit/3859faf183c241f124879d6a7264b43a6b42b418&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14568124" author="roboduke" created="Mon, 20 Mar 2023 09:03:16 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13096&quot;&gt;https://git.openjdk.org/jdk/pull/13096&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-20 07:05:23 +0000</comment>
                            <comment id="14567959" author="kvn" created="Sun, 19 Mar 2023 12:02:32 -0700"  >Updated stubs buffers sizes.&lt;br/&gt;
&lt;br/&gt;
aarch64 fastdebug VM:&lt;br/&gt;
StubRoutines (initial stubs)	 [0x0000fffbb80c0080, 0x0000fffbb80c2a10] used: 5536, free: 5104&lt;br/&gt;
StubRoutines (continuation stubs)	 [0x0000fffbb80c3500, 0x0000fffbb80c3f50] used: 744, free: 1896&lt;br/&gt;
StubRoutines (final stubs)	 [0x0000fffbb8123380, 0x0000fffbb8128420] used: 11952, free: 8688&lt;br/&gt;
StubRoutines (compiler stubs)	 [0x0000fffbb831a080, 0x0000fffbb8322eb0] used: 23976, free: 12424&lt;br/&gt;
&lt;br/&gt;
x64 avx512 fastdebug VM:&lt;br/&gt;
StubRoutines (initial stubs)	 [0x00007fb1af828c00, 0x00007fb1af82db60] used: 16152, free: 4168&lt;br/&gt;
StubRoutines (continuation stubs)	 [0x00007fb1af82e580, 0x00007fb1af82ee90] used: 741, free: 1579&lt;br/&gt;
StubRoutines (final stubs)	 [0x00007fb1af881600, 0x00007fb1af888c70] used: 26484, free: 3836&lt;br/&gt;
StubRoutines (compiler stubs)	 [0x00007fb1afbf8500, 0x00007fb1afc054d0] used: 46988, free: 6212&lt;br/&gt;
&lt;br/&gt;
x86 32-bit fastdebug VM:&lt;br/&gt;
StubRoutines (initial stubs)	 [0xee0a2be0, 0xee0a7b40] used: 13982, free: 6338&lt;br/&gt;
StubRoutines (continuation stubs)	 [0xee0a84e0, 0xee0a8a08] used: 0, free: 1320&lt;br/&gt;
StubRoutines (final stubs)	 [0xee139860, 0xee13c0b0] used: 5300, free: 5020&lt;br/&gt;
StubRoutines (compiler stubs)	 [0xee2b1ae0, 0xee2b7580] used: 17236, free: 5964&lt;br/&gt;
</comment>
                            <comment id="14567926" author="kvn" created="Sat, 18 Mar 2023 12:35:26 -0700"  >aarch64 fastdebug:&lt;br/&gt;
&lt;br/&gt;
================ StubRoutines (initial stubs) total used: 5536, remain free: 14104 ====&lt;br/&gt;
================ StubRoutines (continuation stubs) total used: 744, remain free: 896 ====&lt;br/&gt;
================ StubRoutines (final stubs) total used: 16368, remain free: 14272 ====&lt;br/&gt;
================ StubRoutines (compiler stubs) total used: 19560, remain free: 16840 ====</comment>
                            <comment id="14567921" author="kvn" created="Sat, 18 Mar 2023 10:06:22 -0700"  >With some verification flags:&lt;br/&gt;
&lt;br/&gt;
x64 AVX512 fastdebug : -XX:+UseCompressedOops -XX:+CheckCompressedOops -XX:+VerifyOops -XX:+VerifyStackAtCalls&lt;br/&gt;
================ StubRoutines (initial stubs) total used: 16152, remain free: 14168 ====&lt;br/&gt;
================ StubRoutines (continuation stubs) total used: 741, remain free: 29579 ====&lt;br/&gt;
================ StubRoutines (final stubs) total used: 26484, remain free: 3836 ====&lt;br/&gt;
================ StubRoutines (compiler stubs) total used: 46988, remain free: 36516 ====&lt;br/&gt;
&lt;br/&gt;
x32 fastdebug : -XX:+VerifyOops -XX:+VerifyStackAtCalls&lt;br/&gt;
================ StubRoutines (initial stubs) total used: 13982, remain free: 6338 ====&lt;br/&gt;
================ StubRoutines (continuation stubs) total used: 0, remain free: 20320 ====&lt;br/&gt;
================ StubRoutines (final stubs) total used: 5300, remain free: 15020 ====&lt;br/&gt;
================ StubRoutines (compiler stubs) total used: 17236, remain free: 21264 ====&lt;br/&gt;
</comment>
                            <comment id="14567901" author="kvn" created="Fri, 17 Mar 2023 20:02:38 -0700"  >Stubs reserved sizes are not reflecting currently used space. I added some printing and here results with my changes:&lt;br/&gt;
&lt;br/&gt;
x64 AVX512 fastdebug:&lt;br/&gt;
================ StubRoutines (initial stubs) total used: 16120, remain free: 14200 ====&lt;br/&gt;
================ StubRoutines (continuation stubs) total used: 716, remain free: 29604 ====&lt;br/&gt;
================ StubRoutines (final stubs) total used: 26100, remain free: 4220 ====&lt;br/&gt;
================ StubRoutines (compiler stubs) total used: 46988, remain free: 36516 ====&lt;br/&gt;
x32 fastdebug:&lt;br/&gt;
================ StubRoutines (initial stubs) total used: 13950, remain free: 6370 ====&lt;br/&gt;
================ StubRoutines (continuation stubs) total used: 0, remain free: 20320 ====&lt;br/&gt;
================ StubRoutines (final stubs) total used: 5300, remain free: 15020 ====&lt;br/&gt;
================ StubRoutines (compiler stubs) total used: 17236, remain free: 21264 ====&lt;br/&gt;
&lt;br/&gt;
I sill adjust default sizes based on that.</comment>
                            <comment id="14567818" author="kvn" created="Fri, 17 Mar 2023 10:00:46 -0700"  >Based on performance data I propose to implement Claes&amp;#39;s suggestion to move intrinsics stubs generation to C2 (and JVMCI) runtime initialization code.&lt;br/&gt;
It has &amp;lt;1% (green bar vs navy in attached performance graph) difference from not generated these stubs at all and we will not win on 1 core VMs but it is simpler and safer solution, I think. It also automatically (no need for new code) will not generate these stubs if C2 is not used (-Xint or low TieredStopAt Level) as you suggested in RFE.  Performance results testing also show footprint increase about 1-2% (if stubs are not generated I don&amp;#39;t see footprint increase). I am not sure why, may be because separate thread generates code and use its own memory for that (Claes think that too).&lt;br/&gt;
&lt;br/&gt;
On demand stubs generation will requires synchronization between compiler threads during application run which may introduce some instability and may be other issues. I will file a separte RFE for that becuse using on demand stubs generation could be beneficial for Interpreter and C1 too. Especially if we want more intrinsics stubs to be used by C1 and Interpreter (they use CRC32 only now).&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14441819" author="redestad" created="Fri, 13 Aug 2021 08:35:01 -0700"  >Would it be possible to move stubs only used by C2 from StubGenerator::generate_all to OptoRuntime::generate? That might be a low effort way to eliminate much of the observed regression in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8270323&quot; title=&quot;Regression &amp;gt; 3% in Perfstartup-Noop-G1 in 18-b4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8270323&quot;&gt;&lt;strike&gt;JDK-8270323&lt;/strike&gt;&lt;/a&gt; since we move work from the bootstrap thread to the initial C2 thread, and it would ensure that modes that don&amp;#39;t run C2 at all doesn&amp;#39;t take the cost at all (if Graal uses the same stubs it could be factored out in a way that makes it easy to call the same initializer when initializing JVMCI)</comment>
                            <comment id="14441569" author="kvn" created="Thu, 12 Aug 2021 08:31:52 -0700"  >Good notice about -XX:+PrintStubCode.&lt;br/&gt;
&lt;br/&gt;
The only downside of uncommon trap when the path in compiled code is taken, deoptimization and recompilation is triggered but called stub is still not assembled. It may lead to few cycles of re-compilation/deoptimization.&lt;br/&gt;
&lt;br/&gt;
That is why I talked about performance testing of both approaches:&lt;br/&gt;
1. Get compiled method fast but have uncommon traps for called stubs which are not ready. Could be beneficial when paths which call stubs are not taken based on profiling.&lt;br/&gt;
2. During compilation, assemble called stubs which will delay when compiled method is ready. Could be beneficial when paths are definitely taken.</comment>
                            <comment id="14441510" author="jbhateja" created="Thu, 12 Aug 2021 03:30:05 -0700"  >[~kvn] Stub code printing though JVM flag -XX:+PrintStubCode  may also need appropriate handling.&lt;br/&gt;
Also, introducing an un-common trap is safe but has penalty on generated code size.  Since there is no-guarantee that at run-time stub call path will be taken so preventing compilation of entire method may turn out to be costly, may be one can play under a runtime option to delay entire method compilation until its dependent stubs are assembled, in this mode un-common traps could be avoided altogether and zero code size impact.</comment>
                            <comment id="14441246" author="redestad" created="Wed, 11 Aug 2021 11:14:25 -0700"  >[~kvn]: true, the ones generated in OptoRuntime::generate() would only indirectly affect startup unless you&amp;#39;re running on a single CPU thread (which appears to be more common than expected in cloud environments).&lt;br/&gt;
&lt;br/&gt;
Did anyone in the compiler team volunteer to take this little project on? Dave asked me to take a look and I&amp;#39;m happy to attempt a solution, but it&amp;#39;s definitely outside of my comfort zone - especially if you think we&amp;#39;ll need to emit new uncommon traps.</comment>
                            <comment id="14441220" author="kvn" created="Wed, 11 Aug 2021 09:54:52 -0700"  >Note, OptoRuntime::generate() produce very small wrappers which should not affect startup time. But I am fine if you investigate that too.&lt;br/&gt;
&lt;br/&gt;
What affects startup are intrinsics stubs `generate_all()`:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp#L7802&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp#L7802&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
We had discussion today and few items come up:&lt;br/&gt;
&lt;br/&gt;
1. Some stubs we have to generate during startup as we do now because they are used from start.&lt;br/&gt;
2. Lazy generate a stub when corresponding Java method is called in Interpreter. Interpreter should wait stub generation - it is not performance critical.&lt;br/&gt;
3. Make sure only one thread generates a stub - other threads should wait. This is the case when several threads running Interpreter request a stub.&lt;br/&gt;
4. Create uncommon trap in code if JIT compiler (C1 or C2) see that a stub is not generated yet. At the same time trigger the stub generation (may be by vmOperation).&lt;br/&gt;
5. We should have a mode in testing to request generation of all stubs at the start (as now) to check that we have enough space in CodeCache for all of them.</comment>
                            <comment id="14441211" author="ecaspole" created="Wed, 11 Aug 2021 09:28:52 -0700"  >AES-GCM is another large intrinsic that would benefit.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5053948">JDK-8270323</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5097457">JDK-8305227</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5049574">JDK-8267125</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5096527">JDK-8304422</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103045" name="Startup_stubs_gen.png" size="192456" author="kvn" created="Fri, 17 Mar 2023 10:01:58 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2klu3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>