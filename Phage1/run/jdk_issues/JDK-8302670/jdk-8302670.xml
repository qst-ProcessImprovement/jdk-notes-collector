<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 16:53:38 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302670] use-after-free related to PhaseIterGVN interaction with Unique_Node_List and Node_Stack</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302670</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Instrumenting Arena for ASan has revealed an awkward use-after-free in C2. It appears PhaseIterGVN ends up copying Compile::for_igvn() by value in its constructor. It then either intentionally or unintentionally causes the list to grow triggering Arealloc. This leaves the original Compile::for_igvn() Unique_Node_List now pointing to free&amp;#39;d memory which eventually gets used again.&lt;br/&gt;
&lt;br/&gt;
We need to detangle the expectation with PhaseIterGVN and whether modifications to either Unique_Node_List or Node_Stack it copies by value in its constructors should be visible to the caller.&lt;br/&gt;
&lt;br/&gt;
Should PhaseIterGVN be using copy-on-write semantics? Should PhaseIterGVN be propagating changes to either Unique_Node_List or Node_Stack back to the caller it copied it from?&lt;br/&gt;
&lt;br/&gt;
==3227315==ERROR: AddressSanitizer: use-after-poison on address 0x6290005b9210 at pc 0x7f619ca47681 bp 0x7f60d80eb8e0 sp 0x7f60d80eb090                                                                                                                                           [105/1351]&lt;br/&gt;
WRITE of size 16384 at 0x6290005b9210 thread T17&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7f619ca47680 in __interceptor_memset ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:799&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7f6197e15ccb in Copy::pd_zero_to_bytes(void*, unsigned long) src/hotspot/cpu/x86/copy_x86.hpp:59&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x7f6197e15ccb in Copy::zero_to_bytes(void*, unsigned long) src/hotspot/share/utilities/copy.hpp:298&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x7f6197e15ccb in Node_Array::clear() src/hotspot/share/opto/node.hpp:1548&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x7f6197e15ccb in Node_List::clear() src/hotspot/share/opto/node.hpp:1572&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#5 0x7f6197e15ccb in Unique_Node_List::clear() src/hotspot/share/opto/node.hpp:1623&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#6 0x7f6197e15ccb in Compile::Optimize() src/hotspot/share/opto/compile.cpp:2269&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#7 0x7f6197e1cf12 in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) src/hotspot/share/opto/compile.cpp:833&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#8 0x7f6197af05ce in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) src/hotspot/share/opto/c2compiler.cpp:113&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#9 0x7f6197e33890 in CompileBroker::invoke_compiler_on_method(CompileTask*) src/hotspot/share/compiler/compileBroker.cpp:2237&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#10 0x7f6197e364a7 in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1916&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#11 0x7f61989b235b in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:710&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#12 0x7f61989b274f in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:689&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#13 0x7f61989b274f in JavaThread::run() src/hotspot/share/runtime/javaThread.cpp:695&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#14 0x7f619a1f0e75 in Thread::call_run() src/hotspot/share/runtime/thread.cpp:224&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#15 0x7f619986317f in thread_native_entry src/hotspot/os/linux/os_linux.cpp:737&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#16 0x7f619c8a7fd3 in start_thread nptl/pthread_create.c:442&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#17 0x7f619c92866b in clone3 ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81&lt;br/&gt;
&lt;br/&gt;
0x6290005b9210 is located 16 bytes inside of 16400-byte region [0x6290005b9200,0x6290005bd210)&lt;br/&gt;
allocated by thread T17 here:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7f619cab89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7f619984b0ba in os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&amp;amp;) src/hotspot/share/runtime/os.cpp:673&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x7f619749a87e in Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) src/hotspot/share/memory/arena.cpp:190&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x7f619749a87e in Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.cpp:319&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x7f619749ac5c in Arena::internal_amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.hpp:113&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#5 0x7f619749ac5c in Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.hpp:133&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#6 0x7f619749ac5c in Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) src/hotspot/share/memory/arena.cpp:370&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#7 0x7f61997a5f6f in Node_Array::grow(unsigned int) src/hotspot/share/opto/node.cpp:2778&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#8 0x7f61998fd96c in Node_Array::map(unsigned int, Node*) src/hotspot/share/opto/node.hpp:1543&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#9 0x7f61998fd96c in Node_List::push(Node*) src/hotspot/share/opto/node.hpp:1569&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#10 0x7f61998fd96c in Unique_Node_List::push(Node*) src/hotspot/share/opto/node.hpp:1601&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#11 0x7f61998fd96c in Compile::record_for_igvn(Node*) src/hotspot/share/opto/node.hpp:1672&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#12 0x7f61998fd96c in GraphKit::record_for_igvn(Node*) const src/hotspot/share/opto/graphKit.hpp:96&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#13 0x7f61998fd96c in Parse::merge_memory_edges(MergeMemNode*, int, bool) src/hotspot/share/opto/parse1.cpp:1886&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#14 0x7f61998fe585 in Parse::merge_common(Parse::Block*, int) src/hotspot/share/opto/parse1.cpp:1763&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#15 0x7f6199902b6e in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:707&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#16 0x7f619990c6b4 in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:613&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#17 0x7f6197af3175 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#18 0x7f6197af9b11 in PredictedCallGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:915&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#19 0x7f61981ff789 in Parse::do_call() src/hotspot/share/opto/doCall.cpp:662&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#20 0x7f619992e27f in Parse::do_one_bytecode() src/hotspot/share/opto/parse2.cpp:2704&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#21 0x7f6199901796 in Parse::do_one_block() src/hotspot/share/opto/parse1.cpp:1560&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#22 0x7f6199902b6e in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:707&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#23 0x7f619990c6b4 in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:613&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#24 0x7f6197af3175 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#25 0x7f6197af9b11 in PredictedCallGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:915&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#26 0x7f61981ff789 in Parse::do_call() src/hotspot/share/opto/doCall.cpp:662&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#27 0x7f619992e27f in Parse::do_one_bytecode() src/hotspot/share/opto/parse2.cpp:2704&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#28 0x7f6199901796 in Parse::do_one_block() src/hotspot/share/opto/parse1.cpp:1560&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#29 0x7f6199902b6e in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:707&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#30 0x7f619990c6b4 in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:613&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#31 0x7f6197af3175 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#32 0x7f6197e1c9cc in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) src/hotspot/share/opto/compile.cpp:763&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#33 0x7f6197af05ce in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) src/hotspot/share/opto/c2compiler.cpp:113&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#34 0x7f6197e33890 in CompileBroker::invoke_compiler_on_method(CompileTask*) src/hotspot/share/compiler/compileBroker.cpp:2237&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#35 0x7f6197e364a7 in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1916&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#36 0x7f61989b235b in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:710&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#37 0x7f61989b274f in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:689&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#38 0x7f61989b274f in JavaThread::run() src/hotspot/share/runtime/javaThread.cpp:695</description>
                <environment></environment>
        <key id="5094373">JDK-8302670</key>
            <summary>use-after-free related to PhaseIterGVN interaction with Unique_Node_List and Node_Stack</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="jcking">Justin King</reporter>
                        <labels>
                            <label>c2</label>
                            <label>oracle-triage-21</label>
                    </labels>
                <created>Thu, 16 Feb 2023 07:33:03 -0800</created>
                <updated>Wed, 4 Jun 2025 06:41:02 -0700</updated>
                            <resolved>Tue, 30 May 2023 00:17:56 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14585478" author="dukebot" created="Tue, 30 May 2023 00:17:55 -0700"  >Changeset: 1f1f6040&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-30 07:14:50 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/1f1f604071dc2fca4849eb6ce251d5f18b443e16&quot;&gt;https://git.openjdk.org/jdk/commit/1f1f604071dc2fca4849eb6ce251d5f18b443e16&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14580414" author="roboduke" created="Tue, 9 May 2023 23:44:36 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13833&quot;&gt;https://git.openjdk.org/jdk/pull/13833&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-05 14:08:42 +0000</comment>
                            <comment id="14576633" author="JIRAUSER19821" created="Tue, 25 Apr 2023 05:02:56 -0700"  >[~jcking] Thanks for your PR.&lt;br/&gt;
I looked at the problem, and your suggested changes.&lt;br/&gt;
Currently, we really have a tangled mess.&lt;br/&gt;
&lt;br/&gt;
I like the idea of having clear ownership of the Node_List, etc.&lt;br/&gt;
So making them non-copyable is a good start, that way we at least do not have inconsistent states because of internals being copied by value.&lt;br/&gt;
&lt;br/&gt;
For the &amp;quot;Phases&amp;quot;, we have some internal data-structures that get passed from phase to phase.&lt;br/&gt;
I see that you made the IGVN &amp;quot;_worklist&amp;quot; live in &amp;quot;Compile&amp;quot;, and use it as reference everywhere else. I like that.&lt;br/&gt;
Can we do something similar with the &amp;quot;_nodes&amp;quot; and &amp;quot;_types&amp;quot; for &amp;quot;PhaseTransform&amp;quot;? I&amp;#39;m not sure, but it might be that we also only need one of each of those per compilation (with the exception of the verification loop-opts).&lt;br/&gt;
&lt;br/&gt;
I understand why you use the &amp;quot;replace_with&amp;quot; method: you want to move the internals of the source to the destination, and then remove the ownership of the source, by nullptr-ing out the memory references. This is nice, we only have one owner of the internally allocated memory. However, it just leaves the source as dead. What should happen if we use the source again? Throw an assert or hit a nullptr-dereference / SIGSEGV? Or should it just be empty, and re-allocate memory on insert, as you do with &amp;quot;Node_Array::insert&amp;quot;?&lt;br/&gt;
&lt;br/&gt;
In &amp;quot;PhaseTransform::PhaseTransform( PhaseTransform *pt, PhaseNumber pnum )&amp;quot;, you initialize &amp;quot;_nodes&amp;quot; and &amp;quot;_types&amp;quot; with the &amp;quot;Node_List::Node_List(Node_List *nl)&amp;quot; constructor. This calls &amp;quot;replace_with&amp;quot;, and invalidates/empties the &amp;quot;_nodes&amp;quot; and &amp;quot;_types&amp;quot; of the input &amp;quot;pt&amp;quot;. I&amp;#39;m not sure that the user of the &amp;quot;PhaseTransform&amp;quot; (or subclass) constructor is aware that the internals will be moved over to the new phase, and the old phase is invalid/empty now.&lt;br/&gt;
&lt;br/&gt;
I wonder if it would be smarter to keep the &amp;quot;_nodes&amp;quot; and &amp;quot;_types&amp;quot; outside the phase, and only use them as references inside?&lt;br/&gt;
We could keep them in the &amp;quot;Compile&amp;quot;, or generate new ones temporarily if a &amp;quot;PhaseTransform&amp;quot; needs to have a new set of those data-structures. That way, the owner is clear (&amp;quot;Compile&amp;quot;, or some outer context owns it). And the owner will have a wider scope than the reference-uses: we will only pass them downward in the call hierarchy.</comment>
                            <comment id="14561848" author="JIRAUSER20603" created="Tue, 21 Feb 2023 15:59:07 -0800"  >I have &lt;a href=&quot;https://github.com/openjdk/jdk/pull/12703,&quot;&gt;https://github.com/openjdk/jdk/pull/12703,&lt;/a&gt; but I am *really* not confident in it so I have no intention on taking it past a draft. Just dropping here as a discussion or starting point for somebody else. It makes phases and all the containers non-copyable. It uses some implicit moves (rvalues) to allow returning containers, some move-like functions (replace_with), and reset. This ensures only one container actually owns it at a single time. In this case, C2 might benefit from using rvalues and move constructors/assignments even though Hotspot in general has not decided on their usage.</comment>
                            <comment id="14561386" author="thartmann" created="Mon, 20 Feb 2023 03:37:24 -0800"  >Emanuel, could you please have a look at this?</comment>
                            <comment id="14561298" author="thartmann" created="Sun, 19 Feb 2023 23:28:19 -0800"  >Right, that&amp;#39;s a good suggestion.</comment>
                            <comment id="14561124" author="JIRAUSER20603" created="Fri, 17 Feb 2023 10:48:13 -0800"  >I think the way to go about fixing this is probably to start by adding NONCOPYABLE to Type_Array, Node_Stack, Node_Array, NodeHash, and friends. This will trigger compile errors that will identify where the odd copying is being performed. Then it&amp;#39;s a matter of determining whether it should be by reference or whether it should probably be a move.</comment>
                            <comment id="14560912" author="thartmann" created="Fri, 17 Feb 2023 01:04:28 -0800"  >ILW = Use-after-free in C2 code, most likely not an issue with current code but could affect memory consumption, no workaround = MMH = P3</comment>
                            <comment id="14560911" author="thartmann" created="Fri, 17 Feb 2023 01:03:36 -0800"  >Nice analysis, thanks for the report!&lt;br/&gt;
&lt;br/&gt;
C-&amp;gt;for_igvn() is used to record nodes during parsing (GVN) that should be put on the IGVN worklist later. Once IGVN is over, the for_igvn() node list is cleared and re-used when inlining (parsing) again incrementally.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; It then either intentionally or unintentionally causes the list to grow triggering Arealloc&lt;br/&gt;
&lt;br/&gt;
Since C-&amp;gt;for_igvn() is passed by value to PhaseIterGVN::_worklist but the underlying Node_Array::_nodes memory is shared, I would assume that a growing _worklist during IGVN, which is expected, affects C-&amp;gt;for_igvn() as well, right?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; This leaves the original Compile::for_igvn() Unique_Node_List now pointing to free&amp;#39;d memory which eventually gets used again.&lt;br/&gt;
&lt;br/&gt;
Right, I think the only reason that this does not cause any real problems is that a free in the Arena (Arena::Afree) is a NOP. We just drop the memory and allocate a new chunk. If C-&amp;gt;for_igvn() still refers to it, it&amp;#39;s guaranteed to not be re-used by something else.&lt;br/&gt;
&lt;br/&gt;
I think C-&amp;gt;for_igvn() should be &amp;quot;owned&amp;quot; by Compile and passed by reference to IGVN such that the same node list is re-used by all the parsing runs. This could also reduce overall memory consumption because we potentially don&amp;#39;t need to re-allocate that often.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="5160571">JDK-8358598</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5121261">JDK-8325672</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5100585">JDK-8307815</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5092837">JDK-8301373</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134957">JDK-8337015</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114238">JDK-8319649</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30f43:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>