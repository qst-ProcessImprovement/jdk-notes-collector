<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:51:55 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303279] C2: crash in SubTypeCheckNode::sub() at IGVN split if</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303279</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Originally reported at &lt;a href=&quot;https://github.com/adoptium/containers/issues/336&quot;&gt;https://github.com/adoptium/containers/issues/336&lt;/a&gt; and at  &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-54693/SIGSEGV-0xb-at-pc0x0000000000000000-C2-CompilerThread0&quot;&gt;https://youtrack.jetbrains.com/issue/KT-54693/SIGSEGV-0xb-at-pc0x0000000000000000-C2-CompilerThread0&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=1, tid=14&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment Temurin-17.0.6+10 (17.0.6+10) (build 17.0.6+10)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.6+10 (17.0.6+10, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# C  0x0000000000000000&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: /core.%e.1.%t&lt;br/&gt;
#&lt;br/&gt;
# JFR recording file will be written. Location: //hs_err_pid1.jfr&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://github.com/adoptium/adoptium-support/issues&quot;&gt;https://github.com/adoptium/adoptium-support/issues&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
---------------  S U M M A R Y ------------&lt;br/&gt;
&lt;br/&gt;
Command Line: -Xms192m -Xmx192m -XX:ErrorFile=/jvm-dumps/hs_err_pid%p.log -javaagent:/opt/dd-java-agent.jar -Ddd.version=20230219.1 -Ddd.service=svc-ui-sync dev.r36.mercury.uisync.MainKt&lt;br/&gt;
&lt;br/&gt;
Host: Intel(R) Xeon(R) CPU @ 2.20GHz, 4 cores, 728M, Ubuntu 22.04.1 LTS&lt;br/&gt;
Time: Fri Feb 24 23:40:19 2023 UTC elapsed time: 510178.339438 seconds (5d 21h 42m 58s)&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f30a806d090):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=14, stack(0x00007f30ac417000,0x00007f30ac517000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:510178339 18521   !   4       io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend (285 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f30ac417000,0x00007f30ac517000],  sp=0x00007f30ac512988,  free space=1006k&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000&lt;br/&gt;
&lt;br/&gt;
Register to memory mapping:&lt;br/&gt;
&lt;br/&gt;
RAX=0x0000000000000011 is an unknown value&lt;br/&gt;
RBX=0x00007f3078023228 points into unknown readable memory: 0x00007f30aeefebb8 | b8 eb ef ae 30 7f 00 00&lt;br/&gt;
RCX=0x0 is NULL&lt;br/&gt;
RDX=0x00007f30786db101 points into unknown readable memory: b0 6d 78 30 7f 00 00&lt;br/&gt;
RSP=0x00007f30ac512988 is pointing into the stack for thread: 0x00007f30a806d090&lt;br/&gt;
RBP=0x00007f30ac5129d0 is pointing into the stack for thread: 0x00007f30a806d090&lt;br/&gt;
RSI=0x00007f30ae0ca250: &amp;lt;offset 0x00000000003df250&amp;gt; in /opt/java/openjdk/lib/server/libjvm.so at 0x00007f30adceb000&lt;br/&gt;
RDI=0x00007f3078023228 points into unknown readable memory: 0x00007f30aeefebb8 | b8 eb ef ae 30 7f 00 00&lt;br/&gt;
R8 =0x00007f30786db1a0 points into unknown readable memory: 0x00007f30aeeff288 | 88 f2 ef ae 30 7f 00 00&lt;br/&gt;
R9 =0x00007f3078ae62d8 points into unknown readable memory: 0x00007f30aef9c0d0 | d0 c0 f9 ae 30 7f 00 00&lt;br/&gt;
R10=0x00007f30784623e8 points into unknown readable memory: 0x00007f30aef9c1a0 | a0 c1 f9 ae 30 7f 00 00&lt;br/&gt;
R11=0x00007f3078c0a4a0 points into unknown readable memory: 0x00007f30aef86bd8 | d8 6b f8 ae 30 7f 00 00&lt;br/&gt;
R12=0x00007f3078699160 points into unknown readable memory: 0x00007f30aef79aa0 | a0 9a f7 ae 30 7f 00 00&lt;br/&gt;
R13=0x00007f3079237610 points into unknown readable memory: 0x00007f30aef9c1a0 | a0 c1 f9 ae 30 7f 00 00&lt;br/&gt;
R14=0x00007f3078ae6320 points into unknown readable memory: 0x00007f30aef81d50 | 50 1d f8 ae 30 7f 00 00&lt;br/&gt;
R15=0x00007f30786db1a0 points into unknown readable memory: 0x00007f30aeeff288 | 88 f2 ef ae 30 7f 00 00&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5095109">JDK-8303279</key>
            <summary>C2: crash in SubTypeCheckNode::sub() at IGVN split if</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="roland">Roland Westrelin</assignee>
                                    <reporter username="karianna">Martijn Verburg</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>oracle-triage-21</label>
                    </labels>
                <created>Mon, 27 Feb 2023 18:46:10 -0800</created>
                <updated>Sun, 21 Jul 2024 13:31:11 -0700</updated>
                            <resolved>Tue, 11 Jul 2023 09:01:52 -0700</resolved>
                                    <version>17.0.6</version>
                    <version>18.0.1.1</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14597015" author="JIRAUSER20112" created="Tue, 18 Jul 2023 13:31:20 -0700"  >Fix request 17u - fixes a c2 crash, change passes jtreg tiers 1, 2, 3 and 4</comment>
                            <comment id="14596165" author="roboduke" created="Thu, 13 Jul 2023 14:51:03 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1580&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1580&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-13 21:44:45 +0000</comment>
                            <comment id="14596164" author="roboduke" created="Thu, 13 Jul 2023 14:51:02 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/9&quot;&gt;https://git.openjdk.org/jdk21u/pull/9&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-13 21:45:10 +0000</comment>
                            <comment id="14595910" author="roboduke" created="Wed, 12 Jul 2023 22:53:02 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/119&quot;&gt;https://git.openjdk.org/jdk21/pull/119&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-13 05:47:04 +0000</comment>
                            <comment id="14595059" author="dukebot" created="Tue, 11 Jul 2023 09:01:50 -0700"  >Changeset: caadad4f&lt;br/&gt;
Author:    Roland Westrelin &amp;lt;&lt;a href=&apos;mailto:roland@openjdk.org&apos;&gt;roland@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-11 15:59:17 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/caadad4fdc78799dab2d492dba9b9f74b22d036e&quot;&gt;https://git.openjdk.org/jdk/commit/caadad4fdc78799dab2d492dba9b9f74b22d036e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14592576" author="vlivanov" created="Wed, 28 Jun 2023 11:20:20 -0700"  >I didn&amp;#39;t try replay file myself. There were multiple failures observed across different platforms during test run. All of the failures happened in `-Xcomp` mode.</comment>
                            <comment id="14592574" author="simonis" created="Wed, 28 Jun 2023 11:07:35 -0700"  >@vlivanov, I can&amp;#39;t reproduce the crash with the replay_pid2467188.log file. Can you?&lt;br/&gt;
&lt;br/&gt;
Also, the test passes for me. Does it always crash for you or just occasionally?</comment>
                            <comment id="14592371" author="vlivanov" created="Tue, 27 Jun 2023 13:31:39 -0700"  >Failing test: serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java&lt;br/&gt;
&lt;br/&gt;
Logs: hs_err_pid2467188.log  replay_pid2467188.log&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (src/hotspot/share/opto/subtypenode.cpp:37),     pid=2467188, tid=2467203&lt;br/&gt;
#  assert(sub_t != Type::TOP &amp;amp;&amp;amp; !TypePtr::NULL_PTR-&amp;gt;higher_equal(sub_t)) failed: should be not null&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  27178 6483    b  4       java.lang.invoke.StringConcatFactory::foldInLastMixers (313 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f1805621000,0x00007f1805721000],  sp=0x00007f180571c210,  free space=1004k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x16ec008]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x5e8  (subtypenode.cpp:37)&lt;br/&gt;
V  [libjvm.so+0x15112d7]  PhaseIterGVN::transform_old(Node*)+0x317  (phaseX.cpp:1234)&lt;br/&gt;
V  [libjvm.so+0x15083f8]  PhaseIterGVN::optimize()+0x78  (phaseX.cpp:1045)&lt;br/&gt;
V  [libjvm.so+0x9ebc48]  Compile::inline_incrementally_cleanup(PhaseIterGVN&amp;amp;)+0x1b8  (compile.cpp:2067)&lt;br/&gt;
V  [libjvm.so+0x9ebf15]  Compile::inline_boxing_calls(PhaseIterGVN&amp;amp;)+0x135  (compile.cpp:2010)&lt;br/&gt;
V  [libjvm.so+0x9efbcb]  Compile::Optimize()+0x70b  (compile.cpp:2252)&lt;br/&gt;
V  [libjvm.so+0x9f263a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1c4a  (compile.cpp:851)&lt;br/&gt;
V  [libjvm.so+0x84d7ce]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x10e  (c2compiler.cpp:115)&lt;br/&gt;
V  [libjvm.so+0x9fe460]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00  (compileBroker.cpp:2265)&lt;br/&gt;
V  [libjvm.so+0x9ff2e8]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0xeb0e4c]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:719)&lt;br/&gt;
V  [libjvm.so+0x178797a]  Thread::call_run()+0xba  (thread.cpp:217)&lt;br/&gt;
V  [libjvm.so+0x148adbc]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:778)&lt;br/&gt;
</comment>
                            <comment id="14592267" author="roboduke" created="Tue, 27 Jun 2023 07:47:30 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14678&quot;&gt;https://git.openjdk.org/jdk/pull/14678&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-27 14:40:49 +0000</comment>
                            <comment id="14592231" author="roland" created="Tue, 27 Jun 2023 04:28:09 -0700"  >I was thinking this, maybe, as a fix:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/compare/master...rwestrel:jdk:JDK-8303279&quot;&gt;https://github.com/openjdk/jdk/compare/master...rwestrel:jdk:JDK-8303279&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
A SubTypeCheck node should never see a possibly null input. The crash happens at split if with a dead branch that&amp;#39;s not been entirely destroyed yet. The patch delays split if in that case. I ran into a number of cases where the assert I added to SubTypeCheckNode::sub fires for things that can&amp;#39;t be null but didn&amp;#39;t have their type set to non null.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14591636" author="thartmann" created="Fri, 23 Jun 2023 05:23:23 -0700"  >Nice, great work Roland!</comment>
                            <comment id="14591602" author="roland" created="Fri, 23 Jun 2023 02:01:28 -0700"  >Attached test case fails when run with:&lt;br/&gt;
java -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:+PrintCompilation -XX:CompileOnly=TestCrashAtIGVNSplitIfSubType::test -XX:CompileCommand=quiet -XX:+StressIGVN -XX:StressSeed=598200189 TestCrashAtIGVNSplitIfSubType&lt;br/&gt;
</comment>
                            <comment id="14591105" author="roboduke" created="Wed, 21 Jun 2023 10:33:39 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14600&quot;&gt;https://git.openjdk.org/jdk/pull/14600&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-21 17:25:38 +0000</comment>
                            <comment id="14591101" author="simonis" created="Wed, 21 Jun 2023 10:28:14 -0700"  >While browsing JBS, I found &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303513&quot; title=&quot;C2: LoadKlassNode::make fails with &amp;#39;expecting TypeKlassPtr&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303513&quot;&gt;&lt;strike&gt;JDK-8303513&lt;/strike&gt;&lt;/a&gt; which seems similar to this issue (i.e. also caused by a SubTypeCheckNode with an input of the TOP constant node).&lt;br/&gt;
&lt;br/&gt;
While looking at `SubTypeCheckNode::Ideal()` I found that it already has exactly the same safeguard I proposed for  `SubTypeCheckNode::sub()`, namely:&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!super_t-&amp;gt;isa_klassptr() ||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(!sub_t-&amp;gt;isa_klassptr() &amp;amp;&amp;amp; !sub_t-&amp;gt;isa_oopptr())) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return NULL;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Because this seems to affect a lot of people, I&amp;#39;ve created a preliminary PR (&lt;a href=&quot;https://github.com/openjdk/jdk/pull/14600&quot;&gt;https://github.com/openjdk/jdk/pull/14600&lt;/a&gt;) so others can check if this fix solves their problems. But I&amp;#39;m obviously open to better solutions (and digging deeper in order to find a more complete explanation and/or a better reproducer for the problem).</comment>
                            <comment id="14590856" author="thartmann" created="Wed, 21 Jun 2023 00:41:26 -0700"  >I think we should attempt to extract a standalone (jasm) reproducer and investigate more thoroughly. Such issues usually depend on the sequence in which nodes are processed by IGVN, so -XX:+StressIGVN -XX:RepeatCompilation=... might help.</comment>
                            <comment id="14590851" author="simonis" created="Wed, 21 Jun 2023 00:31:49 -0700"  >Thanks for your comments [~thartmann]. I&amp;#39;ve just uploaded the complete ideal graph (3992644_ideal.txt.gz) and inlining tree (3992644_inlining.txt) dumped from an instrumented JVM just before a crash which correspond to hs_err_pid3992644.log. Unfortunately I&amp;#39;ve never managed to get a crash when running with `-XX:PrintIdealGraphLevel` to get all the graphs before the crash.&lt;br/&gt;
&lt;br/&gt;
Do you think the proposed fix in `SubTypeCheckNode::sub()` is OK or do you think we need a more elaborate fix which prevents this situation in the first place? </comment>
                            <comment id="14590835" author="thartmann" created="Tue, 20 Jun 2023 23:42:30 -0700"  >&amp;gt; I&amp;#39;m only not sure if the unusual graph which leads to this crash is caused by the *uncommon* bytecode generated by the Kotlin compiler or if it is the result of another problem in an earlier optimization stage?&lt;br/&gt;
&lt;br/&gt;
[~simonis] It&amp;#39;s hard to tell but most likely it&amp;#39;s bytecode that would not be generated by javac that creates an uncommon C2 IR shape. From your example, it looks like a dying subgraph because the region input is top, probably because the null check was folded because the input is always null. Now we are in an intermittent state where the data path did not yet fold and we therefore observe a null input that should never happen.&lt;br/&gt;
&lt;br/&gt;
This looks like a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8238691&quot; title=&quot;C2: turn subtype check into macro node&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8238691&quot;&gt;&lt;strike&gt;JDK-8238691&lt;/strike&gt;&lt;/a&gt; in JDK 15 (paging [~roland]).</comment>
                            <comment id="14590692" author="simonis" created="Tue, 20 Jun 2023 11:00:39 -0700"  >The problem is the following:&lt;br/&gt;
&lt;br/&gt;
`SubTypeCheckNode::sub()` expects that it&amp;#39;s `sub_t` input `Type` is either a Klasspointer (i.e. `Type::KlassPtr`) or an Ooppointer (i.e. `Type::OopPtr`, `Type::InstPtr` or `Type::AryPtr`). It only checks for a Klasspointer and if that&amp;#39;s not the case it assumes an Ooppointer. However, in the crashing case, `sub_t` has the generic pointer type `Type::AnyPtr` so debug builds will run into an assertion and product builds will just crash.&lt;br/&gt;
&lt;br/&gt;
The `SubTypeCheckNode` in question has the following shape in `split_if()`:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;Con (#top)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
&amp;nbsp;&amp;nbsp;| __IfTrue&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|| __IfFalse&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|//&lt;br/&gt;
Region&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|     __ ConP (#NULL)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|    /&lt;br/&gt;
&amp;nbsp;&amp;nbsp;| __/  _ Phi (Oop:kotlinx/coroutines/internal/LockFreeLinkedListNode:NotNull)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|| ___/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;||| ____ Phi (Oop:kotlinx/coroutines/internal/LockFreeLinkedListNode:NotNull)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;||||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Phi &lt;br/&gt;
&amp;nbsp;&amp;nbsp;|        ConP (Klass:precise klass kotlinx/coroutines/channels/Send)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|          |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;\        /&lt;br/&gt;
&amp;nbsp;&amp;nbsp;SubTypeCheck&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
`split_if()` then searches for the first contstant input pf `SubTypeCheck` `Phi`-node and finds `ConP (#NULL)`. It then calls `SubTypeCheckNode::sub()` with `sub_t` as `ConP (#NULL)`&amp;#39;s type which is `Type::AnyPtr` and crashes.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve verified that returning `bottom_type()` from `SubTypeCheckNode::sub` for the `(!sub_t-&amp;gt;isa_klassptr() &amp;amp;&amp;amp; !sub_t-&amp;gt;isa_oopptr())` case fixes the crash (by instrumenting the VM to ensure that the compilation as well as the further program execution succeeds if we take the new branch).&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m only not sure if the unusual graph which leads to this crash is caused by the *uncommon* bytecode generated by the Kotlin compiler or if it is the result of another problem in an earlier optimization stage?&lt;br/&gt;
&lt;br/&gt;
Unfortunately the attached replay files can&amp;#39;t be used to reproduce the crash. I&amp;#39;ve tried both, using the original classes from `grpc-server-1.0-SNAPSHOT.jar` as well as using the classe dumped with the SA agent from a core file of the crash. Even if running with `-XX:ReplaySuppressInitializers=0` the inlining tree during replay is different from the original one during the crash (I&amp;#39;ve verified that with an instrumented VM which dumps the inlining tree before crashing). This may be caused by an issue of the replay functionality described in [this mail](&lt;a href=&quot;https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-June/065936.html&quot;&gt;https://mail.openjdk.org/pipermail/hotspot-compiler-dev/2023-June/065936.html&lt;/a&gt;) on hotspot-compiler-dev.&lt;br/&gt;
</comment>
                            <comment id="14590691" author="simonis" created="Tue, 20 Jun 2023 10:59:53 -0700"  >I managed to get the attached reproducer crashing with product and fastdebug builds of JDK 17, a product build of JDK 18 and a slowdebug build of JDK 21 although the crash frequency seems to be the highest with JDK 17. The stack traces for all versions look the same (except for product builds which have no stack trace in the hs_err file):&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
#  Internal Error (/priv/simonisv/OpenJDK/Git/jdk17u-dev/src/hotspot/share/opto/type.hpp:1735), pid=3992644, tid=3993484&lt;br/&gt;
#  assert(_base &amp;gt;= OopPtr &amp;amp;&amp;amp; _base &amp;lt;= AryPtr) failed: Not a Java pointer&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (17.0.9) (fastdebug build 17.0.9-internal+0-adhoc.simonisv.jdk17u-dev)&lt;br/&gt;
...&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  45915 5854   !   4       io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend (285 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007ffef67e8000,0x00007ffef68e9000],  sp=0x00007ffef68e3f20,  free space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x195deb2]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x3b2&lt;br/&gt;
V  [libjvm.so+0xe330e7]  split_if(IfNode*, PhaseIterGVN*)+0x3f7&lt;br/&gt;
V  [libjvm.so+0xe350d8]  IfNode::Ideal_common(PhaseGVN*, bool) [clone .part.0]+0x828&lt;br/&gt;
V  [libjvm.so+0xe401ea]  IfNode::Ideal(PhaseGVN*, bool)+0x3a&lt;br/&gt;
V  [libjvm.so+0x161ff78]  PhaseIterGVN::transform_old(Node*)+0xb8&lt;br/&gt;
V  [libjvm.so+0x16190ce]  PhaseIterGVN::optimize()+0x7e&lt;br/&gt;
V  [libjvm.so+0xa5303b]  Compile::Optimize()+0x90b&lt;br/&gt;
V  [libjvm.so+0xa54fb6]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1306&lt;br/&gt;
V  [libjvm.so+0x87bc66]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646&lt;br/&gt;
V  [libjvm.so+0xa66daa]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd1a&lt;br/&gt;
V  [libjvm.so+0xa67b98]  CompileBroker::compiler_thread_loop()+0x628&lt;br/&gt;
V  [libjvm.so+0x1a191fc]  JavaThread::thread_main_inner()+0x36c&lt;br/&gt;
V  [libjvm.so+0x1a194cb]  JavaThread::run()+0x25b&lt;br/&gt;
V  [libjvm.so+0x1a1ed54]  Thread::call_run()+0x104&lt;br/&gt;
V  [libjvm.so+0x1597d8c]  thread_native_entry(Thread*)+0x10c&lt;br/&gt;
...&lt;br/&gt;
```&lt;br/&gt;
See attached hs_err_pid3992644.log&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
#  Internal Error (/priv/simonisv/OpenJDK/Git/jdk/src/hotspot/share/opto/type.hpp:2059), pid=1152816, tid=1154124&lt;br/&gt;
#  assert(_base &amp;gt;= OopPtr &amp;amp;&amp;amp; _base &amp;lt;= AryPtr) failed: Not a Java pointer&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (21.0) (slowdebug build 21-internal-adhoc.simonisv.jdk)&lt;br/&gt;
...&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  91009 8214   !   4       io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend (285 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fff1306b000,0x00007fff1316c000],  sp=0x00007fff13166fe0,  free space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x61d636]  Type::is_oopptr() const+0x4e  (type.hpp:2059)&lt;br/&gt;
V  [libjvm.so+0x14cee55]  SubTypeCheckNode::sub(Type const*, Type const*) const+0x53  (subtypenode.cpp:37)&lt;br/&gt;
V  [libjvm.so+0x14c66b0]  SubNode::Value(PhaseGVN*) const+0xa6  (subnode.cpp:107)&lt;br/&gt;
V  [libjvm.so+0xcdacb3]  split_if(IfNode*, PhaseIterGVN*)+0x2ce  (ifnode.cpp:111)&lt;br/&gt;
V  [libjvm.so+0xce044c]  IfNode::Ideal_common(PhaseGVN*, bool)+0x128  (ifnode.cpp:1438)&lt;br/&gt;
V  [libjvm.so+0xce0496]  IfNode::Ideal(PhaseGVN*, bool)+0x30  (ifnode.cpp:1448)&lt;br/&gt;
V  [libjvm.so+0x1298244]  PhaseGVN::apply_ideal(Node*, bool)+0x70  (phaseX.cpp:667)&lt;br/&gt;
V  [libjvm.so+0x129a0fd]  PhaseIterGVN::transform_old(Node*)+0x12d  (phaseX.cpp:1196)&lt;br/&gt;
V  [libjvm.so+0x12998df]  PhaseIterGVN::optimize()+0x16b  (phaseX.cpp:1045)&lt;br/&gt;
V  [libjvm.so+0x93f89e]  Compile::Optimize()+0xce0  (compile.cpp:2378)&lt;br/&gt;
V  [libjvm.so+0x9385fa]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x16ca  (compile.cpp:842)&lt;br/&gt;
V  [libjvm.so+0x806ab4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a0  (c2compiler.cpp:118)&lt;br/&gt;
V  [libjvm.so+0x958bc8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa04  (compileBroker.cpp:2265)&lt;br/&gt;
V  [libjvm.so+0x9576fa]  CompileBroker::compiler_thread_loop()+0x462  (compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0x97b14a]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x84  (compilerThread.cpp:58)&lt;br/&gt;
V  [libjvm.so+0xd434ce]  JavaThread::thread_main_inner()+0x15c  (javaThread.cpp:719)&lt;br/&gt;
V  [libjvm.so+0xd43368]  JavaThread::run()+0x258  (javaThread.cpp:704)&lt;br/&gt;
V  [libjvm.so+0x15481ea]  Thread::call_run()+0x1a8  (thread.cpp:217)&lt;br/&gt;
V  [libjvm.so+0x1230036]  thread_native_entry(Thread*)+0x1a5  (os_linux.cpp:778)&lt;br/&gt;
...&lt;br/&gt;
```&lt;br/&gt;
See attached hs_err_pid1152816.log&lt;br/&gt;
</comment>
                            <comment id="14590690" author="simonis" created="Tue, 20 Jun 2023 10:59:13 -0700"  >I&amp;#39;ve attached a stripped down reproducer from &lt;a href=&quot;https://github.com/corretto/corretto-17/issues/110&quot;&gt;https://github.com/corretto/corretto-17/issues/110&lt;/a&gt; provided by Umut Kocasarac [1].&lt;br/&gt;
&lt;br/&gt;
Building:&lt;br/&gt;
```&lt;br/&gt;
$ unzip grpc-test.zip&lt;br/&gt;
$ cd grpc-test&lt;br/&gt;
$ mvn clean package spring-boot:repackage&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
To build and run the test you need JDK 17+ and Maven 3.9.2+.&lt;br/&gt;
&lt;br/&gt;
Running:&lt;br/&gt;
```&lt;br/&gt;
terminal1:$ java -XX:CompileCommand=&amp;#39;PrintInlining,io.grpc.kotlin.ServerCalls$serverCallListener$requests$1::invokeSuspend&amp;#39; -XX:CICompilerCount=16 -Dport=8008 -jar grpc-server/target/grpc-server-1.0-SNAPSHOT.jar&lt;br/&gt;
...&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; server started&lt;br/&gt;
...&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; received 100011&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; time diff PT1M32.67601825S&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; rate 6207&lt;br/&gt;
...&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
terminal2:$ java -showversion -Dport=8008 -jar grpc-client/target/grpc-client-1.0-SNAPSHOT.jar&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Usually the server started in `terminal1` will crash in about one out of ten runs. Once you get no more compiles of `ServerCalls$serverCallListener$requests$1::invokeSuspend` (indicated by the output of `&amp;gt;&amp;gt;&amp;gt; received ..` lines without interleaving compilations) in the first terminal, you can kill and restart the server and hope for a crash in the next run :)&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/umutkocasarac&quot;&gt;https://github.com/umutkocasarac&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14588437" author="simonis" created="Mon, 12 Jun 2023 01:20:42 -0700"  >This seems to be related to the following two Corretto issues:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/corretto/corretto-17/issues/110&quot;&gt;https://github.com/corretto/corretto-17/issues/110&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/corretto/corretto-17/issues/57&quot;&gt;https://github.com/corretto/corretto-17/issues/57&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Especially the second one has a pretty long discussion thread and some more hs_err files. For some people, excluding the following methods from JIT-compilation seems to have helped to mitigate the problem:&lt;br/&gt;
```&lt;br/&gt;
-XX:CompileCommand=&amp;quot;exclude,kotlinx.coroutines.flow.AbstractFlow::collect&amp;quot;&lt;br/&gt;
-XX:CompileCommand=&amp;quot;exclude,kotlinx.coroutines.flow.SafeFlow::collectSafely&amp;quot;&lt;br/&gt;
-XX:CompileCommand=&amp;quot;exclude,kotlinx.coroutines.reactive.PublisherAsFlow::collectImpl&amp;quot;&lt;br/&gt;
-XX:CompileCommand=&amp;quot;exclude,io.grpc.kotlin.ServerCalls*::*&amp;quot;&lt;br/&gt;
```&lt;br/&gt;
</comment>
                            <comment id="14563706" author="thartmann" created="Tue, 28 Feb 2023 22:16:04 -0800"  >Thanks, Martijn. It would also be interesting to know if this is a recent regression in JDK 17u or an old issue.&lt;br/&gt;
&lt;br/&gt;
Pre-ILW = Crash during C2 compilation, intermittent and non-reproducible with Kotlin workload, no known workaround but disable compilation of affected method = HLM = P3</comment>
                            <comment id="14563655" author="karianna" created="Tue, 28 Feb 2023 16:38:32 -0800"  >I&amp;#39;ll contact the Kotlin folks and see if they can produce a reproducer or at least that debug build&lt;br/&gt;
&lt;br/&gt;
UPDATE:  I asked for more details at  &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-54693/&quot;&gt;https://youtrack.jetbrains.com/issue/KT-54693/&lt;/a&gt;</comment>
                            <comment id="14563323" author="thartmann" created="Mon, 27 Feb 2023 23:36:38 -0800"  >In addition, could the reporter(s) try to reproduce with a debug VM build?&lt;br/&gt;
&lt;br/&gt;
Given, that this is with Kotlin and the reporter mentioned &amp;quot;we generate code, which is not possible to write in Java - we have non-canonical loops or jumps to catch blocks, which are likely to not be covered by tests&amp;quot;, it could be a problem with the handling of irreducible loops (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280126&quot; title=&quot;C2: detect and remove dead irreducible loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280126&quot;&gt;&lt;strike&gt;JDK-8280126&lt;/strike&gt;&lt;/a&gt;, [~epeter]).</comment>
                            <comment id="14563308" author="thartmann" created="Mon, 27 Feb 2023 23:04:27 -0800"  >There is not much we can do here without a reproducer. [~karianna], was a replay compilation file (replay_pid...log) generated that could be shared?</comment>
                            <comment id="14563253" author="karianna" created="Mon, 27 Feb 2023 18:47:20 -0800"  >Kotlin folks suspect it is a genuine C2 compiler crash - also see commentary here: &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-54693/SIGSEGV-0xb-at-pc0x0000000000000000-C2-CompilerThread0&quot;&gt;https://youtrack.jetbrains.com/issue/KT-54693/SIGSEGV-0xb-at-pc0x0000000000000000-C2-CompilerThread0&lt;/a&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105401">JDK-8312015</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5105995">JDK-8312517</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106416">JDK-8312910</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107806">JDK-8314101</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5106807">JDK-8313262</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="104378" name="3992644_ideal.txt.gz" size="238917" author="simonis" created="Wed, 21 Jun 2023 00:23:49 -0700"/>
                            <attachment id="104379" name="3992644_inlining.txt" size="55820" author="simonis" created="Wed, 21 Jun 2023 00:23:49 -0700"/>
                            <attachment id="104402" name="TestCrashAtIGVNSplitIfSubType.java" size="848" author="roland" created="Fri, 23 Jun 2023 02:00:37 -0700"/>
                            <attachment id="104369" name="grpc-test.zip" size="20519" author="simonis" created="Tue, 20 Jun 2023 10:58:46 -0700"/>
                            <attachment id="102815" name="hs_err_pid1.log" size="99770" author="karianna" created="Mon, 27 Feb 2023 18:45:33 -0800"/>
                            <attachment id="104367" name="hs_err_pid1152816.log" size="112027" author="simonis" created="Tue, 20 Jun 2023 10:58:09 -0700"/>
                            <attachment id="104432" name="hs_err_pid2467188.log" size="202645" author="vlivanov" created="Tue, 27 Jun 2023 13:23:59 -0700"/>
                            <attachment id="104365" name="hs_err_pid3992644.log" size="106000" author="simonis" created="Tue, 20 Jun 2023 10:57:49 -0700"/>
                            <attachment id="104368" name="replay_pid1152816.log" size="743544" author="simonis" created="Tue, 20 Jun 2023 10:58:09 -0700"/>
                            <attachment id="104431" name="replay_pid2467188.log" size="224716" author="vlivanov" created="Tue, 27 Jun 2023 13:23:59 -0700"/>
                            <attachment id="104366" name="replay_pid3992644.log" size="573571" author="simonis" created="Tue, 20 Jun 2023 10:57:50 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30jnn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>