<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:15:14 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8315683] Parallelize java/util/concurrent/tck/JSR166TestCase.java</title>
                <link>https://bugs.openjdk.org/browse/JDK-8315683</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>This test is running in tier1, and takes about 400 seconds to complete. Thus, it drags the execution time of tier1 on large machines. We can split the run configurations a bit so that test is more parallel.</description>
                <environment></environment>
        <key id="5109633">JDK-8315683</key>
            <summary>Parallelize java/util/concurrent/tck/JSR166TestCase.java</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rsoumadipta">Roy Soumadipta</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok-next</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>testbug</label>
                    </labels>
                <created>Tue, 5 Sep 2023 03:29:29 -0700</created>
                <updated>Thu, 2 Jan 2025 04:20:24 -0800</updated>
                            <resolved>Thu, 14 Sep 2023 12:24:25 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14616185" author="roboduke" created="Thu, 5 Oct 2023 06:11:25 -0700"  >[jdk11u-fix-request] Approval Request from Soumadipta Roy&lt;br/&gt;
Improves test performance. Applies cleanly, test still passes.</comment>
                            <comment id="14616184" author="roboduke" created="Thu, 5 Oct 2023 06:11:24 -0700"  >[jdk17u-fix-request] Approval Request from Soumadipta Roy&lt;br/&gt;
Improves test performance. Applies cleanly, test still passes.</comment>
                            <comment id="14614380" author="roboduke" created="Wed, 27 Sep 2023 07:59:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2151&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2151&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-27 14:49:42 +0000</comment>
                            <comment id="14613562" author="roboduke" created="Mon, 25 Sep 2023 01:52:19 -0700"  >[jdk21u-fix-request] Approval Request from Soumadipta Roy&lt;br/&gt;
Backport 4415261688dc258b6d254668bcf8818c61cc65ea to JDK21u</comment>
                            <comment id="14613209" author="roboduke" created="Fri, 22 Sep 2023 07:55:28 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u/pull/84&quot;&gt;https://git.openjdk.org/jdk11u/pull/84&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-22 14:47:20 +0000</comment>
                            <comment id="14613203" author="roboduke" created="Fri, 22 Sep 2023 07:45:08 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/195&quot;&gt;https://git.openjdk.org/jdk21u/pull/195&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-22 14:37:02 +0000</comment>
                            <comment id="14612287" author="roboduke" created="Tue, 19 Sep 2023 09:22:18 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1752&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1752&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-19 16:12:45 +0000</comment>
                            <comment id="14611300" author="dukebot" created="Thu, 14 Sep 2023 12:24:24 -0700"  >Changeset: 44152616&lt;br/&gt;
Author:    Soumadipta Roy &amp;lt;&lt;a href=&apos;mailto:roysouma@amazon.com&apos;&gt;roysouma@amazon.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Martin Buchholz &amp;lt;&lt;a href=&apos;mailto:martin@openjdk.org&apos;&gt;martin@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-09-14 19:22:31 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4415261688dc258b6d254668bcf8818c61cc65ea&quot;&gt;https://git.openjdk.org/jdk/commit/4415261688dc258b6d254668bcf8818c61cc65ea&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14609511" author="roboduke" created="Thu, 7 Sep 2023 07:04:00 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15619&quot;&gt;https://git.openjdk.org/jdk/pull/15619&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-07 13:55:18 +0000</comment>
                            <comment id="14609426" author="martin" created="Thu, 7 Sep 2023 01:09:37 -0700"  >&amp;gt; I am speculating here, but I think this sequencing is intentional: jtreg can mix multiple @build/@clean actions between the @run actions. That is, the single @test &amp;quot;block&amp;quot; acts like a sequential script. If one wants parallelization, one just splits into multiple @test-s.&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s also my understanding.  I vaguely recall having deliberately chosen to use a single @test to **avoid** parallelization, but I did not consider enabling segregation into separate tiers.</comment>
                            <comment id="14609415" author="shade" created="Thu, 7 Sep 2023 00:17:14 -0700"  >I am speculating here, but I think this sequencing is intentional: jtreg can mix multiple @build/@clean actions between the @run actions. That is, the single @test &amp;quot;block&amp;quot; acts like a sequential script. If one wants parallelization, one just splits into multiple @test-s.&lt;br/&gt;
&lt;br/&gt;
We are now waiting on my teammate to pick it up and produce a PR :)</comment>
                            <comment id="14609372" author="martin" created="Wed, 6 Sep 2023 19:58:40 -0700"  >More notes:&lt;br/&gt;
&lt;br/&gt;
All of these tests are /othervm/   Why doesn&amp;#39;t jtreg already feel free to parallelize them?  Presumably because any @run could communicate with a subsequent @run via the filesystem?&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s useful for race-hunting to be able to give all CPU resources to a single @run.&lt;br/&gt;
&lt;br/&gt;
I agree splitting up the @runs into separate @tests is useful.</comment>
                            <comment id="14609292" author="shade" created="Wed, 6 Sep 2023 11:46:18 -0700"  >Oh, and actually, once we do this kind of split by `@run`, they would come with test IDs, which could probably be used in TEST.groups. So we could probably run some configs in tier1, and the rest in tier2.</comment>
                            <comment id="14609091" author="shade" created="Wed, 6 Sep 2023 00:52:08 -0700"  >The focus for this improvement would be splitting the test configurations in the separate `@run` scripts, so that jtreg would be able to run them concurrently. This way, we would not need to modify the test itself, while it would stop introducing the large execution time tail in tier1. This is in line with what we do with other large-ish tests in JDK: if test runs for too long, split it in separate parallel configs. The improvements to the test itself can be done separately.</comment>
                            <comment id="14609019" author="martin" created="Tue, 5 Sep 2023 17:57:59 -0700"  >JSR166TestCase.java is more of a test suite than a test; it runs thousands of separate test methods.&lt;br/&gt;
&lt;br/&gt;
junit imposes far less overhead than writing each test method as its own jtreg test would.&lt;br/&gt;
&lt;br/&gt;
There was a significant effort to remove all sleeps for performance and robustness some years ago.  The test methods themselves are pretty efficient.  There is a jsr166.profileTests system property that can be used to check that.&lt;br/&gt;
&lt;br/&gt;
One thing stands out as not being very performant - the use of jtreg @run variants of obscure configurations which only rarely changes test method execution.   Most of the testing value is running a single&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;* @run junit/othervm/timeout=1000 JSR166TestCase&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
The other @runs could plausibly be put into a lower tier.  That might involve moving them into a separate source file (weird!) or modifying jtreg to support more than one tier in a single source file.&lt;br/&gt;
&lt;br/&gt;
There is value in having these tests run in with a variety of CPU resource availability, perhaps in containers that enforce such limits.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5111769">JDK-8317559</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111990">JDK-8317748</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111991">JDK-8317749</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5145478">JDK-8345570</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147138">JDK-8346938</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3309n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="215"><![CDATA[java.util.concurrent]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>