<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:44:23 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8318599] HttpURLConnection cache issues leading to crashes in JGSS w/ native GSS introduced by 8303809</title>
                <link>https://bugs.openjdk.org/browse/JDK-8318599</link>
                <project id="10100" key="JDK">JDK</project>
                    <description># Crashes&lt;br/&gt;
&lt;br/&gt;
We recently upgrade to OpenJDK 17.0.8.1 and started observing crashes&lt;br/&gt;
resulting from double-frees via `gss_delete_sec_context()`. &lt;br/&gt;
&lt;br/&gt;
Adding `-Djdk.spnego.cache=false` to our java invocations stops the&lt;br/&gt;
crashes.  We believe this is due to a race condition that has long been&lt;br/&gt;
in `HttpURLConnection` that was mostly harmless before but which with&lt;br/&gt;
the addition of this commit:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;16843770b5a 8303809: Dispose context in SPNEGO NegotiatorImpl&lt;br/&gt;
&lt;br/&gt;
became a use-after-free / double-free bug, leading to crashes.&lt;br/&gt;
&lt;br/&gt;
This happens with stock 17.0.8.1+1 from Adoptium.&lt;br/&gt;
&lt;br/&gt;
Attached is a reproducer, Test.java, which you can run like this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;$ # credendials are kinit &lt;a href=&apos;mailto:user@jgssbug.twosigma.com&apos;&gt;user@jgssbug.twosigma.com&lt;/a&gt;, password password&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;$ #&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;$ &amp;quot;$JAVA_HOME/bin/java&amp;quot; \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-Dsun.security.jgss.native=true \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-Dsun.security.jgss.lib=/usr/lib/libgssapi_krb5.so \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test.java &lt;a href=&quot;https://kerberos.club/tmp/jgssbug.txt&quot;&gt;https://kerberos.club/tmp/jgssbug.txt&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
It doesn&amp;#39;t crash every time, but it crashes often.&lt;br/&gt;
&lt;br/&gt;
A typical Java stack trace upon crashing looks like:&lt;br/&gt;
&lt;br/&gt;
j  sun.security.jgss.wrapper.GSSLibStub.deleteContext(J)J+0 &lt;a href=&apos;mailto:java.security.jgss@17.0.8.1&apos;&gt;java.security.jgss@17.0.8.1&lt;/a&gt;&lt;br/&gt;
j  sun.security.jgss.wrapper.NativeGSSContext.dispose()V+76 &lt;a href=&apos;mailto:java.security.jgss@17.0.8.1&apos;&gt;java.security.jgss@17.0.8.1&lt;/a&gt;&lt;br/&gt;
j  sun.security.jgss.GSSContextImpl.dispose()V+16 &lt;a href=&apos;mailto:java.security.jgss@17.0.8.1&apos;&gt;java.security.jgss@17.0.8.1&lt;/a&gt;&lt;br/&gt;
j  sun.net.&lt;a href=&quot;http://www.protocol.http.spnego.NegotiatorImpl.disposeContext()V+11&quot;&gt;www.protocol.http.spnego.NegotiatorImpl.disposeContext()V+11&lt;/a&gt; &lt;a href=&apos;mailto:java.security.jgss@17.0.8.1&apos;&gt;java.security.jgss@17.0.8.1&lt;/a&gt;&lt;br/&gt;
J 4456 c1 sun.net.&lt;a href=&quot;http://www.protocol.http.NegotiateAuthentication.disposeContext()V&quot;&gt;www.protocol.http.NegotiateAuthentication.disposeContext()V&lt;/a&gt; &lt;a href=&apos;mailto:java.base@17.0.8.1&apos;&gt;java.base@17.0.8.1&lt;/a&gt; (24 bytes) @ 0x00007f909dc33834 [0x00007f909dc337c0+0x0000000&lt;br/&gt;
000000074]&lt;br/&gt;
j  sun.net.&lt;a href=&quot;http://www.protocol.http.HttpURLConnection.getInputStream0()Ljava/io/InputStream;+1923&quot;&gt;www.protocol.http.HttpURLConnection.getInputStream0()Ljava/io/InputStream;+1923&lt;/a&gt; &lt;a href=&apos;mailto:java.base@17.0.8.1&apos;&gt;java.base@17.0.8.1&lt;/a&gt;&lt;br/&gt;
j  sun.net.&lt;a href=&quot;http://www.protocol.http.HttpURLConnection.getInputStream()Ljava/io/InputStream;+62&quot;&gt;www.protocol.http.HttpURLConnection.getInputStream()Ljava/io/InputStream;+62&lt;/a&gt; &lt;a href=&apos;mailto:java.base@17.0.8.1&apos;&gt;java.base@17.0.8.1&lt;/a&gt;&lt;br/&gt;
j  sun.net.&lt;a href=&quot;http://www.protocol.https.HttpsURLConnectionImpl.getInputStream()Ljava/io/InputStream;+4&quot;&gt;www.protocol.https.HttpsURLConnectionImpl.getInputStream()Ljava/io/InputStream;+4&lt;/a&gt; &lt;a href=&apos;mailto:java.base@17.0.8.1&apos;&gt;java.base@17.0.8.1&lt;/a&gt;&lt;br/&gt;
j  Test.lambda$main$0()V+16&lt;br/&gt;
j  Test$$Lambda$207+0x00007f9020144208.run()V+0&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@17.0.8.1&apos;&gt;java.base@17.0.8.1&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
&lt;br/&gt;
On the C side the crash typically happens in the allocator, typically in&lt;br/&gt;
`free()`:&lt;br/&gt;
&lt;br/&gt;
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50&lt;br/&gt;
#1  0x00007fb6e1185535 in __GI_abort () at abort.c:79&lt;br/&gt;
#2  0x00007fb6e11dc648 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7fb6e12e62a0 &amp;quot;%s\n&amp;quot;) at ../sysdeps/posix/libc_fatal.c:181&lt;br/&gt;
#3  0x00007fb6e11e2d6a in malloc_printerr (str=str@entry=0x7fb6e12e444e &amp;quot;free(): invalid pointer&amp;quot;) at malloc.c:5359&lt;br/&gt;
#4  0x00007fb6e11e459c in _int_free (av=&amp;lt;optimized out&amp;gt;, p=&amp;lt;optimized out&amp;gt;, have_lock=&amp;lt;optimized out&amp;gt;) at malloc.c:4180&lt;br/&gt;
#5  0x00007fb582ba5b6d in krb5_free_address (context=context@entry=0x7fb5d80cbf60, val=0x7fb5d8000080) at kfree.c:62&lt;br/&gt;
#6  0x00007fb582b93d9e in krb5_auth_con_free (context=context@entry=0x7fb5d80cbf60, auth_context=0x7fb5d80778a0) at auth_con.c:60&lt;br/&gt;
#7  0x00007fb6440a3eec in krb5_gss_delete_sec_context (minor_status=0x7fb586868504, context_handle=0x7fb5d80e22d0, output_token=&amp;lt;optimized out&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;at delete_sec_context.c:77&lt;br/&gt;
#8  0x00007fb6440964b0 in gssint_delete_internal_sec_context (minor_status=0x7fb586868504, mech_type=&amp;lt;optimized out&amp;gt;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;internal_ctx=internal_ctx@entry=0x7fb5d80e22d0, output_token=0x0) at g_glue.c:606&lt;br/&gt;
#9  0x00007fb6440946dd in gss_delete_sec_context (minor_status=&amp;lt;optimized out&amp;gt;, context_handle=0x7fb5d80d2be8, output_token=&amp;lt;optimized out&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;at g_delete_sec_context.c:91&lt;br/&gt;
#10 0x00007fb6440b8dfe in spnego_gss_delete_sec_context (minor_status=&amp;lt;optimized out&amp;gt;, context_handle=0x7fb5d807bd70, output_token=&amp;lt;optimized out&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;at spnego_mech.c:2161&lt;br/&gt;
#11 0x00007fb6440964b0 in gssint_delete_internal_sec_context (minor_status=0x7fb586868504, mech_type=&amp;lt;optimized out&amp;gt;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;internal_ctx=internal_ctx@entry=0x7fb5d807bd70, output_token=0x0) at g_glue.c:606&lt;br/&gt;
#12 0x00007fb6440946dd in gss_delete_sec_context (minor_status=&amp;lt;optimized out&amp;gt;, context_handle=0x7fb586868508, output_token=&amp;lt;optimized out&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;at g_delete_sec_context.c:91&lt;br/&gt;
#13 0x00007fb6dc0559ff in Java_sun_security_jgss_wrapper_GSSLibStub_deleteContext () from /home/nico/tmp/jdk-17.0.8.1+1/lib/libj2gss.so&lt;br/&gt;
#14 0x00007fb6c89a653a in ?? ()&lt;br/&gt;
#15 0x0000000000000000 in ?? ()&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;ve seen other variations, but always they can be traced to&lt;br/&gt;
`HttpURLConnection`.&lt;br/&gt;
&lt;br/&gt;
(We do maintain local patches to OpenJDK JGSS code as well.  But that&amp;#39;s&lt;br/&gt;
a story for another time.  We do want to try again to upstream those&lt;br/&gt;
patches.  Because we maintain such patches we developed an interim fix&lt;br/&gt;
where we use `synchronized (lock)` in the JGSS `dispose()` methods and&lt;br/&gt;
also `Reference.reachabilityFence(this)`, which worked to prevent the&lt;br/&gt;
crashes, but that was before we learned that `-Djdk.spnego.cache=false`&lt;br/&gt;
also works.  In any case, stock, unpatched OpenJDK 17.0.8.1 evinces this&lt;br/&gt;
crasher.)&lt;br/&gt;
&lt;br/&gt;
# Root cause&lt;br/&gt;
&lt;br/&gt;
What 8303809 did was add calls to `dispose()` on `GSSContext` objects in&lt;br/&gt;
NegotiatorImpl.java in a new method called `disposeContext()` that all&lt;br/&gt;
HTTP authentication mechanisms now implement and which 8303809 also&lt;br/&gt;
added.&lt;br/&gt;
&lt;br/&gt;
It took us a while to realize that the use of the `AuthCache` in&lt;br/&gt;
`HttpURLConnection` implies concurrent access to the cached contexts via&lt;br/&gt;
concurrent HTTP requests to the same origin.&lt;br/&gt;
&lt;br/&gt;
Concurrent access to and disposal of those context objects then leads to&lt;br/&gt;
use-after-free / double-free errors when using sun.security.jgss.native.&lt;br/&gt;
&lt;br/&gt;
There&amp;#39;s really several issues going on here:&lt;br/&gt;
&lt;br/&gt;
- The `dispose()` methods in 17.x in the JGSS native C GSS bindings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;clases are dangerous, as are finalizers generally (and these&lt;br/&gt;
&amp;nbsp;&amp;nbsp;`dispose()` methods are called from finalizers).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This is fixed in later OpenJDK releases by making use of `Cleaner`,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;so there&amp;#39;s not much more to say about this here.&lt;br/&gt;
&lt;br/&gt;
- The `AuthCache` in `src/java.base/share/classes/sun/net/www/protocol/http/`&lt;br/&gt;
&amp;nbsp;&amp;nbsp;implies concurrency, and it&amp;#39;s not clear that concurrency is allowable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;in all cases.&lt;br/&gt;
&lt;br/&gt;
- In the case of RFC 4559 &amp;quot;Negotiate&amp;quot; and GSS concurrency is very much&lt;br/&gt;
&amp;nbsp;&amp;nbsp;not permitted.  The GSS APIs can and should be thread-safe, but it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;still an error to invoke `initSecContext()` concurrently on the same&lt;br/&gt;
&amp;nbsp;&amp;nbsp;`GSSContext`!&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;GSS-API `initSecContext()`/`acceptSecContext()` are strictly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;synchronous and serial.&lt;br/&gt;
&lt;br/&gt;
- The `AuthCache` in `src/java.base/share/classes/sun/net/www/protocol/http/`&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is likely a misfeature altogether, at least as far as sharing GSS-&lt;br/&gt;
&amp;nbsp;&amp;nbsp;like HTTP authentication mechanism contexts goes, and probably for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;all other HTTP auth methods too.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;It&amp;#39;s not ok to take a reply token from a `WWW-Authenticate:` response&lt;br/&gt;
&amp;nbsp;&amp;nbsp;header and consume it together with a &amp;quot;context&amp;quot; created by a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;unrelated request [to the same origin].&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Every `WWW-Authenticate:`/`Authorization:` token must be matched to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;the same [serial train of] request[s].&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Thus if we have an RFC 4559 Negotiate exchange requiring 5 tokens, so&lt;br/&gt;
&amp;nbsp;&amp;nbsp;something like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0: request..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1: 401 response w/ WWW-Authenticate: Negotiate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2: request w/ Authorization: Negotiate ...           (continue needed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3: 200 response w/ WWW-Authenticate: Negotiate ...   (continue needed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4: request w/ Authorization: Negotiate ...           (continue needed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;5: 200 response w/ WWW-Authenticate: Negotiate ...   (complete)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;it would not be permissible for one of those reply tokens to be fed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;to another request&amp;#39;s GSSContext, nor would it be OK to have more than&lt;br/&gt;
&amp;nbsp;&amp;nbsp;one serial set of requests share the same GSSContext.&lt;br/&gt;
&lt;br/&gt;
- The foregoing also applies to SCRAM, DIGEST-MD5, and just about any&lt;br/&gt;
&amp;nbsp;&amp;nbsp;and all HTTP authentication methods that I know.  I believe that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;there is no value in caching HTTP authentication mechanism contexts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;on the client side.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HTTP Authentication mechanisms like SCRAM and DIGEST-MD5 are&lt;br/&gt;
&amp;nbsp;&amp;nbsp;three-message mechanisms when counting the initial challenge:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0: request...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1: 401 response w/ WWW-Authenticate: DIGEST-MD5 &amp;lt;challenge&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2: request w/ Authorization: DIGEST-MD5 ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3: 200 w/ WWW-Authenticate: DIGEST-MD5 ... (complete)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;There is no case in which caching and sharing a SCRAM or DIGEST-MD5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;authentication context is useful because there is only one request/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;response in which there is a context needed at all: between 2 and 3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;inclusive in the above diagram.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Perhaps a single challenge can be shared with multiple subsequent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;requests that will optimistically use SCRAM or DIGEST-MD5 knowing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;that one response demanded it, but one should probably not do this,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;though I could find nothing in RFC 5802 and 7677.&lt;br/&gt;
&lt;br/&gt;
- Negotiate is really a bearer token system, albeit with the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;possibility of using channel bindings.  Meaning we never use the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;resulting GSSContext to encrypt or sign any part of the HTTP requests&lt;br/&gt;
&amp;nbsp;&amp;nbsp;and responses authenticated with that context.  Therefore there&amp;#39;s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;never any point in sharing a GSSContext in HTTP, not even once it&amp;#39;s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fully-established -- there is no point in doing anything other than&lt;br/&gt;
&amp;nbsp;&amp;nbsp;disposing of a fully-established GSSContext in HTTP/Negotiate.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(Attempts to develop standards for encrypting/signing of HTTP&lt;br/&gt;
&amp;nbsp;&amp;nbsp;requests and responses at the HTTP layer rather than in TLS have&lt;br/&gt;
&amp;nbsp;&amp;nbsp;historically failed.  If one attempt to standardize such a thing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;succeeds, _then_ there will be something worth sharing in a cache&lt;br/&gt;
&amp;nbsp;&amp;nbsp;with care to prevent use-after-dispose.)&lt;br/&gt;
&lt;br/&gt;
- Because of the preceding, in HTTP/Negotiate it is desirable to &amp;quot;free&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;any GSSContext immediately after it is complete.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This is presumably how you came to add the `disposeContext()` method:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;because those cached contexts otherwise sit there using lots of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;memory for no reason; someone must have noticed.  However, rather&lt;br/&gt;
&amp;nbsp;&amp;nbsp;than have an explicit `disposeContext()` these contexts should just&lt;br/&gt;
&amp;nbsp;&amp;nbsp;immediately be disposed of when complete or failed.&lt;br/&gt;
&lt;br/&gt;
# Possible fixes&lt;br/&gt;
&lt;br/&gt;
- Backport the use of `Cleaner` in the JGSS `dispose()` methods.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This would not be very satisfying because the `HttpURLConnection`&lt;br/&gt;
&amp;nbsp;&amp;nbsp;`AuthCache` would remain buggy, but at least the JVM wouldn&amp;#39;t crash.&lt;br/&gt;
&lt;br/&gt;
- Default `jdk.spnego.cache` to `false`.&lt;br/&gt;
&lt;br/&gt;
- Rethink or remove the `AuthCache` in `HttpURLConnection`.&lt;br/&gt;
&lt;br/&gt;
- Something else?</description>
                <environment></environment>
        <key id="5112940">JDK-8318599</key>
            <summary>HttpURLConnection cache issues leading to crashes in JGSS w/ native GSS introduced by 8303809</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="michaelm">Michael McMahon</assignee>
                                    <reporter username="weijun">Weijun Wang</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>regression</label>
                    </labels>
                <created>Fri, 20 Oct 2023 06:40:35 -0700</created>
                <updated>Mon, 23 Sep 2024 02:34:48 -0700</updated>
                            <resolved>Mon, 27 Nov 2023 14:45:47 -0800</resolved>
                                    <version>11.0.21</version>
                    <version>17.0.8.1</version>
                    <version>17.0.8</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14666385" author="JIRAUSER20917" created="Thu, 18 Apr 2024 18:15:28 -0700"  >Fix request [11u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 11.0.24-oracle.&lt;br/&gt;
Only a small change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14666384" author="JIRAUSER20917" created="Thu, 18 Apr 2024 18:15:17 -0700"  >&lt;br/&gt;
Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.11-oracle.&lt;br/&gt;
Only a small change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14666383" author="JIRAUSER20917" created="Thu, 18 Apr 2024 18:14:58 -0700"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.3-oracle.&lt;br/&gt;
Only a small change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14666155" author="roboduke" created="Thu, 18 Apr 2024 00:36:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2671&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2671&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-18 07:31:18 +0000</comment>
                            <comment id="14666154" author="roboduke" created="Thu, 18 Apr 2024 00:35:48 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2418&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2418&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-18 07:30:51 +0000</comment>
                            <comment id="14666153" author="roboduke" created="Thu, 18 Apr 2024 00:34:39 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/508&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/508&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-18 07:29:50 +0000</comment>
                            <comment id="14629313" author="dukebot" created="Mon, 27 Nov 2023 14:45:46 -0800"  >Changeset: f1a24f6d&lt;br/&gt;
Author:    Michael McMahon &amp;lt;&lt;a href=&apos;mailto:michaelm@openjdk.org&apos;&gt;michaelm@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-27 22:43:48 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/f1a24f6d4827f9b8648dd2afe6d606dab67d51fe&quot;&gt;https://git.openjdk.org/jdk/commit/f1a24f6d4827f9b8648dd2afe6d606dab67d51fe&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14628841" author="roboduke" created="Fri, 24 Nov 2023 07:19:46 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16347&quot;&gt;https://git.openjdk.org/jdk/pull/16347&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-24 15:33:34 +0000</comment>
                            <comment id="14620676" author="michaelm" created="Tue, 24 Oct 2023 08:11:21 -0700"  >This does appear to be a misuse of the authentication cache in the case of Kerberos (Negotiate) authentication. Though that is not the case for other auth schemes, because normally what gets cached are credentials, rather than security tokens. &lt;br/&gt;
&lt;br/&gt;
It makes no sense to cache GSS contexts either, outside the scope of any individual request (being authenticated through multiple request/responses). But, we don&amp;#39;t need to cache it in this situation as it is already kept as a local variable in the HttpURLConnection impl class.&lt;br/&gt;
&lt;br/&gt;
The fix here then needs to disable the cache permanently for the Negotiate scheme, which is basically what the system property workaround (-Djdk.spnego.cache=false) is doing. However, the system property also controls the keep-alive cache behavior for Negotiate requests. So, disabling this property (in the workaround) means that authenticated request connections are not kept alive. The fix will therefore maintain the current behavior of this property with respect to the keep alive cache (ie the property is disabled by default) and connections will be kept alive.</comment>
                            <comment id="14619845" author="weijun" created="Fri, 20 Oct 2023 06:41:59 -0700"  >More info from Nico:&lt;br/&gt;
&lt;br/&gt;
I failed to include the reproducer, which is:&lt;br/&gt;
&lt;br/&gt;
import java.net.*;&lt;br/&gt;
&lt;br/&gt;
public class Test {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; 500; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Thread(() -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;URL url = new URL(args[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var huc = url.openConnection();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;huc.getInputStream().readAllBytes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(&amp;quot;.&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
and&lt;br/&gt;
&lt;br/&gt;
Also, a colleague informs me that 17.0.5 (as packaged by Debian) w/o `-Djdk.spnego.cache=false` doesn&amp;#39;t exhibit the double-free/use-after-free crashes (as expected), but:&lt;br/&gt;
&lt;br/&gt;
I do see some &amp;quot;Authentication failure&amp;quot; / and &amp;quot;java.lang.NullPointerException: Cannot invoke &amp;quot;sun.net.&lt;a href=&quot;http://www.protocol.http.Negotiator.nextToken(byte&quot;&gt;www.protocol.http.Negotiator.nextToken(byte&lt;/a&gt;[])&amp;quot; because &amp;quot;this.negotiator&amp;quot; is null&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
That seems to support the idea that the `AuthCache` is harmful.&lt;br/&gt;
</comment>
                            <comment id="14619844" author="weijun" created="Fri, 20 Oct 2023 06:41:25 -0700"  >This bug is reported by Nicolas Williams at &lt;a href=&quot;https://mail.openjdk.org/pipermail/security-dev/2023-October/037622.html&quot;&gt;https://mail.openjdk.org/pipermail/security-dev/2023-October/037622.html&lt;/a&gt;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5120016">JDK-8324691</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120037">JDK-8324711</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120039">JDK-8324713</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127355">JDK-8330643</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127360">JDK-8330648</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127363">JDK-8330651</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5095758">JDK-8303809</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33kmr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="193"><![CDATA[java.net]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17001"><![CDATA[Not verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>