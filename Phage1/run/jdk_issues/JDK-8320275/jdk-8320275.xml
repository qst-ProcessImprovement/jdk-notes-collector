<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:50:33 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8320275] assert(_chunk-&gt;bitmap().at(index)) failed: Bit not set at index</title>
                <link>https://bugs.openjdk.org/browse/JDK-8320275</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>While working on Loom I run into the following crash when running applications/jetty/Jetty.java:&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error open/src/hotspot/share/oops/stackChunkOop.cpp:506), pid=2390677, tid=2390742&lt;br/&gt;
#  assert(_chunk-&amp;gt;bitmap().at(index)) failed: Bit not set at index 447 corresponding to 0x00000006ff888ba4&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007eff202fa6a0):  JavaThread &amp;quot;ForkJoinPool-1-worker-2&amp;quot; daemon [_thread_in_Java, id=2390742, stack(0x00007efee3eff000,0x00007efee4000000) (1028K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007efee3eff000,0x00007efee4000000],  sp=0x00007efee3ffc600,  free space=1013k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x166d363]  void StackChunkVerifyOopsClosure::do_oop_work&amp;lt;narrowOop&amp;gt;(narrowOop*)+0x2a3  (stackChunkOop.cpp:506)&lt;br/&gt;
V  [libjvm.so+0x16759e5]  bool VerifyStackChunkFrameClosure::do_frame&amp;lt;(ChunkFrames)0, SmallRegisterMap&amp;gt;(StackChunkFrameStream&amp;lt;(ChunkFrames)0&amp;gt; const&amp;amp;, SmallRegisterMap const*) [clone .isra.0]+0x585  (stackChunkOop.cpp:498)&lt;br/&gt;
V  [libjvm.so+0x167681f]  void stackChunkOopDesc::iterate_stack&amp;lt;(ChunkFrames)0, VerifyStackChunkFrameClosure&amp;gt;(VerifyStackChunkFrameClosure*)+0x9f  (stackChunkOop.inline.hpp:258)&lt;br/&gt;
V  [libjvm.so+0x1667775]  stackChunkOopDesc::verify(unsigned long*, int*, int*, int*)+0x555  (stackChunkOop.inline.hpp:226)&lt;br/&gt;
V  [libjvm.so+0xa4b3a8]  Continuation::debug_verify_continuation(oop)+0x188  (continuation.cpp:629)&lt;br/&gt;
V  [libjvm.so+0xa51c9d]  verify_continuation(oop) [clone .isra.0]+0x3d  (continuationFreezeThaw.cpp:180)&lt;br/&gt;
V  [libjvm.so+0xa7235e]  long* thaw_internal&amp;lt;Config&amp;lt;(oop_kind)0, G1BarrierSet&amp;gt; &amp;gt;(JavaThread*, Continuation::thaw_kind)+0x47e  (continuationFreezeThaw.cpp:3044)&lt;br/&gt;
V  [libjvm.so+0xa72b5e]  long* thaw&amp;lt;Config&amp;lt;(oop_kind)0, G1BarrierSet&amp;gt; &amp;gt;(JavaThread*, int)+0x5e  (continuationFreezeThaw.cpp:267)&lt;br/&gt;
v  ~StubRoutines::Cont thaw return barrier 0x00007effcf86c70b&lt;br/&gt;
Registers:&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
The assert fails while verifying the frame(c2 compiled) at the top of the stackChunk. The stackChunk is in gc mode but we found a narrowoop for this frame that doesn&amp;#39;t have its corresponding bit set. The problem is that while thawing its callee we cleared the bitmap range associated with the argument area but the narrow oop happens to land at the very last stack slot of this area.  &lt;br/&gt;
&lt;br/&gt;
Loom code assumes the size of the argument area is always a multiple of a word, as SharedRuntime::java_calling_convention() indicates. But c2 doesn&amp;#39;t seem to follow this convention and knowing the last argument is a boolean and that it only takes one stack slot, it&amp;#39;s using the remaining space to store a narrow oop for this frame.&lt;br/&gt;
&lt;br/&gt;
Here is the relevant layout for both frames (values are from a different debugging run):&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
[stress.process.err]  0x00007f1961d261d0: 0x00007f1961d26250 #15 nmethod 0x00007f19e5227010 for method J org.jvnet.hk2.internal.ServiceLocatorImpl.addConfiguration(Lorg/jvnet/hk2/internal/DynamicConfigurationImpl;)V&lt;br/&gt;
[stress.process.err]                                         - #0 scope org.jvnet.hk2.internal.ServiceLocatorImpl.addConfiguration(Lorg/jvnet/hk2/internal/DynamicConfigurationImpl;)V @ 64&lt;br/&gt;
[stress.process.err]                                         unextended_sp for #16&lt;br/&gt;
[stress.process.err]                                         sp for #16&lt;br/&gt;
[stress.process.err]  0x00007f1961d261c8: 0x00007f19dd70021c return address&lt;br/&gt;
[stress.process.err]  0x00007f1961d261c0: 0x0000000535d73528 saved fp&lt;br/&gt;
[stress.process.err]  0x00007f1961d261b8: 0x00007f1961d26250&lt;br/&gt;
[stress.process.err]  0x00007f1961d261b0: 0x00000000000000d8&lt;br/&gt;
[stress.process.err]  0x00007f1961d261a8: 0x000000061e836758 oop for #15&lt;br/&gt;
[stress.process.err]  0x00007f1961d261a0: 0x00007f1961d261b0&lt;br/&gt;
[stress.process.err]  0x00007f1961d26198: 0x0000000535d74148&lt;br/&gt;
[stress.process.err]  0x00007f1961d26190: 0x00007f1961d261c0&lt;br/&gt;
[stress.process.err]  0x00007f1961d26188: 0x00007f191c69dcb1&lt;br/&gt;
[stress.process.err]  0x00007f1961d26180: 0x0000000535d6be90 local 0 for #15 (scope 0)&lt;br/&gt;
[stress.process.err]                                         oop for #15&lt;br/&gt;
[stress.process.err]  0x00007f1961d26178: 0x0000000535da8a10 local 2 for #15 (scope 0)&lt;br/&gt;
[stress.process.err]                                         oop for #15&lt;br/&gt;
[stress.process.err]  0x00007f1961d26170: 0x0000000535d740e8&lt;br/&gt;
[stress.process.err]  0x00007f1961d26168: 0x0000000000000000&lt;br/&gt;
[stress.process.err]  0x00007f1961d26164: 0x0000000000000000 narrow oop for #15&lt;br/&gt;
[stress.process.err]  0x00007f1961d26160: 0x0000000000000000 local 8 for #14 (scope 7)&lt;br/&gt;
[stress.process.err]                                         param 7 boolean for #14&lt;br/&gt;
[stress.process.err]  0x00007f1961d26158: 0x0000000535db1970 param 6 object for #14&lt;br/&gt;
[stress.process.err]  0x00007f1961d26150: 0xa6bad86200000000 #14 nmethod 0x00007f19e5178290 for method J org.jvnet.hk2.internal.ServiceLocatorImpl.reup(Ljava/util/List;ZZZZZLjava/util/HashSet;Z)V&lt;br/&gt;
[stress.process.err]                                         - #7 scope org.jvnet.hk2.internal.ServiceLocatorImpl.reup(Ljava/util/List;ZZZZZLjava/util/HashSet;Z)V @ 61&lt;br/&gt;
[stress.process.err]                                         - #6 scope org.jvnet.hk2.internal.ServiceLocatorImpl.reupClassAnalyzers()V @ 8&lt;br/&gt;
[stress.process.err]                                         - #5 scope org.jvnet.hk2.internal.ServiceLocatorImpl.protectedGetAllServiceHandles(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Ljava/util/List; @ 10&lt;br/&gt;
[stress.process.err]                                         - #4 scope java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; @ 5&lt;br/&gt;
[stress.process.err]                                         - #3 scope java.security.AccessController.executePrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;Ljava/lang/Class;)Ljava/lang/Object; @ 29&lt;br/&gt;
[stress.process.err]                                         - #2 scope org.jvnet.hk2.internal.ServiceLocatorImpl$7.run()Ljava/lang/Object; @ 1&lt;br/&gt;
[stress.process.err]                                         - #1 scope org.jvnet.hk2.internal.ServiceLocatorImpl$7.run()Ljava/util/List; @ 12&lt;br/&gt;
[stress.process.err]                                         - #0 scope org.jvnet.hk2.internal.ServiceLocatorImpl.getAllServiceHandles(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Ljava/util/List; @ 5&lt;br/&gt;
[stress.process.err]                                         param 5 boolean for #14&lt;br/&gt;
[stress.process.err]                                         unextended_sp for #15&lt;br/&gt;
[stress.process.err]                                         sp for #15&lt;br/&gt;
[stress.process.err]  0x00007f1961d26148: 0x00007f19e5227b74 return address&lt;br/&gt;
[stress.process.err]  0x00007f1961d26140: 0x0000000535d73528 saved fp&lt;br/&gt;
[stress.process.err]  0x00007f1961d26130: 0x00007f1961d26170&lt;br/&gt;
[stress.process.err]  0x00007f1961d26128: 0x00007f197ca61e30&lt;br/&gt;
[stress.process.err]  0x00007f1961d26120: 0x000000053658b8dc&lt;br/&gt;
[stress.process.err]  0x00007f1961d26118: 0x0000000535db0d40&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
The callee (org.jvnet.hk2.internal.ServiceLocatorImpl.reup()) receives 8 arguments. The last 3, a boolean, an object reference, an another boolean are passed through the stack. We can see that param5(boolean) is passed in 0x00007f1961d26150, param6(object) in 0x00007f1961d26158, and param7(boolean) is passed in 0x00007f1961d26160.  But 0x00007f1961d26164 contains a narrow oop for the caller (org.jvnet.hk2.internal.ServiceLocatorImpl.addConfiguration).</description>
                <environment></environment>
        <key id="5114925">JDK-8320275</key>
            <summary>assert(_chunk-&gt;bitmap().at(index)) failed: Bit not set at index</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pchilanomate">Patricio Chilano Mateo</assignee>
                                    <reporter username="pchilanomate">Patricio Chilano Mateo</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>hgupdate-sync</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                    </labels>
                <created>Thu, 16 Nov 2023 16:20:11 -0800</created>
                <updated>Thu, 7 Mar 2024 16:19:09 -0800</updated>
                            <resolved>Tue, 2 Jan 2024 14:23:54 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14641176" author="pchilanomate" created="Wed, 17 Jan 2024 07:39:30 -0800"  >Not really. I guess out of caution by the reporter. I already made it public.</comment>
                            <comment id="14641151" author="sgehwolf" created="Wed, 17 Jan 2024 05:58:30 -0800"  >[~pchilanomate] Any particular reason why &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8323595&quot; title=&quot;is_aligned(p, alignof(OopT))) assertion fails in Jetty without compressed OOPs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8323595&quot;&gt;&lt;strike&gt;JDK-8323595&lt;/strike&gt;&lt;/a&gt; is private?</comment>
                            <comment id="14641130" author="shade" created="Wed, 17 Jan 2024 04:59:45 -0800"  >Here is my view: I treat these bugs as bugtail from JDK 21 GA. The work done in 21u right now is effectively stabilizing 21u for production use. Shipping 21.0.3 with known bugs would delay wide-scale production use to 21.0.4. The major driver for JDK 21 adoption is Loom, therefore unless we can technically isolate Loom usages from existing deployments, we cannot really rely on assumption that nothing uses Loom and the deployment is safe. The moment some dependent library in the project uses Loom, the whole stack gets exposed to these problems.&lt;br/&gt;
&lt;br/&gt;
I guess we can and should wait a few weeks to see if there is any substantial bug tail from this change in mainline, apart from the assert issue Patricio mentions above. But I think we should be planning to include this fix in 21.0.3. So, let&amp;#39;s revisit in early February. How does that sound?&lt;br/&gt;
&lt;br/&gt;
(Yes, the way it looks now, we would probably pick it up in downstream builds, if it misses upstream 21.0.3.)</comment>
                            <comment id="14640975" author="pchilanomate" created="Tue, 16 Jan 2024 22:13:27 -0800"  >There is actually an incorrect assert I added in this fix than can trigger with -XX:-UseCompressedOops (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8323595&quot; title=&quot;is_aligned(p, alignof(OopT))) assertion fails in Jetty without compressed OOPs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8323595&quot;&gt;&lt;strike&gt;JDK-8323595&lt;/strike&gt;&lt;/a&gt;). This means we should not backport it yet (sorry I didn&amp;#39;t mention it before but I didn&amp;#39;t see the bug until today when I was assigned to it).</comment>
                            <comment id="14640515" author="sgehwolf" created="Tue, 16 Jan 2024 02:48:10 -0800"  >The head commit is from Jan 2, 2024. Two weeks old. So it&amp;#39;s basically untested in the wild. 21.0.1 and 21.0.2 will have the same (loom) problem already and has gone unnoticed so far. My understanding is this affects non-loom code too, right? The concern is about the risk for non-loom code in 21 (regarded higher) as compared to loom code (not as widespread use just yet) so it would be good to have in at least one release before backporting. Feel free to add this patch to your distro and report back your experience when the time comes. Please correct me if I got this all wrong.</comment>
                            <comment id="14640229" author="shade" created="Mon, 15 Jan 2024 10:01:10 -0800"  >Deferring to 21.0.4 (July 2024) would have the unfortunate side effect: Loom would be unstable until then. Missing the oop anywhere in VM code is a building block (if not a direct cause) for heap corruption. I suggest we still consider it for 21.0.3.</comment>
                            <comment id="14640227" author="sgehwolf" created="Mon, 15 Jan 2024 09:48:53 -0800"  >This patch is quite new. Let&amp;#39;s defer this patch to 21.0.4 so as to have more soak time of the patch in JDK 22. Removing the label meanwhile.</comment>
                            <comment id="14639794" author="roboduke" created="Fri, 12 Jan 2024 04:04:35 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
(Resubmitting for 21.0.4) Nearly clean backport to fix a Loom bug. The uncleanliness is due to `foreign_globals.cpp` context change in `ForeignGlobals::java_calling_convention`, which renamed the argument. I reapplied that hunk by hand. Tests pass. The patch is a bit risky, because it touches calling conventions. There was no product bugtail after &amp;gt;6 weeks in mainline, including JDK 22 EA testing.</comment>
                            <comment id="14637523" author="roboduke" created="Thu, 4 Jan 2024 12:20:12 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/131&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/131&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-04 20:14:19 +0000</comment>
                            <comment id="14637520" author="roboduke" created="Thu, 4 Jan 2024 11:43:12 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22/pull/29&quot;&gt;https://git.openjdk.org/jdk22/pull/29&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-04 15:22:16 +0000</comment>
                            <comment id="14637061" author="shade" created="Wed, 3 Jan 2024 01:15:51 -0800"  >This looks like affecting 21 as well, right? Marked affected-versions too.</comment>
                            <comment id="14636896" author="dukebot" created="Tue, 2 Jan 2024 14:23:51 -0800"  >Changeset: e9e694f4&lt;br/&gt;
Author:    Patricio Chilano Mateo &amp;lt;&lt;a href=&apos;mailto:pchilanomate@openjdk.org&apos;&gt;pchilanomate@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-02 22:22:03 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e9e694f4ef7b080d7fe1ad5b2f2daa2fccd0456e&quot;&gt;https://git.openjdk.org/jdk/commit/e9e694f4ef7b080d7fe1ad5b2f2daa2fccd0456e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14629321" author="roboduke" created="Mon, 27 Nov 2023 16:38:07 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16837&quot;&gt;https://git.openjdk.org/jdk/pull/16837&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-28 00:09:10 +0000</comment>
                            <comment id="14628245" author="lfoltan" created="Tue, 21 Nov 2023 13:16:00 -0800"  >Based on further discussions with Patricio, retriaging ILW=MLH=P3.</comment>
                            <comment id="14627727" author="mwthomps" created="Mon, 20 Nov 2023 11:37:46 -0800"  >ILW=HLH=P2</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5117334">JDK-8322307</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118440">JDK-8323310</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5122702">JDK-8326928</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123600">JDK-8327643</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5118753">JDK-8323595</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33whn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17314"><![CDATA[b04]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>