<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:07:27 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8309140] ResourceHashtable failed &quot;assert(~(_allocation_t[0] | allocation_mask) == (uintptr_t)this) failed: lost resource object&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8309140</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/jdi/VirtualMachineManager/connectedVirtualMachines/convm002/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
==&amp;gt; nsk/jdi/VirtualMachineManager/connectedVirtualMachines/convm002        TESTING BEGINS&lt;br/&gt;
--&amp;gt; debugger: ......call to Bootstrap.virtualMachineManager()&lt;br/&gt;
--&amp;gt; debugger: ......call to vmm.connectedVirtualMachines()&lt;br/&gt;
--&amp;gt; debugger:        connectedVM.size() == 1&lt;br/&gt;
--&amp;gt; debugger: ......getting: VirtualMachine vm1 = connectedVM.get(0);&lt;br/&gt;
--&amp;gt; debugger: ......comparing: vm.equals(vm1)&lt;br/&gt;
--&amp;gt; debugger: ......vm1.exit(95)&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
--&amp;gt; debugger: waiting for the debuggee to finish ...&lt;br/&gt;
debugee.stdout&amp;gt; # A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
debugee.stdout&amp;gt; #  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179652/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92b79186-dc43-46f5-b3fe-a026e05297be/runs/b9a81567-2737-4396-9555-6a4d73c11313/workspace/open/src/hotspot/share/memory/allocation.cpp:159), pid=2239672, tid=2239709&lt;br/&gt;
debugee.stdout&amp;gt; #  assert(~(_allocation_t[0] | allocation_mask) == (uintptr_t)this) failed: lost resource object&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
debugee.stdout&amp;gt; # JRE version: Java(TM) SE Runtime Environment (21.0+25) (fastdebug build 21-ea+25-LTS-2162)&lt;br/&gt;
debugee.stdout&amp;gt; # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2162, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
debugee.stdout&amp;gt; # Problematic frame:&lt;br/&gt;
debugee.stdout&amp;gt; # V  [libjvm.so+0x5db2c8]  AnyObj::get_allocation_type() const [clone .part.0]+0x28&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
debugee.stdout&amp;gt; # Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179807/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/931a4b37-ac97-44d8-96e7-042e0dbc60e1/runs/b52dc26a-3e6b-4db3-b0e9-6c471a41b766/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/1/core.2239672)&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
debugee.stdout&amp;gt; # An error report file with more information is saved as:&lt;br/&gt;
debugee.stdout&amp;gt; # /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179807/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/931a4b37-ac97-44d8-96e7-042e0dbc60e1/runs/b52dc26a-3e6b-4db3-b0e9-6c471a41b766/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/1/hs_err_pid2239672.log&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
debugee.stdout&amp;gt; # If you would like to submit a bug report, please visit:&lt;br/&gt;
debugee.stdout&amp;gt; #   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
debugee.stdout&amp;gt; # The crash happened outside the Java Virtual Machine in native code.&lt;br/&gt;
debugee.stdout&amp;gt; # See problematic frame for where to report the bug.&lt;br/&gt;
debugee.stdout&amp;gt; #&lt;br/&gt;
# ERROR: ##&amp;gt; debugger: debuggee returned UNEXPECTED exit status: 134 != PASS_BASE&lt;br/&gt;
The following stacktrace is for failure analysis.&lt;br/&gt;
nsk.share.TestFailure: ##&amp;gt; debugger: debuggee returned UNEXPECTED exit status: 134 != PASS_BASE&lt;br/&gt;
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)&lt;br/&gt;
	at nsk.share.Log.complain(Log.java:402)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.log3(convm002.java:93)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.runThis(convm002.java:210)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.run(convm002.java:77)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.main(convm002.java:72)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)&lt;br/&gt;
--&amp;gt; debugger:        waiting for VMDisconnectEvent&lt;br/&gt;
--&amp;gt; debugger:        new:  eventSet = eventQueue.remove();&lt;br/&gt;
--&amp;gt; debugger:      :  eventSet != null;  size == 1&lt;br/&gt;
--&amp;gt; debugger:       VMDisconnectEvent removed&lt;br/&gt;
--&amp;gt; debugger:      :  eventSet == null:  EventQueue is empty&lt;br/&gt;
--&amp;gt; debugger: ......connectedVM = vmm.connectedVirtualMachines();&lt;br/&gt;
--&amp;gt; debugger:        connectedVM.size() == 0&lt;br/&gt;
&lt;br/&gt;
==&amp;gt; nsk/jdi/VirtualMachineManager/connectedVirtualMachines/convm002        TESTING ENDS&lt;br/&gt;
# ERROR: TEST FAILED&lt;br/&gt;
The following stacktrace is for failure analysis.&lt;br/&gt;
nsk.share.TestFailure: TEST FAILED&lt;br/&gt;
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)&lt;br/&gt;
	at nsk.share.Log.complain(Log.java:402)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.runThis(convm002.java:250)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.run(convm002.java:77)&lt;br/&gt;
	at nsk.jdi.VirtualMachineManager.connectedVirtualMachines.convm002.main(convm002.java:72)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:311)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
#&amp;gt;  SUMMARY: Following errors occured&lt;br/&gt;
#&amp;gt;      during test execution:&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
# ERROR: ##&amp;gt; debugger: debuggee returned UNEXPECTED exit status: 134 != PASS_BASE&lt;br/&gt;
# ERROR: TEST FAILED&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(38/9060)*----------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007ff208393260):  JavaThread &amp;quot;JDWP Transport Listener: dt_socket&amp;quot; daemon [_thread_in_native, id=2239709, stack(0x00007ff1ec81e000,0x00007ff1ec91f000) (1028K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007ff1ec81e000,0x00007ff1ec91f000],  sp=0x00007ff1ec91da70,  free space=1022k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x5db2c8]  AnyObj::get_allocation_type() const [clone .part.0]+0x28  (allocation.cpp:159)&lt;br/&gt;
V  [libjvm.so+0x5dbdc0]  AnyObj::print() const+0x0  (allocation.cpp:215)&lt;br/&gt;
V  [libjvm.so+0x152069e]  ResourceHashtable&amp;lt;PlaceholderKey, PlaceholderEntry, 503u, (AnyObj::allocation_type)2, (MEMFLAGS)1, &amp;amp;PlaceholderKey::hash, &amp;amp;PlaceholderKey::equals&amp;gt;::~ResourceHashtable()+0x6e  (resourceHash.hpp:36)</description>
                <environment></environment>
        <key id="5102144">JDK-8309140</key>
            <summary>ResourceHashtable failed &quot;assert(~(_allocation_t[0] | allocation_mask) == (uintptr_t)this) failed: lost resource object&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jgu">Justin Gu</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>hashtable</label>
                            <label>hgupdate-sync</label>
                            <label>tier5</label>
                    </labels>
                <created>Tue, 30 May 2023 14:44:47 -0700</created>
                <updated>Tue, 25 Jul 2023 04:28:46 -0700</updated>
                            <resolved>Wed, 28 Jun 2023 10:11:15 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14594270" author="roboduke" created="Thu, 6 Jul 2023 08:32:04 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/102&quot;&gt;https://git.openjdk.org/jdk21/pull/102&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-06 15:24:45 +0000</comment>
                            <comment id="14592565" author="dukebot" created="Wed, 28 Jun 2023 10:11:14 -0700"  >Changeset: b6c789fa&lt;br/&gt;
Author:    Justin Gu &amp;lt;&lt;a href=&apos;mailto:justin.j.gu@oracle.com&apos;&gt;justin.j.gu@oracle.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Coleen Phillimore &amp;lt;&lt;a href=&apos;mailto:coleenp@openjdk.org&apos;&gt;coleenp@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-28 17:10:16 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/b6c789faad63f18e17ee7e5cefd024b3776fd469&quot;&gt;https://git.openjdk.org/jdk/commit/b6c789faad63f18e17ee7e5cefd024b3776fd469&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14591455" author="roboduke" created="Thu, 22 Jun 2023 09:31:53 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14601&quot;&gt;https://git.openjdk.org/jdk/pull/14601&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-21 17:49:10 +0000</comment>
                            <comment id="14589127" author="coleenp" created="Tue, 13 Jun 2023 16:53:35 -0700"  >Yes, I think this looks like it&amp;#39;s calling exit directly.  Making these hashtables non-static is a small fix, so we should do that even though JNI errors aren&amp;#39;t something we can protect against completely, this makes our hashtables look bad and gives us strange bugs to debug when they&amp;#39;re reported.</comment>
                            <comment id="14589126" author="dholmes" created="Tue, 13 Jun 2023 16:40:00 -0700"  >Of course if we are calling exit due to an abort/error-condition that also bypasses the VM shutdown process and so would lead to problems.&lt;br/&gt;
&lt;br/&gt;
This is why I&amp;#39;ve always cautioned against using statics in the VM - their cleanup can be very fragile.</comment>
                            <comment id="14589125" author="dholmes" created="Tue, 13 Jun 2023 16:37:51 -0700"  >When you say &amp;quot;called exit directly&amp;quot; do you mean Java System.exit, or C exit ? For the former case we go to a safepoint almost immediately and the VMThread  does all the shutdown tasks. For the latter then of course all bets are off as that should not happen and we can&amp;#39;t manage the VM shutdown in that case.</comment>
                            <comment id="14589109" author="coleenp" created="Tue, 13 Jun 2023 14:08:36 -0700"  >I think what happened is that this thread called exit directly:&lt;br/&gt;
Current thread (0x00007ff208393260):  JavaThread &amp;quot;JDWP Transport Listener: dt_socket&amp;quot; daemon [_thread_in_native, id=2239709, stack(0x00007ff1ec81e000,0x00007ff1ec91f000) (1028K)]&lt;br/&gt;
&lt;br/&gt;
Which triggered the exit handlers.  I&amp;#39;m not sure when we block the other threads in this case.</comment>
                            <comment id="14588978" author="coleenp" created="Tue, 13 Jun 2023 06:56:01 -0700"  >Want me to post the thread stacks from the core file?&lt;br/&gt;
The threads are blocked, but this node was already deleted by one of them, so we&amp;#39;ve fetched a node in the exit handlers without a lock.</comment>
                            <comment id="14588645" author="dholmes" created="Mon, 12 Jun 2023 18:47:37 -0700"  >There should not be any running Java threads inside the VM at the time the exit_handlers are called - they should either be blocked at the termination safepoint or else executing in native.</comment>
                            <comment id="14588531" author="coleenp" created="Mon, 12 Jun 2023 08:03:00 -0700"  >&lt;br/&gt;
Since the Placeholder table is static, the ResourceHashtable destructor is run with the exit_handlers:&lt;br/&gt;
&lt;br/&gt;
#12 ResourceHashtable&amp;lt;PlaceholderKey, PlaceholderEntry, 503u, (AnyObj::allocation_type)2, (MEMFLAGS)1, &amp;amp;PlaceholderKey::hash, &amp;amp;PlaceholderKey::equals&amp;gt;::~ResourceHashtable (this=0x7ff20fe7a280 &amp;lt;_placeholders&amp;gt;, __in_chrg=&amp;lt;optimized out&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179652/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92b79186-dc43-46f5-b3fe-a026e05297be/runs/b9a81567-2737-4396-9555-6a4d73c11313/workspace/open/src/hotspot/share/utilities/resourceHash.hpp:371&lt;br/&gt;
#13 0x00007ff20fefe29c in __run_exit_handlers () from ./lib64/libc.so.6   &amp;lt;====&lt;br/&gt;
#14 0x00007ff20fefe3d0 in exit () from ./lib64/libc.so.6&lt;br/&gt;
&lt;br/&gt;
But there are Java threads still alive (they&amp;#39;re waiting probably for the last safepoint).&lt;br/&gt;
&lt;br/&gt;
This table is destroyed without locking SystemDictionary_lock - so the likely explanation is that a Java thread raced to delete the node, while this destructor is running unlocked.</comment>
                            <comment id="14588258" author="coleenp" created="Fri, 9 Jun 2023 13:13:44 -0700"  >The core file shows the static PlaceholderTable being deleted during exit, which is ok.  There&amp;#39;s an entry in it.  This is unusual since that means that entry is in the process of loading and no other thread seems to be loading this entry.  The entry it shows has already been deleted or at least destroyed (allocation[0] == badHeapOopVal) even though the entry looks well formed.&lt;br/&gt;
&lt;br/&gt;
215	AnyObj::~AnyObj() {&lt;br/&gt;
216	  // allocated_on_C_heap() also checks that encoded (in _allocation) address == this.&lt;br/&gt;
217	  if (!allocated_on_C_heap()) { // AnyObj::delete() will zap _allocation for C_heap.&lt;br/&gt;
218	    _allocation_t[0] = (uintptr_t)badHeapOopVal; // zap type&lt;br/&gt;
219	  }&lt;br/&gt;
220	}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
(gdb) print *this&lt;br/&gt;
$5 = {&amp;lt;AnyObj&amp;gt; = {_vptr.AnyObj = 0x7ff20fce2110 &amp;lt;vtable for AnyObj+16&amp;gt;, _allocation_t = {3147254228350515902, 0}}, _hash = 1699093021, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;_key = {_name = {&amp;lt;StackObj&amp;gt; = {&amp;lt;No data fields&amp;gt;}, _temp = 0x7ff1ed2b0118}, _loader_data = 0x7ff208200b80}, _value = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_supername = {&amp;lt;StackObj&amp;gt; = {&amp;lt;No data fields&amp;gt;}, _temp = 0x0}, _definer = 0x0, _instanceKlass = 0x80106a2f8, _superThreadQ = 0x0, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_loadInstanceThreadQ = 0x0, _defineThreadQ = 0x0}, _next = 0x0}&lt;br/&gt;
(gdb) print /lx this-&amp;gt;_allocation_t[0]&lt;br/&gt;
$6 = 0x2bad4b0bbaadbabe&lt;br/&gt;
(gdb) print /lx badHeapOopVal&lt;br/&gt;
$8 = 0x2bad4b0bbaadbabe&lt;br/&gt;
(gdb) print _key-&amp;gt;_name._temp&lt;br/&gt;
$9 = (Symbol *) 0x7ff1ed2b0118&lt;br/&gt;
(gdb) print (char*)_key-&amp;gt;_name._temp-&amp;gt;_body&lt;br/&gt;
$10 = 0x7ff1ed2b011e &amp;quot;java/util/concurrent/ThreadPoolExecutor$Worker&amp;quot;, &amp;#39;\361&amp;#39; &amp;lt;repeats 51 times&amp;gt;, &amp;lt;incomplete sequence \361&amp;gt;&lt;br/&gt;
&lt;br/&gt;
This seems either impossible or something that would happen all the time (some entry deleted but incompletely).  I can&amp;#39;t reproduce this.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14587433" author="lfoltan" created="Tue, 6 Jun 2023 11:19:38 -0700"  >ILW = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5104932">JDK-8311598</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106397">JDK-8312891</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31q6j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17314"><![CDATA[b04]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>