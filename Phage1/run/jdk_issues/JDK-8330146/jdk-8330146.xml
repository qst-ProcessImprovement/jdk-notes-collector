<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:56:31 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8330146] assert(!_thread-&gt;is_in_any_VTMS_transition()) failed</title>
                <link>https://bugs.openjdk.org/browse/JDK-8330146</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>I was running jdk/java/lang/Thread/virtual/TracePinnedThreads.java with javaagent performing some instrumentation, and the test crashed with this assertion:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/home/rvansa/work/jdk/src/hotspot/share/prims/jvmtiExport.cpp:932), pid=398299, tid=398333&lt;br/&gt;
#  assert(!_thread-&amp;gt;is_in_any_VTMS_transition()) failed: CFLH events are not allowed in any VTMS transition&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (23.0) (fastdebug build 23-internal-adhoc.rvansa.jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 23-internal-adhoc.rvansa.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x11e1dbf]  JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**)+0x39f</description>
                <environment></environment>
        <key id="5126747">JDK-8330146</key>
            <summary>assert(!_thread-&gt;is_in_any_VTMS_transition()) failed</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sspitsyn">Serguei Spitsyn</assignee>
                                    <reporter username="rvansa">Radim Vansa</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                    </labels>
                <created>Fri, 12 Apr 2024 01:26:02 -0700</created>
                <updated>Mon, 12 Aug 2024 01:24:21 -0700</updated>
                            <resolved>Thu, 9 May 2024 07:31:51 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14697106" author="roboduke" created="Fri, 9 Aug 2024 00:40:50 -0700"  >[jdk21u-fix-request] Approval Request from Jiawei Tang&lt;br/&gt;
fix bugs for jdk21. It&amp;#39;s a clean backport. After this, I will backport [&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8337331&quot; title=&quot;crash: pinned virtual thread will lead to jvm crash when running with the javaagent option&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8337331&quot;&gt;&lt;strike&gt;JDK-8337331&lt;/strike&gt;&lt;/a&gt;](&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8337331&quot;&gt;https://bugs.openjdk.org/browse/JDK-8337331&lt;/a&gt;) to fix the problem completely.</comment>
                            <comment id="14697103" author="roboduke" created="Fri, 9 Aug 2024 00:28:57 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/907&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/907&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-09 07:20:29 +0000</comment>
                            <comment id="14697101" author="JIRAUSER21600" created="Fri, 9 Aug 2024 00:25:40 -0700"  >Hi, actually, this problem affects jdk21, I want to backport it and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8337331&quot;&gt;https://bugs.openjdk.org/browse/JDK-8337331&lt;/a&gt; to fix it.</comment>
                            <comment id="14672861" author="shade" created="Mon, 13 May 2024 03:04:24 -0700"  >I provisionally put 21, 22 as affected versions, as we would expect users to reach for this diagnostic option sometimes. It is not yet clear to me if the same bug affects JDK 21.</comment>
                            <comment id="14672311" author="dukebot" created="Thu, 9 May 2024 07:31:50 -0700"  >Changeset: c4ff58b9&lt;br/&gt;
Author:    Serguei Spitsyn &amp;lt;&lt;a href=&apos;mailto:sspitsyn@openjdk.org&apos;&gt;sspitsyn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-05-09 14:30:15 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/c4ff58b9bcfd08eae0623a648a837e08f25b3f9b&quot;&gt;https://git.openjdk.org/jdk/commit/c4ff58b9bcfd08eae0623a648a837e08f25b3f9b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14670374" author="roboduke" created="Thu, 2 May 2024 03:13:08 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19054&quot;&gt;https://git.openjdk.org/jdk/pull/19054&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-02 10:07:35 +0000</comment>
                            <comment id="14670308" author="sspitsyn" created="Thu, 2 May 2024 00:00:04 -0700"  >Okay. Thanks, Alan.&lt;br/&gt;
My plan is to replace this assert with a conditional return in case when the attempt to post the event is in a context of VTMS transition.&lt;br/&gt;
This impacts three kinds of events: CFLH, ClassPrepare and ClassLoad. This will align these events kinds with all other events.&lt;br/&gt;
The assert was added in these 3 cases with the intention to identify all cases when with attempts to do class loading while in VTMS transitions.</comment>
                            <comment id="14667989" author="alanb" created="Thu, 25 Apr 2024 06:57:35 -0700"  >The debugging property jdk.tracePinnedThreads is a left over from early development in the loom repo. We probably shouldn&amp;#39;t have brought it into the main line in JDK 19. There are several issues with it, and has been removed in the loom repo as part of the big update for object monitors. For this JBS issue then I think it&amp;#39;s the onPinned callback loading PinnedThreadPrinter (VThreadContinuation is already loaded). A workaround would be to preload this class, or use JFR events instead of -Djdk.tracePinnedThreads=full.&lt;br/&gt;
</comment>
                            <comment id="14667971" author="sspitsyn" created="Thu, 25 Apr 2024 06:13:13 -0700"  >The VThreadContinuation.onPinned() is invoked in the context of an unmount transition.&lt;br/&gt;
Please, see this function:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Invokes Continuation.yield, notifying JVMTI (if enabled) to hide frames until&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* the continuation continues.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Hidden&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private boolean yieldContinuation() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notifyJvmtiUnmount(/*hide*/true);          &amp;lt;= JVMTI is notified about unmount transition start&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Continuation.yield(VTHREAD_SCOPE);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notifyJvmtiMount(/*hide*/false);         &amp;lt;= JVMTI is notified about unmount transition finish&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
This the most important part of the stack trace:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/home/rvansa/work/jdk/src/hotspot/share/prims/jvmtiExport.cpp:932), pid=398299, tid=398333&lt;br/&gt;
#  assert(!_thread-&amp;gt;is_in_any_VTMS_transition()) failed: CFLH events are not allowed in any VTMS transition&lt;br/&gt;
. . . .&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007035f88840e0):  JavaThread &amp;quot;ForkJoinPool-1-worker-1&amp;quot; daemon [_thread_in_vm, id=398333, stack(0x00007036a8ef1000,0x00007036a8ff1000) (1024K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007036a8ef1000,0x00007036a8ff1000],  sp=0x00007036a8fedca0,  free space=1011k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x11e1dbf]  JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**)+0x39f  (jvmtiExport.cpp:932)&lt;br/&gt;
V  [libjvm.so+0x1236049]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&amp;amp;, JavaThread*)+0x719  (klassFactory.cpp:148)&lt;br/&gt;
V  [libjvm.so+0x996c3e]  ClassLoader::load_class(Symbol*, PackageEntry*, bool, JavaThread*)+0x1ee  (classLoader.cpp:1168)&lt;br/&gt;
V  [libjvm.so+0x18d0414]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x444  (systemDictionary.cpp:1279)&lt;br/&gt;
V  [libjvm.so+0x18ce3c0]  SystemDictionary::load_instance_class(Symbol*, Handle, JavaThread*)+0x20  (systemDictionary.cpp:1343)&lt;br/&gt;
V  [libjvm.so+0x18ced73]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x813  (systemDictionary.cpp:702)&lt;br/&gt;
V  [libjvm.so+0x18cf4a6]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x26  (systemDictionary.cpp:321)&lt;br/&gt;
V  [libjvm.so+0xa5e491]  ConstantPool::klass_at_impl(constantPoolHandle const&amp;amp;, int, JavaThread*)+0x181  (constantPool.cpp:550)&lt;br/&gt;
V  [libjvm.so+0xa613d6]  ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)+0x66  (constantPool.hpp:389)&lt;br/&gt;
V  [libjvm.so+0x12854d1]  LinkInfo::LinkInfo(constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0x61  (linkResolver.cpp:250)&lt;br/&gt;
V  [libjvm.so+0x128b6ad]  LinkResolver::resolve_invokestatic(CallInfo&amp;amp;, constantPoolHandle const&amp;amp;, int, JavaThread*)+0x2d  (linkResolver.cpp:1666)&lt;br/&gt;
V  [libjvm.so+0x128e8e0]  LinkResolver::resolve_invoke(CallInfo&amp;amp;, Handle, constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0xb0  (linkResolver.cpp:1626)&lt;br/&gt;
V  [libjvm.so+0xea0b26]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x326  (interpreterRuntime.cpp:853)&lt;br/&gt;
V  [libjvm.so+0xea18fb]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0xdb  (interpreterRuntime.cpp:981)&lt;br/&gt;
j  java.lang.VirtualThread$VThreadContinuation.onPinned(Ljdk/internal/vm/Continuation$Pinned;)V+42 &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.onPinned0(I)V+5 &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+325 &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.yieldContinuation()Z+8 &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.parkNanos(J)V+64 &lt;a href=&apos;mailto:java.base@23-internal&apos;&gt;java.base@23-internal&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
So, it seems the VThreadContinuation class is being loaded when in the unmount transition. This caused posting a CFLH event. Current implementation does not allow any events to be posted in transitions as the details provided to the JVMTI agent (to the event callback) can be inconsistent. For instance, the thread identity can be wrong. We currently have this assert in place which helps to identify places where do class loading in VTMS transition context.&lt;br/&gt;
It is not clear yet what fix would be better for this issue.&lt;br/&gt;
The best approach is to avoid class loading in transition contexts. But it is up to the VirtualThread class implementation. Another approach would be to remove relax this assert and silently ignore such CFLH events. Need to consult with the Core team first.&lt;br/&gt;
&lt;br/&gt;
[~alanb] Alan, what do you think about the potential approaches above to fix this issue?&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5136562">JDK-8338183</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5124210">JDK-8329140</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5135324">JDK-8337331</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5124210">JDK-8329140</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="108920" name="hs_err_pid398299.log" size="166211" author="rvansa" created="Fri, 12 Apr 2024 01:23:41 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i35vsz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="372"><![CDATA[jvmti]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>