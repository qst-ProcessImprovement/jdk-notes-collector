<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:49:37 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8278965] crash in SymbolTable::do_lookup</title>
                <link>https://bugs.openjdk.org/browse/JDK-8278965</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f1b8a7b34a8, pid=19661, tid=20126&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment GraalVM 22.0.0-dev (17.0.2+4) (build 17.0.2+4-LTS-jvmci-22.0-b01)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM GraalVM 22.0.0-dev (17.0.2+4-LTS-jvmci-22.0-b01, mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, parallel gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xd424a8]  SymbolTable::do_lookup(char const*, int, unsigned long)+0xd8&lt;br/&gt;
#&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f1b84c9e210):  JavaThread &amp;quot;ForkJoinPool-1-worker-1&amp;quot; daemon [_thread_in_vm, id=20126, stack(0x00007f1af55ff000,0x00007f1af6000000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f1af55ff000,0x00007f1af6000000],  sp=0x00007f1af5ffc930,  free space=10230k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xd424a8]  SymbolTable::do_lookup(char const*, int, unsigned long)+0xd8&lt;br/&gt;
V  [libjvm.so+0xd4266e]  SymbolTable::lookup_only(char const*, int, unsigned int&amp;amp;)+0x9e&lt;br/&gt;
V  [libjvm.so+0x551193]  ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, JavaThread*)+0x763&lt;br/&gt;
V  [libjvm.so+0x551b55]  ClassFileParser::parse_stream(ClassFileStream const*, JavaThread*) [clone .part.0]+0x175&lt;br/&gt;
V  [libjvm.so+0x552eae]  ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const*, ClassFileParser::Publicity, JavaThread*)+0x24e&lt;br/&gt;
V  [libjvm.so+0xa34d40]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&amp;amp;, JavaThread*)+0x290&lt;br/&gt;
V  [libjvm.so+0xd52670]  SystemDictionary::resolve_class_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&amp;amp;, JavaThread*)+0x150&lt;br/&gt;
V  [libjvm.so+0x8cebee]  jvm_define_class_common(char const*, _jobject*, signed char const*, int, _jobject*, char const*, JavaThread*)+0x22e&lt;br/&gt;
V  [libjvm.so+0x8ceef4]  JVM_DefineClassWithSource+0xa4&lt;br/&gt;
C  [libjava.so+0xde62]  Java_java_lang_ClassLoader_defineClass1+0x182&lt;br/&gt;
J 1173  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (0 bytes) @ 0x00007f1b734e8f4d [0x00007f1b734e8e20+0x000000000000012d]&lt;br/&gt;
J 1181 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (43 bytes) @ 0x00007f1b6c2ace54 [0x00007f1b6c2acb00+0x0000000000000354]&lt;br/&gt;
J 1178 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (16 bytes) @ 0x00007f1b6c2abc0c [0x00007f1b6c2abb40+0x00000000000000cc]&lt;br/&gt;
J 2317 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (121 bytes) @ 0x00007f1b6c4a627c [0x00007f1b6c4a53a0+0x0000000000000edc]&lt;br/&gt;
J 1018 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (64 bytes) @ 0x00007f1b6c25f84c [0x00007f1b6c25e860+0x0000000000000fec]&lt;br/&gt;
J 2517 c2 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (143 bytes) @ 0x00007f1b735dd160 [0x00007f1b735dca60+0x0000000000000700]&lt;br/&gt;
J 845 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (40 bytes) @ 0x00007f1b6c20647c [0x00007f1b6c205e60+0x000000000000061c]&lt;br/&gt;
J 2366 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (121 bytes) @ 0x00007f1b6c4bddac [0x00007f1b6c4bda40+0x000000000000036c]&lt;br/&gt;
J 2602 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; &lt;a href=&apos;mailto:java.base@17.0.2&apos;&gt;java.base@17.0.2&lt;/a&gt; (7 bytes) @ 0x00007f1b735b0760 [0x00007f1b735b0720+0x0000000000000040]</description>
                <environment></environment>
        <key id="5064988">JDK-8278965</key>
            <summary>crash in SymbolTable::do_lookup</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="coleenp">Coleen Phillimore</assignee>
                                    <reporter username="dnsimon">Douglas Simon</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>classloading</label>
                            <label>jdk17u-todo</label>
                            <label>jdk20u-fix-SQE-ok</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>parser</label>
                    </labels>
                <created>Fri, 17 Dec 2021 09:11:18 -0800</created>
                <updated>Mon, 15 Sep 2025 16:04:59 -0700</updated>
                            <resolved>Fri, 10 Feb 2023 10:02:36 -0800</resolved>
                                    <version>17</version>
                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14564162" author="roboduke" created="Thu, 2 Mar 2023 09:11:07 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/11&quot;&gt;https://git.openjdk.org/jdk20u/pull/11&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-02 17:02:39 +0000</comment>
                            <comment id="14562769" author="ccheung" created="Fri, 24 Feb 2023 10:40:06 -0800"  >JDK 20u fix request:&lt;br/&gt;
&lt;br/&gt;
This fixes a JVM crash which was seen in JDK 17 and 20.&lt;br/&gt;
The fix is small and has a regression test.</comment>
                            <comment id="14560087" author="coleenp" created="Tue, 14 Feb 2023 11:56:36 -0800"  >ILW = HLM = P3</comment>
                            <comment id="14559197" author="dukebot" created="Fri, 10 Feb 2023 10:02:35 -0800"  >Changeset: 582b9434&lt;br/&gt;
Author:    Coleen Phillimore &amp;lt;&lt;a href=&apos;mailto:coleenp@openjdk.org&apos;&gt;coleenp@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-10 18:00:19 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/582b943439488a0f43482b67c0bc0d4975bf4023&quot;&gt;https://git.openjdk.org/jdk/commit/582b943439488a0f43482b67c0bc0d4975bf4023&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14558813" author="roboduke" created="Thu, 9 Feb 2023 05:54:01 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12491&quot;&gt;https://git.openjdk.org/jdk/pull/12491&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-09 13:46:35 +0000</comment>
                            <comment id="14555516" author="never" created="Mon, 30 Jan 2023 09:46:02 -0800"  >This tests ran for 2 days with the new SymbolHandle changes so I think this fix is confirmed.</comment>
                            <comment id="14555114" author="never" created="Fri, 27 Jan 2023 10:41:36 -0800"  >We think exposing the fail methods has allowed us to track down the original crash in 17 which appears to be a load standing ref count problem with parallel loading reusing the Symbol from another threads PlaceholderEntry.  I&amp;#39;m testing a proposed fix.</comment>
                            <comment id="14554796" author="never" created="Thu, 26 Jan 2023 11:24:42 -0800"  >It was on the stack in the crashing thread.  I&amp;#39;ve modified the sources a little bit to try to keep the values which were read available in the debugger so I don&amp;#39;t have the full stack right now.  I&amp;#39;m trying to catch it with better information about what the values looked like when it occurs.  It&amp;#39;s possible the decrement to 0 problem is elsewhere but this code just happens to catch it.  If this code is operating under a lock then it seems like those updates should be fine as long.  It&amp;#39;s possible it&amp;#39;s the same as whatever was causing the original JDK 17 crash.  Anyway, I&amp;#39;ve only seen one instance of this crash so far.  I&amp;#39;ll keep it running in the background and see if I can figure out what&amp;#39;s wrong.</comment>
                            <comment id="14554787" author="coleenp" created="Thu, 26 Jan 2023 10:59:22 -0800"  >set_supername() is called holding the SystemDictionary_lock that protects the placeholder table but the Symbol refcounting isn&amp;#39;t.&lt;br/&gt;
&lt;br/&gt;
The supername passed in should never go to zero because the caller must have a live version of it.  Is handle_parallel_super_load in the stack of one of the other threads (or this one?)&lt;br/&gt;
</comment>
                            <comment id="14554776" author="never" created="Thu, 26 Jan 2023 09:58:05 -0800"  >I think the code should be this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (supername != _supername) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol::maybe_increment_refcount(supername);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol::maybe_decrement_refcount(_supername);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_supername = supername;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
The increment should be performed before the value is published where another thread might see it and decrement it.  Or even more pedantically with a single explicit read:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void               set_supername(Symbol* supername) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol* old_supername = _supername;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (supername != old_supername) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol::maybe_increment_refcount(supername);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_supername = supername;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol::maybe_decrement_refcount(old_supername);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
</comment>
                            <comment id="14554731" author="never" created="Thu, 26 Jan 2023 08:29:23 -0800"  >I applied the fix from the other bug and also exposed the fail messages.  It ran for much longer but I finally got a failure in the same place.&lt;br/&gt;
&lt;br/&gt;
#5  0x00007f5a82cc62ab in report_fatal (error_type=error_type@entry=INTERNAL_ERROR, file=file@entry=0x7f5a836685c0 &amp;quot;../../src/hotspot/share/oops/symbol.cpp&amp;quot;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;line=line@entry=327, detail_fmt=detail_fmt@entry=0x7f5a8360fc72 &amp;quot;refcount has gone to zero&amp;quot;) at ../../src/hotspot/share/utilities/debug.cpp:308&lt;br/&gt;
#6  0x00007f5a83477c70 in Symbol::increment_refcount (this=&amp;lt;optimized out&amp;gt;) at ../../src/hotspot/share/oops/symbol.cpp:327&lt;br/&gt;
#7  0x00007f5a83345fa4 in Symbol::maybe_increment_refcount (s=0x7f5a82fd2aca &amp;lt;jni_SetByteArrayRegion(JNIEnv*, jbyteArray, jsize, jsize, jbyte const*)+458&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at ../../src/hotspot/share/oops/symbol.hpp:177&lt;br/&gt;
#8  PlaceholderEntry::set_supername (supername=0x7f5a82fd2aca &amp;lt;jni_SetByteArrayRegion(JNIEnv*, jbyteArray, jsize, jsize, jbyte const*)+458&amp;gt;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this=&amp;lt;synthetic pointer&amp;gt;) at ../../src/hotspot/share/classfile/placeholders.hpp:111&lt;br/&gt;
&lt;br/&gt;
Is the set_supername call being executed concurrently or is there some lock protecting the update?  If it&amp;#39;s concurrent then this code needs to be more careful about how many reads it issues.  Or is the update assumed to be idempotent such that all writers will end up writing the same value?  In that case I think the code should perform the increment first and then the decrement.  </comment>
                            <comment id="14554536" author="coleenp" created="Wed, 25 Jan 2023 14:53:00 -0800"  >Sorry for the pain in debugging.  I filed an RFE &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8301123&quot; title=&quot;Enable Symbol refcounting underflow checks in PRODUCT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8301123&quot;&gt;&lt;strike&gt;JDK-8301123&lt;/strike&gt;&lt;/a&gt; to enable the symbol refcounting overflow checks in PRODUCT mode.  That was a good suggestion.</comment>
                            <comment id="14554467" author="never" created="Wed, 25 Jan 2023 09:44:55 -0800"  >Once I moved the fail messages outside the ifdef block I started getting failures from the refcounting and no longer made it to the crashes in ConcurrentHashTable.  So it would have been very clear what the real problem was if they were in the product.  fastdebug could have shown this problem but I think fastdebug runs are too slow to easily catch it I think.  Once every 45 minutes with product is a pretty low reproduction rate.&lt;br/&gt;
&lt;br/&gt;
We haven&amp;#39;t been seeing the 17 crash which is why this got closed originally.  I agree that it&amp;#39;s probably a similar bug and exposing the fail messages might catch it there, assuming it still exists.  The fails will trigger when we&amp;#39;re exposed to accidentally freeing a Symbol while the crashes only occur if we actually do free it which I have to assume is much less frequent.  It might be worth exposing them in product in 21 to see if anything new shows up.  We&amp;#39;re doing much less testing of 17 these days but if I have the time I&amp;#39;ll see if a custom build that includes the fail messages will crash for 17 with any tasks that previously failed.&lt;br/&gt;
&lt;br/&gt;
The test cases have been running for several hours without issue so I think this it.</comment>
                            <comment id="14554185" author="coleenp" created="Tue, 24 Jan 2023 15:14:33 -0800"  >[~never] Thanks for doing this debugging. I&amp;#39;m somehow not surprised it&amp;#39;s a Symbol refcounting bug.  JDK 17 leaked the supername Symbol so it wouldn&amp;#39;t explain your crashes there.  There could be a different Symbol.  Do you still have reproducers for JDK 17?&lt;br/&gt;
Maybe the symbol refcount asserts should be guarantees.  Does your test fail if you take out the ifdef ASSERTs in Symbol::increment/decrement_refcount? That would motivate taking out the ifdefs.  If you make this into a tarball, I can have a look at that.</comment>
                            <comment id="14554172" author="never" created="Tue, 24 Jan 2023 13:56:42 -0800"  >I believe the crashes I&amp;#39;m seeing in JDK 20 are the same as &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298061&quot; title=&quot;vmTestbase/nsk/sysdict/vm/stress/btree/btree012/btree012.java failed with &amp;quot;fatal error: refcount has gone to zero&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8298061&quot;&gt;&lt;strike&gt;JDK-8298061&lt;/strike&gt;&lt;/a&gt;.  Once I became suspicious of the order of increment/decrement in PlaceholderEntry::set_supername it was easy to find that bug. Obviously this can&amp;#39;t be the cause of the crashes we were seeing with 17 but it might be a similar kind of bug.  The fatal errors in symbol.cpp should really be enabled in product instead of being hidden behind ifdef ASSERT.  I&amp;#39;m currently testing the fix against my test case and it&amp;#39;s looking good so far.  Our next JDK 20 build will include that fix when it gets promoted.  Once I&amp;#39;ve let me test run a bit longer I&amp;#39;ll close this issue.</comment>
                            <comment id="14554131" author="never" created="Tue, 24 Jan 2023 11:12:16 -0800"  >My current thinking is that it&amp;#39;s not a concurrency problem but a writing to freed memory problem.  I modified my guard value to be 0xf8000 so see the size of decrement is being performed and the corruption showed the value f7fff, which means that a short was being decremented.  At one point I made the guard value -1 and the problem disappeared, which makes me suspicious of Symbol::decrement_refcount which operates on a 16 bit ref count.  The refcount isn&amp;#39;t changed when the value is 0xffff (PERM_REFCOUNT).  I&amp;#39;ve added some sanity checking to try to detect this kind of problem.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m also testing with dmalloc but that&amp;#39;s not showing anything yet.</comment>
                            <comment id="14553965" author="rehn" created="Tue, 24 Jan 2023 01:40:32 -0800"  >We have stress tests executed as the first step of testing each build:&lt;br/&gt;
utilities/test_concurrentHashtable.cpp&lt;br/&gt;
&lt;br/&gt;
Make sure the global counter is working, which guards against ABA:&lt;br/&gt;
utilities/test_globalCounter.cpp&lt;br/&gt;
&lt;br/&gt;
Any thread that access the cht must have a working global counter.&lt;br/&gt;
Meaning it must be in NonJavaThread::List or a JavaThread in ThreadsList. (crashes seem to be in Java threads)&lt;br/&gt;
Thus make sure ThreadsList is working, runtime/test_ThreadsListHandle.cpp.</comment>
                            <comment id="14553548" author="never" created="Mon, 23 Jan 2023 09:17:19 -0800"  >I&amp;#39;ve got a setup that reproduces a failure about every hour from a release build.  I tried a fastdebug build but I think it&amp;#39;s too slow to reproduce the problem.  fastdebug also changes the logic in small ways and performs some extra write synchronization.   The crashes are in Dictionary, StringTable and SymbolTable so it&amp;#39;s pretty clearly a general concurrency problem in ConcurrentHashTable.  Because that&amp;#39;s an inline template we don&amp;#39;t really get good call stacks for the crashes.  I&amp;#39;ve modified the implementation to add some sanity checking of nodes by capturing the this in a field of Node and check it on every Node operation.  I&amp;#39;ve got a pile of hs_errs from that which show that Bucket::first commonly returns an invalid node when searching the table.  Depending on what the memory location contains we then crash is various other ways in a regular build.  These are the crashing locations from my modified build.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 # V  [libjvm.so+0x6e11dc]  Dictionary::add_klass(JavaThread*, Symbol*, InstanceKlass*)+0x8fc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5 # V  [libjvm.so+0x6e13cc]  Dictionary::add_klass(JavaThread*, Symbol*, InstanceKlass*)+0xaec&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 # V  [libjvm.so+0x6e155e]  Dictionary::add_klass(JavaThread*, Symbol*, InstanceKlass*)+0xc7e&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 # V  [libjvm.so+0x6e1a9b]  Dictionary::find(Thread*, Symbol*, Handle)+0xfb&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;14 # V  [libjvm.so+0xd819d5]  StringTable::do_lookup(unsigned short const*, int, unsigned long)+0xf5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7 # V  [libjvm.so+0xd851df]  StringTable::grow(JavaThread*)+0x40f&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;11 # V  [libjvm.so+0xe04872]  ConcurrentHashTable&amp;lt;SymbolTableConfig, (MEMFLAGS)11&amp;gt;::Node* ConcurrentHashTable&amp;lt;SymbolTableConfig, (MEMFLAGS)11&amp;gt;::get_node&amp;lt;SymbolTableLookup&amp;gt;(ConcurrentHashTable&amp;lt;SymbolTableConfig, (MEMFLAGS)11&amp;gt;::Bucket const*, SymbolTableLookup&amp;amp;, bool*, unsigned long*) const [clone .isra.0]+0x62&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 # V  [libjvm.so+0xe09f80]  SymbolTable::grow(JavaThread*)+0x3f0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 # V  [libjvm.so+0xe0b26d]  void ConcurrentHashTable&amp;lt;SymbolTableConfig, (MEMFLAGS)11&amp;gt;::do_bulk_delete_locked_for&amp;lt;SymbolTableDeleteCheck, SymbolTableDoDelete&amp;gt;(Thread*, unsigned long, unsigned long, SymbolTableDeleteCheck&amp;amp;, SymbolTableDoDelete&amp;amp;, bool)+0x13d&lt;br/&gt;
&lt;br/&gt;
The failures are while running native image to build a binary but aren&amp;#39;t using Graal as the JIT or installing any code.  Native image walks over the class path and loads the reachable classes and methods so it&amp;#39;s a big stress test of ConcurrentHashTable.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve attached my current failure detection logic which is applied against a JDK build from &lt;a href=&quot;https://github.com/graalvm/labs-openjdk-20&quot;&gt;https://github.com/graalvm/labs-openjdk-20&lt;/a&gt;.  Since I already have a setup to reproduce this I&amp;#39;m happy to make changes to try to understand the actual failure.  Any suggestions for how to track down why we&amp;#39;re seeing bad buckets?  I&amp;#39;m currently trying to catch it in the debugger to examine a bad bucket in more detail.&lt;br/&gt;
&lt;br/&gt;
Also, I&amp;#39;ve already tried converting all the asserts in ConcurrentHashTable to guarantees and that didn&amp;#39;t show anything.  We still crashes without triggering any of the guarantee.  I left out the POISON_PTR changes as that&amp;#39;s kind of a semantic change since it adds some write synchronization.</comment>
                            <comment id="14549742" author="iklam" created="Mon, 9 Jan 2023 13:04:58 -0800"  >I am not sure how 0x00007fc1a00cfb6f in the above comment comes about. Since R14 looks almost like a pointer, it seems as though that someone had subtracted the Node::_next by one. Could this be the result of the atomic operation applied on  Node::_next?</comment>
                            <comment id="14549740" author="iklam" created="Mon, 9 Jan 2023 13:03:14 -0800"  >&amp;nbsp;It looks like the value of Node::_next (R13 in the register dump) in the very first node of a bucket in the string table is corrupted.&lt;br/&gt;
&lt;br/&gt;
See &lt;a href=&quot;https://bugs.openjdk.org/secure/attachment/97406/hs_err_pid52011.log&quot;&gt;https://bugs.openjdk.org/secure/attachment/97406/hs_err_pid52011.log&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
RAX=0x00000000075a0002 is an unknown value&lt;br/&gt;
RBX=0x0000000000000006 is an unknown value&lt;br/&gt;
R9 =0x00007fc198280620 points into unknown readable memory: 0x00007fc1a00cfb6f | 6f fb 0c a0 c1 7f 00 00 &amp;lt;&amp;lt;&amp;lt;&amp;lt; see here!!&lt;br/&gt;
R10=0x00007fc18e1f9f40 is pointing into the stack for thread: 0x00007fc1b00444b0&lt;br/&gt;
R11=0x00007fc18e1fa270 is pointing into the stack for thread: 0x00007fc1b00444b0&lt;br/&gt;
R12=0x00007fc238d08b7b points into unknown readable memory: 69 6e 74 65 72&lt;br/&gt;
R13=0x00007fc1a00cfb6f points into unknown readable memory: 00   &amp;lt;====== misaligned: from 0x0(R9)&lt;br/&gt;
R14=0x007fc1a00cfb3000 is an unknown value  &amp;lt;======= bad pointer&lt;br/&gt;
R15=0x0000000000000002 is an unknown value&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
@@begin_bucket&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421c4 &amp;lt;+180&amp;gt;: mov %r9,%r15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421c7 &amp;lt;+183&amp;gt;: mov %r9,%r13  //   R13 is the first node in a bucket&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ca &amp;lt;+186&amp;gt;: je 0xd4225c &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+332&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421d0 &amp;lt;+192&amp;gt;: movslq %ebx,%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421d3 &amp;lt;+195&amp;gt;: xor %r15d,%r15d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421d6 &amp;lt;+198&amp;gt;: mov %rax,-0x38(%rbp)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421da &amp;lt;+202&amp;gt;: nopw 0x0(%rax,%rax,1)&lt;br/&gt;
&lt;br/&gt;
@@check_node:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e0 &amp;lt;+208&amp;gt;: mov 0x8(%r13),%r14   // R14 is the Symbol in this bucket.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e4 &amp;lt;+212&amp;gt;: add $0x1,%r15&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e8 &amp;lt;+216&amp;gt;: movzwl 0x4(%r14),%eax  // EAX is Symbol::_length&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ed &amp;lt;+221&amp;gt;: cmp %eax,%ebx          // is same as expected length (in EBX)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ef &amp;lt;+223&amp;gt;: jne 0xd42250 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+320&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// If not go to next_node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;[.....]&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// memcmp of the string content&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421fc &amp;lt;+236&amp;gt;: callq 0x2459b0 &amp;lt;&lt;a href=&apos;mailto:memcmp@plt&apos;&gt;memcmp@plt&lt;/a&gt;&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42201 &amp;lt;+241&amp;gt;: test %eax,%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42203 &amp;lt;+243&amp;gt;: jne 0xd42250 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+320&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// memcmp fails -&amp;gt; go to next node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;[......]&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42247 &amp;lt;+311&amp;gt;: nopw 0x0(%rax,%rax,1)&lt;br/&gt;
&lt;br/&gt;
@@next_node:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42250 &amp;lt;+320&amp;gt;: mov (%r14),%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42253 &amp;lt;+323&amp;gt;: mov 0x0(%r13),%r13     // R13 = Node::_next&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42257 &amp;lt;+327&amp;gt;: test %r13,%r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4225a &amp;lt;+330&amp;gt;: jne 0xd421e0 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+208&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// go to check_node again&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
183: R13 = R9 = 0x00007fc198280620&lt;br/&gt;
...&lt;br/&gt;
243: branch to 320&lt;br/&gt;
320: R13 = ((Node*)R13)-&amp;gt;_next = *(0x00007fc198280620) = 0x00007fc1a00cfb6f &amp;lt;== misaligned!!!&lt;br/&gt;
..&lt;br/&gt;
339: branch to 208&lt;br/&gt;
208: R14 = ((Node*)R13)-&amp;gt;_value = 0x007fc1a00cfb3000 &amp;lt;=== bad pointer</comment>
                            <comment id="14549517" author="dnsimon" created="Mon, 9 Jan 2023 02:03:52 -0800"  >I&amp;#39;ll try some of the problematic workloads on a debug JDK 20 to see if that reveals anything.</comment>
                            <comment id="14548589" author="dholmes" created="Tue, 3 Jan 2023 23:26:08 -0800"  >[~dnsimon] I don&amp;#39;t think this is a null symbol problem, the actual crash is:&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000&lt;br/&gt;
&lt;br/&gt;
which suggests the problem is a pointer that points outside the maximum allowable address value - ref discussion in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8294003&quot; title=&quot;Don&amp;#39;t handle si_addr == 0 &amp;amp;&amp;amp; si_code == SI_KERNEL SIGSEGVs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8294003&quot;&gt;&lt;strike&gt;JDK-8294003&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
I wonder, based on your analysis, if we somehow have a corrupt string value and are iterating through random memory ??</comment>
                            <comment id="14548175" author="dnsimon" created="Mon, 2 Jan 2023 14:12:38 -0800"  >Re-opening as this continues to occur when running Native Image, albeit infrequently. I have attached a more recent hs-err log that may offer more details. In absence of a reproducer, it might help for someone to look carefully at the estimated call stack in my above comment and try reason about how a null Symbol can be present.</comment>
                            <comment id="14505199" author="hseigel" created="Fri, 24 Jun 2022 09:02:35 -0700"  >We have not observed this error and am unable to reproduce it.</comment>
                            <comment id="14465841" author="dnsimon" created="Wed, 22 Dec 2021 02:03:26 -0800"  >Here&amp;#39;s more details from our investigation that may offer hints to the runtime team as to where the problem may be.&lt;br/&gt;
&lt;br/&gt;
Dump of assembler code for function SymbolTable::do_lookup(char const*, int, unsigned long):&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42110 &amp;lt;+0&amp;gt;:	push   %rbp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42111 &amp;lt;+1&amp;gt;:	mov    %rsp,%rbp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42114 &amp;lt;+4&amp;gt;:	push   %r15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42116 &amp;lt;+6&amp;gt;:	push   %r14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42118 &amp;lt;+8&amp;gt;:	mov    %rdx,%r14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4211b &amp;lt;+11&amp;gt;:	push   %r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4211d &amp;lt;+13&amp;gt;:	push   %r12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4211f &amp;lt;+15&amp;gt;:	mov    %rdi,%r12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42122 &amp;lt;+18&amp;gt;:	push   %rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42123 &amp;lt;+19&amp;gt;:	mov    %esi,%ebx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42125 &amp;lt;+21&amp;gt;:	sub    $0x28,%rsp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42129 &amp;lt;+25&amp;gt;:	data32 lea 0x4a93af(%rip),%rdi        # 0x11eb4e0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42131 &amp;lt;+33&amp;gt;:	data32 data32 callq 0x245660 &amp;lt;&lt;a href=&apos;mailto:__tls_get_addr@plt&apos;&gt;__tls_get_addr@plt&lt;/a&gt;&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42139 &amp;lt;+41&amp;gt;:	mov    0x5182f0(%rip),%rcx        # 0x125a430 &amp;lt;_local_table&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42140 &amp;lt;+48&amp;gt;:	mov    %rcx,-0x40(%rbp)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42144 &amp;lt;+52&amp;gt;:	mov    (%rax),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42147 &amp;lt;+55&amp;gt;:	mov    %rax,-0x48(%rbp)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4214b &amp;lt;+59&amp;gt;:	mov    0xf8(%rax),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42152 &amp;lt;+66&amp;gt;:	mov    %rax,-0x50(%rbp)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42156 &amp;lt;+70&amp;gt;:	test   $0x1,%al&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42158 &amp;lt;+72&amp;gt;:	jne    0xd4216c &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+92&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4215a &amp;lt;+74&amp;gt;:	lea    0x4f341f(%rip),%rax        # 0x1235580 &amp;lt;GlobalCounter::_global_counter&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42161 &amp;lt;+81&amp;gt;:	mov    0x80(%rax),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42168 &amp;lt;+88&amp;gt;:	or     $0x1,%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4216c &amp;lt;+92&amp;gt;:	mov    -0x48(%rbp),%rsi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42170 &amp;lt;+96&amp;gt;:	lea    0xf8(%rsi),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42177 &amp;lt;+103&amp;gt;:	xchg   %rax,(%rdx)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4217a &amp;lt;+106&amp;gt;:	mov    -0x40(%rbp),%rsi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4217e &amp;lt;+110&amp;gt;:	mov    0x48(%rsi),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42182 &amp;lt;+114&amp;gt;:	test   %rax,%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42185 &amp;lt;+117&amp;gt;:	je     0xd42190 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+128&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42187 &amp;lt;+119&amp;gt;:	lea    0x48(%rsi),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4218b &amp;lt;+123&amp;gt;:	xor    %eax,%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4218d &amp;lt;+125&amp;gt;:	xchg   %rax,(%rdx)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42190 &amp;lt;+128&amp;gt;:	mov    -0x40(%rbp),%rcx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42194 &amp;lt;+132&amp;gt;:	mov    0x8(%rcx),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42198 &amp;lt;+136&amp;gt;:	mov    0x18(%rax),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4219c &amp;lt;+140&amp;gt;:	mov    (%rax),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4219f &amp;lt;+143&amp;gt;:	and    %r14,%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421a2 &amp;lt;+146&amp;gt;:	lea    (%rax,%rdx,8),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421a6 &amp;lt;+150&amp;gt;:	mov    (%rax),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421a9 &amp;lt;+153&amp;gt;:	and    $0x2,%edx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ac &amp;lt;+156&amp;gt;:	je     0xd421bd &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+173&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ae &amp;lt;+158&amp;gt;:	mov    0x10(%rcx),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421b2 &amp;lt;+162&amp;gt;:	and    0x18(%rax),%r14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421b6 &amp;lt;+166&amp;gt;:	mov    (%rax),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421b9 &amp;lt;+169&amp;gt;:	lea    (%rax,%r14,8),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421bd &amp;lt;+173&amp;gt;:	mov    (%rax),%r9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421c0 &amp;lt;+176&amp;gt;:	and    $0xfffffffffffffffc,%r9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421c4 &amp;lt;+180&amp;gt;:	mov    %r9,%r15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421c7 &amp;lt;+183&amp;gt;:	mov    %r9,%r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ca &amp;lt;+186&amp;gt;:	je     0xd4225c &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+332&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421d0 &amp;lt;+192&amp;gt;:	movslq %ebx,%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421d3 &amp;lt;+195&amp;gt;:	xor    %r15d,%r15d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421d6 &amp;lt;+198&amp;gt;:	mov    %rax,-0x38(%rbp)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421da &amp;lt;+202&amp;gt;:	nopw   0x0(%rax,%rax,1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e0 &amp;lt;+208&amp;gt;:	mov    0x8(%r13),%r14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e4 &amp;lt;+212&amp;gt;:	add    $0x1,%r15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e8 &amp;lt;+216&amp;gt;:	movzwl 0x4(%r14),%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ed &amp;lt;+221&amp;gt;:	cmp    %eax,%ebx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421ef &amp;lt;+223&amp;gt;:	jne    0xd42250 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+320&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421f1 &amp;lt;+225&amp;gt;:	mov    -0x38(%rbp),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421f5 &amp;lt;+229&amp;gt;:	lea    0x6(%r14),%rdi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421f9 &amp;lt;+233&amp;gt;:	mov    %r12,%rsi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421fc &amp;lt;+236&amp;gt;:	callq  0x2459b0 &amp;lt;&lt;a href=&apos;mailto:memcmp@plt&apos;&gt;memcmp@plt&lt;/a&gt;&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42201 &amp;lt;+241&amp;gt;:	test   %eax,%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42203 &amp;lt;+243&amp;gt;:	jne    0xd42250 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+320&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42205 &amp;lt;+245&amp;gt;:	mov    %r14,%rdi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42208 &amp;lt;+248&amp;gt;:	callq  0xd41020 &amp;lt;Symbol::try_increment_refcount()&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4220d &amp;lt;+253&amp;gt;:	test   %al,%al&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4220f &amp;lt;+255&amp;gt;:	je     0xd42253 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+323&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42211 &amp;lt;+257&amp;gt;:	mov    -0x40(%rbp),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42215 &amp;lt;+261&amp;gt;:	mov    0x28(%rax),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42219 &amp;lt;+265&amp;gt;:	mov    0x8(%r13),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4221d &amp;lt;+269&amp;gt;:	mov    -0x48(%rbp),%rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42221 &amp;lt;+273&amp;gt;:	mov    -0x50(%rbp),%rcx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42225 &amp;lt;+277&amp;gt;:	mov    %rcx,0xf8(%rbx)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4222c &amp;lt;+284&amp;gt;:	cmp    %rdx,%r15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4222f &amp;lt;+287&amp;gt;:	jbe    0xd42238 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+296&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42231 &amp;lt;+289&amp;gt;:	movb   $0x1,0x518150(%rip)        # 0x125a388 &amp;lt;SymbolTable::_needs_rehashing&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42238 &amp;lt;+296&amp;gt;:	add    $0x28,%rsp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4223c &amp;lt;+300&amp;gt;:	pop    %rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4223d &amp;lt;+301&amp;gt;:	pop    %r12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4223f &amp;lt;+303&amp;gt;:	pop    %r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42241 &amp;lt;+305&amp;gt;:	pop    %r14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42243 &amp;lt;+307&amp;gt;:	pop    %r15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42245 &amp;lt;+309&amp;gt;:	pop    %rbp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42246 &amp;lt;+310&amp;gt;:	retq   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42247 &amp;lt;+311&amp;gt;:	nopw   0x0(%rax,%rax,1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42250 &amp;lt;+320&amp;gt;:	mov    (%r14),%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42253 &amp;lt;+323&amp;gt;:	mov    0x0(%r13),%r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42257 &amp;lt;+327&amp;gt;:	test   %r13,%r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4225a &amp;lt;+330&amp;gt;:	jne    0xd421e0 &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+208&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d4225c &amp;lt;+332&amp;gt;:	mov    -0x40(%rbp),%rax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42260 &amp;lt;+336&amp;gt;:	mov    0x28(%rax),%rdx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42264 &amp;lt;+340&amp;gt;:	xor    %eax,%eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d42266 &amp;lt;+342&amp;gt;:	jmp    0xd4221d &amp;lt;SymbolTable::do_lookup(char const*, int, unsigned long)+269&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Crash is at:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000000000d421e8 &amp;lt;+216&amp;gt;:	movzwl 0x4(%r14),%eax&lt;br/&gt;
&lt;br/&gt;
The above move is probably the read of Symbol::_length in the following call stack:&lt;br/&gt;
&lt;br/&gt;
Symbol::length&lt;br/&gt;
Symbol::utf8_length&lt;br/&gt;
Symbol::equals&lt;br/&gt;
SymbolTableLookup::equals&lt;br/&gt;
ConcurrentHashTable&amp;lt;SymbolTableConfig, mtSymbol&amp;gt;::get_node&lt;br/&gt;
ConcurrentHashTable&amp;lt;SymbolTableConfig, mtSymbol&amp;gt;::internal_get&lt;br/&gt;
ConcurrentHashTable&amp;lt;SymbolTableConfig, mtSymbol&amp;gt;::get&lt;br/&gt;
SymbolTable::do_lookup{noformat}&lt;br/&gt;
&lt;br/&gt;
which means there is a null Symbol* in the symbol table.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5095408">JDK-8303528</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5095687">JDK-8303750</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5096009">JDK-8304009</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5119445">JDK-8324211</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5092513">JDK-8301123</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5093703">JDK-8302108</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                                        </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102177" name="hs_err_pid12967.log" size="167576" author="dnsimon" created="Mon, 2 Jan 2023 14:12:55 -0800"/>
                            <attachment id="97405" name="hs_err_pid19661.log" size="132256" author="dnsimon" created="Fri, 17 Dec 2021 09:12:54 -0800"/>
                            <attachment id="97406" name="hs_err_pid52011.log" size="183249" author="dnsimon" created="Fri, 17 Dec 2021 09:12:54 -0800"/>
                            <attachment id="102386" name="jdk-20-ConcurrentHashTable.patch" size="3787" author="never" created="Mon, 23 Jan 2023 09:13:46 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2vg1n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17338"><![CDATA[b10]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>