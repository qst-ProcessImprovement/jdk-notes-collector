<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 19:23:42 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8307958] Metaspace verification is slow causing extreme class unloading times</title>
                <link>https://bugs.openjdk.org/browse/JDK-8307958</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>We see very long class unloading times with Generational ZGC in fastdebug builds. MacOS spindumps show that it is caused by Metaspace verification code.&lt;br/&gt;
&lt;br/&gt;
I think the main problem is that many of the verification operations are performed at every operation (add, remove, split, merge) and the individual operation verifies much more than a constant number of chunks. This seems to give a quadratic complexity which blows up if you don&amp;#39;t class unload often enough.&lt;br/&gt;
&lt;br/&gt;
With Generational ZGC we can see instances of up to minutes long class unloading times. This seems to cause secondary problems because reference processing is blocked (runs around the same time as class unloading). When reference processing is blocked tests that create a lot of files can start to use up all file descriptors.</description>
                <environment></environment>
        <key id="5100756">JDK-8307958</key>
            <summary>Metaspace verification is slow causing extreme class unloading times</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aboldtch">Axel Boldt-Christmas</assignee>
                                    <reporter username="stefank">Stefan Karlsson</reporter>
                        <labels>
                            <label>genzgc</label>
                            <label>metaspace</label>
                            <label>tier3</label>
                            <label>tier8</label>
                    </labels>
                <created>Thu, 11 May 2023 11:56:42 -0700</created>
                <updated>Thu, 8 Jun 2023 06:52:31 -0700</updated>
                            <resolved>Thu, 25 May 2023 02:05:30 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14584539" author="dcubed" created="Thu, 25 May 2023 07:30:35 -0700"  >The fix for this bug is integrated in jdk-21+25-2115.</comment>
                            <comment id="14584402" author="dukebot" created="Thu, 25 May 2023 02:05:29 -0700"  >Changeset: 8d8153e9&lt;br/&gt;
Author:    Axel Boldt-Christmas &amp;lt;&lt;a href=&apos;mailto:aboldtch@openjdk.org&apos;&gt;aboldtch@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-25 09:03:30 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/8d8153e98a64094e6cbccc94062fcf4d9edabe3d&quot;&gt;https://git.openjdk.org/jdk/commit/8d8153e98a64094e6cbccc94062fcf4d9edabe3d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14583371" author="roboduke" created="Mon, 22 May 2023 07:32:18 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14084&quot;&gt;https://git.openjdk.org/jdk/pull/14084&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-22 14:22:07 +0000</comment>
                            <comment id="14581991" author="mseledtsov" created="Tue, 16 May 2023 11:24:06 -0700"  >ILW = MMM = P3</comment>
                            <comment id="14581832" author="stuefe" created="Tue, 16 May 2023 01:36:17 -0700"  >And the majority of these verifications runs under the central Metaspace lock... yes, doing the SOMETIMES thing is the way to go. During the metaspace rework these verifications had been necessary, but metaspace has been very stable for some years, so we can tone them down.</comment>
                            <comment id="14581828" author="stefank" created="Tue, 16 May 2023 01:24:16 -0700"  >I think this is somehow triggered by Generational ZGC because it only runs class unloading in &amp;quot;major&amp;quot; collections. We&amp;#39;ve seen indication that we can enter a downwards spiral where *concurrent* class unloading starts to take longer times, which allows the application to load more classes, which leads to longer class unloading times, ... We need to figure out if this really is the case.</comment>
                            <comment id="14581815" author="stuefe" created="Tue, 16 May 2023 01:09:49 -0700"  >Interesting. Your excludes look reasonable. I would remove the SOMETIMES from BlockTree and add one to FreeBlocks::verify(), that is the parent structure that also verifies the binlists.&lt;br/&gt;
&lt;br/&gt;
What I don&amp;#39;t understand is why this is an issue now. Are these tests new, or does generational ZGC do class loading different, or have the verifications gotten slower?</comment>
                            <comment id="14581810" author="stefank" created="Tue, 16 May 2023 00:53:52 -0700"  >I&amp;#39;ve attached a spindump.txt of another test that performs a lot of class loading and unloading. I did many spindumps, so I&amp;#39;m not 100% certain that I hadn&amp;#39;t already removed some of the verification. I&amp;#39;ve been iteratively run spindumps and turned off verification paths to see if I can get this down to a sensible level. These are the patches I have:&lt;br/&gt;
&lt;a href=&quot;https://github.com/stefank/jdk/commits/8307958_too_slow_metaspace_verification&quot;&gt;https://github.com/stefank/jdk/commits/8307958_too_slow_metaspace_verification&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14581637" author="stuefe" created="Mon, 15 May 2023 10:16:07 -0700"  >&amp;quot;MacOS spindumps show that it is caused by Metaspace verification code. &amp;quot;&lt;br/&gt;
&lt;br/&gt;
Could you post a callstack into which verification exactly is the culprit?&lt;br/&gt;
</comment>
                            <comment id="14581035" author="dcubed" created="Thu, 11 May 2023 13:33:47 -0700"  >Here&amp;#39;s a log file snippet from the jdk-21+23-1903-tier3 sighting:&lt;br/&gt;
&lt;br/&gt;
applications/kitchensink/Kitchensink.java&lt;br/&gt;
&lt;br/&gt;
Stress process should complete by itself, just waiting for exitCode.&lt;br/&gt;
[stress.process.err] Iteration done: Jfr at Thu May 11 16:24:07 UTC 2023&lt;br/&gt;
[stress.process.err] Stress module finished at [Thu May 11 16:24:07 UTC 2023]: Jfr&lt;br/&gt;
[stress.process.err] Iteration done: Reference at Thu May 11 16:24:17 UTC 2023&lt;br/&gt;
[stress.process.err] Stress module finished at [Thu May 11 16:24:17 UTC 2023]: Reference&lt;br/&gt;
[stress.process.err] Iteration done: MemAccess at Thu May 11 16:24:38 UTC 2023&lt;br/&gt;
[stress.process.err] Stress module finished at [Thu May 11 16:24:38 UTC 2023]: MemAccess&lt;br/&gt;
[stress.process.err] Iteration done: SpecJvm2008Batch at Thu May 11 16:25:01 UTC 2023&lt;br/&gt;
[stress.process.err] Stress module finished at [Thu May 11 16:25:01 UTC 2023]: SpecJvm2008Batch&lt;br/&gt;
[stress.process.err] --------------------------------------------------------------------------------&lt;br/&gt;
[stress.process.err] InflaterStressModule got uncaught exception in execute at Thu May 11 16:26:06 UTC 2023 (1683822366557)&lt;br/&gt;
[stress.process.err] java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/java.io.tmpdir/InflateAndRun.6192523753689099341.deflated.tmp (Too many open files)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.open0(Native Method)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:289)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.&amp;lt;init&amp;gt;(FileOutputStream.java:230)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.&amp;lt;init&amp;gt;(FileOutputStream.java:179)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateFile(InflaterStressModule.java:141)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateAndInflate(InflaterStressModule.java:121)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.execute(InflaterStressModule.java:96)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)&lt;br/&gt;
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
[stress.process.err] --------------------------------------------------------------------------------&lt;br/&gt;
[stress.process.err] Unexpected Exception in thread InflaterStressModule.&lt;br/&gt;
[stress.process.err] java.lang.RuntimeException: java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/java.io.tmpdir/InflateAndRun.6192523753689099341.deflated.tmp (Too many open files)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:112)&lt;br/&gt;
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
[stress.process.err] Caused by: java.io.FileNotFoundException: /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/java.io.tmpdir/InflateAndRun.6192523753689099341.deflated.tmp (Too many open files)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.open0(Native Method)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:289)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.&amp;lt;init&amp;gt;(FileOutputStream.java:230)&lt;br/&gt;
[stress.process.err] 	at java.base/java.io.FileOutputStream.&amp;lt;init&amp;gt;(FileOutputStream.java:179)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateFile(InflaterStressModule.java:141)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.deflateAndInflate(InflaterStressModule.java:121)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.InflaterStressModule.execute(InflaterStressModule.java:96)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)&lt;br/&gt;
[stress.process.err] 	... 1 more&lt;br/&gt;
[stress.process.err] /applications/kitchensink/process/stress/modules/Dummy33463.java:1: error: cannot access applications.kitchensink.process.stress.modules&lt;br/&gt;
[stress.process.err] package applications.kitchensink.process.stress.modules;&lt;br/&gt;
[stress.process.err] ^&lt;br/&gt;
[stress.process.err]   /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S42316/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c14f7e0d-0397-4811-b5f6-75b1535e2993/runs/b1fb7ea3-6ce5-4393-9bfa-0e8eb83945d1/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/2.jar: Too many open files&lt;br/&gt;
[stress.process.err] 1 error&lt;br/&gt;
[stress.process.err] --------------------------------------------------------------------------------&lt;br/&gt;
[stress.process.err] AllocatorStressModule got uncaught exception in execute at Thu May 11 16:26:06 UTC 2023 (1683822366566)&lt;br/&gt;
[stress.process.err] java.lang.RuntimeException: Could not compile applications.kitchensink.process.stress.modules.Dummy33463 with source code package applications.kitchensink.process.stress.modules;&lt;br/&gt;
[stress.process.err] public class Dummy33463{&lt;br/&gt;
[stress.process.err]     public static Object result33463; &lt;br/&gt;
[stress.process.err]     void compiled33463(long l) { result33463 = Long.valueOf(l); } &lt;br/&gt;
[stress.process.err]     public Dummy33463() {&lt;br/&gt;
[stress.process.err]     for (long i = 0; i &amp;lt; 100_000; i++) {&lt;br/&gt;
[stress.process.err]             compiled33463(i); &lt;br/&gt;
[stress.process.err]         }&lt;br/&gt;
[stress.process.err]     }&lt;br/&gt;
[stress.process.err] }&lt;br/&gt;
[stress.process.err] 	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:179)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.generateClass(AllocatorStressModule.java:281)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper$CustomClassLoader.findClass(AllocatorStressModule.java:319)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.defineNextClass(AllocatorStressModule.java:305)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.AllocatorStressModule.execute(AllocatorStressModule.java:172)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)&lt;br/&gt;
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
[stress.process.err] --------------------------------------------------------------------------------&lt;br/&gt;
[stress.process.err] Unexpected Exception in thread AllocatorStressModule.&lt;br/&gt;
[stress.process.err] java.lang.RuntimeException: java.lang.RuntimeException: Could not compile applications.kitchensink.process.stress.modules.Dummy33463 with source code package applications.kitchensink.process.stress.modules;&lt;br/&gt;
[stress.process.err] public class Dummy33463{&lt;br/&gt;
[stress.process.err]     public static Object result33463; &lt;br/&gt;
[stress.process.err]     void compiled33463(long l) { result33463 = Long.valueOf(l); } &lt;br/&gt;
[stress.process.err]     public Dummy33463() {&lt;br/&gt;
[stress.process.err]     for (long i = 0; i &amp;lt; 100_000; i++) {&lt;br/&gt;
[stress.process.err]             compiled33463(i); &lt;br/&gt;
[stress.process.err]         }&lt;br/&gt;
[stress.process.err]     }&lt;br/&gt;
[stress.process.err] }&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:112)&lt;br/&gt;
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1583)&lt;br/&gt;
[stress.process.err] Caused by: java.lang.RuntimeException: Could not compile applications.kitchensink.process.stress.modules.Dummy33463 with source code package applications.kitchensink.process.stress.modules;&lt;br/&gt;
[stress.process.err] public class Dummy33463{&lt;br/&gt;
[stress.process.err]     public static Object result33463; &lt;br/&gt;
[stress.process.err]     void compiled33463(long l) { result33463 = Long.valueOf(l); } &lt;br/&gt;
[stress.process.err]     public Dummy33463() {&lt;br/&gt;
[stress.process.err]     for (long i = 0; i &amp;lt; 100_000; i++) {&lt;br/&gt;
[stress.process.err]             compiled33463(i); &lt;br/&gt;
[stress.process.err]         }&lt;br/&gt;
[stress.process.err]     }&lt;br/&gt;
[stress.process.err] }&lt;br/&gt;
[stress.process.err] 	at jdk.test.lib.compiler.InMemoryJavaCompiler.compile(InMemoryJavaCompiler.java:179)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.generateClass(AllocatorStressModule.java:281)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper$CustomClassLoader.findClass(AllocatorStressModule.java:319)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.ClassLoadingHelper.defineNextClass(AllocatorStressModule.java:305)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.AllocatorStressModule.execute(AllocatorStressModule.java:172)&lt;br/&gt;
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)&lt;br/&gt;
[stress.process.err] 	... 1 more&lt;br/&gt;
[stress.process.err] Fatal error happened in module AllocatorStressModule&lt;br/&gt;
[Thu May 11 16:26:41 UTC 2023] (1683822401966) Stress process has been shutdown&lt;br/&gt;
[Thu May 11 16:26:41 UTC 2023] Execution finished.</comment>
                    </comments>
                    <attachments>
                            <attachment id="103845" name="spindump.txt" size="110545" author="stefank" created="Tue, 16 May 2023 00:45:37 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31hs3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>