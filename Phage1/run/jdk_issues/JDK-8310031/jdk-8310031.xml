<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:46:15 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8310031] Parallel: Implement better work distribution for large object arrays in old gen</title>
                <link>https://bugs.openjdk.org/browse/JDK-8310031</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Currently Parallel GC young gc distributes work to find dirty cards  on stripe basis (65k areas of memory): if an object starts in a stripe assigned to a thread, that thread owns that object to find dirty cards exclusively.&lt;br/&gt;
&lt;br/&gt;
This is a problem with large objArrays that limits parallelism: a single worker thread will own that objArray, limiting throughput.&lt;br/&gt;
&lt;br/&gt;
That should also fix the difference between parallel gc and g1 gc in pause times (4-5x+) for DelayInducer (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8062128&quot; title=&quot;Dramatic difference between UseConcMarkSweepGC and UseG1GC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8062128&quot;&gt;&lt;strike&gt;JDK-8062128&lt;/strike&gt;&lt;/a&gt;) found in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8309960&quot; title=&quot;ParallelGC young collections very slow in DelayInducer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8309960&quot;&gt;&lt;strike&gt;JDK-8309960&lt;/strike&gt;&lt;/a&gt;.</description>
                <environment></environment>
        <key id="5103173">JDK-8310031</key>
            <summary>Parallel: Implement better work distribution for large object arrays in old gen</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rrich">Richard Reingruber</assignee>
                                    <reporter username="tschatzl">Thomas Schatzl</reporter>
                        <labels>
                            <label>gc-parallel</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Wed, 14 Jun 2023 06:49:09 -0700</created>
                <updated>Thu, 27 Feb 2025 00:20:29 -0800</updated>
                            <resolved>Tue, 24 Oct 2023 00:07:05 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                                                            <comments>
                            <comment id="14655099" author="goetz" created="Wed, 6 Mar 2024 02:48:05 -0800"  >[21u, 17u]&lt;br/&gt;
[~rrich]Do we need release notes for this?</comment>
                            <comment id="14651998" author="roboduke" created="Sun, 25 Feb 2024 01:46:22 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2230&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2230&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-24 10:00:00 +0000</comment>
                            <comment id="14651603" author="rrich" created="Thu, 22 Feb 2024 07:16:14 -0800"  >Fix request (17u)&lt;br/&gt;
&lt;br/&gt;
I would like to backport this as a performance bug fix.&lt;br/&gt;
&lt;br/&gt;
We received bug reports from users which have some young pauses of 30s, and even up to 50s (normally &amp;lt;1s) running large Gerrit instances (200GB heap, 100 gc threads).&lt;br/&gt;
We have tried to tune ParallelGC. Reducing the number of gc threads helps to make the pause time spikes smaller but this makes average pause times longer.&lt;br/&gt;
&lt;br/&gt;
Requires backports of:&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280030&quot;&gt;https://bugs.openjdk.org/browse/JDK-8280030&lt;/a&gt; (&lt;a href=&quot;https://github.com/openjdk/jdk17u-dev/pull/2226&quot;&gt;https://github.com/openjdk/jdk17u-dev/pull/2226&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8278893&quot;&gt;https://bugs.openjdk.org/browse/JDK-8278893&lt;/a&gt; (&lt;a href=&quot;https://github.com/openjdk/jdk17u-dev/pull/2227&quot;&gt;https://github.com/openjdk/jdk17u-dev/pull/2227&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8282094&quot;&gt;https://bugs.openjdk.org/browse/JDK-8282094&lt;/a&gt; (&lt;a href=&quot;https://github.com/openjdk/jdk17u-dev/pull/2228&quot;&gt;https://github.com/openjdk/jdk17u-dev/pull/2228&lt;/a&gt;)&lt;br/&gt;
&lt;br/&gt;
All hunks except the following 2 applied after a trivial preparation change.&lt;br/&gt;
The 1st hunk of psCardTable.hpp did not apply because of different context. Resolved by inserting the new lines.&lt;br/&gt;
The 2nd hunk of psScavenge.cpp did not apply because of different context. Resolved by inserting the new lines.&lt;br/&gt;
Finally a few trivial changes are required (renaming and the like).&lt;br/&gt;
&lt;br/&gt;
Risk is medium. We&amp;#39;ve done the downstream backport already many weeks ago.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve tested on x86_64:&lt;br/&gt;
jdk:tier1       TEST_VM_OPTS=&amp;quot;-XX:+UseParallelGC&amp;quot;&lt;br/&gt;
langtools:tier1 TEST_VM_OPTS=&amp;quot;-XX:+UseParallelGC&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Local CI Testing:&lt;br/&gt;
The fix passed our CI testing (e.g. 2024-02-25): JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests (also with ParallelGC).&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le.</comment>
                            <comment id="14647275" author="rrich" created="Wed, 7 Feb 2024 01:57:49 -0800"  >@zgu yes I&amp;#39;m planning a 17u backport.</comment>
                            <comment id="14647181" author="zgu" created="Tue, 6 Feb 2024 17:57:40 -0800"  >@rrich Any plan to backport to 17u? </comment>
                            <comment id="14640527" author="roboduke" created="Tue, 16 Jan 2024 03:22:25 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/160&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/160&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-12 09:19:27 +0000</comment>
                            <comment id="14634320" author="sgehwolf" created="Thu, 14 Dec 2023 06:50:08 -0800"  >This needs a jdk21u-dev PR before being applicable for approval. Please re-apply for approval once the PR is there.</comment>
                            <comment id="14624802" author="roboduke" created="Wed, 8 Nov 2023 01:54:39 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/328&quot;&gt;https://git.openjdk.org/jdk21u/pull/328&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-06 16:49:57 +0000</comment>
                            <comment id="14624801" author="rrich" created="Wed, 8 Nov 2023 01:47:33 -0800"  >Fix request (21u)&lt;br/&gt;
&lt;br/&gt;
EDIT (2024-01-16): as adviced I&amp;#39;ve cancelled the 21u pr and created a new pr targeting 21u-dev.&lt;br/&gt;
&lt;br/&gt;
I would like to backport this as a performance bug fix.&lt;br/&gt;
We received bug reports from users which have some young pauses of 30s, and even up to 50s (normally &amp;lt;1s) running large Gerrit instances (200GB heap, 100 gc threads).&lt;br/&gt;
We have tried to tune ParallelGC. Reducing the number of gc threads helps to make the pause time spikes smaller but this makes average pause times longer.&lt;br/&gt;
&lt;br/&gt;
The backport applies cleanly. The risk is low because of this and the thourough testing and reviewing in head.&lt;br/&gt;
&lt;br/&gt;
Manual testing on x86_64:&lt;br/&gt;
&lt;br/&gt;
make test TEST=langtools:tier1 TEST_VM_OPTS=&amp;quot;-XX:+UseParallelGC&amp;quot;&lt;br/&gt;
make test TEST=jdk:tier1       TEST_VM_OPTS=&amp;quot;-XX:+UseParallelGC&amp;quot;&lt;br/&gt;
make test TEST=hotspot:tier1&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests (also with ParallelGC).&lt;br/&gt;
All testing was done with fastdebug and release builds on the main platforms and also on Linux/PPC64le.</comment>
                            <comment id="14620488" author="dukebot" created="Tue, 24 Oct 2023 00:07:04 -0700"  >Changeset: 4bfe2268&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-24 07:05:56 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4bfe226870a15306b1e015c38fe3835f26b41fe6&quot;&gt;https://git.openjdk.org/jdk/commit/4bfe226870a15306b1e015c38fe3835f26b41fe6&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14595233" author="roboduke" created="Wed, 12 Jul 2023 01:32:05 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14846&quot;&gt;https://git.openjdk.org/jdk/pull/14846&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-12 08:05:59 +0000</comment>
                            <comment id="14593309" author="tschatzl" created="Mon, 3 Jul 2023 01:23:28 -0700"  >There is (at least) another issue in task distribution that might cause this on object arrays in young gen, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8311163&quot; title=&quot;Parallel: Improve large object handling during evacuation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8311163&quot;&gt;&lt;strike&gt;JDK-8311163&lt;/strike&gt;&lt;/a&gt;. There may be other issues that have been improved in G1 but not in Parallel GC. Reapplying the backed out &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8309960&quot; title=&quot;ParallelGC young collections very slow in DelayInducer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8309960&quot;&gt;&lt;strike&gt;JDK-8309960&lt;/strike&gt;&lt;/a&gt; may also help.</comment>
                            <comment id="14592102" author="rrich" created="Mon, 26 Jun 2023 13:32:54 -0700"  >The inverse scaling might be caused by the overhead of task stealing or by the card marks done by different threads for adjacent array elements.</comment>
                            <comment id="14592098" author="rrich" created="Mon, 26 Jun 2023 13:28:09 -0700"  >Hi Thomas,&lt;br/&gt;
&lt;br/&gt;
if you don&amp;#39;t mind I would like to take this item.&lt;br/&gt;
I&amp;#39;ve already got a working implementation: &lt;a href=&quot;https://github.com/openjdk/jdk/compare/master...reinrich:jdk:ps_parallel_scanning_of_large_arrays_in_old&quot;&gt;https://github.com/openjdk/jdk/compare/master...reinrich:jdk:ps_parallel_scanning_of_large_arrays_in_old&lt;/a&gt;&lt;br/&gt;
which needs some more stress testing and I want to do the renaissance benchmark to prove that it does not introduce a performance regression.&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;ve encountered extremely long scavenge pauses in a very large Gerrit/Git instance (256 cores, 256 GB RAM I think). The pauses were up to 50s with 100 gc threads. Shorter with less threads but then the short pauses got longer.&lt;br/&gt;
I&amp;#39;ll attach a micro benchmark that reproduces the issue: 10x - 50x longer scavenge pauses (depending on the system) when running with 10 gc threads instead of just one thread. I.e. scavenge performance scales inversely with the number of threads.&lt;br/&gt;
With the fix mentioned above performance increases when adding threads (about 4x).&lt;br/&gt;
&lt;br/&gt;
Testing so far: GHA (jdk11, jdk17, jdk22), hotspot/gc, jdk:tier1, langtools:tier1. The latter 2 with -XX:+UseParallelGC.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5119365">JDK-8324143</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123533">JDK-8327578</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123820">JDK-8327834</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5114897">JDK-8320252</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5103084">JDK-8309960</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5150490">JDK-8350130</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5104458">JDK-8311163</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114802">JDK-8320165</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="104422" name="BigArrayInOldGenRR.java" size="987" author="rrich" created="Mon, 26 Jun 2023 13:36:43 -0700"/>
                            <attachment id="106405" name="card_scan.java" size="638" author="ayang" created="Wed, 13 Sep 2023 12:28:39 -0700"/>
                            <attachment id="106702" name="card_scan_big_instances.java" size="26018" author="rrich" created="Thu, 5 Oct 2023 02:58:17 -0700"/>
                            <attachment id="106456" name="card_scan_scarce.java" size="1580" author="rrich" created="Mon, 18 Sep 2023 12:51:32 -0700"/>
                            <attachment id="106493" name="card_scan_scarce_2.java" size="2280" author="rrich" created="Thu, 21 Sep 2023 02:46:45 -0700"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5117700">JDK-8322645</subtask>
                                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31wij:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>