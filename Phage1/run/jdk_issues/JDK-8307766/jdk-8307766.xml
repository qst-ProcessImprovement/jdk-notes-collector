<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:58:44 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8307766] Linux: Provide the option to override the timer slack</title>
                <link>https://bugs.openjdk.org/browse/JDK-8307766</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>I have been investigating the accuracy of Thread.sleep timers, to identify why they overshoot the duration by about 50us on Linux. Tangentially, I have been looking the reasons why time-to-safepoint in some cases overshoots at about the same duration.&lt;br/&gt;
&lt;br/&gt;
It looks like Linux has the &amp;quot;timer slack&amp;quot; feature that coalesces the consecutive high-resolution timer events in order to optimize CPU wakeups. The default seems to be 50us! ...and there is the prctl(PR_SET_TIMERSLACK, ...) call to adjust it. With my quick prototype that drops the timer slack to 1ns, both the Thread.sleep accuracy and TTSP durations improve by tens of microseconds.&lt;br/&gt;
&lt;br/&gt;
There is a /proc/$pid/timerslack_ns interface, but it is inconvenient for two reasons: one needs to find the JVM pid and have permissions to write to /proc. I think there is a system-wide option to change timer slack, but that would affect every process in the system, which might not be a good idea.&lt;br/&gt;
&lt;br/&gt;
It makes sense to provide an experimental option that tunes the per-JVM timer slack.&lt;br/&gt;
&lt;br/&gt;
There is an alternative to look through every use of nanosleep and timed waits in the JDK and make sure we do something else for the delays that are lower than the timer slack. That, however, would eventually come to fighting with the jitter introduced by this OS-side event merge. We need this option to turn the timer slack off for those experiments too.&lt;br/&gt;
&lt;br/&gt;
Additional bonus: if one cranks the timer slack _up_, it emulates the sleep/wait stalls and exposes the pieces of code that over-rely on sleep/wait to return quickly.&lt;br/&gt;
&lt;br/&gt;
Draft PR: &lt;a href=&quot;https://github.com/openjdk/jdk/pull/13889&quot;&gt;https://github.com/openjdk/jdk/pull/13889&lt;/a&gt;</description>
                <environment></environment>
        <key id="5100495">JDK-8307766</key>
            <summary>Linux: Provide the option to override the timer slack</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>os</label>
                    </labels>
                <created>Tue, 9 May 2023 08:32:54 -0700</created>
                <updated>Wed, 2 Aug 2023 01:24:34 -0700</updated>
                            <resolved>Thu, 6 Jul 2023 03:39:32 -0700</resolved>
                                    <version>17</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14600044" author="shade" created="Fri, 28 Jul 2023 12:21:42 -0700"  >Fix Request (17u, 21u)&lt;br/&gt;
&lt;br/&gt;
Provides the experimental option for in-field use. Applies cleanly. Tests pass. The feature is well isolated, disabled by default, and poses low risk.</comment>
                            <comment id="14599830" author="roboduke" created="Fri, 28 Jul 2023 01:36:22 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1631&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1631&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-28 08:29:25 +0000</comment>
                            <comment id="14599825" author="roboduke" created="Fri, 28 Jul 2023 01:12:05 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/21&quot;&gt;https://git.openjdk.org/jdk21u/pull/21&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-28 08:04:56 +0000</comment>
                            <comment id="14594215" author="dukebot" created="Thu, 6 Jul 2023 03:39:31 -0700"  >Changeset: 7173c300&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-06 10:38:34 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/7173c3009e0999f13eaa4bee5eedee7326f9d124&quot;&gt;https://git.openjdk.org/jdk/commit/7173c3009e0999f13eaa4bee5eedee7326f9d124&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14583085" author="dholmes" created="Sun, 21 May 2023 18:13:27 -0700"  >I would expect such libraries to be using native code themselves to work directly with the best OS primitives available for what they are trying to do. Using Thread.sleep for such things seems very problematic to me. I&amp;#39;m also concerned that if we get into the game of trying to support such uses then we are the ones that have to shoulder that support burden for users that expect it to behave or be controllable in a variety of ways. This seems a slippery slope.</comment>
                            <comment id="14582823" author="roboduke" created="Fri, 19 May 2023 00:48:24 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13889&quot;&gt;https://git.openjdk.org/jdk/pull/13889&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-09 15:36:11 +0000</comment>
                            <comment id="14582822" author="shade" created="Fri, 19 May 2023 00:43:05 -0700"  >This (unfortunately) is not a theoretical issue. Developers of accurate low-latency request routers/schedulers/rate-limiters can compensate for Thread.sleep lags, but the less compensation is required on application side, the easier that task gets. I.e. you cannot &amp;quot;compensate&amp;quot; for 50us lag when you want 50us average sleep, if sleep is almost always that late. Yes, that mostly targets Linux, and I don&amp;#39;t see why we should be held back by Windows here. Alas, most of the work that motivates these accuracy improvements is internal, so I cannot share the results easily.&lt;br/&gt;
&lt;br/&gt;
Anyhow, for OpenJDK performance work, I also found this surprisingly useful when doing other low-latency work, like following up on safepoint lags and other places, where we do the the backoff sleeps. Cranking up TimerSlack shows up all those backoff sleeps nicely on the code paths, which serves exactly the purpose of showing which code over-relies on sleep accuracy, even for performance reasons.</comment>
                            <comment id="14580376" author="dholmes" created="Tue, 9 May 2023 15:42:10 -0700"  >I have concerns about any code that relies on the accuracy of Thread.sleep! Especially an accuracy down to 50us. GIven things are much worse on Windows this seems like an issue of theoretical interest not practical application.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5107220">JDK-8313603</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107221">JDK-8313604</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5100540">JDK-8307782</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31g63:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>