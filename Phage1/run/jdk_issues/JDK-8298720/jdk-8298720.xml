<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:52:28 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8298720] Insufficient error handling when CodeBuffer is exhausted</title>
                <link>https://bugs.openjdk.org/browse/JDK-8298720</link>
                <project id="10100" key="JDK">JDK</project>
                    <description># A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x000000010906423c, pid=26207, tid=22019&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment 18.9 (11.0.19+1) (fastdebug build 11.0.19-ea+1-LTS-101)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM 18.9 (fastdebug 11.0.19-ea+1-LTS-101, compiled mode, compressed oops, g1 gc, bsd-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.dylib+0x6423c]  Assembler::emit_long(int)+0x34&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   1602  487    b        java.lang.String::indexOf (113 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000016cadc000,0x000000016ccdf000],  sp=0x000000016ccdac10,  free space=2043k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x6423c]  Assembler::emit_long(int)+0x34&lt;br/&gt;
V  [libjvm.dylib+0x641b0]  Assembler::emit()+0x1c&lt;br/&gt;
V  [libjvm.dylib+0x67720]  Assembler::b(unsigned char*)+0xb8&lt;br/&gt;
V  [libjvm.dylib+0x7bbd0c]  MacroAssembler::string_indexof(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, int)+0x14b8&lt;br/&gt;
V  [libjvm.dylib+0x4dc04]  string_indexofLLNode::emit(CodeBuffer&amp;amp;, PhaseRegAlloc*) const+0x33c&lt;br/&gt;
V  [libjvm.dylib+0x8a6f20]  Compile::fill_buffer(CodeBuffer*, unsigned int*)+0xe00&lt;br/&gt;
V  [libjvm.dylib+0x2ea25c]  Compile::Code_Gen()+0x3c8&lt;br/&gt;
V  [libjvm.dylib+0x2e7cb4]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xa18&lt;br/&gt;
V  [libjvm.dylib+0x1fdcf0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0x154&lt;br/&gt;
V  [libjvm.dylib+0x2fafec]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x434&lt;br/&gt;
V  [libjvm.dylib+0x2faa24]  CompileBroker::compiler_thread_loop()+0x1ec&lt;br/&gt;
V  [libjvm.dylib+0xa2c568]  JavaThread::thread_main_inner()+0x1f8&lt;br/&gt;
V  [libjvm.dylib+0xa2c020]  JavaThread::run()+0x32c&lt;br/&gt;
V  [libjvm.dylib+0xa28b90]  Thread::call_run()+0x90&lt;br/&gt;
V  [libjvm.dylib+0x896874]  thread_native_entry(Thread*)+0x11c&lt;br/&gt;
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Test: TestStressCodeBuffers.java&lt;br/&gt;
OS: macosx-aarch64-debug&lt;br/&gt;
Where: 11.0.19-oracle&lt;br/&gt;
&lt;br/&gt;
#-----testresult-----&lt;br/&gt;
description=file\:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-11.0.19+1-101/src.full/open/test/hotspot/jtreg/compiler/codecache/TestStressCodeBuffers.java&lt;br/&gt;
elapsed=4570 0\:00\:04.570&lt;br/&gt;
end=Tue Dec 13 12\:22\:05 GMT 2022&lt;br/&gt;
environment=regtest&lt;br/&gt;
execStatus=Failed. Unexpected exit from test [exit code\: 134]&lt;br/&gt;
harnessLoaderMode=Classpath Loader&lt;br/&gt;
harnessVariety=Full Bundle&lt;br/&gt;
hostname=jpg-mac-arm-27.oraclecorp.com&lt;br/&gt;
javatestOS=Mac OS X 11.6.6 (aarch64)&lt;br/&gt;
javatestVersion=6.0-ea+b11-2020-05-19&lt;br/&gt;
jtregVersion=jtreg 5.1 ea b01&lt;br/&gt;
script=com.sun.javatest.regtest.exec.RegressionScript&lt;br/&gt;
sections=script_messages build compile main&lt;br/&gt;
start=Tue Dec 13 12\:22\:00 GMT 2022&lt;br/&gt;
test=compiler/codecache/TestStressCodeBuffers.java&lt;br/&gt;
testJDK=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-11.0.19+1-101/macosx-aarch64-debug.jdk/jdk-11.0.19/fastdebug</description>
                <environment></environment>
        <key id="5089623">JDK-8298720</key>
            <summary>Insufficient error handling when CodeBuffer is exhausted</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thartmann">Tobias Hartmann</assignee>
                                    <reporter username="jcherian">Joe Cherian</reporter>
                        <labels>
                            <label>c2</label>
                            <label>oracle-triage-21</label>
                            <label>problemlist</label>
                    </labels>
                <created>Tue, 13 Dec 2022 23:32:33 -0800</created>
                <updated>Mon, 9 Oct 2023 05:22:11 -0700</updated>
                            <resolved>Fri, 6 Jan 2023 00:30:21 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                                                            <comments>
                            <comment id="14549189" author="dukebot" created="Fri, 6 Jan 2023 00:30:20 -0800"  >Changeset: cc4936a7&lt;br/&gt;
Author:    Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-06 08:28:09 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/cc4936a79e1c1723542d575a2596edd29248817e&quot;&gt;https://git.openjdk.org/jdk/commit/cc4936a79e1c1723542d575a2596edd29248817e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14548584" author="roboduke" created="Tue, 3 Jan 2023 23:02:27 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11839&quot;&gt;https://git.openjdk.org/jdk/pull/11839&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-04 06:31:16 +0000</comment>
                            <comment id="14547593" author="thartmann" created="Fri, 23 Dec 2022 02:28:52 -0800"  >I attached a prototype patch. Will complete this after the winter break.</comment>
                            <comment id="14547424" author="thartmann" created="Thu, 22 Dec 2022 05:48:21 -0800"  >After strengthening -XX:+StressCodeBuffers, I can reproduce the issue in mainline with a slightly different stack trace:&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00000001048abf44, pid=71594, tid=41475&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2022-12-22-1203593.tohartma...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2022-12-22-1203593.tohartma..., compiled mode, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.dylib+0xf3f44]  Assembler::b(unsigned char*)+0xb8&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   2369   26    b        java.lang.String::indexOf (113 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000016ec0c000,0x000000016ee0f000],  sp=0x000000016ee09cc0,  free space=2039k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0xf3f44]  Assembler::b(unsigned char*)+0xb8&lt;br/&gt;
V  [libjvm.dylib+0x3bc9b0]  C2_MacroAssembler::string_indexof(Register, Register, Register, Register, Register, Register, Register, Register, Register, Register, int, Register, int)+0x13dc&lt;br/&gt;
V  [libjvm.dylib+0x78b8c]  string_indexofULNode::emit(CodeBuffer&amp;amp;, PhaseRegAlloc*) const+0x6bc&lt;br/&gt;
V  [libjvm.dylib+0xdb27f0]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x13d0&lt;br/&gt;
V  [libjvm.dylib+0x4d822c]  Compile::Code_Gen()+0x3b4&lt;br/&gt;
V  [libjvm.dylib+0x4d5eb0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15b4&lt;br/&gt;
V  [libjvm.dylib+0x3cc09c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x180&lt;br/&gt;
V  [libjvm.dylib+0x4f2260]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x56c&lt;br/&gt;
V  [libjvm.dylib+0x4f1b20]  CompileBroker::compiler_thread_loop()+0x288&lt;br/&gt;
V  [libjvm.dylib+0x89c520]  JavaThread::thread_main_inner()+0x20c&lt;br/&gt;
V  [libjvm.dylib+0xfda94c]  Thread::call_run()+0x220&lt;br/&gt;
V  [libjvm.dylib+0xda0eb0]  thread_native_entry(Thread*)+0x160&lt;br/&gt;
C  [libsystem_pthread.dylib+0x74ec]  _pthread_start+0x94&lt;br/&gt;
</comment>
                            <comment id="14547130" author="thartmann" created="Wed, 21 Dec 2022 04:42:06 -0800"  >If found the root cause which is missing checks of the return value of trampoline_call in MacroAssembler::string_indexof. This was missed by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8248411&quot; title=&quot;AArch64: Insufficient error handling when CodeBuffer is exhausted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8248411&quot;&gt;&lt;strike&gt;JDK-8248411&lt;/strike&gt;&lt;/a&gt; which fixed many other similar places.</comment>
                            <comment id="14546444" author="thartmann" created="Mon, 19 Dec 2022 07:53:43 -0800"  >My current working hypothesis is that, similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8257513&quot; title=&quot;C2: assert((constant_addr - _masm.code()-&amp;gt;consts()-&amp;gt;start()) == con.offset())&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8257513&quot;&gt;&lt;strike&gt;JDK-8257513&lt;/strike&gt;&lt;/a&gt;, we miss a compilation bailout when StressCodeBuffers simulates an occasional allocation failure. Below log shows that we are compiling task 487 which then triggers an allocation failure but the hs_err file shows that we continued to emit code because we are still compiling task 487 when we fail.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1445 0  487    b        java.lang.String::indexOf([BBILjava/lang/String;I)I (113 bytes)&lt;br/&gt;
- java.lang.String::coder()B (15 bytes)&lt;br/&gt;
- java.lang.String::length()I (11 bytes)&lt;br/&gt;
- java.lang.String::coder()B (15 bytes)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Values: 295 nodes ---&amp;gt; 0/0 (0)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Values: 295 nodes ---&amp;gt; 4/27 (0)  ratio 0.148148&lt;br/&gt;
expanding CodeBuffer:CodeBuffer:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;consts.code = 0x000000010db2ae00 : 0x000000010db2ae00 : 0x000000010db2ae18 (0 of 24)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;consts.locs = 0x00000001193f8ea0 : 0x00000001193f8ea0 : 0x00000001193f8ea8 (0 of 4) point=0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;insts.code = 0x000000010db2abc0 : 0x000000010db2abc0 : 0x000000010db2ad40 (0 of 384)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;insts.locs = 0x00000001193f8e00 : 0x00000001193f8e00 : 0x00000001193f8e9a (0 of 77) point=0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;stubs.code = 0x000000010db2ad80 : 0x000000010db2ad80 : 0x000000010db2adc0 (0 of 64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;stubs.locs = 0x00000001193f8eb0 : 0x00000001193f8eb0 : 0x00000001193f8eb8 (0 of 4) point=0&lt;br/&gt;
expanded CodeBuffer:CodeBuffer:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;consts.code = 0x000000010db30ac0 : 0x000000010db30ac0 : 0x000000010db30b00 (0 of 64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;consts.locs = 0x00000001193f8ea0 : 0x00000001193f8ea0 : 0x00000001193f8ea8 (0 of 4) point=0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;insts.code = 0x000000010db304c0 : 0x000000010db304c0 : 0x000000010db30a80 (0 of 1472)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;insts.locs = 0x00000001193f8e00 : 0x00000001193f8e00 : 0x00000001193f8e9a (0 of 77) point=0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;stubs.code = 0x000000010db30b40 : 0x000000010db30b40 : 0x000000010db30b80 (0 of 64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;stubs.locs = 0x00000001193f8eb0 : 0x00000001193f8eb0 : 0x00000001193f8eb8 (0 of 4) point=0&lt;br/&gt;
expanding CodeBuffer:CodeBuffer:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;consts.code = 0x000000010db30ac0 : 0x000000010db30ac0 : 0x000000010db30b00 (0 of 64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;consts.locs = 0x00000001193f8ea0 : 0x00000001193f8ea0 : 0x00000001193f8ea8 (0 of 4) point=0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;insts.code = 0x000000010db304c0 : 0x000000010db3067c : 0x000000010db30a80 (444 of 1472)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;insts.locs = 0x00000001193f8e00 : 0x00000001193f8e04 : 0x00000001193f8e9a (2 of 77) point=136&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;stubs.code = 0x000000010db30b40 : 0x000000010db30b50 : 0x000000010db30b80 (16 of 64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;stubs.locs = 0x0000000119321b50 : 0x0000000119321b56 : 0x0000000119321b6e (3 of 15) point=0&lt;br/&gt;
StressCodeBuffers: have expanded 1024 times&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   1448 2 2  487    b        java.lang.String::indexOf([BBILjava/lang/String;I)I (113 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000000170a10000,0x0000000170c13000],  sp=0x0000000170c0ec10,  free space=2043k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x6423c]  Assembler::emit_long(int)+0x34&lt;br/&gt;
V  [libjvm.dylib+0x641b0]  Assembler::emit()+0x1c&lt;br/&gt;
V  [libjvm.dylib+0x67720]  Assembler::b(unsigned char*)+0xb8</comment>
                            <comment id="14546422" author="thartmann" created="Mon, 19 Dec 2022 06:16:27 -0800"  >We are in CodeSection::emit_int32 and somehow CodeSection::_end ended up being x8=0xfffffffffffffffe which is #define       badAddress        ((address)::badAddressVal)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0x1065c0234 &amp;lt;+44&amp;gt;: ldr    x0, [x8, #0x18]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0x1065c0238 &amp;lt;+48&amp;gt;: ldr    x8, [x0, #0x10]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0x1065c023c &amp;lt;+52&amp;gt;: str    w1, [x8]</comment>
                            <comment id="14545633" author="chagedorn" created="Thu, 15 Dec 2022 00:11:35 -0800"  >ILW = Segfault in C2 code generation, single test on mac aarch64, disable compilation of affected method = HLM = P3</comment>
                            <comment id="14545420" author="thartmann" created="Wed, 14 Dec 2022 08:01:18 -0800"  >This looks suspicious:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum ScratchBufferBlob {&lt;br/&gt;
#if defined(PPC64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MAX_inst_size       = 2048,&lt;br/&gt;
#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MAX_inst_size       = 1024,&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
In mainline, since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8230565&quot; title=&quot;ZGC: Redesign C2 load barrier to expand on the MachNode level&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8230565&quot;&gt;&lt;strike&gt;JDK-8230565&lt;/strike&gt;&lt;/a&gt;, we always have MAX_inst_size = 2048&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll take a closer look.&lt;br/&gt;
&lt;br/&gt;
Update:&lt;br/&gt;
If the ScratchBufferBlob is too small, we would fail with an assert:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (workspace/open/src/hotspot/share/asm/codeBuffer.hpp:184), pid=5551, tid=43267&lt;br/&gt;
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x000000011816a140 &amp;lt;= 0x000000011816a2c4 &amp;lt;= 0x000000011816a2c0&lt;br/&gt;
&lt;br/&gt;
V  [libjvm.dylib+0xab2c80]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5b0&lt;br/&gt;
V  [libjvm.dylib+0xab33f8]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40&lt;br/&gt;
V  [libjvm.dylib+0x379354]  report_vm_error(char const*, int, char const*, char const*, ...)+0x74&lt;br/&gt;
V  [libjvm.dylib+0x63c9c]  CodeSection::set_end(unsigned char*)+0x84&lt;br/&gt;
V  [libjvm.dylib+0x63b78]  Assembler::emit()+0x1c&lt;br/&gt;
V  [libjvm.dylib+0x64b90]  Assembler::ld_st2(RegisterImpl*, Address const&amp;amp;, int, int, int)+0x1b8&lt;br/&gt;
V  [libjvm.dylib+0x7bb520]  MacroAssembler::string_indexof(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, int)+0xfe8&lt;br/&gt;
V  [libjvm.dylib+0x4d5cc]  string_indexofLLNode::emit(CodeBuffer&amp;amp;, PhaseRegAlloc*) const+0x33c&lt;br/&gt;
V  [libjvm.dylib+0x8a6c04]  Compile::fill_buffer(CodeBuffer*, unsigned int*)+0xe00&lt;br/&gt;
&lt;br/&gt;
So this must be something else.</comment>
                            <comment id="14545416" author="thartmann" created="Wed, 14 Dec 2022 07:41:18 -0800"  >This was already reported by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287129&quot; title=&quot;TestStressCodeBuffers.java crashes on macosx_aarch64&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287129&quot;&gt;&lt;strike&gt;JDK-8287129&lt;/strike&gt;&lt;/a&gt; with an earlier version and closed as duplicate of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8272094&quot; title=&quot;compiler/codecache/TestStressCodeBuffers.java crashes with &amp;quot;failed to allocate space for trampoline&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8272094&quot;&gt;&lt;strike&gt;JDK-8272094&lt;/strike&gt;&lt;/a&gt;. Now that we have the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8272094&quot; title=&quot;compiler/codecache/TestStressCodeBuffers.java crashes with &amp;quot;failed to allocate space for trampoline&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8272094&quot;&gt;&lt;strike&gt;JDK-8272094&lt;/strike&gt;&lt;/a&gt; in JDK 11.0.18-oracle, it must be a different issue.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4834202">JDK-8130309</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5023248">JDK-8248411</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5056135">JDK-8272094</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5090655">JDK-8299570</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5075389">JDK-8287129</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102157" name="8298720.diff" size="7449" author="thartmann" created="Fri, 23 Dec 2022 02:29:18 -0800"/>
                            <attachment id="102018" name="console_log.txt" size="19775" author="jcherian" created="Tue, 13 Dec 2022 23:31:23 -0800"/>
                            <attachment id="102034" name="hs_err_pid26207.log" size="91599" author="thartmann" created="Wed, 14 Dec 2022 05:55:42 -0800"/>
                            <attachment id="102032" name="replay_pid26207.log" size="92846" author="thartmann" created="Wed, 14 Dec 2022 05:55:05 -0800"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5101555">JDK-8308631</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zm3v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>