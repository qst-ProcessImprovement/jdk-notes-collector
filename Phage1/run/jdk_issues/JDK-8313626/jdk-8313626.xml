<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:47:52 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8313626] C2 crash due to unexpected exception control flow</title>
                <link>https://bugs.openjdk.org/browse/JDK-8313626</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>I attached a simple reproducer (reproducer.jasm). To reproduce, run:&lt;br/&gt;
- java org.openjdk.asmtools.Main jasm reproducer.jasm&lt;br/&gt;
- java -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test* -XX:-TieredCompilation -XX:CompileCommand=dontinline,Test::m Test&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The underlying issue is that the target of the second exception table entry is inside the try/catch scope:&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception table:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from    to  target type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7    10    13   Class java/lang/Exception&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0    18    15   Class java/lang/Throwable&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
We actually have code in C1 to handle this case:&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// It&amp;#39;s acceptable for an exception handler to cover itself&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// but we don&amp;#39;t handle that in the parser currently.  It&amp;#39;s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// very rare so we bailout instead of trying to handle it.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/7277bb19f128b84094400cb4262b2e0432e559c5/src/hotspot/share/c1/c1_GraphBuilder.cpp#L2504&quot;&gt;https://github.com/openjdk/jdk/blob/7277bb19f128b84094400cb4262b2e0432e559c5/src/hotspot/share/c1/c1_GraphBuilder.cpp#L2504&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
My understanding is that the JVM Specification does not impose any restrictions on an exception handler covering the same range of instructions as itself. &lt;br/&gt;
&lt;br/&gt;
I discussed this with [~dholmes] and he agreed that it&amp;#39;s legal for an exception handler to cover itself. The only JVMS restrictions on from/to are that from &amp;lt; to and that they are both in the bci range.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
In fact, the following code generates such an exception handler with itself as target around monitorexit even with javac:&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
void test() { synchronized(this) {  } }&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9: astore_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10: aload_1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;11: monitorexit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;12: aload_2&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception table:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from    to  target type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4     6     9   any&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9    12     9   any&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Since there is only a limited set of cases where javac would create such an exception table, C2 is not well tested with these scenarios. I updated my attached reproducer to cover another problematic case.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Failure modes are:&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0   26  Catch  === 21 22  [[ 27 ]]  !jvms: Test::test1 @ bci:0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1   27  CatchProj  === 26  [[ 105 ]] #&lt;a href=&apos;mailto:0@bci&apos;&gt;0@bci&lt;/a&gt; -1  !jvms: Test::test1 @ bci:0&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error &lt;br/&gt;
(/oracle/jdk2/open/src/hotspot/share/opto/compile.cpp:4003), pid=3085146, &lt;br/&gt;
tid=3085159&lt;br/&gt;
#  assert(false) failed: malformed control flow&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build &lt;br/&gt;
21-internal-LTS-2023-05-12-0924511.tobias...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug &lt;br/&gt;
21-internal-LTS-2023-05-12-0924511.tobias..., mixed mode, compressed oops, &lt;br/&gt;
compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x9b8c24]  Compile::final_graph_reshaping()+0x11d4&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:    345   24   !         Test::test1 (5 bytes)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Stack: [0x00007f1d57057000,0x00007f1d57158000],  sp=0x00007f1d57152f50,  free &lt;br/&gt;
space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native &lt;br/&gt;
code)&lt;br/&gt;
V  [libjvm.so+0x9b8c24]  Compile::final_graph_reshaping()+0x11d4  &lt;br/&gt;
(compile.cpp:4003)&lt;br/&gt;
V  [libjvm.so+0x9ba774]  Compile::Optimize()+0x1aa4  (compile.cpp:2450)&lt;br/&gt;
V  [libjvm.so+0x9bc4a5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, &lt;br/&gt;
DirectiveSet*)+0x1aa5  (compile.cpp:840)&lt;br/&gt;
V  [libjvm.so+0x813664]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, &lt;br/&gt;
bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)&lt;br/&gt;
V  [libjvm.so+0x9c8290]  &lt;br/&gt;
CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9e0  &lt;br/&gt;
(compileBroker.cpp:2265)&lt;br/&gt;
V  [libjvm.so+0x9c9138]  CompileBroker::compiler_thread_loop()+0x628  &lt;br/&gt;
(compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0xe6418e]  JavaThread::thread_main_inner()+0xee  &lt;br/&gt;
(javaThread.cpp:717)&lt;br/&gt;
V  [libjvm.so+0x172fc98]  Thread::call_run()+0xb8  (thread.cpp:216)&lt;br/&gt;
V  [libjvm.so+0x1432a4a]  thread_native_entry(Thread*)+0x11a  &lt;br/&gt;
(os_linux.cpp:740)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/oracle/jdk2/open/src/hotspot/share/opto/multnode.cpp:77), &lt;br/&gt;
pid=3085184, tid=3085197&lt;br/&gt;
#  assert((Opcode() != Op_If &amp;amp;&amp;amp; Opcode() != Op_RangeCheck) || outcnt() == 2) &lt;br/&gt;
failed: bad if #1&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build &lt;br/&gt;
21-internal-LTS-2023-05-12-0924511.tobias...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug &lt;br/&gt;
21-internal-LTS-2023-05-12-0924511.tobias..., mixed mode, compressed oops, &lt;br/&gt;
compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x1397c0c]  MultiNode::proj_out(unsigned int) const+0x8c&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:    306   24   !         Test::test2 (6 bytes)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Stack: [0x00007f3577335000,0x00007f3577436000],  sp=0x00007f3577430fd0,  free &lt;br/&gt;
space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native &lt;br/&gt;
code)&lt;br/&gt;
V  [libjvm.so+0x1397c0c]  MultiNode::proj_out(unsigned int) const+0x8c  &lt;br/&gt;
(multnode.cpp:77)&lt;br/&gt;
V  [libjvm.so+0x12635fa]  &lt;br/&gt;
PhaseMacroExpand::expand_subtypecheck_node(SubTypeCheckNode*)+0x1fa  &lt;br/&gt;
(macro.cpp:2275)&lt;br/&gt;
V  [libjvm.so+0x1269c15]  PhaseMacroExpand::expand_macro_nodes()+0xba5  &lt;br/&gt;
(macro.cpp:2530)&lt;br/&gt;
V  [libjvm.so+0x9ba5ae]  Compile::Optimize()+0x18de  (compile.cpp:2409)&lt;br/&gt;
V  [libjvm.so+0x9bc4a5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, &lt;br/&gt;
DirectiveSet*)+0x1aa5  (compile.cpp:840)&lt;br/&gt;
V  [libjvm.so+0x813664]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, &lt;br/&gt;
bool, DirectiveSet*)+0x3c4  (c2compiler.cpp:118)&lt;br/&gt;
V  [libjvm.so+0x9c8290]  &lt;br/&gt;
CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9e0  &lt;br/&gt;
(compileBroker.cpp:2265)&lt;br/&gt;
V  [libjvm.so+0x9c9138]  CompileBroker::compiler_thread_loop()+0x628  &lt;br/&gt;
(compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0xe6418e]  JavaThread::thread_main_inner()+0xee  &lt;br/&gt;
(javaThread.cpp:717)&lt;br/&gt;
V  [libjvm.so+0x172fc98]  Thread::call_run()+0xb8  (thread.cpp:216)&lt;br/&gt;
V  [libjvm.so+0x1432a4a]  thread_native_entry(Thread*)+0x11a  &lt;br/&gt;
(os_linux.cpp:740)&lt;br/&gt;
&amp;nbsp;</description>
                <environment></environment>
        <key id="5107245">JDK-8313626</key>
            <summary>C2 crash due to unexpected exception control flow</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tholenstein">Tobias Holenstein</assignee>
                                    <reporter username="thartmann">Tobias Hartmann</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk8u-fix-request</label>
                            <label>jdk8u-fix-yes</label>
                            <label>oracle-triage-22</label>
                    </labels>
                <created>Wed, 2 Aug 2023 05:58:56 -0700</created>
                <updated>Sun, 29 Jun 2025 04:05:08 -0700</updated>
                            <resolved>Wed, 23 Aug 2023 01:50:57 -0700</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14708188" author="serb" created="Thu, 26 Sep 2024 08:47:15 -0700"  >Fix Request (8u)&lt;br/&gt;
&lt;br/&gt;
The fix for the jvm crash. mostly clean.&lt;br/&gt;
Review 8u-dev: &lt;a href=&quot;https://github.com/openjdk/jdk8u-dev/pull/581&quot;&gt;https://github.com/openjdk/jdk8u-dev/pull/581&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Testing:&lt;br/&gt;
&amp;nbsp;- No new issues were found by the tier1 and tier2 tests.&lt;br/&gt;
&amp;nbsp;- The new test passes before and after the patch, same as for jdk11u, see: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8313626?focusedId=14608649&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14608649&quot;&gt;https://bugs.openjdk.org/browse/JDK-8313626?focusedId=14608649&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14608649&lt;/a&gt;</comment>
                            <comment id="14708085" author="roboduke" created="Thu, 26 Sep 2024 02:23:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk8u-dev/pull/581&quot;&gt;https://git.openjdk.org/jdk8u-dev/pull/581&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-26 07:37:28 +0000</comment>
                            <comment id="14608649" author="shade" created="Mon, 4 Sep 2023 02:56:03 -0700"  >Fix Request (11u)&lt;br/&gt;
&lt;br/&gt;
Same reason as for 17u. The wrinkle is that new regression test passes even without the patch. I suspect that is due to more advanced loop optimizations past JDK 11u. Testing passes too.</comment>
                            <comment id="14607763" author="shade" created="Wed, 30 Aug 2023 08:57:39 -0700"  >Fix Request (17u)&lt;br/&gt;
&lt;br/&gt;
Same reason as for 21u. Applies cleanly. New regression test fails without the fix and passes with it. Other testing passes too. This also contributes to parity with 17.0.10-oracle.</comment>
                            <comment id="14607708" author="roboduke" created="Wed, 30 Aug 2023 05:01:42 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2107&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2107&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-30 11:50:46 +0000</comment>
                            <comment id="14607680" author="roboduke" created="Wed, 30 Aug 2023 04:25:52 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1709&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1709&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-30 11:18:57 +0000</comment>
                            <comment id="14606117" author="roboduke" created="Wed, 23 Aug 2023 06:07:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/92&quot;&gt;https://git.openjdk.org/jdk21u/pull/92&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-23 12:59:27 +0000</comment>
                            <comment id="14606113" author="thartmann" created="Wed, 23 Aug 2023 06:00:48 -0700"  >Fix Request (JDK 21u):&lt;br/&gt;
Fixes a crash during C2 compilation. The fix is low risk (safepoint on backbranch during parsing), applies cleanly and includes a regression test. Tested with tier 1 - 3.</comment>
                            <comment id="14606049" author="dukebot" created="Wed, 23 Aug 2023 01:50:55 -0700"  >Changeset: f8203cb2&lt;br/&gt;
Author:    Tobias Holenstein &amp;lt;&lt;a href=&apos;mailto:tholenstein@openjdk.org&apos;&gt;tholenstein@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-08-23 08:47:33 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/f8203cb272e6136b784e5c43a500f6a0bfb19c8b&quot;&gt;https://git.openjdk.org/jdk/commit/f8203cb272e6136b784e5c43a500f6a0bfb19c8b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14604991" author="roboduke" created="Fri, 18 Aug 2023 06:39:00 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15292&quot;&gt;https://git.openjdk.org/jdk/pull/15292&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-15 15:41:50 +0000</comment>
                            <comment id="14601379" author="thartmann" created="Wed, 2 Aug 2023 06:14:35 -0700"  >The &amp;quot;COMPILE SKIPPED: malformed control flow (not retryable)&amp;quot; bailouts (asserts since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303951&quot; title=&quot;Add asserts before record_method_not_compilable where possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303951&quot;&gt;&lt;strike&gt;JDK-8303951&lt;/strike&gt;&lt;/a&gt; in JDK 21) already reproduces with JDK 8u.&lt;br/&gt;
&lt;br/&gt;
The &amp;quot;bad if&amp;quot; assert happens since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8238691&quot; title=&quot;C2: turn subtype check into macro node&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8238691&quot;&gt;&lt;strike&gt;JDK-8238691&lt;/strike&gt;&lt;/a&gt; in JDK 15.&lt;br/&gt;
&lt;br/&gt;
ILW = Assert during C2 compilation, with exotic bytecode not generated by javac, exclude compilation of affected method = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5108709">JDK-8314885</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5108710">JDK-8314886</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5109398">JDK-8315466</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5109432">JDK-8315497</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5109632">JDK-8315682</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5140129">JDK-8341063</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5141738">JDK-8342413</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5163136">JDK-8360947</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5163153">JDK-8360964</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                                        </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="104937" name="reproducer.jasm" size="2695" author="thartmann" created="Wed, 2 Aug 2023 05:56:26 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32liz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17349"><![CDATA[b12]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>