<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:40:22 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8321509] False positive in get_trampoline fast path causes crash</title>
                <link>https://bugs.openjdk.org/browse/JDK-8321509</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Summary:&lt;br/&gt;
AArch64 binds some trampoline call-sites early, thanks to its is_always_within_branch_range() check.  This allows a false positive match with a trampoline stub during code buffer expansion in rare situations.&lt;br/&gt;
&lt;br/&gt;
Original description:&lt;br/&gt;
We have been seeing some errors in constantPool being reported as unexpected bytecodes during testing in Graal CI contexts. All runs have been running C2 as top tier compiler (without Graal) so we believe this is an upstream bug.&lt;br/&gt;
&lt;br/&gt;
The errors are always in constantPool.cpp:706 but the bytecodes differ.&lt;br/&gt;
&lt;br/&gt;
An example error&lt;br/&gt;
&lt;br/&gt;
Unexpected bytecode: 188&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (constantPool.cpp:706), pid=7132, tid=7133&lt;br/&gt;
#  Error: ShouldNotReachHere()&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+25) (build 22+25-jvmci-b01)&lt;br/&gt;
&lt;br/&gt;
with the stack&lt;br/&gt;
Stack: [0x0000ffffa4e10000,0x0000ffffa500e000],  sp=0x0000ffffa500a1b0,  free space=2024k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x5c2c24]  ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)+0x184  (constantPool.cpp:706)&lt;br/&gt;
V  [libjvm.so+0xa3e268]  LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;amp;, int, JavaThread*)+0x54&lt;br/&gt;
V  [libjvm.so+0x421fb4]  Bytecode_invoke::static_target(JavaThread*)+0xa4&lt;br/&gt;
V  [libjvm.so+0xc360d8]  SharedRuntime::find_callee_info_helper(vframeStream&amp;amp;, Bytecodes::Code&amp;amp;, CallInfo&amp;amp;, JavaThread*)+0x3f8&lt;br/&gt;
V  [libjvm.so+0xc36238]  SharedRuntime::find_callee_info(Bytecodes::Code&amp;amp;, CallInfo&amp;amp;, JavaThread*)+0x68&lt;br/&gt;
V  [libjvm.so+0xc3635c]  SharedRuntime::resolve_sub_helper(bool, bool, JavaThread*)+0xcc&lt;br/&gt;
V  [libjvm.so+0xc3653c]  SharedRuntime::resolve_helper(bool, bool, JavaThread*)+0x3c&lt;br/&gt;
V  [libjvm.so+0xc36a2c]  SharedRuntime::resolve_opt_virtual_call_C(JavaThread*)+0x3c&lt;br/&gt;
v  ~RuntimeStub::resolve_opt_virtual_call 0x0000ffff9002c210&lt;br/&gt;
J 3293 c2 jdk.tools.jlink.plugin.ResourcePoolEntry.write(Ljava/io/OutputStream;)V &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt; (24 bytes) @ 0x0000ffff90c03c20 [0x0000ffff90bfff80+0x0000000000003ca0]&lt;br/&gt;
J 3249 c1 jdk.tools.jlink.internal.ImageFileCreator$$Lambda+0x00000240010f66a0.accept(Ljava/lang/Object;)V &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt; (12 bytes) @ 0x0000ffff89288458 [0x0000ffff892881c0+0x0000000000000298]&lt;br/&gt;
J 3279% c2 java.util.ArrayList.forEach(Ljava/util/function/Consumer;)V &lt;a href=&apos;mailto:java.base@22&apos;&gt;java.base@22&lt;/a&gt; (74 bytes) @ 0x0000ffff90bc17bc [0x0000ffff90bc16c0+0x00000000000000fc]&lt;br/&gt;
j  jdk.tools.jlink.internal.ImageFileCreator.generateJImage(Ljdk/tools/jlink/internal/ResourcePoolManager;Ljdk/tools/jlink/internal/BasicImageWriter;Ljdk/tools/jlink/internal/ImagePluginStack;Ljava/io/DataOutputStream;)Ljdk/tools/jlink/plugin/ResourcePool;+147 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.ImageFileCreator.writeImage(Ljava/util/Set;Ljava/nio/ByteOrder;)V+39 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.ImageFileCreator.create(Ljava/util/Set;Ljava/nio/ByteOrder;Ljdk/tools/jlink/internal/ImagePluginStack;)Ljdk/tools/jlink/internal/ExecutableImage;+17 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(Ljdk/tools/jlink/internal/ImagePluginStack;)Ljdk/tools/jlink/internal/ExecutableImage;+15 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.ImagePluginStack.operate(Ljdk/tools/jlink/internal/ImagePluginStack$ImageProvider;)V+2 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.JlinkTask.createImage(Ljdk/tools/jlink/internal/Jlink$JlinkConfiguration;)V+141 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.JlinkTask.run([Ljava/lang/String;)I+433 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.Main.run(Ljava/io/PrintWriter;Ljava/io/PrintWriter;[Ljava/lang/String;)I+37 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.Main.main([Ljava/lang/String;)V+23 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000ffff8fff0154&lt;br/&gt;
V  [libjvm.so+0x7fb738]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x218&lt;br/&gt;
V  [libjvm.so+0x899bc4]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x234&lt;br/&gt;
V  [libjvm.so+0x89b9ec]  jni_CallStaticVoidMethod+0xec&lt;br/&gt;
C  [libjli.so+0x510c]  JavaMain+0xdec&lt;br/&gt;
C  [libjli.so+0x79ec]  ThreadJavaMain+0xc&lt;br/&gt;
C  [libpthread.so.0+0x7ddc]  start_thread+0xb4&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
v  ~RuntimeStub::resolve_opt_virtual_call 0x0000ffff9002c210&lt;br/&gt;
J 3293 c2 jdk.tools.jlink.plugin.ResourcePoolEntry.write(Ljava/io/OutputStream;)V &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt; (24 bytes) @ 0x0000ffff90c03c20 [0x0000ffff90bfff80+0x0000000000003ca0]&lt;br/&gt;
J 3249 c1 jdk.tools.jlink.internal.ImageFileCreator$$Lambda+0x00000240010f66a0.accept(Ljava/lang/Object;)V &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt; (12 bytes) @ 0x0000ffff89288458 [0x0000ffff892881c0+0x0000000000000298]&lt;br/&gt;
J 3279% c2 java.util.ArrayList.forEach(Ljava/util/function/Consumer;)V &lt;a href=&apos;mailto:java.base@22&apos;&gt;java.base@22&lt;/a&gt; (74 bytes) @ 0x0000ffff90bc17bc [0x0000ffff90bc16c0+0x00000000000000fc]&lt;br/&gt;
j  jdk.tools.jlink.internal.ImageFileCreator.generateJImage(Ljdk/tools/jlink/internal/ResourcePoolManager;Ljdk/tools/jlink/internal/BasicImageWriter;Ljdk/tools/jlink/internal/ImagePluginStack;Ljava/io/DataOutputStream;)Ljdk/tools/jlink/plugin/ResourcePool;+147 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.ImageFileCreator.writeImage(Ljava/util/Set;Ljava/nio/ByteOrder;)V+39 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.ImageFileCreator.create(Ljava/util/Set;Ljava/nio/ByteOrder;Ljdk/tools/jlink/internal/ImagePluginStack;)Ljdk/tools/jlink/internal/ExecutableImage;+17 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.JlinkTask$ImageHelper.retrieve(Ljdk/tools/jlink/internal/ImagePluginStack;)Ljdk/tools/jlink/internal/ExecutableImage;+15 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.ImagePluginStack.operate(Ljdk/tools/jlink/internal/ImagePluginStack$ImageProvider;)V+2 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.JlinkTask.createImage(Ljdk/tools/jlink/internal/Jlink$JlinkConfiguration;)V+141 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.JlinkTask.run([Ljava/lang/String;)I+433 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.Main.run(Ljava/io/PrintWriter;Ljava/io/PrintWriter;[Ljava/lang/String;)I+37 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
j  jdk.tools.jlink.internal.Main.main([Ljava/lang/String;)V+23 &lt;a href=&apos;mailto:jdk.jlink@22&apos;&gt;jdk.jlink@22&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000ffff8fff0154&lt;br/&gt;
&lt;br/&gt;
We have seen different bytecodes reported: 187,188,33, but the location and error are always the same. We dont have a reproducer sadly - it happens transiently and not often enough to know whats causing it.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5116373">JDK-8321509</key>
            <summary>False positive in get_trampoline fast path causes crash</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dlong">Dean Long</assignee>
                                    <reporter username="davleopo">David Leopoldseder</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>intermittent</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-SQE-ok-next</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                            <label>oracle-triage-23</label>
                    </labels>
                <created>Thu, 7 Dec 2023 00:28:53 -0800</created>
                <updated>Thu, 22 May 2025 07:24:10 -0700</updated>
                            <resolved>Thu, 11 Jul 2024 13:20:35 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>17</watches>
                                                                                                                <comments>
                            <comment id="14779715" author="roboduke" created="Tue, 13 May 2025 13:11:57 -0700"  >[jdk17u-fix-request] Approval Request from Boris&lt;br/&gt;
Backporting to fix the issue in jdk17u as well. The change has proven stable across multiple releases. The change includes a minor Clang error fix (see PR description). Verified with tier1-4 on AArch64.</comment>
                            <comment id="14769872" author="roboduke" created="Mon, 14 Apr 2025 09:55:38 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3441&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3441&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-04 16:31:12 +0000</comment>
                            <comment id="14694810" author="JIRAUSER20111" created="Wed, 31 Jul 2024 14:20:59 -0700"  >Re-add jdk21u-fix-request since backport was merged to jdk23u.</comment>
                            <comment id="14692807" author="roboduke" created="Thu, 25 Jul 2024 11:30:41 -0700"  >[jdk23u-fix-request] Approval Request from Dan Lutker&lt;br/&gt;
Backporting at jdk21u [maintainer request](&lt;a href=&quot;https://github.com/openjdk/jdk21u-dev/pull/864#issuecomment-2249892522&quot;&gt;https://github.com/openjdk/jdk21u-dev/pull/864#issuecomment-2249892522&lt;/a&gt;).</comment>
                            <comment id="14692805" author="roboduke" created="Thu, 25 Jul 2024 11:25:24 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/36&quot;&gt;https://git.openjdk.org/jdk23u/pull/36&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-25 17:02:54 +0000</comment>
                            <comment id="14692556" author="clanger" created="Thu, 25 Jul 2024 02:31:17 -0700"  >removed jdk21u-fix-request label until backport to jdk23u is done.</comment>
                            <comment id="14692463" author="roboduke" created="Wed, 24 Jul 2024 15:56:08 -0700"  >[jdk21u-fix-request] Approval Request from Dan Lutker&lt;br/&gt;
backporting to fix an issue 1 of our customers has seen. There is some risk as there is no regression tests specifically for this bug and the customer repro is infrequent enough it is hard to test outside of production. Ran tier1-4 as well as jcstress -m quick on aarch64.</comment>
                            <comment id="14692144" author="roboduke" created="Tue, 23 Jul 2024 14:29:27 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/864&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/864&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-22 22:42:35 +0000</comment>
                            <comment id="14689189" author="dukebot" created="Thu, 11 Jul 2024 13:20:34 -0700"  >Changeset: 73e3e0ed&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Dean Long &amp;lt;&lt;a href=&apos;mailto:dlong@openjdk.org&apos;&gt;dlong@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-07-11 20:18:16 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/73e3e0edeb20c6f701b213423476f92fb05dd262&quot;&gt;https://git.openjdk.org/jdk/commit/73e3e0edeb20c6f701b213423476f92fb05dd262&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14684418" author="roboduke" created="Mon, 24 Jun 2024 23:21:36 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19796&quot;&gt;https://git.openjdk.org/jdk/pull/19796&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-19 19:15:08 +0000</comment>
                            <comment id="14684416" author="rehn" created="Mon, 24 Jun 2024 23:17:54 -0700"  >Yes, nm-&amp;gt;stub_contains() limits the pc, thanks again!</comment>
                            <comment id="14684375" author="dlong" created="Mon, 24 Jun 2024 21:24:10 -0700"  >It looks like jdk8 aarch64 is OK.  Trampoline calls are all the same, based on far_branches().  It never mixes bl(entry.target()) with bl(pc()) in the same nmethod, so it should be safe from false positives.</comment>
                            <comment id="14684359" author="kvn" created="Mon, 24 Jun 2024 20:19:39 -0700"  >&amp;gt; However, since Leyden is not doing expansion here, the PC-relative call site will be internally consistent. I see no way for a call site to point to a trampoline stub accidentally.&lt;br/&gt;
&lt;br/&gt;
Yes, you are right.</comment>
                            <comment id="14684356" author="dlong" created="Mon, 24 Jun 2024 19:39:20 -0700"  >[~kvn], it&amp;#39;s actually the opt/virt/static/runtime call sites that are the concern.  I see that Leyden premain is still calling CallRelocation::set_destination --&amp;gt; Relocation::pd_set_call_destination, which is one of the problem paths in JDK.  However, since Leyden is not doing expansion here, the PC-relative call site will be internally consistent.  I see no way for a call site to point to a trampoline stub accidentally.</comment>
                            <comment id="14684317" author="kvn" created="Mon, 24 Jun 2024 15:40:08 -0700"  >And Leyden does not do expansion.</comment>
                            <comment id="14684316" author="kvn" created="Mon, 24 Jun 2024 15:37:12 -0700"  >Currently for Leyden we support trampoline_stub_Relocation only for Aarch64.&lt;br/&gt;
We added code to preserve and restoring final destination address:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/leyden/blob/premain/src/hotspot/share/code/relocInfo.hpp#L1285&quot;&gt;https://github.com/openjdk/leyden/blob/premain/src/hotspot/share/code/relocInfo.hpp#L1285&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/leyden/blob/premain/src/hotspot/cpu/aarch64/relocInfo_aarch64.cpp#L114&quot;&gt;https://github.com/openjdk/leyden/blob/premain/src/hotspot/cpu/aarch64/relocInfo_aarch64.cpp#L114&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
fix_relocation_after_move() is not called for  trampoline_stub_Relocation in Leyden code. The address patched directly  in trampoline code:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/leyden/blob/premain/src/hotspot/share/code/SCCache.cpp#L1881&quot;&gt;https://github.com/openjdk/leyden/blob/premain/src/hotspot/share/code/SCCache.cpp#L1881&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14684310" author="dlong" created="Mon, 24 Jun 2024 15:06:56 -0700"  >I suspect that for Leyden, ppc and riscv will need a fix similar to aarch64.  [~kvn], could you please have a look at this.</comment>
                            <comment id="14684297" author="dlong" created="Mon, 24 Jun 2024 14:18:15 -0700"  >The problem is CallRelocation::fix_relocation_after_move(), when it calls Relocation::pd_call_destination and Relocation::pd_set_call_destination.  Both of those have a fast path to get_trampoline(), which then has a code-&amp;gt;contains() fast path.  I was thinking RISC-V was safe, because the call initially has  target set to pc().  Aarch64 does this too, but conditionally.  It sometimes sets the target early, if it is always going to be in range.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m checking RISC-V again, and it looks like we won&amp;#39;t hit the code-&amp;gt;contains() fast path in get_trampoline() because destination is pc(), and we won&amp;#39;t find a trampoline stub during expansion, because the slow path requires an nmethod.&lt;br/&gt;
&lt;br/&gt;
I think uses of nm-&amp;gt;stub_contains() and trampoline_stub_Relocation::get_trampoline_for() are probably OK, because as far as I know, we don&amp;#39;t try to expand or relocate nmethods, except in Leyden.</comment>
                            <comment id="14684138" author="rehn" created="Mon, 24 Jun 2024 06:11:34 -0700"  >Maybe I&amp;#39;m missunderstanding something, it seem like the address will be bound on first expansion.&lt;br/&gt;
If it happens so that in this new location of the JAL points to an previous trampoline:&lt;br/&gt;
if (nm != nullptr &amp;amp;&amp;amp; nm-&amp;gt;stub_contains(destination) &amp;amp;&amp;amp; MacroAssembler::is_trampoline_stub_at(destination))&lt;br/&gt;
If the trampoline_stub_Relocation have another address we just wrote something were we shouldn&amp;#39;t, hmz.&lt;br/&gt;
So I think RV may have some issue.&lt;br/&gt;
&lt;br/&gt;
I have large PR out to use loads instead of trampolines that is not be effected.&lt;br/&gt;
But it moves around a lot of old (as for now trampolines are kept as an opt-in)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll dig some more, thanks!</comment>
                            <comment id="14683777" author="dlong" created="Fri, 21 Jun 2024 12:31:30 -0700"  >[~mdoerr], I think PPC64 is in the same situation as RISC-V here.  It appears safe from false positives for the same reason as RISC-V.  Please confirm.</comment>
                            <comment id="14683774" author="dlong" created="Fri, 21 Jun 2024 12:21:48 -0700"  >[~rehn], it looks like RISC-V does not have the same problem as AArch64, which has an is_always_within_branch_range() optimization in trampoline_call that can bind a call-site early.  RISC-V doesn&amp;#39;t have that, and always fixes up the call site late, so I don&amp;#39;t think it can hit the false positive in get_trampoline that Aarch64 does.  What do you think?</comment>
                            <comment id="14683039" author="JIRAUSER21405" created="Wed, 19 Jun 2024 19:06:10 -0700"  >After apply 8321509.fix1, run the testcase 100k times, and all test passed.</comment>
                            <comment id="14682832" author="dlong" created="Wed, 19 Jun 2024 00:09:52 -0700"  >[~syan], my first draft of a fix is here:&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.fix1&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.fix1&lt;/a&gt;&lt;br/&gt;
You can apply the patch to commit e965d70a7425bec78620a2ca8bfaca3c392edf6a, or try my branch here:&lt;br/&gt;
&lt;a href=&quot;https://github.com/dean-long/jdk/tree/8321509&quot;&gt;https://github.com/dean-long/jdk/tree/8321509&lt;/a&gt;</comment>
                            <comment id="14681936" author="thartmann" created="Sun, 16 Jun 2024 22:27:42 -0700"  >Okay, thanks for the details.</comment>
                            <comment id="14681806" author="dlong" created="Fri, 14 Jun 2024 11:28:32 -0700"  >No, it seems to be a problem with trampolines in general, so I believe it could happen without shared stubs.</comment>
                            <comment id="14681669" author="thartmann" created="Fri, 14 Jun 2024 02:22:26 -0700"  >That means this is a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280152&quot; title=&quot;AArch64: Reuse runtime call trampolines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280152&quot;&gt;&lt;strike&gt;JDK-8280152&lt;/strike&gt;&lt;/a&gt;, correct?</comment>
                            <comment id="14681648" author="dlong" created="Fri, 14 Jun 2024 01:41:00 -0700"  >Thanks [~syan], that narrows it down.  I&amp;#39;m working on a fix.</comment>
                            <comment id="14681384" author="JIRAUSER21405" created="Thu, 13 Jun 2024 05:51:34 -0700"  >After apply 8321509.diag3,&lt;br/&gt;
1. release binary, -XX:+UseNewCode run 100k times, test all passed.&lt;br/&gt;
2. fastdebug binary, -XX:+UseNewCode run over 80k times, test all passed.</comment>
                            <comment id="14680799" author="dlong" created="Wed, 12 Jun 2024 00:23:33 -0700"  >OK, your patch looks good.  Please apply to your build so you can turn on UseNewCode and UseNewCode2.&lt;br/&gt;
&lt;br/&gt;
The reason to install hsdis-aarch64.so in the test JDK is so when you get a crash, the hs_err .log file will contain disassembled code.</comment>
                            <comment id="14680710" author="JIRAUSER21405" created="Tue, 11 Jun 2024 19:28:27 -0700"  >I have created a patch make the jlink receive the jvm options from jtreg. &lt;a href=&quot;https://compiler-tools.oss-cn-hangzhou.aliyuncs.com/JDK/JBS/JDK-8321509/JDK-8334057.patch&quot;&gt;https://compiler-tools.oss-cn-hangzhou.aliyuncs.com/JDK/JBS/JDK-8321509/JDK-8334057.patch&lt;/a&gt;&lt;br/&gt;
The hsdis-aarch64.so has been uploaded to &lt;a href=&quot;https://compiler-tools.oss-cn-hangzhou.aliyuncs.com/JDK/JBS/JDK-8321509/hsdis-aarch64.so&quot;&gt;https://compiler-tools.oss-cn-hangzhou.aliyuncs.com/JDK/JBS/JDK-8321509/hsdis-aarch64.so&lt;/a&gt;</comment>
                            <comment id="14680665" author="dlong" created="Tue, 11 Jun 2024 13:34:07 -0700"  >It looks like UseNewCode and UseNewCode2 did not get set.  The test sets its own command-line, so the easiest way to set these flags is to change the default value in share/runtime/globals.hpp.&lt;br/&gt;
&lt;br/&gt;
I only see symbolic links in lib64-so.tar.xz  &lt;br/&gt;
&lt;br/&gt;
It looks like hsdis-aarch64.so was installed in lib64 but not in the JDK.</comment>
                            <comment id="14680413" author="JIRAUSER21405" created="Tue, 11 Jun 2024 00:51:29 -0700"  >After apply &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.diag3,&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.diag3,&lt;/a&gt; &amp;#39;-XX:+UseNewCode and -XX:+UseNewCode&amp;#39; fails as &amp;#39;-XX:+UseNewCode and -XX:+UseNewCode2&amp;#39;, the index-345-UseNewCode-UseNewCode.tar.xz is the core dump file.</comment>
                            <comment id="14680402" author="JIRAUSER21405" created="Tue, 11 Jun 2024 00:34:29 -0700"  >After apply &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.diag3,&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.diag3,&lt;/a&gt; there is a new failure with release binary run with -XX:+UseNewCode.&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (relocInfo.cpp:1016), pid=3470342, tid=3470364&lt;br/&gt;
#  Error: guarantee(x != SharedRuntime::get_resolve_opt_virtual_call_stub_or_null()) failed&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~syan/JDK-8321509/8321509.diag3/index-1070-release-UseNewCode.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/JDK-8321509/8321509.diag3/index-1070-release-UseNewCode.tar.xz&lt;/a&gt; is the core dump file, jdk-binary-aarch64-release.tar.xz is the release type jdk binary, lib64-so.tar.xz is the lib64 so files.&lt;br/&gt;
&lt;br/&gt;
I will try to run with -XX:+UseNewCode and -XX:+UseNewCode2.&lt;br/&gt;
&lt;br/&gt;
The fastdebug still run with -XX:+UseNewCode, and it doesn&amp;#39;t report fails yet.&lt;br/&gt;
</comment>
                            <comment id="14680322" author="dlong" created="Mon, 10 Jun 2024 17:58:53 -0700"  >The last crash seems to confirm my theory about a false positive in get_trampoline.  In my new patch&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.diag3&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.diag3&lt;/a&gt;&lt;br/&gt;
I have two possible workarounds enabled by -XX:+UseNewCode and -XX:+UseNewCode2.  Please try with -XX:+UseNewCode first, and if it still crashes, try again with both flags.</comment>
                            <comment id="14680301" author="dlong" created="Mon, 10 Jun 2024 14:22:06 -0700"  >[~syan] In order for gdb to do a backtrace, I think I need copies of these libraries as well:&lt;br/&gt;
/lib64/libz.so.1&lt;br/&gt;
/lib64/libdl.so.2&lt;br/&gt;
/lib64/libpthread.so.0&lt;br/&gt;
/lib64/libc.so.6&lt;br/&gt;
/lib/ld-linux-aarch64.so.1&lt;br/&gt;
/lib64/librt.so.1&lt;br/&gt;
/lib64/libm.so.6&lt;br/&gt;
&lt;br/&gt;
Also, I changed something in my last patch to hopefully allow the problem to reproduce in a fast debug build.  Please try again to reproduce with a fast debug build.</comment>
                            <comment id="14679995" author="JIRAUSER21405" created="Sun, 9 Jun 2024 02:52:56 -0700"  >&lt;a href=&quot;https://cr.openjdk.org/~syan/JDK-8321509/8321509.diag2/index-2028.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/JDK-8321509/8321509.diag2/index-2028.tar.xz&lt;/a&gt; is and &lt;a href=&quot;https://cr.openjdk.org/~syan/JDK-8321509/8321509.diag2/jdk-binary-aarch64-release.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/JDK-8321509/8321509.diag2/jdk-binary-aarch64-release.tar.xz&lt;/a&gt; the core dump file and jdk binary file after apply 8321509.diag2 </comment>
                            <comment id="14679975" author="JIRAUSER21405" created="Sat, 8 Jun 2024 19:33:16 -0700"  >[~ jpai] I can reproduce this failure on Neoverse-N1 and Neoverse-N2 CPU, but can&amp;#39;t reproduce this failure on 96c Kunpeng-920 CPU with run the testcase 100k times.</comment>
                            <comment id="14679973" author="dlong" created="Sat, 8 Jun 2024 14:42:03 -0700"  >Please give &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.diag2&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.diag2&lt;/a&gt; a try.&lt;br/&gt;
&lt;br/&gt;
It looks like the fast path in get_trampoline, where it checks code-&amp;gt;contains and is_NativeCallTrampolineStub_at could get a false positive if a non-trampoline relocation had pointed to just past the end of the blob.  If the blob got expanded so the pc-relative target is now inside the blob and points to a trampoline, a false positive seems possible.  This fast path should only be used for nmethods after all fixups have been done.&lt;br/&gt;
&lt;br/&gt;
There may be other scenarios that allow false positives, and these problems could exist on other platforms that use trampolines as well.</comment>
                            <comment id="14679970" author="dlong" created="Sat, 8 Jun 2024 12:52:26 -0700"  >Unfortunately, I can&amp;#39;t do much with just a core dump.  To get a backtrace, gdb seems to need the matching binary and libraries, including loaded system libraries.</comment>
                            <comment id="14679969" author="dlong" created="Sat, 8 Jun 2024 12:48:37 -0700"  >There&amp;#39;s a bug in my last patch.  I&amp;#39;m working on a new patch.</comment>
                            <comment id="14679962" author="JIRAUSER21405" created="Sat, 8 Jun 2024 04:35:53 -0700"  >java/lang/management/MemoryMXBean/LowMemoryTest.java can also trigger this failure. The core dump file has been uploaded to &lt;a href=&quot;https://cr.openjdk.org/~syan/JDK-8321509/LowMemoryTest/core.383823.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/JDK-8321509/LowMemoryTest/core.383823.tar.xz&lt;/a&gt;</comment>
                            <comment id="14679854" author="jpai" created="Fri, 7 Jun 2024 08:53:07 -0700"  >FWIW - the system I was trying to (unsuccessfully) reproduce this on was a Neoverse-N1:&lt;br/&gt;
&lt;br/&gt;
Architecture:           aarch64&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CPU op-mode(s):       32-bit, 64-bit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Byte Order:           Little Endian&lt;br/&gt;
CPU(s):                 32&lt;br/&gt;
&amp;nbsp;&amp;nbsp;On-line CPU(s) list:  0-31&lt;br/&gt;
Vendor ID:              ARM&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Model name:           Neoverse-N1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Model:              1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread(s) per core: 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Core(s) per socket: 32&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Socket(s):          1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Stepping:           r3p1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BogoMIPS:           50.00&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Flags:              fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm lrcpc dcpop asimddp ssbs&lt;br/&gt;
&lt;br/&gt;
The setup Sendao Yan is reproducing this on is a Neoverse-N2, specifically:&lt;br/&gt;
&lt;br/&gt;
Architecture: aarch64&lt;br/&gt;
Byte Order: Little Endian&lt;br/&gt;
CPU(s): 32&lt;br/&gt;
On-line CPU(s) list: 0-31&lt;br/&gt;
Thread(s) per core: 1&lt;br/&gt;
Core(s) per socket: 32&lt;br/&gt;
Socket(s): 1&lt;br/&gt;
NUMA node(s): 1&lt;br/&gt;
Vendor ID:  ARM&lt;br/&gt;
Model: 0&lt;br/&gt;
Model name: Neoverse-N2&lt;br/&gt;
Stepping: r0p0&lt;br/&gt;
CPU MHz:  3000.000&lt;br/&gt;
CPU max MHz:  3000.0000&lt;br/&gt;
CPU min MHz: 3000.0000&lt;br/&gt;
BogoMIPS: 100.00&lt;br/&gt;
L1d cache: 64K&lt;br/&gt;
L1i cache: 64K&lt;br/&gt;
L2 cache: 1024K&lt;br/&gt;
L3 cache: 65536K&lt;br/&gt;
NUMA node0 CPU(s): 0-31&lt;br/&gt;
Flags: fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 sm3 sm4 asimddp sha512 sve asimdfhm dit uscat ilrcpc flagm ssbs sb dcpodp sve2 sveaes svepmull svebitperm svesha3 svesm4 flagm2 frint svei8mm svebf16 i8mm bf16 dgh</comment>
                            <comment id="14679846" author="gdub" created="Fri, 7 Jun 2024 08:39:31 -0700"  >FYI on our side (graal CI running C2), over the last 6 month we have seen it happen 32 times on Ampere Altra CPUs and once on a M1 Ultra CPU so it&amp;#39;s rather rare.&lt;br/&gt;
The first time we&amp;#39;ve seen it happen it was on 22+24.&lt;br/&gt;
I saw &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280152&quot; title=&quot;AArch64: Reuse runtime call trampolines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280152&quot;&gt;&lt;strike&gt;JDK-8280152&lt;/strike&gt;&lt;/a&gt; mentioned as possibly related, that would fit the fact that we never reproduce this when we&amp;#39;re using the graal compiler since adopting a similar change in jvmci/graal is still TODO (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8320081&quot; title=&quot;[JVMCI] reuse aarch64 call trampolines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8320081&quot;&gt;JDK-8320081&lt;/a&gt;).</comment>
                            <comment id="14679832" author="JIRAUSER21405" created="Fri, 7 Jun 2024 08:20:02 -0700"  >According to my experience, I can reproduce the failure in about 4 hours by running this test case on a 64-core ECS environment.&lt;br/&gt;
Maybe only same specific aarch64 cpu can reproduce this failure. The environment information has been descripte in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327181&quot; title=&quot;tools/jlink/JLinkReproducibleTest.java intermittently crash on aarch64 platform: ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327181&quot;&gt;&lt;strike&gt;JDK-8327181&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14679816" author="jpai" created="Fri, 7 Jun 2024 07:31:19 -0700"  >I&amp;#39;m just curiously following this issue and don&amp;#39;t have anything useful to add, but [~syan], a question for you - how long do these tests runs last in terms of minutes/hours to reproduce this issue? The fact that you have been so consistently and relatively quickly reproducing this issue made me setup a linux aarch64 VM to try and reproduce it myself. But a 100K test run with the command you noted, lasted around 3 days and still wasn&amp;#39;t able to reproduce it. So I&amp;#39;m just curious about your setup and duration of these test runs.</comment>
                            <comment id="14679649" author="JIRAUSER21405" created="Thu, 6 Jun 2024 18:02:50 -0700"  >&lt;a href=&quot;https://cr.openjdk.org/~syan/JDK-8321509/index-32538.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/JDK-8321509/index-32538.tar.xz&lt;/a&gt; is the core dump file generated which after appy &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.disable-shared-trampoline-stubs&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.disable-shared-trampoline-stubs&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~syan/JDK-8321509/index-531.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/JDK-8321509/index-531.tar.xz&lt;/a&gt; is the core dump file generated which after apply &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.diag&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.diag&lt;/a&gt;</comment>
                            <comment id="14678875" author="dlong" created="Tue, 4 Jun 2024 10:34:31 -0700"  >[~syan] Please try the patch&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.disable-shared-trampoline-stubs&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.disable-shared-trampoline-stubs&lt;/a&gt;&lt;br/&gt;
as a possible workaround.  Also, my latest instrumented diagnostic patch&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.diag&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.diag&lt;/a&gt;&lt;br/&gt;
may help find the root cause.</comment>
                            <comment id="14678631" author="dlong" created="Tue, 4 Jun 2024 01:23:29 -0700"  >Yes, I&amp;#39;ll try that next.</comment>
                            <comment id="14678591" author="thartmann" created="Mon, 3 Jun 2024 23:47:01 -0700"  >So that would be a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280152&quot; title=&quot;AArch64: Reuse runtime call trampolines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280152&quot;&gt;&lt;strike&gt;JDK-8280152&lt;/strike&gt;&lt;/a&gt;, right? Could we verify if disabling that code helps?</comment>
                            <comment id="14678525" author="dlong" created="Mon, 3 Jun 2024 16:37:09 -0700"  >I suspect there is a problem with shared trampoline stubs.  </comment>
                            <comment id="14677411" author="JIRAUSER21405" created="Wed, 29 May 2024 23:45:17 -0700"  >&lt;a href=&quot;https://cr.openjdk.org/~syan/index-46544.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/index-46544.tar.xz&lt;/a&gt; is the core dump files which generated after apply 8321509/8321509.patch5.&lt;br/&gt;
By the way, it seems that the failure probability go down after 8321509/8321509.patch5</comment>
                            <comment id="14677101" author="dlong" created="Wed, 29 May 2024 02:11:01 -0700"  >I uploaded a new patch to 8321509/8321509.patch5, still relative to commit 985b9ce79a2d620a8b8675d1ae6c9730d72a757f.&lt;br/&gt;
&lt;br/&gt;
The crashes seem to happen at the call to StubRoutines::aarch64::count_positives_long() in MacroAssembler::count_positives(), so this patch avoids a runtime call and does a far call instead:&lt;br/&gt;
&lt;br/&gt;
movptr(lr, (uintptr_t)StubRoutines::aarch64::count_positives_long());&lt;br/&gt;
blr(lr);&lt;br/&gt;
</comment>
                            <comment id="14676149" author="JIRAUSER21405" created="Sat, 25 May 2024 21:27:29 -0700"  >&lt;a href=&quot;https://cr.openjdk.org/~syan/index-1973.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/index-1973.tar.xz&lt;/a&gt; is the core dump file which generated after apply 8321509.patch4</comment>
                            <comment id="14676138" author="dlong" created="Sat, 25 May 2024 00:00:26 -0700"  >Look like there may be missing barriers around CompiledICData accesses, but I&amp;#39;m not sure that would explain the crashes.  My latest patch adds barriers there too, to see if it helps.</comment>
                            <comment id="14676098" author="dlong" created="Fri, 24 May 2024 12:14:05 -0700"  >Sorry [~syan], I have moved the patch to the 8321509/ directory, and made sure it applies to commit 985b9ce79a2d620a8b8675d1ae6c9730d72a757f.</comment>
                            <comment id="14675919" author="JIRAUSER21405" created="Fri, 24 May 2024 01:07:11 -0700"  >I found a patch file &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509.patch4,&quot;&gt;https://cr.openjdk.org/~dlong/8321509.patch4,&lt;/a&gt; which can not git apply directly.&lt;br/&gt;
In &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/&quot;&gt;https://cr.openjdk.org/~dlong/8321509/&lt;/a&gt; directory, there is no 8321509.patch4</comment>
                            <comment id="14675899" author="dlong" created="Fri, 24 May 2024 00:03:26 -0700"  >New patch 8321509.patch4 uploaded.  Please give it a try (with hsdis library installed).</comment>
                            <comment id="14675878" author="dlong" created="Thu, 23 May 2024 22:39:47 -0700"  >Thanks [~syan].  From the latest hs_err_pid3975065.log, I can see that call target at compile time was 0xffff8fb7a0e8:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ffff902f884c:       97dc4dcd        bl      ffff8fa0bf80 &amp;lt;.text-0x8ec000&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ffff902f8850:       d2941d08        mov     x8, #0xa0e8                     // #41192&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ffff902f8854:       f2b1f6e8        movk    x8, #0x8fb7, lsl #16&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ffff902f8858:       f2dfffe8        movk    x8, #0xffff, lsl #32&lt;br/&gt;
&lt;br/&gt;
so the new value ffff8fa0bf80 (resolve_opt_virtual_call) must have been patched in after compile time.  It is still a mystery how this could happen, however.</comment>
                            <comment id="14675852" author="JIRAUSER21405" created="Thu, 23 May 2024 20:16:27 -0700"  >After 8321509.patch3 applied, the failure still can be reproduced.&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~syan/index-10638.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/index-10638.tar.xz&lt;/a&gt; is the core dump tar file.</comment>
                            <comment id="14675675" author="dlong" created="Thu, 23 May 2024 05:00:11 -0700"  >Sorry about that.  I hope this one works:&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.patch3&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.patch3&lt;/a&gt;</comment>
                            <comment id="14675585" author="JIRAUSER21405" created="Thu, 23 May 2024 01:18:14 -0700"  >Hi [~dlong], the patch file &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.patch2&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.patch2&lt;/a&gt; git apply fail, could you provide patch file I can git apply directly:&lt;br/&gt;
&amp;gt; git apply &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8321509&quot; title=&quot;False positive in get_trampoline fast path causes crash&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8321509&quot;&gt;&lt;strike&gt;JDK-8321509&lt;/strike&gt;&lt;/a&gt;-2.patch&lt;br/&gt;
error: patch failed: src/hotspot/cpu/aarch64/aarch64.ad:3697&lt;br/&gt;
error: src/hotspot/cpu/aarch64/aarch64.ad: patch does not apply&lt;br/&gt;
error: patch failed: src/hotspot/share/code/nmethod.cpp:891&lt;br/&gt;
error: src/hotspot/share/code/nmethod.cpp: patch does not apply&lt;br/&gt;
&lt;br/&gt;
My local jdk repo version:&lt;br/&gt;
&amp;gt; git log -n 1&lt;br/&gt;
commit 612ae9289a130b8701f74253fe5499358a2e2b5b (HEAD -&amp;gt; master, origin/master, origin/HEAD)&lt;br/&gt;
Author: Doug Simon &amp;lt;&lt;a href=&apos;mailto:dnsimon@openjdk.org&apos;&gt;dnsimon@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:   Thu May 23 08:11:22 2024 +0000&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8332735: [JVMCI] Add extra JVMCI events for exception translation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reviewed-by: never</comment>
                            <comment id="14675579" author="dlong" created="Thu, 23 May 2024 00:52:44 -0700"  >Thanks.  Please try my updated patch: &lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.patch2&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.patch2&lt;/a&gt;&lt;br/&gt;
This time I added a fence() before calling register_nmethod(), just in case we need a barrier there.</comment>
                            <comment id="14675511" author="JIRAUSER21405" created="Wed, 22 May 2024 19:30:49 -0700"  >Hi [~dlong], the core dump file which generated by instrumented JVM  has been uploaded.&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~syan/index-33217.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/index-33217.tar.xz&lt;/a&gt;</comment>
                            <comment id="14674996" author="dlong" created="Tue, 21 May 2024 11:39:41 -0700"  >Thanks, [~syan], I was able to download the core file.  However, I could not learn much from it.  I have uploaded a patch here:&lt;br/&gt;
&lt;a href=&quot;https://cr.openjdk.org/~dlong/8321509/8321509.patch&quot;&gt;https://cr.openjdk.org/~dlong/8321509/8321509.patch&lt;/a&gt;&lt;br/&gt;
to instrument the JVM with extra checks, to hopefully determine where things are going wrong.  Please apply it to your build a retest.  Thanks.</comment>
                            <comment id="14674925" author="thartmann" created="Tue, 21 May 2024 07:32:10 -0700"  >Dean, I&amp;#39;m assigning this to you for now. Feel free to un-assign if you are no longer investigating. Thanks!</comment>
                            <comment id="14674713" author="JIRAUSER21405" created="Mon, 20 May 2024 19:54:54 -0700"  >The world-readable issue has been fixed. You can download the tar file now.&lt;br/&gt;
wget &lt;a href=&quot;https://cr.openjdk.org/~syan/index-19089.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/index-19089.tar.xz&lt;/a&gt;</comment>
                            <comment id="14674711" author="dlong" created="Mon, 20 May 2024 19:41:03 -0700"  >I can&amp;#39;t access it.  &amp;quot;403 Forbidden&amp;quot; can happen if your file is not world-readable.  You can use sftp to check with &amp;quot;ls -l&amp;quot; and fix it with &amp;quot;chmod&amp;quot;.</comment>
                            <comment id="14674704" author="JIRAUSER21405" created="Mon, 20 May 2024 18:40:11 -0700"  >I have uploaded core file to &lt;a href=&quot;https://cr.openjdk.org/~syan/index-19089.tar.xz&quot;&gt;https://cr.openjdk.org/~syan/index-19089.tar.xz&lt;/a&gt; &lt;br/&gt;
But when I visit this link, the broswer says &amp;quot;403 Forbidden&amp;quot;.&lt;br/&gt;
If you can download the tar file, you should extract the tar first.&lt;br/&gt;
&lt;br/&gt;
$ tar xf index-19089.tar.xz&lt;br/&gt;
$ cd index-19089/scratch&lt;br/&gt;
&lt;br/&gt;
The &amp;quot;index-19089/scratch&amp;quot; dir include hs_err and core dump files.</comment>
                            <comment id="14674664" author="dlong" created="Mon, 20 May 2024 12:20:54 -0700"  >Could you upload the core file to your cr.openjdk.org?</comment>
                            <comment id="14674437" author="JIRAUSER21405" created="Mon, 20 May 2024 01:12:45 -0700"  >The hs_err_pid1141625.log is the hs_err file with hsdis-aarch64.so. The core dump file is too large to upload. The size of core dump file  after tar xz is over 70MB.</comment>
                            <comment id="14674356" author="JIRAUSER21405" created="Sun, 19 May 2024 07:07:40 -0700"  >I run over 5k times with fastdebug binary, it doesn&amp;#39;t crash yet</comment>
                            <comment id="14674325" author="JIRAUSER21405" created="Fri, 17 May 2024 23:53:52 -0700"  >It crash with release build. I will retry with fastdebug build and with hsdis-aarch64.so</comment>
                            <comment id="14674321" author="dlong" created="Fri, 17 May 2024 19:47:25 -0700"  >Does it crash with a debug build?  Also, if you have a core dump, it would be interesting to know the bci and bytecode that SharedRuntime::resolve_helper() is using.  Finally, if you install hsdis-aarch64.so, that will make the hs_err log output more useful.</comment>
                            <comment id="14674241" author="JIRAUSER21405" created="Fri, 17 May 2024 07:36:46 -0700"  >Hi [~dlong], I try to run with the latest version of jdk23, it still imtermittent fail: ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*).&lt;br/&gt;
&lt;br/&gt;
The git log is:&lt;br/&gt;
$ git log -n 1&lt;br/&gt;
commit ae999eae7e61072ad964a43f622fa930ce1179f7 (HEAD -&amp;gt; master, origin/master, origin/HEAD)&lt;br/&gt;
Author: Nizar Benalla &amp;lt;&lt;a href=&apos;mailto:nbenalla@openjdk.org&apos;&gt;nbenalla@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:   Fri May 17 06:39:53 2024 +0000&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8129418: JShell: better highlighting of errors in imports on demand&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reviewed-by: jlahoda</comment>
                            <comment id="14674061" author="dlong" created="Thu, 16 May 2024 17:33:46 -0700"  >I&amp;#39;m wondering if this could have been caused by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327647&quot; title=&quot;Occasional SIGSEGV in markWord::displaced_mark_helper() for SPECjvm2008 sunflow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327647&quot;&gt;&lt;strike&gt;JDK-8327647&lt;/strike&gt;&lt;/a&gt;.  [~syan], could you try again with the latest version of jdk23?</comment>
                            <comment id="14673773" author="JIRAUSER21405" created="Wed, 15 May 2024 17:57:24 -0700"  >Hi [~dlong], the binary of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327181&quot; title=&quot;tools/jlink/JLinkReproducibleTest.java intermittently crash on aarch64 platform: ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327181&quot;&gt;&lt;strike&gt;JDK-8327181&lt;/strike&gt;&lt;/a&gt; bug report was mine own private build. It crash on llinux aarch64 intermittently. The failure probability is 2/100k.&lt;br/&gt;
This is the configure:&lt;br/&gt;
bash configure --with-jobs=32 --prefix=/var/tmp/tone/run/jtreg/jdk-repo/install-release --verbose --with-debug-level=release --enable-unlimited-crypto --with-vendor-name=yansendao --with-vendor-url=&lt;a href=&quot;https://github.com/sendaoYan&quot;&gt;https://github.com/sendaoYan&lt;/a&gt; --with-vendor-bug-url=mailto:&lt;a href=&apos;mailto:yansendao.ysd@alibaba-inc.com&apos;&gt;yansendao.ysd@alibaba-inc.com&lt;/a&gt; --with-vendor-vm-bug-url=mailto:&lt;a href=&apos;mailto:yansendao.ysd@alibaba-inc.com&apos;&gt;yansendao.ysd@alibaba-inc.com&lt;/a&gt; --with-jvm-variants=server --with-boot-jdk=/var/tmp/tone/run/jtreg/binary-download/jdk-binary --with-gtest=/var/tmp/tone/run/jtreg/googletest-v1.14.x --with-jtreg=/var/tmp/tone/run/jtreg/jtreg --with-jmh=build/jmh/jars    --with-version-pre=&amp;quot;&amp;quot; --with-version-opt=&amp;quot;&amp;quot; --with-zlib=system</comment>
                            <comment id="14673768" author="dlong" created="Wed, 15 May 2024 17:23:15 -0700"  >[~syan], I can&amp;#39;t tell from your &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327181&quot; title=&quot;tools/jlink/JLinkReproducibleTest.java intermittently crash on aarch64 platform: ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327181&quot;&gt;&lt;strike&gt;JDK-8327181&lt;/strike&gt;&lt;/a&gt; bug report which build of JDK 23 is crashing.  The test doesn&amp;#39;t crash for me.  Does it crash with an EA build from &lt;a href=&quot;https://jdk.java.net/23/,&quot;&gt;https://jdk.java.net/23/,&lt;/a&gt; or just with your own private build?</comment>
                            <comment id="14673475" author="dholmes" created="Tue, 14 May 2024 22:54:50 -0700"  >There is a reproducer attached to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327181&quot; title=&quot;tools/jlink/JLinkReproducibleTest.java intermittently crash on aarch64 platform: ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327181&quot;&gt;&lt;strike&gt;JDK-8327181&lt;/strike&gt;&lt;/a&gt;, which is closed as a duplicate of this issue now.</comment>
                            <comment id="14653865" author="davleopo" created="Fri, 1 Mar 2024 03:43:15 -0800"  >[~dlong] sadly no - at the moment we have core dumps disabled in graal CI so not much we can share there.</comment>
                            <comment id="14653679" author="dlong" created="Thu, 29 Feb 2024 17:37:34 -0800"  >Something wrong is happening but I don&amp;#39;t think it&amp;#39;s the bytecodes.  The output of the relocInfo at all the new/newarray call-sites say &amp;quot;runtime_call resolve_opt_virtual_call&amp;quot;, which should never happen, because resolve_opt_virtual_call is not used for relocInfo::runtime_call_type calls.  It is only used for relocInfo::opt_virtual_call_type calls.  So either the wrong stub was used (hard to explain), or the call-site was &amp;quot;cleaned&amp;quot; incorrectly (also hard to explain).  However, I really need a core dump to confirm my theory.  [~davleopo], is there any way to get the core dump from the Graal CI?</comment>
                            <comment id="14650126" author="resii" created="Fri, 16 Feb 2024 13:04:26 -0800"  >Using 22.0.1+4 on Linux-aarch64, I&amp;#39;ve just encountered this error while running SPECjbb2015 for performance measures in Aurora-perf. Only one of the three runs failed. The log shows &amp;quot;Unexpected bytecode: 187&amp;quot; just before the error report:&lt;br/&gt;
&lt;br/&gt;
.&amp;lt;Thu Feb 15 05:20:39 UTC 2024&amp;gt; org.spec.jbb.controller: RT_CURVE: steady, (rIR:aIR:PR = 17649:17509:17509) (tPR = 257892) [OK] &lt;br/&gt;
.&amp;lt;Thu Feb 15 05:20:40 UTC 2024&amp;gt; org.spec.jbb.controller: RT_CURVE: steady, (rIR:aIR:PR = 17649:17514:17514) (tPR = 258406) [OK] &lt;br/&gt;
.&amp;lt;Thu Feb 15 05:20:41 UTC 2024&amp;gt; org.spec.jbb.controller: RT_CURVE: steady, (rIR:aIR:PR = 17649:17538:17538) (tPR = 259159) [OK] &lt;br/&gt;
Unexpected bytecode: 187&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (constantPool.cpp:706), pid=1732009, tid=1738932&lt;br/&gt;
#  Error: ShouldNotReachHere()&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0.1+4) (build 22.0.1+4-10)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (22.0.1+4-10, mixed mode, sharing, tiered, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x5c3a34]  ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)+0x184&lt;br/&gt;
#&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /mnt/aurora/aurora/sandbox/refworkload/benchmarks/specjbb2015/hs_err_pid1732009.log&lt;br/&gt;
[1858.661s][warning][os             ] Loading hsdis library failed&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
</comment>
                            <comment id="14645390" author="dlong" created="Wed, 31 Jan 2024 00:48:26 -0800"  >ILW = crash; intermittent; disable C2 compilation of affected methods = HLM = P3</comment>
                            <comment id="14645384" author="dlong" created="Wed, 31 Jan 2024 00:45:34 -0800"  >I think the bytecodes are correct:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd5899437c:   bl	0x0000fffd5802c180          ; ImmutableOopMap {[0]=Oop [16]=Oop }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;*new {reexecute=0 rethrow=0 return_oop=1}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.nio.ByteBuffer::&lt;a href=&apos;mailto:wrap@0&apos;&gt;wrap@0&lt;/a&gt; (line 439)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.nio.ByteBuffer::&lt;a href=&apos;mailto:wrap@4&apos;&gt;wrap@4&lt;/a&gt; (line 468)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - sun.nio.ch.ChannelInputStream::&lt;a href=&apos;mailto:read@30&apos;&gt;read@30&lt;/a&gt; (line 98)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;   {runtime_call resolve_opt_virtual_call}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000fffd58994380:   nop                                 ;   {other}&lt;br/&gt;
&lt;br/&gt;
There really is a new bytecode at java.nio.ByteBuffer::&lt;a href=&apos;mailto:wrap@0&apos;&gt;wrap@0&lt;/a&gt;, and from looking at who calls this code, this appears to be a slow path allocation.  So the question is, why are we calling resolve_opt_virtual_call when we should be calling the runtime stub for new?</comment>
                            <comment id="14644394" author="coleenp" created="Mon, 29 Jan 2024 08:05:54 -0800"  >Both of these call stacks are handling a virtual call miss in C2 compiled code, and the hs_err_pid file contains the generated code for the nmethod where the failure occurred.  I&amp;#39;m going to transfer this to the compiler subcategory, since it doesn&amp;#39;t look like anything is wrong in the orginal constant pool or bytecodes.</comment>
                            <comment id="14644131" author="coleenp" created="Fri, 26 Jan 2024 13:06:58 -0800"  >It was definitely after the class was loaded or you would have gotten a crash earlier.  It&amp;#39;s memory that has been corrupted.</comment>
                            <comment id="14644023" author="gdub" created="Fri, 26 Jan 2024 05:42:27 -0800"  >Good point about CDS, maybe some other process is mutating classes.jsa</comment>
                            <comment id="14643985" author="iklam" created="Fri, 26 Jan 2024 02:20:30 -0800"  >Is coredump available? You can look at the ConstMethod that has the bad bytecode, and compare that with the version in the original classfile (or if the ConstMethod comes from CDS, look at the contents of the CDS archive).&lt;br/&gt;
&lt;br/&gt;
Maybe the ConstMethod was corrupted sometime after the class was loaded.</comment>
                            <comment id="14643957" author="gdub" created="Fri, 26 Jan 2024 00:51:38 -0800"  >We have seen this on many different machines so while they might all be bad, i don&amp;#39;t think it&amp;#39;s very probable. However, you might be onto something. Could it be that we are looking at data that is directly memory-mapped in from the lib/modules file or similar? Then maybe some rogue process is concurrently mutating that file and we are seeing inconsistent data?&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s kind of suspicious that all the occurrences we see are in tools that are used to manipulate JDK images such as jmod and jlink.</comment>
                            <comment id="14643894" author="coleenp" created="Thu, 25 Jan 2024 14:20:47 -0800"  >This looks like random memory corruption on your machine.  I think with the call stack, we&amp;#39;ve already read the bytecodes of this method once because we&amp;#39;re looking at the caller.  I think there are memory diagnostics that you can run.&lt;br/&gt;
&lt;br/&gt;
bytecode 188 is newarray so shouldn&amp;#39;t be the location of the static call.  I&amp;#39;ll look again at the stack walking code but this looks pretty impossible without memory corruption.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5135692">JDK-8337604</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5135876">JDK-8337757</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5136854">JDK-8338443</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5159402">JDK-8357577</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131583">JDK-8334022</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5131709">JDK-8334136</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123086">JDK-8327181</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109279" name="19089.log" size="10544" author="syan" created="Mon, 20 May 2024 01:10:43 -0700"/>
                            <attachment id="109278" name="hs_err_pid1141625.log" size="704687" author="syan" created="Mon, 20 May 2024 01:10:49 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i344zv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>