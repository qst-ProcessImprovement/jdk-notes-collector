<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 16:43:24 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302191] Performance degradation for float/double modulo on Linux</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302191</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>As reported by Jan Kratochvil:&lt;br/&gt;
&lt;br/&gt;
There was a performance degradation (about 6x slowdown) for float/double modulo operations in Java on Linux.&lt;br/&gt;
It happened and went unnoticed after a change in GCC between gcc-4.8 and gcc-4.9.&lt;br/&gt;
So, it is easy to compare performance of two separate builds of jdk8 built by different versions of GCC compiler. &lt;br/&gt;
&lt;br/&gt;
The affected native hotspot code is the same even today. Applying the same fix as in jdk8 to the trunk (jdk 21) does show the problem (and solution) with all recent versions of gcc.&lt;br/&gt;
&lt;br/&gt;
The gcc was slow since this commit (performance regression):&lt;br/&gt;
[PATCH, i386]: Enable reminder{sd,df,xf} and fmod{sf,df,xf} only for flag_finite_math_only.&lt;br/&gt;
&amp;nbsp;= &lt;a href=&quot;https://gcc.gnu.org/pipermail/gcc-patches/2014-September/400104.html&quot;&gt;https://gcc.gnu.org/pipermail/gcc-patches/2014-September/400104.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=4f2611b6e872c40e0bf4da38ff05df8c8fe0ee64&quot;&gt;https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=4f2611b6e872c40e0bf4da38ff05df8c8fe0ee64&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=93ba85fdd253b4b9cf2b9e54e8e5969b1a3db098&quot;&gt;https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=93ba85fdd253b4b9cf2b9e54e8e5969b1a3db098&lt;/a&gt; (backport)&lt;br/&gt;
&lt;br/&gt;
The performance regression got fixed/reverted by this commit:&lt;br/&gt;
[PATCH] i386: Do not constrain fmod and remainder patterns with flag_finite_math_only [PR108922]&lt;br/&gt;
&amp;nbsp;= &lt;a href=&quot;https://gcc.gnu.org/pipermail/gcc-patches/2023-February/612918.html&quot;&gt;https://gcc.gnu.org/pipermail/gcc-patches/2023-February/612918.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=8020c9c42349f51f75239b9d35a2be41848a97bd&quot;&gt;https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=8020c9c42349f51f75239b9d35a2be41848a97bd&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Attached are&lt;br/&gt;
&amp;nbsp;* reproducer org.apache.spark.DivisionDemo.java; &lt;br/&gt;
&amp;nbsp;* jdk8 timings with gcc-4.8 builds before/after remainder change in gcc; &lt;br/&gt;
&amp;nbsp;* jdk8 timings with gcc-4.8 after change in gcc with a fix in hotspot;&lt;br/&gt;
&amp;nbsp;* before/after the fix in hotspot timings for jdk 21 with gcc-12; &lt;br/&gt;
&lt;br/&gt;
the fix applicable to all versions of jdk (with path adjustment for jdk8)&lt;br/&gt;
&lt;br/&gt;
Reproducer should be run as&lt;br/&gt;
java -cp . -Xmx1024m -Xms1024m -XX:+AlwaysPreTouch org.apache.spark.DivisionDemo 10 f&lt;br/&gt;
with the last parameter f for float, d for double.&lt;br/&gt;
&lt;br/&gt;
Analysis:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
Java modulo (%) is compiled into Java bytecode drem which is defined as C fmod() - not C drem() (which is also named as remainder()). So for C/C++ function fmod:&lt;br/&gt;
&amp;nbsp;* gcc-4.8 was using fast CPU instruction fprem, only if it had non-finite result it falled back to glibc function fmod()&lt;br/&gt;
&amp;nbsp;* gcc-4.9 started using the fast CPU instruction fprem only with -ffinite-math-only (which is also a part of a more common -ffast-math). -ffinite-math-only has other effects on the code (such as isinf() no longer working) so this optimization is not really usable.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
According to the following info Java bytecode drem behavior matches the CPU instruction fprem so OpenJDK can use it directly:&lt;br/&gt;
&amp;nbsp;* &lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.drem&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.drem&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;* &lt;a href=&quot;https://community.intel.com/legacyfs/online/drupal_files/managed/a4/60/325383-sdm-vol-2abcd.pdf#page=483&quot;&gt;https://community.intel.com/legacyfs/online/drupal_files/managed/a4/60/325383-sdm-vol-2abcd.pdf#page=483&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
The following 3 issues are useful for upstream Linux components but they are not required for OpenJDK:&lt;br/&gt;
&amp;nbsp;* glibc implementation fmod() is not using the fprem instruction. I do not really understand why, I consider it as a missed optimization.&lt;br/&gt;
&amp;nbsp;* gcc could also use the fprem instruction instead of the glibc call fmod(). Even gcc-4.8 had the fmod() callback for non-finite numbers which I do not understand why it was there.&lt;br/&gt;
&amp;nbsp;* clang does not have any fprem instruction optimization, it only calls glibc fmod().&lt;br/&gt;
&lt;br/&gt;
The patch does fix the performance and the patch is applicable for both OpenJDK-8 and OpenJDK trunk (and I expect anything in between). I see no regression on OpenJDK-8 Linux x86_64.&lt;br/&gt;
&lt;br/&gt;
It is hard to detect a regression with a performance fix, so noreg-perf. &lt;br/&gt;
</description>
                <environment></environment>
        <key id="5093807">JDK-8302191</key>
            <summary>Performance degradation for float/double modulo on Linux</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jkratochvil">Jan Kratochvil</assignee>
                                    <reporter username="yan">Yuri Nesterenko</reporter>
                        <labels>
                            <label>jdk11u-fix-no</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk20u-fix-SQE-ok-next</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>jdk8u-fix-no</label>
                            <label>jdk8u-fix-request</label>
                            <label>noreg-perf</label>
                    </labels>
                <created>Thu, 9 Feb 2023 23:38:45 -0800</created>
                <updated>Wed, 16 Apr 2025 07:35:40 -0700</updated>
                            <resolved>Wed, 22 Mar 2023 08:58:17 -0700</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                                <comments>
                            <comment id="14575958" author="goetz" created="Mon, 24 Apr 2023 00:52:59 -0700"  >[17u] &lt;br/&gt;
In head, this is a brand new change. &lt;br/&gt;
Please flag it again for 17u once it has been live for a while, &lt;br/&gt;
e.g. in 20.0.2.  Then I will reconsider.</comment>
                            <comment id="14575305" author="andrew" created="Thu, 20 Apr 2023 01:33:14 -0700"  >Ok, I saw the text &amp;quot; I see no regression on OpenJDK-8 Linux x86_64. &amp;quot; and assumed that was about the performance regression, but I guess it may actually be about the patch testing (which is unusual to see commented on in a bug description)&lt;br/&gt;
&lt;br/&gt;
CentOS is not one person, but maintainers of different packages, primarily for RHEL. As maintainer for the RHEL/CentOS/Fedora OpenJDK packages, my reason is as above. I don&amp;#39;t intend to include it locally in the OpenJDK RPM if I&amp;#39;m against doing so upstream.&lt;br/&gt;
&lt;br/&gt;
As it sounds like the RHEL/CentOS gcc team have backported the change which created the regression to an older gcc, it is probably worth filing a bug in the Red Hat Bugzilla asking them to include the reversion (which may just mean dropping a local patch to gcc 4.8). I would warn, however, that the barrier for getting changes into 7.9 is also pretty high by this point. These are all pretty old releases by this point. But fixing the mistake at its source would also fix other software too, without changing any code.</comment>
                            <comment id="14575014" author="JIRAUSER20718" created="Wed, 19 Apr 2023 03:10:47 -0700"  >Andrew Hughes: &amp;quot; My understanding of this fix is that it is needed on certain GCC versions on x86_32 only,&amp;quot;&lt;br/&gt;
&lt;br/&gt;
That problem does affect x86_64 (primarily).&lt;br/&gt;
&lt;br/&gt;
David Holmes: &amp;quot;This is a performance enhancement, not a bug.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
The goal of the backports is to fix a performance regression for OpenJDK builds built by gcc &amp;lt;=4.8. For example:&lt;br/&gt;
&lt;br/&gt;
fast:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CentOS-7.1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java-1.8.0-openjdk-1.8.0.31-2.b13.el7.x86_64&lt;br/&gt;
&amp;nbsp;&amp;nbsp;GNU C 4.8.3 20140911 (Red Hat 4.8.3-9) -mtune=generic -march=x86-64 -g -O3 -fno-omit-frame-pointer -fstack-protector-strong -fno-strict-aliasing -fPIC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;gcc-4.8.3-9.el7.src.rpm does not yet contain the problematic patch&lt;br/&gt;
&lt;br/&gt;
slow:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CentOS-7.9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64&lt;br/&gt;
&amp;nbsp;&amp;nbsp;GNU C++ 4.8.5 20150623 (Red Hat 4.8.5-44) -m64 -mtune=generic -march=x86-64 -g -g -O3 -std=gnu++98 -fPIC -fno-rtti -fno-exceptions -fcheck-new -fvisibility=hidden -fno-strict-aliasing -fno-omit-frame-pointer -fstack-protector -fstack-protector-strong -fpch-deps --param ssp-buffer-size=4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;gcc-4.8.5-44.el7 already contains the problematic patch&lt;br/&gt;
&lt;br/&gt;
(I did not check which exact CentOS version did regress.)&lt;br/&gt;
Sure CentOS can also either backport this patch themselves to OpenJDK or they can backport the GCC fix or they can also use some of the GCC compilation options. Still the OpenJDK fix would fix the regression for any OpenJDK vendor.&lt;br/&gt;
</comment>
                            <comment id="14574960" author="goetz" created="Tue, 18 Apr 2023 23:15:06 -0700"  >[11u-no]&lt;br/&gt;
See 8u reasoning.</comment>
                            <comment id="14574735" author="andrew" created="Tue, 18 Apr 2023 09:27:48 -0700"  >As I understand it, the change that caused the regression has been reverted in gcc: &lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108922&quot;&gt;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108922&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Also a NACK for 8u from me too. Honestly, it seems risky to add this to 8u, 11u or 17u, which are stable releases that should be seeing bug fixes only. To quote David above, &amp;quot;This is a performance enhancement, not a bug.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
My understanding of this fix is that it is needed on certain GCC versions on x86_32 only, but alters code shared by x86_32 &amp;amp; x86_64 on all operating systems. So we have a risk for more widely used platforms with no gain.&lt;br/&gt;
&lt;br/&gt;
There is also a workaround which is to build on GCC &amp;lt; 4.9 or one with &lt;a href=&quot;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108922&quot;&gt;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108922&lt;/a&gt; fixed&lt;br/&gt;
&lt;br/&gt;
Given the age of GCC 4.9 by this point, I think this would have been flagged much earlier if it was a critical performance issue. GCC 4.9.0 was released on 2014-04-22 (and so celebrates its 9th birthday this week).</comment>
                            <comment id="14574732" author="aph" created="Tue, 18 Apr 2023 09:15:29 -0700"  >Definitely not 8u.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m wondering about 11u. Is this a bug fix, or an enhancement? From the form of the change it certainly looks like an enhancement, but I guess it&amp;#39;d be possible to argue that it&amp;#39;s a fix for a regression elsewhere. In which case I&amp;#39;d wonder why the regression hasn&amp;#39;t been fixed elsewhere.</comment>
                            <comment id="14571862" author="JIRAUSER20718" created="Tue, 4 Apr 2023 19:52:08 -0700"  >I&amp;#39;d like to port &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8302191&quot; title=&quot;Performance degradation for float/double modulo on Linux&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8302191&quot;&gt;&lt;strike&gt;JDK-8302191&lt;/strike&gt;&lt;/a&gt; to 8u due to it has similar problems as trunk does.&lt;br/&gt;
The patch had to be changed as jdk11 has sharedRuntime_x86.cpp while jdk8 has sharedRuntime_x86_32.cpp and sharedRuntime_x86_64.cpp.</comment>
                            <comment id="14571860" author="JIRAUSER20718" created="Tue, 4 Apr 2023 19:51:37 -0700"  >I&amp;#39;d like to port &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8302191&quot; title=&quot;Performance degradation for float/double modulo on Linux&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8302191&quot;&gt;&lt;strike&gt;JDK-8302191&lt;/strike&gt;&lt;/a&gt; to 11u due to it has similar problems as trunk does.&lt;br/&gt;
Fix applies cleanly.</comment>
                            <comment id="14571716" author="roboduke" created="Tue, 4 Apr 2023 08:19:56 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk8u-dev/pull/298&quot;&gt;https://git.openjdk.org/jdk8u-dev/pull/298&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-04 15:11:00 +0000</comment>
                            <comment id="14571665" author="roboduke" created="Tue, 4 Apr 2023 06:09:18 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/1824&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/1824&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-04 13:00:13 +0000</comment>
                            <comment id="14571637" author="JIRAUSER20718" created="Tue, 4 Apr 2023 05:34:51 -0700"  >I&amp;#39;d like to port &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8302191&quot; title=&quot;Performance degradation for float/double modulo on Linux&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8302191&quot;&gt;&lt;strike&gt;JDK-8302191&lt;/strike&gt;&lt;/a&gt; to 17u due to it has similar problems as trunk does.&lt;br/&gt;
Fix applies cleanly. </comment>
                            <comment id="14571629" author="roboduke" created="Tue, 4 Apr 2023 05:07:50 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1234&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1234&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-04 12:00:51 +0000</comment>
                            <comment id="14571280" author="roboduke" created="Mon, 3 Apr 2023 07:51:53 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk19u/pull/108&quot;&gt;https://git.openjdk.org/jdk19u/pull/108&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-03 14:44:18 +0000</comment>
                            <comment id="14571274" author="JIRAUSER20718" created="Mon, 3 Apr 2023 07:43:10 -0700"  >I&amp;#39;d like to port &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8302191&quot; title=&quot;Performance degradation for float/double modulo on Linux&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8302191&quot;&gt;&lt;strike&gt;JDK-8302191&lt;/strike&gt;&lt;/a&gt; to 20u due to it has similar problems as trunk does.&lt;br/&gt;
Fix applies cleanly. </comment>
                            <comment id="14571272" author="roboduke" created="Mon, 3 Apr 2023 07:39:46 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/46&quot;&gt;https://git.openjdk.org/jdk20u/pull/46&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-03 14:30:07 +0000</comment>
                            <comment id="14568821" author="dukebot" created="Wed, 22 Mar 2023 08:58:16 -0700"  >Changeset: 37774556&lt;br/&gt;
Author:    Jan Kratochvil &amp;lt;&lt;a href=&apos;mailto:jkratochvil@azul.com&apos;&gt;jkratochvil@azul.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Sandhya Viswanathan &amp;lt;&lt;a href=&apos;mailto:sviswanathan@openjdk.org&apos;&gt;sviswanathan@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-22 15:55:57 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/37774556da8a5aacf55884133ae936ed5a28eab2&quot;&gt;https://git.openjdk.org/jdk/commit/37774556da8a5aacf55884133ae936ed5a28eab2&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14564287" author="darcy" created="Thu, 2 Mar 2023 21:49:55 -0800"  >More current reference for the semantics of drem:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se19/html/jvms-6.html#jvms-6.5.drem&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se19/html/jvms-6.html#jvms-6.5.drem&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;quot;The result of a drem instruction is not the same as the result of the remainder operation defined by IEEE 754, due to the choice of rounding policy in the Java Virtual Machine (&amp;#xA7;2.8). The IEEE 754 remainder operation computes the remainder from a rounding division, not a truncating division, and so its behavior is not analogous to that of the usual integer remainder operator. Instead, the Java Virtual Machine defines drem to behave in a manner analogous to that of the integer remainder instructions irem and lrem, with an implied division using the round toward zero rounding policy; this may be compared with the C library function fmod.&lt;br/&gt;
&lt;br/&gt;
The result of a drem instruction is governed by the following rules, which match IEEE 754 arithmetic except for how the implied division is computed:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If either value1 or value2 is NaN, the result is NaN.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If neither value1 nor value2 is NaN, the sign of the result equals the sign of the dividend.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If the dividend is an infinity or the divisor is a zero or both, the result is NaN.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If the dividend is finite and the divisor is an infinity, the result equals the dividend.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If the dividend is a zero and the divisor is finite, the result equals the dividend.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In the remaining cases, where neither operand is an infinity, a zero, or NaN, the floating-point remainder result from a dividend value1 and a divisor value2 is defined by the mathematical relation result = value1 - (value2 * q), where q is an integer that is negative only if value1 / value2 is negative, and positive only if value1 / value2 is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of value1 and value2.&lt;br/&gt;
&lt;br/&gt;
Despite the fact that division by zero may occur, evaluation of a drem instruction never throws a run-time exception. Overflow, underflow, or loss of precision cannot occur. &amp;quot;</comment>
                            <comment id="14559384" author="dholmes" created="Sun, 12 Feb 2023 21:38:11 -0800"  >This is a performance enhancement, not a bug.</comment>
                            <comment id="14559075" author="roboduke" created="Fri, 10 Feb 2023 01:12:38 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12508&quot;&gt;https://git.openjdk.org/jdk/pull/12508&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-10 09:06:56 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5098348">JDK-8305948</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099671">JDK-8307047</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="5149812">JDK-8349401</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101938">JDK-8308966</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107754">JDK-8314056</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5093654">JDK-8302524</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5098006">JDK-8305689</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101938">JDK-8308966</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5105628">JDK-8312188</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102606" name="DivisionDemo.java" size="5047" author="yan" created="Thu, 9 Feb 2023 23:40:01 -0800"/>
                            <attachment id="102609" name="time.openjdk21-gcc1221" size="911" author="yan" created="Thu, 9 Feb 2023 23:40:41 -0800"/>
                            <attachment id="102610" name="time.openjdk21-gcc1221fix" size="907" author="yan" created="Thu, 9 Feb 2023 23:40:41 -0800"/>
                            <attachment id="102607" name="time.openjdk8-gcc48post" size="991" author="yan" created="Thu, 9 Feb 2023 23:40:41 -0800"/>
                            <attachment id="102611" name="time.openjdk8-gcc48postfix" size="986" author="yan" created="Thu, 9 Feb 2023 23:40:41 -0800"/>
                            <attachment id="102608" name="time.openjdk8-gcc48pre" size="981" author="yan" created="Thu, 9 Feb 2023 23:40:41 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30bmb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>