<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:04:07 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302976] C2 Intrinsification of Float.floatToFloat16 and Float.float16ToFloat Yields Different Result than the Interpreter</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302976</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following code snippet prints twice 31745 with the interpreter, and 32257 31745 with -Xcomp -XX:-TieredCompilation. This means, C2 will eliminate both intrinsifications if they are within the same compilation unit (the latter print), and return the same result as the interpreter. But if it applies the intrinsifications respectively in different compilation units and employ the underlying vcvtps2ph and vcvtph2ps instructions (the former print), then it will return a different value. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
public class Foo {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static short bar(float f) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Float.floatToFloat16(f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(bar(Float.float16ToFloat((short) 31745)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Float.floatToFloat16(Float.float16ToFloat((short) 31745)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
} &lt;br/&gt;
</description>
                <environment></environment>
        <key id="5094716">JDK-8302976</key>
            <summary>C2 Intrinsification of Float.floatToFloat16 and Float.float16ToFloat Yields Different Result than the Interpreter</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kvn">Vladimir Kozlov</assignee>
                                    <reporter username="yzheng">Yudi Zheng</reporter>
                        <labels>
                            <label>20bpr-critical-approved</label>
                            <label>c2</label>
                            <label>intrinsic</label>
                            <label>jdk20u-fix-SQE-ok-next</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-21</label>
                    </labels>
                <created>Tue, 21 Feb 2023 02:29:37 -0800</created>
                <updated>Fri, 26 Jan 2024 04:41:02 -0800</updated>
                            <resolved>Wed, 8 Mar 2023 19:28:29 -0800</resolved>
                                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                                                            <comments>
                            <comment id="14568664" author="roboduke" created="Tue, 21 Mar 2023 14:54:03 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/21&quot;&gt;https://git.openjdk.org/jdk20u/pull/21&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-21 21:46:36 +0000</comment>
                            <comment id="14568623" author="kvn" created="Tue, 21 Mar 2023 11:22:59 -0700"  >jdk20u backport request&lt;br/&gt;
&lt;br/&gt;
This fixed inconsistency in Float.floatToFloat16 and Float.float16ToFloat results found in JDK 20 but is was late to push it there.&lt;br/&gt;
Risk is medium since changes are not small. But it was running in JDK 21 for 2 weeks already without any issues.&lt;br/&gt;
New tests were added to make sure the fix is correct.&lt;br/&gt;
&lt;br/&gt;
JDK 20u PR: &lt;a href=&quot;https://github.com/openjdk/jdk20u/pull/21&quot;&gt;https://github.com/openjdk/jdk20u/pull/21&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14565437" author="dukebot" created="Wed, 8 Mar 2023 19:28:28 -0800"  >Changeset: 8cfd74f7&lt;br/&gt;
Author:    Vladimir Kozlov &amp;lt;&lt;a href=&apos;mailto:kvn@openjdk.org&apos;&gt;kvn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-09 03:26:38 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/8cfd74f76afc9e5d50c52104fef9974784718dd4&quot;&gt;https://git.openjdk.org/jdk/commit/8cfd74f76afc9e5d50c52104fef9974784718dd4&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14564692" author="roboduke" created="Mon, 6 Mar 2023 08:12:08 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12869&quot;&gt;https://git.openjdk.org/jdk/pull/12869&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-03 21:41:35 +0000</comment>
                            <comment id="14562863" author="sviswanathan" created="Fri, 24 Feb 2023 19:03:39 -0800"  >Thanks a lot [~kvn] [~darcy]. The sharedRuntime:hf2f and f2hf implementations will also need to be platform dependent for NaN handling.</comment>
                            <comment id="14562862" author="darcy" created="Fri, 24 Feb 2023 18:12:05 -0800"  >The test in question contains the following comment:&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
&amp;nbsp;* The behavior tested below is an implementation property not&lt;br/&gt;
&amp;nbsp;* required by the specification. It would be acceptable for this&lt;br/&gt;
&amp;nbsp;* information to not be preserved (as long as a NaN is returned) if,&lt;br/&gt;
&amp;nbsp;* say, a intrinsified version using native hardware instructions&lt;br/&gt;
&amp;nbsp;* behaved differently.&lt;br/&gt;
&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;* If that is the case, this test should be modified to disable&lt;br/&gt;
&amp;nbsp;* intrinsics or to otherwise not run on platforms with an differently&lt;br/&gt;
&amp;nbsp;* behaving intrinsic.&lt;br/&gt;
&amp;nbsp;*/&lt;br/&gt;
&lt;br/&gt;
The test has already been updated to limit the platforms on which it is run:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;* @requires (os.arch != &amp;quot;x86&amp;quot; &amp;amp; os.arch != &amp;quot;i386&amp;quot;) | vm.opt.UseSSE == &amp;quot;null&amp;quot; | vm.opt.UseSSE &amp;gt; 0</comment>
                            <comment id="14562861" author="kvn" created="Fri, 24 Feb 2023 18:09:24 -0800"  >I will let [~darcy] say what he think about this.&lt;br/&gt;
</comment>
                            <comment id="14562860" author="kvn" created="Fri, 24 Feb 2023 18:06:36 -0800"  >Okay, I got implementation which executes the same HW instructions in Interpreter, C1 and C2. So results will be consistent but they are different from what Java implementation and corresponding tests expect - roundtrip equality for float16.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14562859" author="sviswanathan" created="Fri, 24 Feb 2023 17:58:55 -0800"  >That is also because of the QNaN bit and needs similar change on line 84:&lt;br/&gt;
From:&lt;br/&gt;
if (s != s2) {&lt;br/&gt;
&lt;br/&gt;
To:&lt;br/&gt;
if ((s &amp;amp; ~0x0200) != (s2 &amp;amp; ~0x0200)) {  // ignore QNaN bit</comment>
                            <comment id="14562858" author="kvn" created="Fri, 24 Feb 2023 17:51:47 -0800"  >I also ran &lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/test/jdk/java/lang/Float/Binary16ConversionNaN.java&quot;&gt;https://github.com/openjdk/jdk/blob/master/test/jdk/java/lang/Float/Binary16ConversionNaN.java&lt;/a&gt; [~darcy] wrote and it failed too:&lt;br/&gt;
Roundtrip failure on NaN value 7c01      got back 7e01&lt;br/&gt;
Roundtrip failure on NaN value fc01      got back fe01&lt;br/&gt;
Roundtrip failure on NaN value 7c02      got back 7e02&lt;br/&gt;
Roundtrip failure on NaN value fc02      got back fe02&lt;br/&gt;
...&lt;br/&gt;
Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: 1022 errors&lt;br/&gt;
	at Binary16ConversionNaN.main(Binary16ConversionNaN.java:51)&lt;br/&gt;
&lt;br/&gt;
It does not fail with Java implemetation - run with -Xint without my code.&lt;br/&gt;
</comment>
                            <comment id="14562856" author="sviswanathan" created="Fri, 24 Feb 2023 17:28:53 -0800"  >[~kvn] The QNaN bit difference is not an issue and similar thing happens today with float-&amp;gt;double conversion and back. I mentioned this in my comment earlier that the behavior of adding the QNaN bit is consistent across float16/float/double data types. To show this, I translated the TestAll.java for float-&amp;gt;double in file TestAllFloat.java. We see similar handling that the results for NaN differ by the QNaN bit in TestAllFloat.java as well.&lt;br/&gt;
In my thoughts the TestAll.java needs to be fixed as TestAllFix.java to be the correct test.</comment>
                            <comment id="14562852" author="kvn" created="Fri, 24 Feb 2023 16:47:52 -0800"  >Is this is why we have special stub to fix value after conversion between float and integer values? :&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L9424&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L9424&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14562848" author="kvn" created="Fri, 24 Feb 2023 16:10:00 -0800"  >I implemented usage of vcvtps2ph/vcvtph2ps instructions in Interpreter and run with TestAll.java. All NaN values failed:&lt;br/&gt;
&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(-1023): -511 != -1023 (NaN)&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(-1022): -510 != -1022 (NaN)&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(-1021): -509 != -1021 (NaN)&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(-1020): -508 != -1020 (NaN)&lt;br/&gt;
...&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(31745): 32257 != 31745 (NaN)&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(31746): 32258 != 31746 (NaN)&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(31747): 32259 != 31747 (NaN)&lt;br/&gt;
Inconsistent result for Float.floatToFloat16(31748): 32260 != 31748 (NaN)&lt;br/&gt;
&lt;br/&gt;
[~sviswanathan]  The test execution simply push short value through vcvtph2ps-&amp;gt;vcvtps2ph instructions and got back different result if intermittent float value is NaN.  The difference is 512 as this bug stated.  I really don&amp;#39;t want to check for special NaN cases in assembler code and adjust result for that. Do you know other solutions on assembler level?&lt;br/&gt;
</comment>
                            <comment id="14562627" author="thartmann" created="Fri, 24 Feb 2023 01:11:41 -0800"  >Similar issue from the past: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8076373&quot; title=&quot;Interpreter and compiled code process signaling NaN values inconsistently in 32-bit x86 VM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8076373&quot;&gt;&lt;strike&gt;JDK-8076373&lt;/strike&gt;&lt;/a&gt;</comment>
                            <comment id="14562568" author="kvn" created="Thu, 23 Feb 2023 14:55:34 -0800"  >I took it.</comment>
                            <comment id="14562400" author="thartmann" created="Wed, 22 Feb 2023 23:50:14 -0800"  >[~dlong], right, good catch. We need a more sophisticated test.</comment>
                            <comment id="14562349" author="dlong" created="Wed, 22 Feb 2023 16:18:01 -0800"  >[~thartmann], I was wrong, we can test all the input values for float16ToFloat(), but not so easily for floatToFloat16(), with 2^32 inputs to test.&lt;br/&gt;
I posted a counter example here that demonstrates the problem:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/12704#issuecomment-1441020334&quot;&gt;https://github.com/openjdk/jdk/pull/12704#issuecomment-1441020334&lt;/a&gt;</comment>
                            <comment id="14561903" author="thartmann" created="Wed, 22 Feb 2023 00:10:41 -0800"  >[~dlong]:&lt;br/&gt;
&amp;gt; It looks like the problem for this test is NaN values, but there could be other values that cause problems. I think we need a test for these intrinsics that covers all the interesting NaN, subnormal, 0, -0 values. Or better yet, all values. There&amp;#39;s only 65536 to test, right?&lt;br/&gt;
&lt;br/&gt;
Yes, we should do that. I attached a corresponding test (TestAll.java). Both Float.floatToFloat16 and Float.float16ToFloat are affected. Input values in the ranges [-1023, -513] and [31745, 32255] ([0xfc01, 0xfdff], [0x7c01, 0x7dff]) corresponding to NaN return inconsistent values.</comment>
                            <comment id="14561863" author="roboduke" created="Tue, 21 Feb 2023 18:19:47 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12704&quot;&gt;https://git.openjdk.org/jdk/pull/12704&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-22 02:08:27 +0000</comment>
                            <comment id="14561862" author="sviswanathan" created="Tue, 21 Feb 2023 18:16:56 -0800"  >[~dlong] I agree with you. In any case, I have submitted a PR for the mainline. &lt;a href=&quot;https://github.com/openjdk/jdk/pull/12704&quot;&gt;https://github.com/openjdk/jdk/pull/12704&lt;/a&gt;</comment>
                            <comment id="14561859" author="dlong" created="Tue, 21 Feb 2023 18:06:18 -0800"  >[~sviswanathan], I&amp;#39;m not sure the behavior is a bug.  The javadoc for Float.float16ToFloat() only says:&lt;br/&gt;
&amp;quot;If the argument is a NaN, the result is a NaN.&amp;quot;&lt;br/&gt;
It does not say what kind of NaN, or even that the same NaN will be returned for the same input.  This is in contrast to floatToIntBits(), which returns a canonical NaN value.</comment>
                            <comment id="14561854" author="dlong" created="Tue, 21 Feb 2023 17:01:23 -0800"  >I got the same result on aarch64.  It looks like RISC-V also implements this intrinsic.</comment>
                            <comment id="14561850" author="sviswanathan" created="Tue, 21 Feb 2023 16:36:59 -0800"  >[~thartmann], [~kvn], [~dlong], [~darcy] This is specific to NaN handling. The HW instructions generate QNaNs and not SNaNs for floating point instructions. This happens across double, float, and float16 data types. The most significant bit of mantissa is set to 1 for QNaNs. For Float16 data type (1 sign bit, 5 exponent bits, 10 mantissa bits): 0x7E01 would be a QNaN and 0x7C01 would be a SNaN. &lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/NaN#Encoding&quot;&gt;https://en.wikipedia.org/wiki/NaN#Encoding&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
As per my understanding we need to change the java/lang/float.java and the corresponding shared runtime constant expression evaluation to generate QNaN. I can send out a PR fixing this. Please let me know your thoughts.&lt;br/&gt;
</comment>
                            <comment id="14561849" author="dlong" created="Tue, 21 Feb 2023 16:34:06 -0800"  >I think the problem is the C++ and Java implementations return a different NaN value than the HW instruction.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Float.java#L1096-L1106&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Float.java#L1096-L1106&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
HW instruction returns a NaN value, but not the same one as the reference code.  If we need to be bit-for-bit the same, then it implies we can&amp;#39;t use the HW instruction without a runtime check for NaN first (when the value is not a constant).</comment>
                            <comment id="14561845" author="kvn" created="Tue, 21 Feb 2023 15:43:16 -0800"  >I wish we don&amp;#39;t use runtime function for that but simple JIT compile Java method. Or always use HW instruction.&lt;br/&gt;
Note, runtime function is used only when HW instructions are present and intrinsic is enabled. Otherwise we JIT compile Java method.&lt;br/&gt;
</comment>
                            <comment id="14561844" author="kvn" created="Tue, 21 Feb 2023 15:41:25 -0800"  >Note, in this bug case NaN constant is used as argument and  HW instruction is NOT used. Instead `SharedRuntime::hf2f()` runtime function is called to get value:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/convertnode.cpp#L239&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/convertnode.cpp#L239&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14561842" author="kvn" created="Tue, 21 Feb 2023 15:35:40 -0800"  >Yes, 31745 is 0x7C01 NaN value. So HW instruction does not handle NaN value correctly? Or there is other bug.</comment>
                            <comment id="14561823" author="dlong" created="Tue, 21 Feb 2023 13:59:32 -0800"  >It looks like the problem for this test is NaN values, but there could be other values that cause problems.  I think we need a test for these intrinsics that covers all the interesting NaN, subnormal, 0, -0 values.  Or better yet, all values.  There&amp;#39;s only 65536 to test, right?</comment>
                            <comment id="14561653" author="thartmann" created="Tue, 21 Feb 2023 03:25:36 -0800"  >Smita, could you please have a look?</comment>
                            <comment id="14561652" author="thartmann" created="Tue, 21 Feb 2023 03:24:19 -0800"  >ILW = Wrong result of C2 intrinsic, new Float.floatToFloat16 method added by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8289551&quot; title=&quot;Conversions between bit representations of half precision values and floats&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8289551&quot;&gt;&lt;strike&gt;JDK-8289551&lt;/strike&gt;&lt;/a&gt; (intrinsified by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8289552&quot; title=&quot;Make intrinsic conversions between bit representations of half precision values and floats&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8289552&quot;&gt;&lt;strike&gt;JDK-8289552&lt;/strike&gt;&lt;/a&gt;), -XX:DisableIntrinsic=_floatToFloat16 = HMM = P2</comment>
                            <comment id="14561651" author="thartmann" created="Tue, 21 Feb 2023 03:20:09 -0800"  >Thanks for the report, [~yzheng]. I attached a reproducer that does not require any command line options.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5099639">JDK-8307015</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5096908">JDK-8304741</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5097881">JDK-8305576</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5083645">JDK-8293991</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5078284">JDK-8289551</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5078285">JDK-8289552</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120053">JDK-8324724</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102725" name="Test.java" size="382" author="thartmann" created="Tue, 21 Feb 2023 03:19:34 -0800"/>
                            <attachment id="102750" name="TestAll.java" size="2404" author="thartmann" created="Wed, 22 Feb 2023 01:49:02 -0800"/>
                            <attachment id="102792" name="TestAllFix.java" size="2733" author="sviswanathan" created="Fri, 24 Feb 2023 17:38:42 -0800"/>
                            <attachment id="102791" name="TestAllFloat.java" size="2485" author="sviswanathan" created="Fri, 24 Feb 2023 17:34:16 -0800"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5094774">JDK-8303035</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17004"><![CDATA[x86]]></customfieldvalue>
    <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30h8b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17407"><![CDATA[b14]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>