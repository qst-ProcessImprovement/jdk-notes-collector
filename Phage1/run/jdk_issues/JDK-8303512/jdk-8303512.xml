<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:23:43 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303512] Race condition when computing is_loaded property of TypePtr::InterfaceSet</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303512</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The test java/foreign/callarranger/TestRISCV64CallArranger.java crashes with SIGSEGV (within LibraryCallKit::generate_method_call) on macosx-x64, see attached HotSpot error file. The failure is observed on a Generational ZGC build, but it is unlikely to be Generational ZGC-specific. I failed to reproduce the crash using compilation replay.&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x000000010a9c5306, pid=79781, tid=29955&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0+4) (build 21-genzgc+4-LTS-29)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-genzgc+4-LTS-29, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.dylib+0x7d5306]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x386&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:    762 1086       4       java.lang.invoke.MethodType::hashCode (53 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000700009a42000,0x0000700009b42000],  sp=0x0000700009b3fc30,  free space=1015k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x7d5306]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x386&lt;br/&gt;
V  [libjvm.dylib+0x7b297e]  LibraryCallKit::inline_native_hashcode(bool, bool)+0xf7e&lt;br/&gt;
V  [libjvm.dylib+0x7af787]  LibraryCallKit::try_to_inline(int)+0x207&lt;br/&gt;
V  [libjvm.dylib+0x7af1f0]  LibraryIntrinsic::generate(JVMState*)+0xa0&lt;br/&gt;
V  [libjvm.dylib+0x45c14c]  Parse::do_call()+0x5ac&lt;br/&gt;
V  [libjvm.dylib+0x9576d8]  Parse::do_one_block()+0x218&lt;br/&gt;
V  [libjvm.dylib+0x956662]  Parse::do_all_blocks()+0x4e2&lt;br/&gt;
V  [libjvm.dylib+0x954076]  Parse::Parse(JVMState*, ciMethod*, float)+0x806&lt;br/&gt;
V  [libjvm.dylib+0x2d4a70]  ParseGenerator::generate(JVMState*)+0x80&lt;br/&gt;
V  [libjvm.dylib+0x384d7e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xcbe&lt;br/&gt;
V  [libjvm.dylib+0x2d2c1f]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xef&lt;br/&gt;
V  [libjvm.dylib+0x3984ca]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x4ca&lt;br/&gt;
V  [libjvm.dylib+0x397f5c]  CompileBroker::compiler_thread_loop()+0x4ec&lt;br/&gt;
V  [libjvm.dylib+0x5c3524]  JavaThread::thread_main_inner()+0x94&lt;br/&gt;
V  [libjvm.dylib+0xad5495]  Thread::call_run()+0xa5&lt;br/&gt;
V  [libjvm.dylib+0x934cd7]  thread_native_entry(Thread*)+0x147&lt;br/&gt;
C  [libsystem_pthread.dylib+0x6259]  _pthread_start+0x7d&lt;br/&gt;
C  [libsystem_pthread.dylib+0x1c7b]  thread_start+0xf&lt;br/&gt;
&lt;br/&gt;
Should this test be enabled at all on other platforms than RISCV64?</description>
                <environment></environment>
        <key id="5095379">JDK-8303512</key>
            <summary>Race condition when computing is_loaded property of TypePtr::InterfaceSet</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thartmann">Tobias Hartmann</assignee>
                                    <reporter username="rcastanedalo">Roberto Castaneda Lozano</reporter>
                        <labels>
                            <label>c2</label>
                            <label>intermittent</label>
                            <label>intermittent-low-frequency</label>
                            <label>noreg-hard</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-21</label>
                            <label>tier1</label>
                    </labels>
                <created>Thu, 2 Mar 2023 03:02:07 -0800</created>
                <updated>Sun, 14 Sep 2025 23:47:10 -0700</updated>
                            <resolved>Mon, 15 May 2023 04:08:27 -0700</resolved>
                                    <version>17.0.18</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14581531" author="dukebot" created="Mon, 15 May 2023 04:08:26 -0700"  >Changeset: ad348a8c&lt;br/&gt;
Author:    Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-15 11:06:20 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ad348a8cec50561d3e295b6289772530f541c6b1&quot;&gt;https://git.openjdk.org/jdk/commit/ad348a8cec50561d3e295b6289772530f541c6b1&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14579804" author="roboduke" created="Mon, 8 May 2023 08:00:12 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13868&quot;&gt;https://git.openjdk.org/jdk/pull/13868&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-08 14:52:21 +0000</comment>
                            <comment id="14579650" author="thartmann" created="Mon, 8 May 2023 00:27:08 -0700"  >This is a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297933&quot; title=&quot;[REDO] Compiler should only use verified interface types for optimization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297933&quot;&gt;&lt;strike&gt;JDK-8297933&lt;/strike&gt;&lt;/a&gt; and the root cause is a race condition among compiler threads computing TypePtr::InterfaceSet::_is_loaded for a shared type. One thread can set _is_loaded_computed before setting _is_loaded while another thread can already access _is_loaded (and wrongly observe _is_loaded = false). As a result, the klass of a TypePtr can be loaded while the interfaces it implements appear to be not loaded.&lt;br/&gt;
&lt;br/&gt;
Another problem is that TypePtr::InterfaceSet::eq does not take the _is_loaded / _is_loaded_computed fields into account. A loaded type can therefore be replaced by an unloaded type during GVN.&lt;br/&gt;
&lt;br/&gt;
In the case of the failure reported by this bug, LibraryCallKit::inline_native_hashcode first null checks the receiver and updates the type. Due to the issues described above, the null-free type is GVN&amp;#39;ed with it&amp;#39;s unloaded counterpart and propagated to another, redundant null check emitted by LibraryCallKit::generate_method_call. Since the type is now unloaded, an uncommon trap is emitted and parsing is stopped(). We crash when trying to de-reference GraphKit::_map-&amp;gt;_jvms which is NULL.&lt;br/&gt;
&lt;br/&gt;
Another failure mode is reported by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305339&quot; title=&quot;fatal error: meet not symmetric&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305339&quot;&gt;&lt;strike&gt;JDK-8305339&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14579398" author="thartmann" created="Fri, 5 May 2023 07:47:45 -0700"  >I think this is related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305339&quot; title=&quot;fatal error: meet not symmetric&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305339&quot;&gt;&lt;strike&gt;JDK-8305339&lt;/strike&gt;&lt;/a&gt;. I added more information there.</comment>
                            <comment id="14569335" author="thartmann" created="Fri, 24 Mar 2023 05:02:26 -0700"  >I executed several thousand iterations of the failing tests (even with the same build and on the same machine) but I&amp;#39;m not able to reproduce this.</comment>
                            <comment id="14567519" author="dcubed" created="Thu, 16 Mar 2023 09:44:39 -0700"  >Here&amp;#39;s the crashing thread&amp;#39;s stack from the jdk-21+15-1172-tier1 sighting:&lt;br/&gt;
&lt;br/&gt;
java/lang/ModuleLayer/automatic/AutomaticModulesTest.java&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fbbb3974c00):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=22787, stack(0x000070000a4e1000,0x000070000a5e1000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   2057 1753       4       java.lang.invoke.MethodType::hashCode (53 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000070000a4e1000,0x000070000a5e1000],  sp=0x000070000a5deb90,  free space=1014k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x7bae86]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x386&lt;br/&gt;
V  [libjvm.dylib+0x7984fe]  LibraryCallKit::inline_native_hashcode(bool, bool)+0xf7e&lt;br/&gt;
V  [libjvm.dylib+0x795307]  LibraryCallKit::try_to_inline(int)+0x207&lt;br/&gt;
V  [libjvm.dylib+0x794d70]  LibraryIntrinsic::generate(JVMState*)+0xa0&lt;br/&gt;
V  [libjvm.dylib+0x4523dc]  Parse::do_call()+0x5ac&lt;br/&gt;
V  [libjvm.dylib+0x939ed8]  Parse::do_one_block()+0x218&lt;br/&gt;
V  [libjvm.dylib+0x938e62]  Parse::do_all_blocks()+0x4e2&lt;br/&gt;
V  [libjvm.dylib+0x936876]  Parse::Parse(JVMState*, ciMethod*, float)+0x806&lt;br/&gt;
V  [libjvm.dylib+0x2cf620]  ParseGenerator::generate(JVMState*)+0x80&lt;br/&gt;
V  [libjvm.dylib+0x37bd9e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xcbe&lt;br/&gt;
V  [libjvm.dylib+0x2cd7ef]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xef&lt;br/&gt;
V  [libjvm.dylib+0x38f67a]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x4ca&lt;br/&gt;
V  [libjvm.dylib+0x38f0fc]  CompileBroker::compiler_thread_loop()+0x5ec&lt;br/&gt;
V  [libjvm.dylib+0x5b33a4]  JavaThread::thread_main_inner()+0x94&lt;br/&gt;
V  [libjvm.dylib+0xab3a15]  Thread::call_run()+0xa5&lt;br/&gt;
V  [libjvm.dylib+0x917d67]  thread_native_entry(Thread*)+0x147&lt;br/&gt;
C  [libsystem_pthread.dylib+0x6259]  _pthread_start+0x7d&lt;br/&gt;
C  [libsystem_pthread.dylib+0x1c7b]  thread_start+0xf&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000038&lt;br/&gt;
</comment>
                            <comment id="14565875" author="thartmann" created="Fri, 10 Mar 2023 08:02:08 -0800"  >After some more staring at the code, I&amp;#39;m still not sure how this can happen. Although we seem to be missing a stopped() check after the null_check_receiver() checks in LibraryCallKit::generate_method_call(), this should never be possible because we check the receiver for null before that in LibraryCallKit::inline_native_hashcode.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m closing this as Cannot Reproduce for now, hoping it shows up again in a more reproducible form.</comment>
                            <comment id="14564294" author="thartmann" created="Thu, 2 Mar 2023 22:57:04 -0800"  >Thanks [~fjiang], the issue seems to be platform independent and from the stack trace on Linux x86, it looks like we crash in callnode.hpp:247, which would be JVMState::bci(). Probably, the JVMState is NULL.&lt;br/&gt;
&lt;br/&gt;
Seems we are missing a stopped() check after null_check_receiver(), maybe that&amp;#39;s the issue. I&amp;#39;ll try to verify.</comment>
                            <comment id="14564264" author="JIRAUSER19808" created="Thu, 2 Mar 2023 18:39:01 -0800"  >[~thartmann] Seems it&amp;#39;s not related to foreign API, but I can help to run tests on linux-riscv to see if this issue also happens on riscv.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Should this test be enabled at all on other platforms than RISCV64?&lt;br/&gt;
Looks like CallArrangerTest just tests how the function arguments and return values passed.&lt;br/&gt;
Though it has platform-dependent implementations, they are all Java code, so I think it&amp;#39;s okay to enable the test on other platforms.</comment>
                            <comment id="14564138" author="thartmann" created="Thu, 2 Mar 2023 07:53:42 -0800"  >This also happened once with a completely different test on Linux x86_64 that is not using panama/foreign memory API:&lt;br/&gt;
java/net/httpclient/ManyRequests.java&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   1058 1135       4       java.lang.invoke.MethodType::hashCode (53 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f74635f5000,0x00007f74636f6000],  sp=0x00007f74636f2980,  free space=1014k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xb24f58]  LibraryCallKit::generate_method_call(vmIntrinsicID, bool, bool)+0x208  (callnode.hpp:247)&lt;br/&gt;
V  [libjvm.so+0xb26d57]  LibraryCallKit::inline_native_hashcode(bool, bool)+0x1007  (library_call.cpp:4344)&lt;br/&gt;
V  [libjvm.so+0xb2b04c]  LibraryIntrinsic::generate(JVMState*)+0x15c  (library_call.cpp:116)&lt;br/&gt;
V  [libjvm.so+0x70d908]  Parse::do_call()+0x1f8  (doCall.cpp:662)&lt;br/&gt;
V  [libjvm.so+0xcd1af8]  Parse::do_one_block()+0x208  (parse1.cpp:1560)&lt;br/&gt;
V  [libjvm.so+0xcd1f25]  Parse::do_all_blocks()+0xe5  (parse1.cpp:707)&lt;br/&gt;
V  [libjvm.so+0xcd4675]  Parse::Parse(JVMState*, ciMethod*, float)+0x725  (parse1.cpp:613)&lt;br/&gt;
V  [libjvm.so+0x55710b]  ParseGenerator::generate(JVMState*)+0x8b  (callGenerator.cpp:99)&lt;br/&gt;
V  [libjvm.so+0x624975]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd75  (compile.cpp:763)&lt;br/&gt;
V  [libjvm.so+0x556210]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x120  (c2compiler.cpp:113)&lt;br/&gt;
V  [libjvm.so+0x62bb5f]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa6f  (compileBroker.cpp:2237)&lt;br/&gt;
V  [libjvm.so+0x62c9e8]  CompileBroker::compiler_thread_loop()+0x558  (compileBroker.cpp:1916)&lt;br/&gt;
V  [libjvm.so+0x8d8a18]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:710)&lt;br/&gt;
V  [libjvm.so+0xe76f16]  Thread::call_run()+0xa6  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0xca2948]  thread_native_entry(Thread*)+0xd8  (os_linux.cpp:737)</comment>
                            <comment id="14564085" author="thartmann" created="Thu, 2 Mar 2023 04:50:49 -0800"  >Not sure what happened here and unfortunately, there is no core file to investigate.&lt;br/&gt;
&lt;br/&gt;
ILW = Crash during intrinsification in C2 compilation, only happened once, no workaround but disable intrinsic or compilation of affected method = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5097577">JDK-8305339</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5083451">JDK-8293841</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5088685">JDK-8297933</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5100321">JDK-8307625</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102870" name="hs_err_pid79781.log" size="145421" author="rcastanedalo" created="Thu, 2 Mar 2023 03:00:16 -0800"/>
                            <attachment id="102871" name="replay_pid79781.log" size="232161" author="rcastanedalo" created="Thu, 2 Mar 2023 03:00:16 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17455"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22711">21</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30lbn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>