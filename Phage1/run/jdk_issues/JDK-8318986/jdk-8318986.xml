<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:45:17 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8318986] Improve GenericWaitBarrier performance</title>
                <link>https://bugs.openjdk.org/browse/JDK-8318986</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>While running simple benchmarks for safepoints, I was surprised to see impressively bad performance on my Mac M1 with a simple workload like this:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
public class LotsRunnable {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;static final int THREAD_COUNT = Integer.getInteger(&amp;quot;threads&amp;quot;, Runtime.getRuntime().availableProcessors() * 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;static Object sink;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String... args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int c = 0; c &amp;lt; THREAD_COUNT; c++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread t = new Thread(() -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.onSpinWait();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t.setDaemon(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t.start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Started&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long stop = System.nanoTime() + 10_000_000_000L;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (System.nanoTime() &amp;lt; stop) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sink = new byte[100_000];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
} &lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
If you run with -Xlog:safepoint -Xlog:gc, then you would notice that GC pause times and the actual vm op times are completely out of whack. For example:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
$ java -Xlog:safepoint -Xlog:gc -Xmx2g LotsRunnable.java&lt;br/&gt;
[3.188s][info][gc       ] GC(19) Pause Young (Normal) (G1 Evacuation Pause) 308M-&amp;gt;2M(514M) 0.878ms&lt;br/&gt;
[3.326s][info][safepoint] Safepoint &amp;quot;G1CollectForAllocation&amp;quot;, Time since last: 4963375 ns, Reaching safepoint: 349292 ns, Cleanup: 2000 ns, At safepoint: 138700375 ns, Total: 139051667 ns&lt;br/&gt;
```&lt;br/&gt;
Note how the pause is &amp;lt;1ms, but the &amp;quot;At safepoint&amp;quot; is whole 138 ms (!!!).&lt;br/&gt;
&lt;br/&gt;
Deeper profiling shows that the problem is on the path where we wake up the threads from the safepoint:&lt;br/&gt;
&amp;nbsp;&lt;a href=&quot;https://github.com/openjdk/jdk/blob/4f9f1955ab2737880158c57d4891d90e2fd2f5d7/src/hotspot/share/runtime/safepoint.cpp#L494-L495&quot;&gt;https://github.com/openjdk/jdk/blob/4f9f1955ab2737880158c57d4891d90e2fd2f5d7/src/hotspot/share/runtime/safepoint.cpp#L494-L495&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8214271&quot; title=&quot;Fast primitive to wake many threads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8214271&quot;&gt;&lt;strike&gt;JDK-8214271&lt;/strike&gt;&lt;/a&gt; (&amp;quot;Fast primitive to wake many threads&amp;quot;) added the WaitBarrier to serve on that path. Before that, in JDK 11, the performance is okay. This makes it a regression between JDK 11 and JDK 17.&lt;br/&gt;
&lt;br/&gt;
WaitBarrier has two implementations: one for Linux that uses futex-es, and another generic one that uses semaphores. For implementation reasons, the generic version has to wait for all threads to leave the barrier before it unblocks from disarm(). This means that all threads that are currently blocked for safepoint need to roll out of wait() before we unblock from safepoint! Which effectively runs into the same problem as TTSP, only worse: all those threads are blocked, need to be woken up, scheduled, etc.&lt;br/&gt;
&lt;br/&gt;
This is not what Linux futex-based implementation does: it just notifies the futex, and leaves.&lt;br/&gt;
&lt;br/&gt;
While unblocked threads start to execute, and so we are not completely blocked waiting for disarm(), this definitely:&lt;br/&gt;
&amp;nbsp;a) trips the safepoint timings;&lt;br/&gt;
&amp;nbsp;b) delays any further actions of VMThread;&lt;br/&gt;
&amp;nbsp;c) delays resuming GC from STS, as `Universe::heap()-&amp;gt;safepoint_synchronize_end()` comes after this;&lt;br/&gt;
&amp;nbsp;d) places a limit on the safepoint frequency we can have;&lt;br/&gt;
&amp;nbsp;e) maybe something else I cannot see right away;&lt;br/&gt;
&lt;br/&gt;
I think the intent for the safepoint end code is to be fast to avoid any of these surprises. To that end, I think we can improve GenericWaitBarrier to avoid most of the performance cliff.&lt;br/&gt;
&lt;br/&gt;
WIP: &lt;a href=&quot;https://github.com/openjdk/jdk/pull/16404&quot;&gt;https://github.com/openjdk/jdk/pull/16404&lt;/a&gt;</description>
                <environment></environment>
        <key id="5113398">JDK-8318986</key>
            <summary>Improve GenericWaitBarrier performance</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>perf-regression</label>
                            <label>sync</label>
                    </labels>
                <created>Fri, 27 Oct 2023 08:12:12 -0700</created>
                <updated>Thu, 30 May 2024 00:38:38 -0700</updated>
                            <resolved>Wed, 22 Nov 2023 09:57:26 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14664842" author="shade" created="Fri, 12 Apr 2024 00:34:56 -0700"  >Would you mind approving for JDK 21u then?</comment>
                            <comment id="14664268" author="shade" created="Wed, 10 Apr 2024 00:02:06 -0700"  >This plan looks fine to me, thanks.</comment>
                            <comment id="14664265" author="goetz" created="Tue, 9 Apr 2024 23:59:03 -0700"  >Yes, i mean to have the change in 21 in July, and in 17 in October.</comment>
                            <comment id="14664261" author="shade" created="Tue, 9 Apr 2024 23:55:24 -0700"  >That&amp;#39;s fine. When you say &amp;quot;one release after 21&amp;quot;, does that mean we want to release it in 21.0.4 (July), or something else?</comment>
                            <comment id="14664255" author="goetz" created="Tue, 9 Apr 2024 23:44:29 -0700"  >[17u]&lt;br/&gt;
[~shade], I would like to postpone this to the October update, to be one release after 21.</comment>
                            <comment id="14658137" author="roboduke" created="Mon, 18 Mar 2024 09:04:28 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2041&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2041&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-11 17:39:49 +0000</comment>
                            <comment id="14658136" author="roboduke" created="Mon, 18 Mar 2024 09:02:24 -0700"  >[jdk17u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to drastically improve safepoint performance under heavy load, fixing regression between JDK 11 and JDK 17. Applies cleanly. There is no bugtail in mainline since integration in Nov 2023. tier{1,2,3} tests pass. Risk is medium, as it touches the common code path for non-Linux platforms, but it is also frequently exercised, and thus a breakage would manifest often.</comment>
                            <comment id="14653511" author="roboduke" created="Thu, 29 Feb 2024 05:13:56 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to drastically improve safepoint performance under heavy load, fixing regression between JDK 11 and JDK 17. Applies cleanly. There is no bugtail in mainline since integration in Nov 2023. All tests pass. Risk is medium, as it touches the common code path for non-Linux platforms, but it is also frequently exercised, and thus a breakage would manifest often.</comment>
                            <comment id="14645906" author="roboduke" created="Thu, 1 Feb 2024 00:25:08 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/70&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/70&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-19 13:09:39 +0000</comment>
                            <comment id="14628496" author="dukebot" created="Wed, 22 Nov 2023 09:57:25 -0800"  >Changeset: 30462f9d&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-22 17:55:17 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/30462f9da40d3a7ec18fcf46e2154fabb5fd4753&quot;&gt;https://git.openjdk.org/jdk/commit/30462f9da40d3a7ec18fcf46e2154fabb5fd4753&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14623123" author="roboduke" created="Wed, 1 Nov 2023 16:11:25 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16404&quot;&gt;https://git.openjdk.org/jdk/pull/16404&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-27 15:40:11 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5127354">JDK-8330642</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5130660">JDK-8333244</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4976833">JDK-8214271</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33ngj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>