<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:57:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8287134] HttpURLConnection chunked streaming mode doesn&apos;t enforce specified size</title>
                <link>https://bugs.openjdk.org/browse/JDK-8287134</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
java 17&lt;br/&gt;
windows 10&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
[chunkedStreamingMode](&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/HttpURLConnection.html#setChunkedStreamingMode(int)&quot;&gt;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/HttpURLConnection.html#setChunkedStreamingMode(int)&lt;/a&gt;) simply enables chunk streaming but it doesn&amp;#39;t enforce the specified size on the chunks transmitted. It allows chunks of any size to be transmitted regardless of this value and it doesn&amp;#39;t divide the data into multiple chunks if it exceeds this value. We have to do it manually&lt;br/&gt;
&lt;br/&gt;
This method should divide the data in an write() call into chunks automatically without the user manually calculating the size of each chunk but it doesn&amp;#39;t.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
1) Create an simple server to print the chunks received from the client&lt;br/&gt;
&lt;br/&gt;
2) Create an HttpURLConnection to transfer chunks of size greater than the specified value&lt;br/&gt;
&lt;br/&gt;
3)Observe output on server end. chunk sizes can be of any length irrespective of the length specified in the client method&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
Upon transmitting 15 bytes of data and with setChunkedStreamingMode(5) the URL connection should transmit 3 chunks each of size 5 bytes and the last 0 chunk as follows. Output is viewed on the server side&lt;br/&gt;
&lt;br/&gt;
POST /Test.txt HTTP/1.1&lt;br/&gt;
User-Agent: Java/17.0.2&lt;br/&gt;
Host: localhost:3000&lt;br/&gt;
Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&lt;br/&gt;
Connection: keep-alive&lt;br/&gt;
Content-type: application/x-www-form-urlencoded&lt;br/&gt;
Transfer-Encoding: chunked&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
=========&lt;br/&gt;
5&lt;br/&gt;
01234&lt;br/&gt;
&lt;br/&gt;
=========&lt;br/&gt;
5&lt;br/&gt;
56789&lt;br/&gt;
&lt;br/&gt;
=========&lt;br/&gt;
5&lt;br/&gt;
ABCDE&lt;br/&gt;
&lt;br/&gt;
=========&lt;br/&gt;
0&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ACTUAL -&lt;br/&gt;
Full 20 bytes is transmitted as one chunk&lt;br/&gt;
&lt;br/&gt;
POST /Test.txt HTTP/1.1&lt;br/&gt;
User-Agent: Java/17.0.2&lt;br/&gt;
Host: localhost:3000&lt;br/&gt;
Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&lt;br/&gt;
Connection: keep-alive&lt;br/&gt;
Content-type: application/x-www-form-urlencoded&lt;br/&gt;
Transfer-Encoding: chunked&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
=========&lt;br/&gt;
f&lt;br/&gt;
0123456789ABCDE&lt;br/&gt;
&lt;br/&gt;
==========&lt;br/&gt;
0&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
Run server in an seperate JVM&lt;br/&gt;
&lt;br/&gt;
class Server&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;public static void main(String[] args)throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try(ServerSocket server=new ServerSocket(3000))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;try(Socket client=server.accept())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try(InputStream input=client.getInputStream())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int length;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[] data=new byte[6000];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while((length=input.read(data))&amp;gt;0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(new String(data,0,length));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;=========&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;} &lt;br/&gt;
&amp;nbsp;&amp;nbsp;} &lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Run client in an seperate JVM&lt;br/&gt;
&lt;br/&gt;
public class Chunked&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;public static void main(String[] args) throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpURLConnection con=(HttpURLConnection)new URL(&amp;quot;&lt;a href=&quot;http://localhost:3000/Test.txt&quot;&gt;http://localhost:3000/Test.txt&lt;/a&gt;&amp;quot;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.openConnection();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;con.setChunkedStreamingMode(5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;con.setDoOutput(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try(OutputStream output=con.getOutputStream())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write(&amp;quot;0123456789ABCDE&amp;quot;.getBytes());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.flush();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} &lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
in the client we need to manually divide the data our self into equal sized chunks.  &lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5075374">JDK-8287134</key>
            <summary>HttpURLConnection chunked streaming mode doesn&apos;t enforce specified size</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ccleary">Conor Cleary</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcsaw</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Sat, 21 May 2022 08:58:25 -0700</created>
                <updated>Tue, 8 Aug 2023 14:38:16 -0700</updated>
                            <resolved>Thu, 26 Jan 2023 00:36:59 -0800</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>18</version>
                    <version>19</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14554610" author="dukebot" created="Thu, 26 Jan 2023 00:36:58 -0800"  >Changeset: 48152ef6&lt;br/&gt;
Author:    Conor Cleary &amp;lt;&lt;a href=&apos;mailto:ccleary@openjdk.org&apos;&gt;ccleary@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-26 08:35:07 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/48152ef66f2466f8c80499325a716de0cb45d8ef&quot;&gt;https://git.openjdk.org/jdk/commit/48152ef66f2466f8c80499325a716de0cb45d8ef&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14553415" author="roboduke" created="Mon, 23 Jan 2023 01:38:55 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12137&quot;&gt;https://git.openjdk.org/jdk/pull/12137&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-23 09:04:58 +0000</comment>
                            <comment id="14552302" author="ccleary" created="Wed, 18 Jan 2023 02:55:49 -0800"  >Possible update to the documentation could be...&lt;br/&gt;
&lt;br/&gt;
&amp;quot;The number of bytes to be written on the wire in each chunk. This includes a chunk size header (1 byte), two CRLF&amp;#39;s (4 bytes) and a minimum payload length of 1 byte. If chunklen is less than or equal to 5, a default value will be used.&amp;quot;</comment>
                            <comment id="14552300" author="ccleary" created="Wed, 18 Jan 2023 02:48:09 -0800"  >So from my understanding and through a little bit of experimentation with submitter code, what Daniel and Daniel have said is correct. When the submitter specifies 5 for the chunk size, that 5 is concerned with the number of bytes sent over the socket in a single write as [~djelinski] pointed out. Seeing as a minimal HTTP chunk also takes up 6 bytes, a value lower than 6 is not usable as previously mentioned. This results in the behavior reported by the submitter. Passing a value of 10 for the chunk length to setChunkedStreamingMode results in the expected behaviour of 5 byte payload lengths.&lt;br/&gt;
&lt;br/&gt;
When setChunkedstreamingMode is set to 5, a new ChunkedOutputStream is created where there is logic to use the deafult chunk size value of 4096 instead. So, in conclusion, this comment is just to supplement the explanations previously given. I will update the API documentation accordingly and create a CSR for that when required.&lt;br/&gt;
&lt;br/&gt;
Thanks to all for pointing me down the right path!</comment>
                            <comment id="14551684" author="ccleary" created="Tue, 17 Jan 2023 07:33:05 -0800"  >Digging up old bugs assigned to me. Will review this presently and create a CSR as needed. Thanks for the previous analysis [~djelinski]. Will update here when required</comment>
                            <comment id="14542200" author="dfuchs" created="Fri, 2 Dec 2022 03:42:51 -0800"  >Good analysis [~djelinski] - in that case I would advocate for changing the API documentation to document the actual behavior. This would require a CSR.</comment>
                            <comment id="14542194" author="JIRAUSER19825" created="Fri, 2 Dec 2022 03:22:24 -0800"  >The problem is that the behavior of setChunkedStreamingMode does not match its documentation. It treats the chunklen parameter as the number of bytes sent over the socket in a single write. If you want to send 5 byte chunks, you need to use setChunkedStreamingMode(10).&lt;br/&gt;
&lt;br/&gt;
The documentation states that:&lt;br/&gt;
chunklen - The number of bytes to write in each chunk. If chunklen is less than or equal to zero, a default value will be used.&lt;br/&gt;
&lt;br/&gt;
In fact the method is using the default chunk size when chunklen is less than or equal to 5. A minimal HTTP chunk of one byte takes up 6 bytes (1 byte for chunk size, 4 bytes for 2 newlines, 1 byte payload), and values lower than 6 are not usable.</comment>
                            <comment id="14497610" author="dfuchs" created="Mon, 23 May 2022 02:36:57 -0700"  >This is related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6720866&quot; title=&quot;Slow performance using HttpURLConnection for upload&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6720866&quot;&gt;&lt;strike&gt;JDK-6720866&lt;/strike&gt;&lt;/a&gt;. The implementation of ChunkedOutputStream will use a default chunk size if the chunkLength specified is less than the number of bytes needed to encode the chunk header (two CRLF + the chunk size in hexa). This seems wrong. However the crux of the issue seems to be about misaligned  buffering of chunks which can lead to performance issues.&lt;br/&gt;
&lt;br/&gt;
Understanding the issue reported by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6720866&quot; title=&quot;Slow performance using HttpURLConnection for upload&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6720866&quot;&gt;&lt;strike&gt;JDK-6720866&lt;/strike&gt;&lt;/a&gt; and the corresponding fix is a pre-requisite to fixing &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287134&quot; title=&quot;HttpURLConnection chunked streaming mode doesn&amp;#39;t enforce specified size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287134&quot;&gt;&lt;strike&gt;JDK-8287134&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14497563" author="tongwan" created="Sun, 22 May 2022 23:19:21 -0700"  >The observations on Windows 10:&lt;br/&gt;
JDK 8: Failed, full 20 bytes is transmitted as one chunk&lt;br/&gt;
JDK 11: Failed.&lt;br/&gt;
JDK 17: Failed.&lt;br/&gt;
JDK 18: Failed.&lt;br/&gt;
JDK 19ea+19: Failed.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5092180">JDK-8300848</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="4221583">JDK-6960404</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4221376">JDK-6720866</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="99043" name="Chunked.java" size="560" author="tongwan" created="Sun, 22 May 2022 23:20:24 -0700"/>
                            <attachment id="99044" name="Server.java" size="756" author="tongwan" created="Sun, 22 May 2022 23:20:24 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2x76r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="193"><![CDATA[java.net]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>