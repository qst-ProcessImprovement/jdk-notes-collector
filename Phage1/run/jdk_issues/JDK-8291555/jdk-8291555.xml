<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:03:20 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8291555] Implement alternative fast-locking scheme</title>
                <link>https://bugs.openjdk.org/browse/JDK-8291555</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Current stack-locking overloads object headers with pointers into the stack. This makes it difficult to get hold of the actual mark word, because locking can change the header at any time.</description>
                <environment></environment>
        <key id="5080595">JDK-8291555</key>
            <summary>Implement alternative fast-locking scheme</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rkennke">Roman Kennke</assignee>
                                    <reporter username="rkennke">Roman Kennke</reporter>
                        <labels>
                            <label>LM_LIGHTWEIGHT</label>
                            <label>sync</label>
                    </labels>
                <created>Fri, 29 Jul 2022 04:00:14 -0700</created>
                <updated>Thu, 18 Jan 2024 00:58:58 -0800</updated>
                            <resolved>Mon, 8 May 2023 10:54:45 -0700</resolved>
                                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>16</watches>
                                                                                                                <comments>
                            <comment id="14580491" author="mbaesken" created="Wed, 10 May 2023 04:02:18 -0700"  >[~rkennke] we run with -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:LockingMode=0 .</comment>
                            <comment id="14580489" author="stuefe" created="Wed, 10 May 2023 03:57:36 -0700"  >Ah, I think I understand whats happening. I opened &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307810&quot;&gt;https://bugs.openjdk.org/browse/JDK-8307810&lt;/a&gt;.</comment>
                            <comment id="14580486" author="stuefe" created="Wed, 10 May 2023 03:34:08 -0700"  >[~mbaesken] Could you please open a new issue, link it to this issue, and append the hs-err file? Thanks!</comment>
                            <comment id="14580483" author="rkennke" created="Wed, 10 May 2023 02:48:38 -0700"  >[~mbaesken] possibly. is it running with LockingMode=2 ? I don&amp;#39;t have access to a ppc64 machine, so I can&amp;#39;t narrow it down.</comment>
                            <comment id="14580472" author="mbaesken" created="Wed, 10 May 2023 01:47:48 -0700"  >On ppc64 platforms when running with fastdebug binaries we run now into the assertion&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/nb/linuxppc64le/jdk/src/hotspot/share/runtime/synchronizer.cpp:1518), pid=122670, tid=122673&lt;br/&gt;
#  assert(mark.is_neutral()) failed: invariant: header=0x00007a414044dba8&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
(in the test runtime/CommandLine/OptionsValidation/TestOptionsWithRanges.java#id3 )&lt;br/&gt;
Is this related ?</comment>
                            <comment id="14579852" author="dukebot" created="Mon, 8 May 2023 10:54:43 -0700"  >Changeset: 7f6358a8&lt;br/&gt;
Author:    Roman Kennke &amp;lt;&lt;a href=&apos;mailto:rkennke@openjdk.org&apos;&gt;rkennke@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-08 17:51:39 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/7f6358a8b53a35a87c9413c68f8fe6c5fdec0caf&quot;&gt;https://git.openjdk.org/jdk/commit/7f6358a8b53a35a87c9413c68f8fe6c5fdec0caf&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14579813" author="dcubed" created="Mon, 8 May 2023 08:21:21 -0700"  >&amp;gt; &amp;gt; - 1 failed test task:&lt;br/&gt;
&amp;gt; &amp;gt; - the test task failed due to timeout; a single test, java/foreign/trivial/TestTrivialUpcall.java,&lt;br/&gt;
&amp;gt; &amp;gt; timed out in that run and was the last test result reported before a ~2.5 gap before the&lt;br/&gt;
&amp;gt; &amp;gt; test task itself timed out.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Is this something we need to worry about and investigate? &lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think this failure is related to the fast-locking changes so no I don&amp;#39;t think&lt;br/&gt;
you need to investigate. Obviously it&amp;#39;s on my radar though...&lt;br/&gt;
</comment>
                            <comment id="14579605" author="rkennke" created="Sun, 7 May 2023 09:17:59 -0700"  >&amp;gt; - 1 failed test task:&lt;br/&gt;
&amp;gt;   - the test task failed due to timeout; a single test, java/foreign/trivial/TestTrivialUpcall.java,&lt;br/&gt;
&amp;gt;     timed out in that run and was the last test result reported before a ~2.5 gap before the&lt;br/&gt;
&amp;gt;     test task itself timed out.&lt;br/&gt;
&lt;br/&gt;
Is this something we need to worry about and investigate?</comment>
                            <comment id="14579494" author="dcubed" created="Fri, 5 May 2023 13:19:47 -0700"  >Mach5 testing of v77 with default stack-locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- no test failures&lt;br/&gt;
- the open/test/jdk/:jdk_desktop_part1 test task failed due to a hangup signal, but there are no signs of any test failures in that run&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8:&lt;br/&gt;
- 5 known, unrelated test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- runtime/stack/4732557/b4732557.java#id0 failed 4x due to JDK-8307570&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- applications/javafuzzer/BigTest.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307131&quot; title=&quot;C2: assert(false) failed: malformed control flow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8307131&quot;&gt;&lt;strike&gt;JDK-8307131&lt;/strike&gt;&lt;/a&gt;</comment>
                            <comment id="14579492" author="dcubed" created="Fri, 5 May 2023 13:18:04 -0700"  >Mach5 testing of v77 + forced-fast-locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- no test failures&lt;br/&gt;
- the open/test/jdk/:jdk_desktop_part1 test task failed due to a hangup signal, but there are no signs of any test failures in that run&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8:&lt;br/&gt;
- 4 known, unrelated test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- runtime/stack/4732557/b4732557.java#id0 failed due to JDK-8307570&lt;br/&gt;
- 1 failed test task:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- the test task failed due to timeout; a single test, java/foreign/trivial/TestTrivialUpcall.java,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;timed out in that run and was the last test result reported before a ~2.5 gap before the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;test task itself timed out. </comment>
                            <comment id="14579393" author="dcubed" created="Fri, 5 May 2023 07:32:38 -0700"  >Mach5 testing of v70 with default stack-locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no test failures </comment>
                            <comment id="14579390" author="dcubed" created="Fri, 5 May 2023 07:28:46 -0700"  >Mach5 testing of v70 + forced-fast-locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- 1 unknown, probably unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- compiler/c2/Test6851282.java failed with:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S92340/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d11128e4-39be-4b94-8276-92a557ca6071/runs/994df091-2009-4baf-b5b2-01944f370f3b/workspace/open/src/hotspot/share/opto/type.hpp:1203), pid=11522, tid=30467&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# assert(!is_loaded()) failed: only for unloaded types&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- crashing thread&amp;#39;s stack trace:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--------------- T H R E A D ---------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Current thread (0x000000010180ac10): JavaThread &amp;quot;C2 CompilerThread2&amp;quot; daemon [_thread_in_native, id=30467, stack(0x0000000170c60000,0x0000000170e63000)]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Current CompileTask:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C2: 104 107 java.util.ArrayList::add (23 bytes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Stack: [0x0000000170c60000,0x0000000170e63000], sp=0x0000000170e5eda0, free space=2043k&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x12b0e64] VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x4bc (type.hpp:1203)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x12b1800] VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x670954] report_vm_error(char const*, int, char const*, char const*, ...)+0x6c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x8c7800] GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool)+0x41c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xd290b4] LibraryCallKit::inline_array_copyOf(bool)+0x4c0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xd1636c] LibraryIntrinsic::generate(JVMState*)+0x164&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x726aac] Parse::do_call()+0xc78&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfb3dd4] Parse::do_one_bytecode()+0x280&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfa0e70] Parse::do_one_block()+0x4d8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9f03c] Parse::do_all_blocks()+0x5e0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9b188] Parse::Parse(JVMState*, ciMethod*, float)+0xbd4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x49a7e0] ParseGenerator::generate(JVMState*)+0x18c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x726aac] Parse::do_call()+0xc78&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfb3dd4] Parse::do_one_bytecode()+0x280&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfa0e70] Parse::do_one_block()+0x4d8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9f03c] Parse::do_all_blocks()+0x5e0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9b188] Parse::Parse(JVMState*, ciMethod*, float)+0xbd4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x49a7e0] ParseGenerator::generate(JVMState*)+0x18c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x49ecb0] PredictedCallGenerator::generate(JVMState*)+0x234&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x726aac] Parse::do_call()+0xc78&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfb3dd4] Parse::do_one_bytecode()+0x280&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfa0e70] Parse::do_one_block()+0x4d8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9f03c] Parse::do_all_blocks()+0x5e0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9b188] Parse::Parse(JVMState*, ciMethod*, float)+0xbd4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x49a7e0] ParseGenerator::generate(JVMState*)+0x18c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x49ecb0] PredictedCallGenerator::generate(JVMState*)+0x234&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x726aac] Parse::do_call()+0xc78&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfb3dd4] Parse::do_one_bytecode()+0x280&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xfa0e70] Parse::do_one_block()+0x4d8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9f03c] Parse::do_all_blocks()+0x5e0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf9b188] Parse::Parse(JVMState*, ciMethod*, float)+0xbd4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x49a7e0] ParseGenerator::generate(JVMState*)+0x18c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x5d1188] Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x11cc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x498d88] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x190&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x5f1784] CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa0c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x5f0ae8] CompileBroker::compiler_thread_loop()+0x3c8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x9c0b50] JavaThread::thread_main_inner()+0x2cc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0x11ea708] Thread::call_run()+0x134&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.dylib+0xf6b7fc] thread_native_entry(Thread*)+0x160&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C [libsystem_pthread.dylib+0x706c] _pthread_start+0x94&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- 1 unknown, related test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java failed with:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S90932/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1bb31343-e93d-4142-aafb-122a17ceeab1/runs/8ccc3133-4777-4168-ac0f-33c872850ad4/workspace/open/src/hotspot/share/runtime/lockStack.cpp:68), pid=2035168, tid=2035198&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# assert(_base[i] != nullptr) failed: no zapped before top&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- crashing thread&amp;#39;s stack trace:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--------------- T H R E A D ---------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Current thread (0x0000fffc682d51e0): JavaThread &amp;quot;MainThread&amp;quot; [_thread_in_vm, id=2035198, stack(0x0000fff9f39f0000,0x0000fff9f3bf0000)] _threads_hazard_ptr=0x0000fff9e80ab650, _nested_threads_hazard_ptr_cnt=0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Stack: [0x0000fff9f39f0000,0x0000fff9f3bf0000], sp=0x0000fff9f3bed8f0, free space=2038k&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x10c2a60] LockStack::verify(char const*) const+0x3cc (lockStack.cpp:68)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x15b8d74] Threads::owning_thread_from_object(ThreadsList*, oop)+0x104 (lockStack.inline.hpp:102)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x15b91c8] Threads::owning_thread_from_monitor(ThreadsList*, ObjectMonitor*)+0xa8 (threads.cpp:1224)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x1550f3c] ObjectSynchronizer::get_lock_owner(ThreadsList*, Handle)+0x11c (synchronizer.cpp:1087)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x15af178] ThreadSnapshot::initialize(ThreadsList*, JavaThread*)+0x2b8 (threadService.cpp:942)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x15af904] ThreadDumpResult::add_thread_snapshot(JavaThread*)+0x84 (threadService.cpp:567)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x11a705c] jmm_GetThreadInfo+0x458 (management.cpp:1136)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j sun.management.ThreadImpl.getThreadInfo1([JI[Ljava/lang/management/ThreadInfo;)V+0 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j sun.management.ThreadImpl.getThreadInfo([JI)[Ljava/lang/management/ThreadInfo;+60 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j sun.management.ThreadImpl.getThreadInfo(JI)Ljava/lang/management/ThreadInfo;+13 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j GetLockOwnerName.doWork(ILjava/io/PrintStream;)I+426&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j GetLockOwnerName.run(ILjava/io/PrintStream;)I+9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j GetLockOwnerName.main([Ljava/lang/String;)V+126&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.invoke.LambdaForm$DMH+0x0000000801002000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.invoke.LambdaForm$MH+0x0000000801003400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.Thread.run()V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v ~StubRoutines::call_stub 0x0000fffc5818016c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0xd32184] JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x434 (javaCalls.cpp:415)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0xd32698] JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x248 (javaCalls.cpp:329)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0xd32884] JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64 (javaCalls.cpp:191)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0xe7c964] thread_entry(JavaThread*, JavaThread*)+0xa0 (jvm.cpp:2919)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0xd65988] JavaThread::thread_main_inner()+0x184 (javaThread.cpp:719)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x15a1f80] Thread::call_run()+0xac (thread.cpp:215)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;V [libjvm.so+0x12fcce8] thread_native_entry(Thread*)+0x134 (os_linux.cpp:740)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C [libpthread.so.0+0x7908] start_thread+0x188&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j sun.management.ThreadImpl.getThreadInfo1([JI[Ljava/lang/management/ThreadInfo;)V+0 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j sun.management.ThreadImpl.getThreadInfo([JI)[Ljava/lang/management/ThreadInfo;+60 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j sun.management.ThreadImpl.getThreadInfo(JI)Ljava/lang/management/ThreadInfo;+13 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j GetLockOwnerName.doWork(ILjava/io/PrintStream;)I+426&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j GetLockOwnerName.run(ILjava/io/PrintStream;)I+9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j GetLockOwnerName.main([Ljava/lang/String;)V+126&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.invoke.LambdaForm$DMH+0x0000000801002000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.invoke.LambdaForm$MH+0x0000000801003400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j java.lang.Thread.run()V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v ~StubRoutines::call_stub 0x0000fffc5818016c </comment>
                            <comment id="14579314" author="roboduke" created="Fri, 5 May 2023 01:48:53 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/10907&quot;&gt;https://git.openjdk.org/jdk/pull/10907&lt;/a&gt;&lt;br/&gt;
Date: 2022-10-28 20:17:37 +0000</comment>
                            <comment id="14579239" author="dcubed" created="Thu, 4 May 2023 15:10:37 -0700"  >The following test fails with v70 bits with forced-fast-locking:&lt;br/&gt;
&lt;br/&gt;
serviceability/monitoring/ThreadInfo/GetLockOwnerName/GetLockOwnerName.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(6/301)----------&lt;br/&gt;
command: main -agentlib:GetLockOwnerName GetLockOwnerName&lt;br/&gt;
reason: User specified action: run main/othervm/native -agentlib:GetLockOwnerName GetLockOwnerName &lt;br/&gt;
started: Thu May 04 22:03:20 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
finished: Thu May 04 22:03:36 UTC 2023&lt;br/&gt;
elapsed time (seconds): 16.339&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(25/1943)----------&lt;br/&gt;
&lt;br/&gt;
Agent_OnLoad started&lt;br/&gt;
Agent_OnLoad finished&lt;br/&gt;
&lt;br/&gt;
Loaded library: GetLockOwnerName&lt;br/&gt;
About to execute for 60 seconds.&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S90932/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1bb31343-e93d-4142-aafb-122a17ceeab1/runs/8ccc3133-4777-4168-ac0f-33c872850ad4/workspace/open/src/hotspot/share/runtime/lockStack.cpp:68), pid=2035168, tid=2035198&lt;br/&gt;
#  assert(_base[i] != nullptr) failed: no zapped before top&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-05-04-1946475.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-05-04-1946475.daniel.daugherty.8291555forjdk21.git, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x10c2a60]  LockStack::verify(char const*) const+0x3cc&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S90971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/32b56a50-b3e5-4ab1-b6bf-3b04c9f9013b/runs/ea14ff3e-cd2d-4d39-8df8-e6931475b2d1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/core.2035168)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S90971/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/32b56a50-b3e5-4ab1-b6bf-3b04c9f9013b/runs/ea14ff3e-cd2d-4d39-8df8-e6931475b2d1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/1/hs_err_pid2035168.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(38/7307)*----------&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffc682d51e0):  JavaThread &amp;quot;MainThread&amp;quot; [_thread_in_vm, id=2035198, stack(0x0000fff9f39f0000,0x0000fff9f3bf0000)] _threads_hazard_ptr=0x0000fff9e80ab650, _nested_threads_hazard_ptr_cnt=0&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fff9f39f0000,0x0000fff9f3bf0000],  sp=0x0000fff9f3bed8f0,  free space=2038k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x10c2a60]  LockStack::verify(char const*) const+0x3cc  (lockStack.cpp:68)&lt;br/&gt;
V  [libjvm.so+0x15b8d74]  Threads::owning_thread_from_object(ThreadsList*, oop)+0x104  (lockStack.inline.hpp:102)&lt;br/&gt;
V  [libjvm.so+0x15b91c8]  Threads::owning_thread_from_monitor(ThreadsList*, ObjectMonitor*)+0xa8  (threads.cpp:1224)&lt;br/&gt;
V  [libjvm.so+0x1550f3c]  ObjectSynchronizer::get_lock_owner(ThreadsList*, Handle)+0x11c  (synchronizer.cpp:1087)&lt;br/&gt;
V  [libjvm.so+0x15af178]  ThreadSnapshot::initialize(ThreadsList*, JavaThread*)+0x2b8  (threadService.cpp:942)&lt;br/&gt;
V  [libjvm.so+0x15af904]  ThreadDumpResult::add_thread_snapshot(JavaThread*)+0x84  (threadService.cpp:567)&lt;br/&gt;
V  [libjvm.so+0x11a705c]  jmm_GetThreadInfo+0x458  (management.cpp:1136)&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo1([JI[Ljava/lang/management/ThreadInfo;)V+0 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo([JI)[Ljava/lang/management/ThreadInfo;+60 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo(JI)Ljava/lang/management/ThreadInfo;+13 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
j  GetLockOwnerName.doWork(ILjava/io/PrintStream;)I+426&lt;br/&gt;
j  GetLockOwnerName.run(ILjava/io/PrintStream;)I+9&lt;br/&gt;
j  GetLockOwnerName.main([Ljava/lang/String;)V+126&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000801002000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801003400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134&lt;br/&gt;
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffc5818016c&lt;br/&gt;
V  [libjvm.so+0xd32184]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x434  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0xd32698]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x248  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0xd32884]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:191)&lt;br/&gt;
V  [libjvm.so+0xe7c964]  thread_entry(JavaThread*, JavaThread*)+0xa0  (jvm.cpp:2919)&lt;br/&gt;
V  [libjvm.so+0xd65988]  JavaThread::thread_main_inner()+0x184  (javaThread.cpp:719)&lt;br/&gt;
V  [libjvm.so+0x15a1f80]  Thread::call_run()+0xac  (thread.cpp:215)&lt;br/&gt;
V  [libjvm.so+0x12fcce8]  thread_native_entry(Thread*)+0x134  (os_linux.cpp:740)&lt;br/&gt;
C  [libpthread.so.0+0x7908]  start_thread+0x188&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo1([JI[Ljava/lang/management/ThreadInfo;)V+0 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo([JI)[Ljava/lang/management/ThreadInfo;+60 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo(JI)Ljava/lang/management/ThreadInfo;+13 &lt;a href=&apos;mailto:java.management@21-internal&apos;&gt;java.management@21-internal&lt;/a&gt;&lt;br/&gt;
j  GetLockOwnerName.doWork(ILjava/io/PrintStream;)I+426&lt;br/&gt;
j  GetLockOwnerName.run(ILjava/io/PrintStream;)I+9&lt;br/&gt;
j  GetLockOwnerName.main([Ljava/lang/String;)V+126&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000801002000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801003400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  com.sun.javatest.regtest.agent.MainWrapper$MainTask.run()V+134&lt;br/&gt;
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffc5818016c&lt;br/&gt;
&lt;br/&gt;
This failure occurred on linux-aarch64 and the test task&amp;#39;s JVM args are:&lt;br/&gt;
-XX:+CreateCoredumpOnCrash -XX:+UseZGC</comment>
                            <comment id="14579165" author="dcubed" created="Thu, 4 May 2023 11:41:29 -0700"  >Mach5 testing of v66 with default stack-locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no test failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no test failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- 1 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/sa/ClhsdbLongConstant.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8258744&quot; title=&quot;serviceability/sa/TestType.java failed with sun.jvm.hotspot.debugger.win32.coff.COFFException: java.io.FileNotFoundException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8258744&quot;&gt;JDK-8258744&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- 35 known, unrelated client test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- 35 client tests failed due to MACH5-6118 (black screen)&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- no test failures&lt;br/&gt;
- 2 zero build tasks failed&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8:&lt;br/&gt;
- 1 known, unrelated test failure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- applications/javafuzzer/BigTest.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307131&quot; title=&quot;C2: assert(false) failed: malformed control flow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8307131&quot;&gt;&lt;strike&gt;JDK-8307131&lt;/strike&gt;&lt;/a&gt;</comment>
                            <comment id="14577806" author="dcubed" created="Sat, 29 Apr 2023 08:06:15 -0700"  >Mach5 testing of v66 + forced-enable of new lightweight locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- 1 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- jdk/test/lib/process/ProcessToolsStartProcessTest.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8306946&quot; title=&quot;jdk/test/lib/process/ProcessToolsStartProcessTest.java fails with &amp;quot;wrong number of lines in OutputAnalyzer output&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8306946&quot;&gt;&lt;strike&gt;JDK-8306946&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no test failures&lt;br/&gt;
- 1 slowdebug build failure due to an sjavac glitch&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
-no test failures&lt;br/&gt;
- 4 zero build tasks failed&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8:&lt;br/&gt;
- 2 known unrelated test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- java/lang/Thread/virtual/HoldsLock.java#id0 faied due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305919&quot; title=&quot;java/lang/Thread/virtual/HoldsLock.java#id0 failed, ThreadInfo.getLockInfo() return null&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305919&quot;&gt;&lt;strike&gt;JDK-8305919&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vmTestbase/nsk/jvmti/AttachOnDemand/attach020/TestDescription.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287324&quot; title=&quot;vmTestbase/nsk/jvmti/AttachOnDemand/attach020/TestDescription.java times out due to OutOfMemoryError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287324&quot;&gt;JDK-8287324&lt;/a&gt;&lt;br/&gt;
- 1 task failed due to a &amp;quot;health check timed out&amp;quot;. The test suite run itself passed all the tests and the results were uploaded just fined, but I&amp;#39;m guessing the machine went offline right at the tail end of the results recording process. </comment>
                            <comment id="14577688" author="dcubed" created="Fri, 28 Apr 2023 09:05:07 -0700"  >Mach5 testing of v62 + forced-enable of new lightweight locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- no test failures&lt;br/&gt;
- 4 zero build tasks failed</comment>
                            <comment id="14577143" author="dcubed" created="Wed, 26 Apr 2023 13:40:05 -0700"  >Mach5 testing of v61 + forced-enable of new lightweight locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- 1 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- sanity/client/SwingSet/src/EditorPaneDemoTest.java due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8212240&quot; title=&quot;JEditorPane contents are not getting painted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8212240&quot;&gt;JDK-8212240&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- no test failures&lt;br/&gt;
- 4 zero build tasks failed&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6:&lt;br/&gt;
- 1 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- applications/javafuzzer/MediumTest.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303466&quot; title=&quot;C2: failed: malformed control flow. Limit type made precise with MaxL/MinL&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303466&quot;&gt;&lt;strike&gt;JDK-8303466&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8:&lt;br/&gt;
- 14 known, unrelated test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Here&amp;#39;s the distribution of the 14 failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 applications/javafuzzer/BigTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303466&quot; title=&quot;C2: failed: malformed control flow. Limit type made precise with MaxL/MinL&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303466&quot;&gt;&lt;strike&gt;JDK-8303466&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 java/lang/ProcessBuilder/UnblockSignals.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298993&quot; title=&quot;(process) java/lang/ProcessBuilder/UnblockSignals.java fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8298993&quot;&gt;&lt;strike&gt;JDK-8298993&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 java/lang/Thread/virtual/HoldsLock.java#id0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305919&quot; title=&quot;java/lang/Thread/virtual/HoldsLock.java#id0 failed, ThreadInfo.getLockInfo() return null&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305919&quot;&gt;&lt;strike&gt;JDK-8305919&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 vmTestbase/nsk/monitoring/stress/thread/strace002/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 vmTestbase/nsk/monitoring/stress/thread/strace004/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 vmTestbase/nsk/monitoring/stress/thread/strace005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 vmTestbase/nsk/monitoring/stress/thread/strace006/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4 vmTestbase/nsk/monitoring/stress/thread/strace007/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 vmTestbase/nsk/monitoring/stress/thread/strace008/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the vmTestbase/nsk/monitoring/stress/thread/strace* failures are all&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8306006&quot; title=&quot;strace001.java fails due to unknown methods on stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8306006&quot;&gt;&lt;strike&gt;JDK-8306006&lt;/strike&gt;&lt;/a&gt;</comment>
                            <comment id="14572453" author="dcubed" created="Fri, 7 Apr 2023 07:56:23 -0700"  >Mach5 testing of v54 + forced-enable of new lightweight locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- no test failures&lt;br/&gt;
- 4 zero build failures:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6&lt;br/&gt;
- 1 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- applications/javafuzzer/MediumTest.java due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303466&quot; title=&quot;C2: failed: malformed control flow. Limit type made precise with MaxL/MinL&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303466&quot;&gt;&lt;strike&gt;JDK-8303466&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8&lt;br/&gt;
- no failures </comment>
                            <comment id="14572230" author="dcubed" created="Thu, 6 Apr 2023 04:23:33 -0700"  >I applied the following fix to my test repo:&lt;br/&gt;
&lt;br/&gt;
$ git diff&lt;br/&gt;
diff --git a/src/hotspot/share/runtime/synchronizer.cpp b/src/hotspot/share/runtime/synchronizer.cpp&lt;br/&gt;
index bf8afffd693..3c269885f97 100644&lt;br/&gt;
--- a/src/hotspot/share/runtime/synchronizer.cpp&lt;br/&gt;
+++ b/src/hotspot/share/runtime/synchronizer.cpp&lt;br/&gt;
@@ -894,9 +894,11 @@ static inline intptr_t get_next_hash(Thread* current, oop obj) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;return value;&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+// Can be called from non JavaThreads (e.g., VMThread) for FastHashCode&lt;br/&gt;
+// calculations as part of JVM/TI tagging.&lt;br/&gt;
&amp;nbsp;static bool is_lock_owned(Thread* thread, oop obj) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(LockingMode == 2, &amp;quot;only call this with new lightweight locking enabled&amp;quot;);&lt;br/&gt;
- return JavaThread::cast(thread)-&amp;gt;lock_stack().contains(obj);&lt;br/&gt;
+ return thread-&amp;gt;is_Java_thread() ? JavaThread::cast(thread)-&amp;gt;lock_stack().contains(obj) : false;&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;intptr_t ObjectSynchronizer::FastHashCode(Thread* current, oop obj) {&lt;br/&gt;
&lt;br/&gt;
and reran Mach5 Tier4 and Mach5 Tier5 and there was one known, unrelated failure&lt;br/&gt;
in Tier5.</comment>
                            <comment id="14572042" author="dcubed" created="Wed, 5 Apr 2023 09:37:00 -0700"  >Mach5 testing of v52 + forced-enable of new lightweight locking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no test failures&lt;br/&gt;
- 1 slowdebug build task failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- build machine ran out of disk space&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- 129 test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- They are all likely due to:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S40935/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b154597d-2ba7-420d-81c1-ef13f408c137/runs/d52e181d-f011-47c8-a35f-30fcbba5c164/workspace/open/src/hotspot/share/runtime/javaThread.hpp:983), pid=1112738, tid=1112747&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# assert(t-&amp;gt;is_Java_thread()) failed: incorrect cast to JavaThread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-04-04-2141101.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-04-04-2141101.daniel.daugherty.8291555forjdk21.git, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# Problematic frame:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# V [libjvm.so+0x155baa4] is_lock_owned(Thread*, oop)+0x254&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- 769 test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- These are all also likely due to:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#  Internal Error (c:\sb\prod\1680644703\workspace\open\src\hotspot\share\runtime/javaThread.hpp:983), pid=69692, tid=43496&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#  assert(t-&amp;gt;is_Java_thread()) failed: incorrect cast to JavaThread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-04-04-2141101.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-04-04-2141101.daniel.daugherty.8291555forjdk21.git, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)</comment>
                            <comment id="14571079" author="dcubed" created="Fri, 31 Mar 2023 14:27:51 -0700"  >The following test failed in my Mach5 Tier3 testing on linux-aarch64-debug:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/jit/graph/cgt11.java&lt;br/&gt;
&lt;br/&gt;
The test task&amp;#39;s JVM args are:&lt;br/&gt;
-XX:+CreateCoredumpOnCrash -XX:+UseSerialGC&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(7/522)----------&lt;br/&gt;
command: main jit.graph.CGT -path /opt/mach5/mesos/work_dir/jib-master/install/2023-03-31-1908037.daniel.daugherty.8291555_for_jdk21.git/src.full/open/test/hotspot/jtreg/vmTestbase/jit/graph/data/main.data -numTestClass 12 -randomLoop 40 -staticLoop 40&lt;br/&gt;
reason: User specified action: run main jit.graph.CGT -path ${test.src}/data/main.data -numTestClass 12 -randomLoop 40 -staticLoop 40 &lt;br/&gt;
started: Fri Mar 31 21:01:30 UTC 2023&lt;br/&gt;
Mode: agentvm&lt;br/&gt;
Agent id: 7&lt;br/&gt;
finished: Fri Mar 31 21:01:46 UTC 2023&lt;br/&gt;
elapsed time (seconds): 16.356&lt;br/&gt;
----------configuration:(16/2500)----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
----------stdout:(19/1882)----------&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S30407/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b94a7623-5f98-46f3-8e2c-08444e95afa4/runs/a5754c45-3d7a-46fa-ba4b-c52efcf6ca3b/workspace/open/src/hotspot/share/runtime/lockStack.cpp:78), pid=1731612, tid=1731617&lt;br/&gt;
#  assert((_top &amp;lt; end_offset())) failed: lockstack overflow: _top 1704 end_offset 1704&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-31-1908037.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-31-1908037.daniel.daugherty.8291555forjdk21.git, mixed mode, tiered, compressed oops, compressed class ptrs, serial gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x10cfa0c]  LockStack::verify_no_thread(char const*) const+0x288&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S30290/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2f2d4f6b-101d-49c1-8b0d-8da8be1d37f9/runs/5cc0b4c6-d927-4532-bf48-c30b85e51249/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/scratch/1/core.1731612)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S30290/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2f2d4f6b-101d-49c1-8b0d-8da8be1d37f9/runs/5cc0b4c6-d927-4532-bf48-c30b85e51249/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_compiler/scratch/1/hs_err_pid1731612.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
result: Error. Agent communication error: java.io.EOFException; check console log for any additional details&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffd281b43a0):  VMThread &amp;quot;VM Thread&amp;quot; [stack: 0x0000fffd0f750000,0x0000fffd0f950000] [id=1731617]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffd0f750000,0x0000fffd0f950000],  sp=0x0000fffd0f94d9c0,  free space=2038k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x10cfa0c]  LockStack::verify_no_thread(char const*) const+0x288  (lockStack.cpp:78)&lt;br/&gt;
V  [libjvm.so+0xd7fb04]  JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)+0x1e0  (lockStack.inline.hpp:124)&lt;br/&gt;
V  [libjvm.so+0x15ad384]  Thread::oops_do(OopClosure*, CodeBlobClosure*)+0x90  (thread.cpp:438)&lt;br/&gt;
V  [libjvm.so+0x15c50b0]  Threads::oops_do(OopClosure*, CodeBlobClosure*)+0x90  (threads.cpp:1280)&lt;br/&gt;
V  [libjvm.so+0xc2ffd0]  GenCollectedHeap::process_roots(GenCollectedHeap::ScanningOption, OopClosure*, CLDClosure*, CLDClosure*, CodeBlobToOopClosure*)+0xec  (genCollectedHeap.cpp:740)&lt;br/&gt;
V  [libjvm.so+0x1450788]  SerialHeap::young_process_roots(OopClosure*, OopIterateClosure*, CLDClosure*)+0x44  (serialHeap.cpp:100)&lt;br/&gt;
V  [libjvm.so+0x974d6c]  DefNewGeneration::collect(bool, bool, unsigned long, bool)+0x338  (defNewGeneration.cpp:778)&lt;br/&gt;
V  [libjvm.so+0xc2fc0c]  GenCollectedHeap::collect_generation(Generation*, bool, unsigned long, bool, bool, bool)+0x26c  (genCollectedHeap.cpp:456)&lt;br/&gt;
V  [libjvm.so+0xc30bc8]  GenCollectedHeap::do_collection(bool, bool, unsigned long, bool, GenCollectedHeap::GenerationType)+0x468  (genCollectedHeap.cpp:520)&lt;br/&gt;
V  [libjvm.so+0xc316ac]  GenCollectedHeap::satisfy_failed_allocation(unsigned long, bool)+0x7c  (genCollectedHeap.cpp:654)&lt;br/&gt;
V  [libjvm.so+0xc1cbb8]  VM_GenCollectForAllocation::doit()+0x44  (gcVMOperations.cpp:179)&lt;br/&gt;
V  [libjvm.so+0x16872d0]  VM_Operation::evaluate()+0x120  (vmOperations.cpp:71)&lt;br/&gt;
V  [libjvm.so+0x16b2f20]  VMThread::evaluate_operation(VM_Operation*)+0xd0  (vmThread.cpp:281)&lt;br/&gt;
V  [libjvm.so+0x16b3a14]  VMThread::inner_execute(VM_Operation*)+0x374  (vmThread.cpp:428)&lt;br/&gt;
V  [libjvm.so+0x16b3c0c]  VMThread::loop()+0x8c  (vmThread.cpp:495)&lt;br/&gt;
V  [libjvm.so+0x16b3d3c]  VMThread::run()+0x9c  (vmThread.cpp:175)&lt;br/&gt;
V  [libjvm.so+0x15adc40]  Thread::call_run()+0xac  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x130c348]  thread_native_entry(Thread*)+0x134  (os_linux.cpp:740)&lt;br/&gt;
C  [libpthread.so.0+0x7908]  start_thread+0x188&lt;br/&gt;
JavaThread 0x0000fffd285a0b90 (nid = 1731653) was being processed&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  jit.graph.test5.pascalTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+33&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test3.callMe(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+123&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test5.fiboTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+197&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test4.callMe(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+147&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test5.factTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+195&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test5.fiboTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+197&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test5.combTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+220&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test5.factTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+195&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.test2.callMe(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+147&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test4.callMe(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+233&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test5.combTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+220&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.Globals.callMethod(Ljit/graph/MethodData;Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+29&lt;br/&gt;
j  jit.graph.test6.rbTest(Ljava/util/Vector;Ljava/util/Vector;Ljava/lang/Long;Ljava/lang/Integer;)V+598&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x0000000100145400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x000000010014b400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+137 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+104 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jit.graph.CGT.run()V+82&lt;br/&gt;
j  jit.graph.CGT.main([Ljava/lang/String;)V+15&lt;br/&gt;
j  java.lang.invoke.LambdaForm$DMH+0x00000001000c0000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000100144400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run()V+10&lt;br/&gt;
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+19 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffd1784017c&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve attached both log files:&lt;br/&gt;
&lt;br/&gt;
dcubed-8291555_for_jdk21.git-20230331-2052-44050096-tier3-gc-vmTestbase_vm_compiler-linux-aarch64-debug-77-1680296705-40.log&lt;br/&gt;
dcubed-8291555_for_jdk21.git-20230331-2052-44050096-tier3-gc-vmTestbase_vm_compiler-linux-aarch64-debug-77-1680296705-40.hs_err_pid1731612.log</comment>
                            <comment id="14571077" author="dcubed" created="Fri, 31 Mar 2023 14:20:39 -0700"  >Mach5 testing of v47 + forced-enable of UseFastLocking:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- no failures&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- 13 closed test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- the failures occurred on linux-aarch64, linux-x64 and macosx-aarch64.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- all 13 of the closed test failures look like this:&lt;br/&gt;
&lt;br/&gt;
# Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S30265/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11f26ee9-7672-4784-9827-7daa505c8fbe/runs/fb8cf629-973c-4196-8cff-4ec75aa82c19/workspace/open/src/hotspot/share/runtime/lockStack.cpp:78), pid=3909585, tid=3909657&lt;br/&gt;
# assert((_top &amp;lt; end_offset())) failed: lockstack overflow: _top 1688 end_offset 1688&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-31-1908037.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-31-1908037.daniel.daugherty.8291555forjdk21.git, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V [libjvm.so+0x120dc74] LockStack::verify_no_thread(char const*) const+0x244&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- just started, hoping to get the same crash as in Tier2 in an open test </comment>
                            <comment id="14570545" author="dholmes" created="Wed, 29 Mar 2023 15:56:17 -0700"  >&amp;gt; Even the current code examines all threads to find the owner.&lt;br/&gt;
&lt;br/&gt;
Yes my mistake - we of course have to see which stack a BasicObjectLock address is located in. Sorry for the noise on that part.</comment>
                            <comment id="14570430" author="rkennke" created="Wed, 29 Mar 2023 07:16:34 -0700"  >Is there a way to do proper replies in JBS, except copy&amp;amp;pasting and manually adding &amp;#39;&amp;gt;&amp;#39; all over the place?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; However, when we&amp;#39;re racing&lt;br/&gt;
&amp;gt; we see at least one of the 16 target thread&amp;#39;s thread state go from:&lt;br/&gt;
&amp;gt;     RUNNING -&amp;gt; BLOCKED -&amp;gt; RUNNING -&amp;gt; BLOCKED&lt;br/&gt;
&lt;br/&gt;
&amp;gt; For my JavaDeadlock005 test case, it is expecting the thread state to&lt;br/&gt;
&amp;gt; go from:&lt;br/&gt;
&amp;gt;     RUNNING -&amp;gt; BLOCKED&lt;br/&gt;
&lt;br/&gt;
&amp;gt; and expects the target thread to stay BLOCKED. So this fix doesn&amp;#39;t&lt;br/&gt;
&amp;gt; explain why we see this thread state flicker with fast-locking enabled&lt;br/&gt;
&amp;gt; and we don&amp;#39;t see it with stack-locking enabled. Yes, I&amp;#39;m still confused&lt;br/&gt;
&amp;gt; by this weird failure.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
I have discovered another problem that affects ZGC and Shenandoah GC: when inspecting foreign lock-stacks outside of a safepoint, we may see invalid oops in the lock-stack because those roots are processed concurrently. One thread may look at the lock-stack of another thread that has not yet updated its own roots, and LS::contains() may yield false negatives in this situation. The fix is to do StackWatermark::start_processing() at the beginning of ::contains() when inspecting a foreign thread. The fix is not necessary for self-inspection, because when a JavaThread gets to inspect itself, it must already have gone through the watermark processing (which happens directly when leaving a safepoint, but before resuming own Java execution). I have pushed a fix for this, plus some verifications in LockStack. Can you check if your test behaves better now?&lt;br/&gt;
</comment>
                            <comment id="14570417" author="rkennke" created="Wed, 29 Mar 2023 06:32:37 -0700"  >&amp;gt;&amp;gt; Wrapping in an OopHandle would be nice, but wouldn&amp;#39;t it make it the fast-path slower, because it needs to deal with an additional indirection?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;There may be an impact on performance but the code would be safer and more robust. [~eosterlund] what do you think?&lt;br/&gt;
&lt;br/&gt;
I had a chat with [~eosterlund] yesterday and we think it&amp;#39;s simpler to use plain oops, and do a StackWatermark::start_processing() at the beginning of LockStack::contains(), when we inspect a foreign thread outside of a safepoint. That should really be all that is needed.&lt;br/&gt;
&lt;br/&gt;
&amp;gt;&amp;gt; If I understand correctly, the management code needs to check *all* thread&amp;#39;s lock-stack, and therefore we&amp;#39;d need to handshake all threads, at which point it is equivalent to a safepoint, right?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;You can handshake the threads one-at-a-time so more efficient than a STW safepoint.&lt;br/&gt;
&lt;br/&gt;
Mmm yes, maybe. But the current code already provides a way to take a safepoint when max_depth &amp;gt; 0, it&amp;#39;s easy to also take that STW path when using the new locking scheme. That whole STW path could be reworked to take one handshake at a time, if considered useful, and independently from the new locking change.&lt;br/&gt;
&lt;br/&gt;
&amp;gt;That aside do I have this right: the management code allows you to find the owner of an object monitor for an arbitrary object? With existing code this is trivial as the Object links directly or indirectly to the monitor owner. With the new lock-stack you have examine the lock-stack of every single Java thread in the system! That is potentially a real performance hit!&lt;br/&gt;
&lt;br/&gt;
No. Even the current code examines all threads to find the owner. See: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/threads.cpp#L1391&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/threads.cpp#L1391&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The new code is not very much worse, still O(N) on number of threads, possibly some more work to do per thread, but nothing that looks like a show-stopper to me.</comment>
                            <comment id="14570180" author="dholmes" created="Tue, 28 Mar 2023 17:42:52 -0700"  >&amp;gt; Wrapping in an OopHandle would be nice, but wouldn&amp;#39;t it make it the fast-path slower, because it needs to deal with an additional indirection? &lt;br/&gt;
&lt;br/&gt;
There may be an impact on performance but the code would be safer and more robust. [~eosterlund] what do you think?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; If I understand correctly, the management code needs to check *all* thread&amp;#39;s lock-stack, and therefore we&amp;#39;d need to handshake all threads, at which point it is equivalent to a safepoint, right?&lt;br/&gt;
&lt;br/&gt;
You can handshake the threads one-at-a-time so more efficient than a STW safepoint.&lt;br/&gt;
&lt;br/&gt;
That aside do I have this right: the management code allows you to find the owner of an object monitor for an arbitrary object? With existing code this is trivial as the Object links directly or indirectly to the monitor owner. With the new lock-stack you have examine the lock-stack of every single Java thread in the system! That is potentially a real performance hit!</comment>
                            <comment id="14570167" author="dcubed" created="Tue, 28 Mar 2023 14:48:30 -0700"  >I have rolled my repo forward to v29 and verified that your change there&lt;br/&gt;
has stopped:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
from failing on my MBP13. The key part of that patch is this:&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/hotspot/share/services/management.cpp b/src/hotspot/share/services/management.cpp&lt;br/&gt;
index 9ba1284ae82c..b08271fb50c7 100644&lt;br/&gt;
--- a/src/hotspot/share/services/management.cpp&lt;br/&gt;
+++ b/src/hotspot/share/services/management.cpp&lt;br/&gt;
@@ -1121,7 +1121,7 @@ JVM_ENTRY(jint, jmm_GetThreadInfo(JNIEnv *env, jlongArray ids, jint maxDepth, jo&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// in the ThreadSnapshot are marked and adjusted during GC.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadDumpResult dump_result(num_threads);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-  if (maxDepth == 0) {&lt;br/&gt;
+  if (!UseFastLocking &amp;amp;&amp;amp; maxDepth == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// No stack trace to dump so we do not need to stop the world.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Since we never do the VM op here we must set the threads list.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dump_result.set_t_list();&lt;br/&gt;
&lt;br/&gt;
and that forces the GetThreadInfo() call in the observer thread to happen&lt;br/&gt;
in a safepoint so it can no longer race in parallel execution with the test&lt;br/&gt;
threads that are racing to be in a deadlock. However, when we&amp;#39;re racing&lt;br/&gt;
we see at least one of the 16 target thread&amp;#39;s thread state go from:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RUNNING -&amp;gt; BLOCKED -&amp;gt; RUNNING -&amp;gt; BLOCKED&lt;br/&gt;
&lt;br/&gt;
For my JavaDeadlock005 test case, it is expecting the thread state to&lt;br/&gt;
go from:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RUNNING -&amp;gt; BLOCKED&lt;br/&gt;
&lt;br/&gt;
and expects the target thread to stay BLOCKED. So this fix doesn&amp;#39;t&lt;br/&gt;
explain why we see this thread state flicker with fast-locking enabled&lt;br/&gt;
and we don&amp;#39;t see it with stack-locking enabled. Yes, I&amp;#39;m still confused&lt;br/&gt;
by this weird failure.</comment>
                            <comment id="14569995" author="rkennke" created="Tue, 28 Mar 2023 02:57:02 -0700"  >I am having some trouble to keep up with PR comments because I was out since last Friday. I will take time today to work through all of them.&lt;br/&gt;
&lt;br/&gt;
Wrapping in an OopHandle would be nice, but wouldn&amp;#39;t it make it the fast-path slower, because it needs to deal with an additional indirection?&lt;br/&gt;
&lt;br/&gt;
If I understand correctly, the management code needs to check *all* thread&amp;#39;s lock-stack, and therefore we&amp;#39;d need to handshake all threads, at which point it is equivalent to a safepoint, right?</comment>
                            <comment id="14569850" author="dholmes" created="Mon, 27 Mar 2023 19:59:03 -0700"  >I put this in the PR but maybe it is better here.&lt;br/&gt;
&lt;br/&gt;
Should the lock-stack store OopHandle instead of raw Oops to avoid these kinds of issues?&lt;br/&gt;
&lt;br/&gt;
Otherwise to avoid the need for STW safepoint in the management code, a handshake could be used when you need to check another thread&amp;#39;s lock-stack.</comment>
                            <comment id="14569725" author="rkennke" created="Mon, 27 Mar 2023 13:27:27 -0700"  >I think I may have found the root of the &amp;#39;weird bug&amp;#39;:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/10907/commits/32fdda25fba6d6d57d48d5f2891e001062e7647b&quot;&gt;https://github.com/openjdk/jdk/pull/10907/commits/32fdda25fba6d6d57d48d5f2891e001062e7647b&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
When scanning the lock-stack to find the owner of a monitor/lock we must be sure that threads don&amp;#39;t move. It is not entirely clear to me how the code in question can be safe with traditional stack-locks. ?&lt;br/&gt;
&lt;br/&gt;
Another problem, and I believe this is the one that is triggering this bug, when running with ZGC we must either use an appropriate barrier or be at a safepoint when accessing the oops on the lock-stack, so that the oops get their coloring bits masked. As far as I understand, for oops that are on the actual stack this is already the case, but for oops that live in an outside structure this may be problematic. If that is not done, we may see oops with colored bits in the lock-stack which may lead to false negatives when comparing to oops on the lock-stack.&lt;br/&gt;
&lt;br/&gt;
My fix is to ensure that all calls that scans the lock-stack from threads other than self must happen at safepoints. Everything else doesn&amp;#39;t seem sane. It would be good to confirm that the fix is really what we need there.&lt;br/&gt;
</comment>
                            <comment id="14568818" author="dcubed" created="Wed, 22 Mar 2023 08:41:59 -0700"  >It is definitely a weird bug. I&amp;#39;m able to reliably reproduce JavaDeadlock005 on&lt;br/&gt;
my MBP13 and I&amp;#39;ve been doing various things to the test and test infrastructure&lt;br/&gt;
to try and figure out what&amp;#39;s going on. Will keep you posted...</comment>
                            <comment id="14568741" author="rkennke" created="Wed, 22 Mar 2023 03:51:36 -0700"  >This has got to be one of the weirdest bugs that I have ever seen.&lt;br/&gt;
On the positive side, it reproduces very reliably (nothing spurious) on linux-x64:&lt;br/&gt;
&lt;br/&gt;
make run-test TEST=vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/BlockedThread/BlockedThread005/TestDescription.java TEST_VM_OPTS=&amp;quot;-XX:+UseZGC -Xcomp -XX:-TieredCompilation -XX:+UnlockExperimentalVMOptions -XX:+UseFastLocking&amp;quot;&lt;br/&gt;
&lt;br/&gt;
All of the flags are required. It doesn&amp;#39;t reproduce with other GCs, with C1 or interpreter, it needs -Xcomp and also fast-locking. I believe the other failures that you&amp;#39;ve seen are variants of the same problem. So far so good.&lt;br/&gt;
&lt;br/&gt;
I reduced C2_MacroAssembler::fast_unlock() to a skeleton that only loads the mark-word of the locked object and then forces ZF=0 to take the slow-path on exit (no, it doesn&amp;#39;t do anything with the mark word). Nothing else. See attached patch bug-dissection.patch. This *still* makes the test fail reliably. Notice how there&amp;#39;s nothing fast-locking or even the monitor-locking, stack-locking or RTM locking left in there. Now, comment-out the loading of the mark-word. This makes the test no longer fail for me, and quite reliably, too.&lt;br/&gt;
&lt;br/&gt;
This is really puzzling me. Why does the same not happen with C1 compiled or interpreted code? There we almost literally do the same as in C2, certainly we do load the object&amp;#39;s mark-word there. Why does the bug go away when we no longer load the mark-word? Why does it not happen with stack-locking? Why only with ZGC?</comment>
                            <comment id="14567881" author="dcubed" created="Fri, 17 Mar 2023 14:10:09 -0700"  >JavaDeadLock005 only happens on macosx-x64 which is why I&amp;#39;m looking at that one.&lt;br/&gt;
See the log files that I attached for the other test failures. There are two for linux-x64&lt;br/&gt;
and those will show you the exact command lines.</comment>
                            <comment id="14567871" author="rkennke" created="Fri, 17 Mar 2023 13:28:56 -0700"  >I am trying to reproduce the JavaDeadLock005 test. I am using the following cmd line:&lt;br/&gt;
&lt;br/&gt;
make run-test TEST=vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java TEST_VM_OPTS=&amp;quot;-XX:+UseZGC -Xcomp&amp;quot;&lt;br/&gt;
&lt;br/&gt;
-XX:+UseZGC -Xcomp seems to be the common flags that make it fail, is that right? I have changed my build to use +UseFastLocking by default, that is why I am not explicitely passing that here. However, it does not fail, not on linux-x64 and not on linux-aarch64 and not on macosx-aarch64. Is there anything special that I need to set? Can you send me the exact cmd line that you used when you got the failure on your MBP?</comment>
                            <comment id="14567865" author="dcubed" created="Fri, 17 Mar 2023 13:10:10 -0700"  >vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
passes with baseline bits on all three configs:&lt;br/&gt;
&lt;br/&gt;
INFO: JTREG options:&lt;br/&gt;
INFO:   JOBS=4&lt;br/&gt;
INFO:   TEST_MODE=agentvm&lt;br/&gt;
INFO:   EXTRA_PROBLEM_LISTS=ProblemList-extra.txt&lt;br/&gt;
INFO:   VM_OPTIONS=-XX:+UseZGC -Xcomp&lt;br/&gt;
INFO: test_val=vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
Test Config: macosx-x86_64-normal-server-release&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INFO: TIMEOUT_FACTOR=4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Done testing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test Run macosx-x86_64-normal-server-release time: 0.97 minutes.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TEST                                              TOTAL  PASS  FAIL ERROR&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jtreg:open/test/hotspot/jtreg/vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1     1     0     0&lt;br/&gt;
&lt;br/&gt;
Test Config: macosx-x86_64-normal-server-fastdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INFO: TIMEOUT_FACTOR=6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Done testing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test Run macosx-x86_64-normal-server-fastdebug time: 3.09 minutes.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TEST                                              TOTAL  PASS  FAIL ERROR&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jtreg:open/test/hotspot/jtreg/vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1     1     0     0&lt;br/&gt;
&lt;br/&gt;
Test Config: macosx-x86_64-normal-server-slowdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INFO: TIMEOUT_FACTOR=12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Done testing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test Run macosx-x86_64-normal-server-slowdebug time: 11.80 minutes.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TEST                                              TOTAL  PASS  FAIL ERROR&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jtreg:open/test/hotspot/jtreg/vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1     1     0     0&lt;br/&gt;
&lt;br/&gt;
Total test time: 15.86 minutes.</comment>
                            <comment id="14567853" author="dcubed" created="Fri, 17 Mar 2023 11:42:24 -0700"  >I can reproduce the vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
test failure on my MBP13 with fastdebug and slowdebug bits. Release bits passed:&lt;br/&gt;
&lt;br/&gt;
$ unzip -l ThreadMXBean-ThreadInfo-Deadlock0JavaDeadlock005-2023-03-17-121509.zip&lt;br/&gt;
Archive:  ThreadMXBean-ThreadInfo-Deadlock0JavaDeadlock005-2023-03-17-121509.zip&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Length      Date    Time    Name&lt;br/&gt;
---------  ---------- -----   ----&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;27191  03-17-2023 12:39   test_failures.2023-03-17-121509/TestDescription.jtr.fastdebug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;27196  03-17-2023 12:39   test_failures.2023-03-17-121509/TestDescription.jtr.slowdebug&lt;br/&gt;
---------                     -------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;54387                     2 files</comment>
                            <comment id="14567847" author="dcubed" created="Fri, 17 Mar 2023 11:14:03 -0700"  >I&amp;#39;m attaching log files for the Tier8 test failures:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/BlockedThread/BlockedThread005/TestDescription.java&lt;br/&gt;
on linux-x64-debug:&lt;br/&gt;
dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-linux-x64-debug-linux-x64-2629-1679042609-194&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/NativeBlockedThread/NativeBlockedThread005/TestDescription.java&lt;br/&gt;
on linux-x64-debug:&lt;br/&gt;
dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-linux-x64-debug-linux-x64-2629-1679042609-223&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
on macosx-x64-debug:&lt;br/&gt;
dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-macosx-x64-debug-macosx-x64-2633-1679044640-199&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/BlockedThread/BlockedThread005/TestDescription.java&lt;br/&gt;
failure on windows-x64-debug:&lt;br/&gt;
dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-windows-x64-debug-windows-x64-1803-or-later-2632-1679047389-194&lt;br/&gt;
</comment>
                            <comment id="14567793" author="dcubed" created="Fri, 17 Mar 2023 08:35:23 -0700"  >[~rehn] - Thanks for finding that. And I&amp;#39;m the knucklehead that filed&lt;br/&gt;
that bug back on 2021.02.16. Rare, very, very rare...</comment>
                            <comment id="14567695" author="rehn" created="Fri, 17 Mar 2023 01:16:05 -0700"  >It seem like we have an older with same stack-trace:&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8261837&quot;&gt;https://bugs.openjdk.org/browse/JDK-8261837&lt;/a&gt;</comment>
                            <comment id="14567694" author="rkennke" created="Fri, 17 Mar 2023 01:13:05 -0700"  >Hmm, this is a compiler thread, not a true Java thread. I have checked the stack for any signs of Java locking, but could not find any. The compiler only invokes some VM locks, but I don&amp;#39;t see how this could interfere with Java locking. Also, my changes don&amp;#39;t change any C1 code, except in the backend code generator, but again, I don&amp;#39;t see how this could mess with C1 in a way that could lead to that crash. Unfortunately I don&amp;#39;t have a MacOS-x64 machine available. I tried to reproduce on MacOS-aarch64 but could not get it to crash. I will continue investigating. (I suspect the replay is so short precisely because the compiler crashed during compilation.) If you find a way to reproduce, and could try with the baseline JDK and verify that it doesn&amp;#39;t reproduce there, it would be very helpful. Thanks, Daniel, for your immense help!</comment>
                            <comment id="14567627" author="dcubed" created="Thu, 16 Mar 2023 16:12:51 -0700"  >The following test failed in my v28 Mach5 Tier1 testing:&lt;br/&gt;
&lt;br/&gt;
jdk/internal/jimage/JImageOpenTest.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(6/287)----------&lt;br/&gt;
command: main -Djdk.image.map.all=false JImageOpenTest&lt;br/&gt;
reason: User specified action: run main/othervm -Djdk.image.map.all=false JImageOpenTest &lt;br/&gt;
started: Thu Mar 16 22:11:39 GMT 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
finished: Thu Mar 16 22:11:48 GMT 2023&lt;br/&gt;
elapsed time (seconds): 9.732&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(20/1264)----------&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x0000000107311fed, pid=32250, tid=24067&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (build 21-internal-LTS-2023-03-16-2128484.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-internal-LTS-2023-03-16-2128484.daniel.daugherty.8291555forjdk21.git, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.dylib+0x311fed]  ciVirtualCallTypeData::translate_from(ProfileData const*)+0xcd&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: core.32250&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S6047/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3af20187-e4c0-4a6b-bb7f-f117d7a50c5b/runs/44b28f3b-d551-4938-a601-82e5999a47e3/testoutput/test-support/jtreg_open_test_jdk_tier1_part1/scratch/3/hs_err_pid32250.log&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (), id 0xe0000000, Internal Error (open/src/hotspot/share/ci/ciMethodData.cpp:701)]&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(36/6583)*----------&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fc10a009800):  JavaThread &amp;quot;C1 CompilerThread0&amp;quot; daemon [_thread_in_vm, id=24067, stack(0x0000700010008000,0x0000700010108000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:   1320  828       2       java.util.concurrent.ConcurrentHashMap::setTabAt (20 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000700010008000,0x0000700010108000],  sp=0x00007000101070c0,  free space=1020k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x311fed]  ciVirtualCallTypeData::translate_from(ProfileData const*)+0xcd&lt;br/&gt;
V  [libjvm.dylib+0x30ea70]  ciMethodData::load_data()+0x200&lt;br/&gt;
V  [libjvm.dylib+0x30ac23]  ciMethod::ensure_method_data()+0x1f3&lt;br/&gt;
V  [libjvm.dylib+0x2279b8]  Compilation::compile_java_method()+0x58&lt;br/&gt;
V  [libjvm.dylib+0x227efc]  Compilation::compile_method()+0x11c&lt;br/&gt;
V  [libjvm.dylib+0x228342]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x232&lt;br/&gt;
V  [libjvm.dylib+0x22a5b1]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x61&lt;br/&gt;
V  [libjvm.dylib+0x390e4a]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x4ca&lt;br/&gt;
V  [libjvm.dylib+0x3908cc]  CompileBroker::compiler_thread_loop()+0x5ec&lt;br/&gt;
V  [libjvm.dylib+0x5b3994]  JavaThread::thread_main_inner()+0x94&lt;br/&gt;
V  [libjvm.dylib+0xab3a55]  Thread::call_run()+0xa5&lt;br/&gt;
V  [libjvm.dylib+0x917ab7]  thread_native_entry(Thread*)+0x147&lt;br/&gt;
C  [libsystem_pthread.dylib+0x68fc]  _pthread_start+0xe0&lt;br/&gt;
C  [libsystem_pthread.dylib+0x2443]  thread_start+0xf&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00000000000f7fe8&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the replay_pid32250.log data:&lt;br/&gt;
&lt;br/&gt;
version 2&lt;br/&gt;
JvmtiExport can_access_local_variables 0&lt;br/&gt;
JvmtiExport can_hotswap_or_post_breakpoint 0&lt;br/&gt;
JvmtiExport can_post_on_exceptions 0&lt;br/&gt;
# 171 ciObject found&lt;br/&gt;
instanceKlass java/util/concurrent/ConcurrentHashMap&lt;br/&gt;
ciMethodData java/util/concurrent/ConcurrentHashMap setTabAt ([Ljava/util/concurrent/ConcurrentHashMap$Node;ILjava/util/concurrent/ConcurrentHashMap$Node;)V 0 0 orig 80 0 0 0 0 0 0 0 0 0 0 0 0 0 208 149 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 data 23 0x10000b 0x917 0x0 0x0 0x0 0x0 0x0 0x4 0x1 0x7fc0c02891c8 0x4 0xf7f53 0x7fc0c0288f80 0x700010107798 0x500000197 0x7fc0c0289fe8 0x19800000001 0x7fc0c0289f88 0x0 0x7fc0c0289ed0 0x9 0x700010107798 0x1 oops 1 9 [Ljava/util/concurrent/ConcurrentHashMap$Node;&lt;br/&gt;
&lt;br/&gt;
I think that is the shortest replay_pid that I&amp;#39;ve ever seen.</comment>
                            <comment id="14567626" author="dcubed" created="Thu, 16 Mar 2023 16:10:04 -0700"  >Mach5 test results on v28:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- 1 known, unrelated failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- jdk/internal/jimage/JImageOpenTest.java failed on macosx-x64 with a SIGSEGV&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;which is a sighting of:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8261837&quot; title=&quot;SIGSEGV in ciVirtualCallTypeData::translate_from&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8261837&quot;&gt;&lt;strike&gt;JDK-8261837&lt;/strike&gt;&lt;/a&gt; SIGSEGV in ciVirtualCallTypeData::translate_from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- please note that serviceability/sa/UniqueVtableTest.java did not fail in this Tier1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;even though we are still using the same baseline.&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
- no failures, v28 is a definite improvement&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- no failures, v28 is a definite improvement&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- serviceability/sa/UniqueVtableTest.java failed twice due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303921&quot; title=&quot;serviceability/sa/UniqueVtableTest.java timed out&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303921&quot;&gt;&lt;strike&gt;JDK-8303921&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
- v28 is a definite improvement&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier5:&lt;br/&gt;
- 3 known, unrelated failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/sa/UniqueVtableTest.java failed twice due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303921&quot; title=&quot;serviceability/sa/UniqueVtableTest.java timed out&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303921&quot;&gt;&lt;strike&gt;JDK-8303921&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vmTestbase/nsk/jvmti/AttachOnDemand/attach009/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed once due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300189&quot; title=&quot;Reference discovery is confused about atomicity and degree of parallelism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300189&quot;&gt;&lt;strike&gt;JDK-8300189&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier6:&lt;br/&gt;
- 5 known, unrelated failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/sa/UniqueVtableTest.java failed 5x due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303921&quot; title=&quot;serviceability/sa/UniqueVtableTest.java timed out&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303921&quot;&gt;&lt;strike&gt;JDK-8303921&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier7:&lt;br/&gt;
- 3 known, unrelated failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/sa/ClhsdbInspect.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288578&quot; title=&quot;C1: Miscompilation due to broken Class.getModifiers intrinsic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288578&quot;&gt;&lt;strike&gt;JDK-8288578&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/AsyncGetCallTrace/MyPackage/ASGCTBaseTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed twice due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303168&quot; title=&quot;AsyncGetCallTrace/MyPackage/ASGCTBaseTest.java failed with &amp;quot;GetStackTrace and AsyncGetCallTrace return different number of frames&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303168&quot;&gt;JDK-8303168&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier8:&lt;br/&gt;
- 4 known, possibly related test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/BlockedThread/BlockedThread005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed twice, once on linux-x64-debug and once on windows-x64-debug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- windows-x64-debug test task&amp;#39;s JVM args are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-XX:+UseZGC -Xcomp -XX:-TieredCompilation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- linux-x64-debug test task&amp;#39;s JVM args are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-XX:+UseZGC -Xcomp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/Deadlock/JavaDeadlock005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed once on macosx-x64-debug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- macosx-x64-debug test task&amp;#39;s JVM args are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-XX:+UseZGC -Xcomp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vmTestbase/nsk/monitoring/ThreadMXBean/ThreadInfo/NativeBlockedThread/NativeBlockedThread005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed once on linux-x64-debug&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- linux-x64-debug test task&amp;#39;s JVM args are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-XX:+UseZGC -Xcomp</comment>
                            <comment id="14567593" author="rkennke" created="Thu, 16 Mar 2023 13:19:54 -0700"  >I&amp;#39;ve reproduced the -Xcheck:jni failure in one of the javadoc test. I&amp;#39;m investigating.</comment>
                            <comment id="14567577" author="dcubed" created="Thu, 16 Mar 2023 12:45:45 -0700"  >12 of the open test failures appear to happen due to the same cause.&lt;br/&gt;
&lt;br/&gt;
For example:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jdk/javadoc/doclet/5093723/T5093723.java&lt;br/&gt;
&lt;br/&gt;
failed with:&lt;br/&gt;
&lt;br/&gt;
----------stdout:(19/1823)----------&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S4941/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/16dff4d2-dc33-4a4a-b3e0-5648b415efb9/runs/5d427f4e-f1a9-4b4c-98f6-0ff8a2c6e9ba/workspace/open/src/hotspot/share/runtime/sharedRuntime.cpp:2221), pid=3506469, tid=3526585&lt;br/&gt;
#  fatal error: Object has been unlocked by JNI&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-15-1856216.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-15-1856216.daniel.daugherty.8291555forjdk21.git, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x16bc4c8]  SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*)+0x1a8&lt;br/&gt;
&lt;br/&gt;
and the crashing thread&amp;#39;s stack is:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffffac632be0):  JavaThread &amp;quot;AgentVMThread&amp;quot; [_thread_in_Java, id=3526585, stack(0x0000ffff847e0000,0x0000ffff849e0000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff847e0000,0x0000ffff849e0000],  sp=0x0000ffff849cfb10,  free space=1982k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x16bc4c8]  SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*)+0x1a8  (sharedRuntime.cpp:2221)&lt;br/&gt;
V  [libjvm.so+0x16bc5d4]  SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*)+0xc0  (sharedRuntime.cpp:2231)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
All 12 of the failures occurred on linux-aarch64 and the test task&amp;#39;s JVM args are:&lt;br/&gt;
-Xcheck:jni</comment>
                            <comment id="14567574" author="dcubed" created="Thu, 16 Mar 2023 12:39:46 -0700"  >Mach5 test results on v26:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- 2 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/sa/UniqueVtableTest.java failed twice due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303921&quot; title=&quot;serviceability/sa/UniqueVtableTest.java timed out&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303921&quot;&gt;&lt;strike&gt;JDK-8303921&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
&amp;nbsp;- 4 unknown, related, closed test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- closed vmTestbase/vm/compiler/regression/b4268494/b4268494.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed twice on linux-aarch64 and twice on macosx-aarch64.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The associated bug (4268494) is open so it&amp;#39;s not clear why the test is closed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;I think it&amp;#39;s closed because that&amp;#39;s where regression tests lived back in 1999.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- one of the macosx-aarch64 crashes using these test task JVM options:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- I&amp;#39;ve been able to reproduce the crash on my M1 MacMini with both&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fastdebug and slowdebug bits with those options.&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- 7 test failures, some tests failed in more than one config.&lt;br/&gt;
- Here&amp;#39;s the distribution:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3 closed test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;snip&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4 open test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;4 serviceability/sa/UniqueVtableTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- The 4 serviceability/sa/UniqueVtableTest.java failures are known and unrelated.&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier4:&lt;br/&gt;
- 23 test failures, some tests failed in more than one config.&lt;br/&gt;
- Here&amp;#39;s the distribution:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;6 closed test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;snip&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- The 6 closed test failures are unknown and probably related.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;17 open test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 jdk/javadoc/doclet/5093723/T5093723.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 jdk/javadoc/doclet/AccessAsciiArt/AccessAsciiArt.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 jdk/javadoc/doclet/AccessH1/AccessH1.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 jdk/javadoc/tool/reporter_generates_warnings/ReporterGeneratesWarningsInsteadOfNotes.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;5 serviceability/sa/UniqueVtableTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/T8231622/T8231622.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/annotations/typeAnnotations/TypeProcOnly.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/classreader/T7031108.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/processing/6348499/T6348499.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/processing/model/element/TestSealed.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/processing/model/type/TestUnionType.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/sealed/SealedCompilationTests.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1 tools/javac/util/T6597678.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- The 5 serviceability/sa/UniqueVtableTest.java failures are known and unrelated.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- The other 12 open test failures are unknown and probably related. </comment>
                            <comment id="14566926" author="dcubed" created="Tue, 14 Mar 2023 18:05:13 -0700"  >5 of the 8 closed test failures appear to be of the &amp;quot;# assert(max_size &amp;gt;= actual_size) failed: ...&amp;quot; style.&lt;br/&gt;
&lt;br/&gt;
2 of the 8 closed test failures appear to be of the:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S119877/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/09bce1bd-98b6-4a00-8c63-1828c9e34516/runs/47ddf3ab-c674-4338-a3d2-2bd20fe31def/workspace/open/src/hotspot/share/runtime/vframeArray.cpp:98), pid=58355, tid=5891&lt;br/&gt;
#  assert(monitor-&amp;gt;owner() == nullptr || !monitor-&amp;gt;owner()-&amp;gt;is_unlocked()) failed: object must be null or locked&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-14-1914487.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-14-1914487.daniel.daugherty.8291555forjdk21.git, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)&lt;br/&gt;
&lt;br/&gt;
while doing Deoptimization that was seen in the Tier2 testing.&lt;br/&gt;
&lt;br/&gt;
1 of the 8 closed test failures has this assertion failure:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S5056/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3a54a41b-1553-483e-b2b3-0fef94371896/runs/c09d02d6-09a3-41da-821f-f5e7b2e82a87/workspace/open/src/hotspot/share/runtime/javaThread.cpp:1921), pid=3344806, tid=3344807&lt;br/&gt;
#  assert(_held_monitor_count &amp;gt;= 0) failed: Must always be greater than 0: -1&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-14-1914487.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-14-1914487.daniel.daugherty.8291555forjdk21.git, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xf0f49c]  JavaThread::inc_held_monitor_count(int, bool)+0x7c&lt;br/&gt;
&lt;br/&gt;
with this stack trace:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffccc033510):  JavaThread &amp;quot;main&amp;quot; [_thread_in_vm, id=3344807, stack(0x0000fffcd3c20000,0x0000fffcd3e20000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffcd3c20000,0x0000fffcd3e20000],  sp=0x0000fffcd3e1c1b0,  free space=2032k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xf0f49c]  JavaThread::inc_held_monitor_count(int, bool)+0x7c  (javaThread.cpp:1921)&lt;br/&gt;
V  [libjvm.so+0x17df59c]  ObjectSynchronizer::enter(Handle, BasicLock*, JavaThread*)+0x78  (synchronizer.cpp:487)&lt;br/&gt;
V  [libjvm.so+0xeb4d60]  InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)+0x350  (interpreterRuntime.cpp:744)&lt;br/&gt;
j  java.io.FileDescriptor.close()V+0 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream$1.close()V+7 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.io.FileDescriptor.closeAll(Ljava/io/Closeable;)V+92 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream.close()V+65 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.Resource.getBytes()[B+183 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class;+84 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class;+37 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class;+111 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;+36 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffcd025017c&lt;br/&gt;
V  [libjvm.so+0xed962c]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0xed9cb0]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x410  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0xeda22c]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, JavaThread*)+0x6c  (javaCalls.cpp:198)&lt;br/&gt;
V  [libjvm.so+0x17ee948]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x118  (systemDictionary.cpp:1382)&lt;br/&gt;
V  [libjvm.so+0x17ecd4c]  SystemDictionary::load_instance_class(Symbol*, Handle, JavaThread*)+0x1c  (systemDictionary.cpp:1413)&lt;br/&gt;
V  [libjvm.so+0x17ed58c]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x6e8  (systemDictionary.cpp:769)&lt;br/&gt;
V  [libjvm.so+0x17edd18]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x24  (systemDictionary.cpp:318)&lt;br/&gt;
V  [libjvm.so+0xa3c7fc]  ConstantPool::klass_at_impl(constantPoolHandle const&amp;amp;, int, JavaThread*)+0x1cc  (constantPool.cpp:531)&lt;br/&gt;
V  [libjvm.so+0xa3da18]  ConstantPool::klass_ref_at(int, JavaThread*)+0x48  (constantPool.hpp:405)&lt;br/&gt;
V  [libjvm.so+0x12a4f48]  LinkInfo::LinkInfo(constantPoolHandle const&amp;amp;, int, JavaThread*)+0x44  (linkResolver.cpp:249)&lt;br/&gt;
V  [libjvm.so+0x12b26ec]  LinkResolver::resolve_invoke(CallInfo&amp;amp;, Handle, constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0x58  (linkResolver.cpp:1671)&lt;br/&gt;
V  [libjvm.so+0xebef84]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x370  (interpreterRuntime.cpp:843)&lt;br/&gt;
V  [libjvm.so+0xebfb20]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0xf0  (interpreterRuntime.cpp:978)&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler.processClass(Ljava/lang/String;Ljava/util/concurrent/Executor;)V+97&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler.lambda$process$0(Ljava/util/concurrent/Executor;Ljava/lang/String;)V+3&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler$$Lambda+0x00000008010066d0.accept(Ljava/lang/Object;)V+12&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.DistinctOps$1$2.accept(Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$3$1.accept(Ljava/lang/Object;)V+17 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$2$1.accept(Ljava/lang/Object;)V+21 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$3$1.accept(Ljava/lang/Object;)V+17 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.zip.ZipFile$EntrySpliterator.tryAdvance(Ljava/util/function/Consumer;)Z+80 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Spliterator.forEachRemaining(Ljava/util/function/Consumer;)V+2 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V+32 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink;+13 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Void;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Object;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.evaluate(Ljava/util/stream/TerminalOp;)Ljava/lang/Object;+88 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline.forEach(Ljava/util/function/Consumer;)V+6 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler.process(Ljava/util/concurrent/Executor;)V+32&lt;br/&gt;
j  sun.hotspot.tools.ctw.CompileTheWorld.lambda$main$0(Ljava/util/concurrent/ExecutorService;Lsun/hotspot/tools/ctw/PathHandler;)V+2&lt;br/&gt;
j  sun.hotspot.tools.ctw.CompileTheWorld$$Lambda+0x0000000801003800.accept(Ljava/lang/Object;)V+8&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Collections$2.tryAdvance(Ljava/util/function/Consumer;)Z+29 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Collections$2.forEachRemaining(Ljava/util/function/Consumer;)V+2 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$Head.forEach(Ljava/util/function/Consumer;)V+12 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$7$1.accept(Ljava/lang/Object;)V+41 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$3$1.accept(Ljava/lang/Object;)V+17 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Spliterators$ArraySpliterator.forEachRemaining(Ljava/util/function/Consumer;)V+53 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V+32 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink;+13 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Void;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Object;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.evaluate(Ljava/util/stream/TerminalOp;)Ljava/lang/Object;+88 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline.forEach(Ljava/util/function/Consumer;)V+6 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.hotspot.tools.ctw.CompileTheWorld.main([Ljava/lang/String;)V+125&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffcd025017c&lt;br/&gt;
V  [libjvm.so+0xed962c]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0x1017b40]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x1bc  (jni.cpp:887)&lt;br/&gt;
V  [libjvm.so+0x101ae8c]  jni_CallStaticVoidMethod+0x17c  (jni.cpp:1711)&lt;br/&gt;
C  [libjli.so+0x4828]  JavaMain+0xc54  (java.c:547)&lt;br/&gt;
C  [libjli.so+0x757c]  ThreadJavaMain+0xc  (java_md.c:650)&lt;br/&gt;
C  [libpthread.so.0+0x7908]  start_thread+0x188&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  java.io.FileDescriptor.close()V+0 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream$1.close()V+7 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.io.FileDescriptor.closeAll(Ljava/io/Closeable;)V+92 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream.close()V+65 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.Resource.getBytes()[B+183 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class;+84 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class;+37 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class;+111 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.BuiltinClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;+36 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffcd025017c&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler.processClass(Ljava/lang/String;Ljava/util/concurrent/Executor;)V+97&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler.lambda$process$0(Ljava/util/concurrent/Executor;Ljava/lang/String;)V+3&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler$$Lambda+0x00000008010066d0.accept(Ljava/lang/Object;)V+12&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.DistinctOps$1$2.accept(Ljava/lang/Object;)V+18 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$3$1.accept(Ljava/lang/Object;)V+17 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$2$1.accept(Ljava/lang/Object;)V+21 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$3$1.accept(Ljava/lang/Object;)V+17 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.zip.ZipFile$EntrySpliterator.tryAdvance(Ljava/util/function/Consumer;)Z+80 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Spliterator.forEachRemaining(Ljava/util/function/Consumer;)V+2 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V+32 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink;+13 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Void;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Object;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.evaluate(Ljava/util/stream/TerminalOp;)Ljava/lang/Object;+88 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline.forEach(Ljava/util/function/Consumer;)V+6 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.hotspot.tools.ctw.PathHandler.process(Ljava/util/concurrent/Executor;)V+32&lt;br/&gt;
j  sun.hotspot.tools.ctw.CompileTheWorld.lambda$main$0(Ljava/util/concurrent/ExecutorService;Lsun/hotspot/tools/ctw/PathHandler;)V+2&lt;br/&gt;
j  sun.hotspot.tools.ctw.CompileTheWorld$$Lambda+0x0000000801003800.accept(Ljava/lang/Object;)V+8&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V+5 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Collections$2.tryAdvance(Ljava/util/function/Consumer;)Z+29 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Collections$2.forEachRemaining(Ljava/util/function/Consumer;)V+2 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$Head.forEach(Ljava/util/function/Consumer;)V+12 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$7$1.accept(Ljava/lang/Object;)V+41 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline$3$1.accept(Ljava/lang/Object;)V+17 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.Spliterators$ArraySpliterator.forEachRemaining(Ljava/util/function/Consumer;)V+53 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V+32 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink;+13 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Void;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Object;+3 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.AbstractPipeline.evaluate(Ljava/util/stream/TerminalOp;)Ljava/lang/Object;+88 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.stream.ReferencePipeline.forEach(Ljava/util/function/Consumer;)V+6 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  sun.hotspot.tools.ctw.CompileTheWorld.main([Ljava/lang/String;)V+125&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffcd025017c</comment>
                            <comment id="14566925" author="dcubed" created="Tue, 14 Mar 2023 17:55:53 -0700"  >compiler/arraycopy/TestCloneWithStressReflectiveCode.java&lt;br/&gt;
failed on linux-x64 and windows-x64.&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the linux-x64 log:&lt;br/&gt;
&lt;br/&gt;
----------System.out:(22/2247)----------&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S3869/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c69b0741-7166-4808-bd63-0a2c46c4de90/runs/d446e95f-7171-4414-b706-f2172921e5c6/workspace/open/src/hotspot/share/opto/c2_CodeStubs.cpp:52), pid=190321, tid=190351&lt;br/&gt;
#  assert(max_size &amp;gt;= actual_size) failed: Expected stub size (17) must be larger than or equal to actual stub size (18)&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-14-1914487.daniel.daugherty.8291555forjdk21.git)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-14-1914487.daniel.daugherty.8291555forjdk21.git, compiled mode, sharing, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x909e8e]  C2CodeStubList::emit(CodeBuffer&amp;amp;)+0x14e&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S8525/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cdcabfd5-ee77-441d-8ada-7c16c13e63a8/runs/bc8a28fb-624c-461b-8113-9086d28d13d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/1/core.190321)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S8525/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cdcabfd5-ee77-441d-8ada-7c16c13e63a8/runs/bc8a28fb-624c-461b-8113-9086d28d13d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/1/hs_err_pid190321.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S8525/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/cdcabfd5-ee77-441d-8ada-7c16c13e63a8/runs/bc8a28fb-624c-461b-8113-9086d28d13d7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler_all_gcs/scratch/1/replay_pid190321.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s snippets from the linux-x64 hs_err_pid file:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/782b3f2b-1fe4-42ad-a0aa-b7bf2f5b3ebf-S3869/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c69b0741-7166-4808-bd63-0a2c46c4de90/runs/d446e95f-7171-4414-b706-f2172921e5c6/workspace/open/src/hotspot/share/opto/c2_CodeStubs.cpp:52), pid=190321, tid=190351&lt;br/&gt;
#  assert(max_size &amp;gt;= actual_size) failed: Expected stub size (17) must be larger than or equal to actual stub size (18)&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fcea4198c30):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=190351, stack(0x00007fce983f3000,0x00007fce984f4000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   2189  460   !b        java.util.concurrent.ConcurrentHashMap::putVal (432 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fce983f3000,0x00007fce984f4000],  sp=0x00007fce984eeba0,  free space=1006k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x909e8e]  C2CodeStubList::emit(CodeBuffer&amp;amp;)+0x14e  (c2_CodeStubs.cpp:52)&lt;br/&gt;
V  [libjvm.so+0x175cf9a]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x235a  (output.cpp:1754)&lt;br/&gt;
V  [libjvm.so+0xb2869e]  Compile::Code_Gen()+0x48e  (compile.cpp:2971)&lt;br/&gt;
V  [libjvm.so+0xb2e199]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x19f9  (compile.cpp:866)&lt;br/&gt;
V  [libjvm.so+0x93a497]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)&lt;br/&gt;
V  [libjvm.so+0xb3b9ac]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2265)&lt;br/&gt;
V  [libjvm.so+0xb3c820]  CompileBroker::compiler_thread_loop()+0x690  (compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0x108ea96]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:712)&lt;br/&gt;
V  [libjvm.so+0x1a996e0]  Thread::call_run()+0x100  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x1733173]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:740)&lt;br/&gt;
&lt;br/&gt;
All 16 of the open, unknown and probably related failures appear to match the above failure mode.</comment>
                            <comment id="14566907" author="dcubed" created="Tue, 14 Mar 2023 15:54:53 -0700"  >Here&amp;#39;s the crash notification for the Mach5 Tier2 failure as reproduced with&lt;br/&gt;
fastdebug bits on my M1 MacMini:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/System/Volumes/Data/work/shared/bug_hunt/8291555_for_jdk21.git/open/src/hotspot/share/runtime/vframeArray.cpp:98), pid=41593, tid=24835&lt;br/&gt;
#  assert(monitor-&amp;gt;owner() == nullptr || !monitor-&amp;gt;owner()-&amp;gt;is_unlocked()) failed: object must be null or locked&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-14-2057038.dcubed...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-14-2057038.dcubed..., mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
And with slowdebug bits as reproduced on my M1 MacMini:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/System/Volumes/Data/work/shared/bug_hunt/8291555_for_jdk21.git/open/src/hotspot/share/runtime/vframeArray.cpp:98), pid=41774, tid=38659&lt;br/&gt;
#  assert(monitor-&amp;gt;owner() == nullptr || !monitor-&amp;gt;owner()-&amp;gt;is_unlocked()) failed: object must be null or locked&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (slowdebug build 21-internal-LTS-2023-03-14-2057231.dcubed...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 21-internal-LTS-2023-03-14-2057231.dcubed..., mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m attaching the two hs_err_pid files:&lt;br/&gt;
&lt;br/&gt;
m5_tier2_fastdebug_hs_err_pid41593.log&lt;br/&gt;
m5_tier2_slowdebug_hs_err_pid41774.log</comment>
                            <comment id="14566905" author="dcubed" created="Tue, 14 Mar 2023 15:51:13 -0700"  >Mach5 test results on v25:&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier1:&lt;br/&gt;
- 1 known, unrelated test failure:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- serviceability/sa/UniqueVtableTest.java failed due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303921&quot; title=&quot;serviceability/sa/UniqueVtableTest.java timed out&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303921&quot;&gt;&lt;strike&gt;JDK-8303921&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Mach5 Tier2:&lt;br/&gt;
&amp;nbsp;- 4 unknown, related, closed test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- closed vmTestbase/vm/compiler/regression/b4268494/b4268494.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed twice on linux-aarch64 and twice on macosx-aarch64.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The associated bug (4268494) is open so it&amp;#39;s not clear why the test is closed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;I think it&amp;#39;s closed because that&amp;#39;s where regression tests lived back in 1999.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- one of the macosx-aarch64 crashes using these test task JVM options:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- I&amp;#39;ve been able to reproduce the crash on my M1 MacMini with both&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fastdebug and slowdebug bits with those options. &lt;br/&gt;
&lt;br/&gt;
Mach5 Tier3:&lt;br/&gt;
- 26 test failures, some tests failed in more than one config.&lt;br/&gt;
- Here&amp;#39;s the distribution:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;8 closed test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;snip&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;18 open test failures:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 compiler/arraycopy/TestCloneWithStressReflectiveCode.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/codecache/stress/UnexpectedDeoptimizationAllTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/loopopts/TestPeelingRemoveDominatedTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/vectorapi/VectorCastShape128Test.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/vectorapi/VectorMaskLoadStoreTest.java#id0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/vectorapi/VectorMaskLoadStoreTest.java#id1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/vectorapi/reshape/TestVectorCastAVX1.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 compiler/vectorapi/reshape/TestVectorCastAVX2.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 jdk/incubator/vector/VectorMaxConversionTests.java#id1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 runtime/Metaspace/FragmentMetaspace.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 serviceability/sa/UniqueVtableTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 vmTestbase/metaspace/shrink_grow/ShrinkGrowMultiJVM/ShrinkGrowMultiJVM.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 vmTestbase/metaspace/shrink_grow/ShrinkGrowTest/ShrinkGrowTest.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 vmTestbase/metaspace/staticReferences/StaticReferences.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- The 2 serviceability/sa/UniqueVtableTest.java failures are known and unrelated.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- The other 16 open test failures are unknown and appear to be related. </comment>
                            <comment id="14528164" author="roboduke" created="Thu, 6 Oct 2022 03:27:58 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/10590&quot;&gt;https://git.openjdk.org/jdk/pull/10590&lt;/a&gt;&lt;br/&gt;
Date: 2022-10-06 10:23:04 +0000</comment>
                            <comment id="14528141" author="roboduke" created="Thu, 6 Oct 2022 00:45:21 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/9680&quot;&gt;https://git.openjdk.org/jdk/pull/9680&lt;/a&gt;&lt;br/&gt;
Date: 2022-07-28 19:58:34 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="5100170">JDK-8307493</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098278">JDK-8305895</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5098417">JDK-8305999</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5100579">JDK-8307810</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5086067">JDK-8295849</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5091714">JDK-8300440</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5100212">JDK-8307532</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5100486">JDK-8307758</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103165">JDK-8310023</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5108914">JDK-8315061</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5112279">JDK-8318015</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5109863">JDK-8315880</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114805">JDK-8320167</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5111012">JDK-8316880</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5105381">JDK-8311993</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111424">JDK-8317262</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5113290">JDK-8318895</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118975">JDK-8323781</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110854">JDK-8316746</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110859">JDK-8316751</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111055">JDK-8316921</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101377">JDK-8308469</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101392">JDK-8308479</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110840">JDK-8316735</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111653">JDK-8317452</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103051" name="ThreadMXBean-ThreadInfo-Deadlock0JavaDeadlock005-2023-03-17-121509.zip" size="7754" author="dcubed" created="Fri, 17 Mar 2023 11:41:04 -0700"/>
                            <attachment id="103084" name="bug-dissection.patch" size="9367" author="rkennke" created="Wed, 22 Mar 2023 03:53:53 -0700"/>
                            <attachment id="103047" name="dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-linux-x64-debug-linux-x64-2629-1679042609-194" size="84408" author="dcubed" created="Fri, 17 Mar 2023 11:13:55 -0700"/>
                            <attachment id="103048" name="dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-linux-x64-debug-linux-x64-2629-1679042609-223" size="18239" author="dcubed" created="Fri, 17 Mar 2023 11:13:55 -0700"/>
                            <attachment id="103049" name="dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-macosx-x64-debug-macosx-x64-2633-1679044640-199" size="19544" author="dcubed" created="Fri, 17 Mar 2023 11:13:55 -0700"/>
                            <attachment id="103050" name="dcubed-8291555_for_jdk21.git-20230317-0510-43363684-tier8-gc-ZGC-Xcomp-vmTestbase_nsk_monitoring-windows-x64-debug-windows-x64-1803-or-later-2632-1679047389-194" size="102130" author="dcubed" created="Fri, 17 Mar 2023 11:13:55 -0700"/>
                            <attachment id="103199" name="dcubed-8291555_for_jdk21.git-20230331-2052-44050096-tier3-gc-vmTestbase_vm_compiler-linux-aarch64-debug-77-1680296705-40.hs_err_pid1731612.log" size="141994" author="dcubed" created="Fri, 31 Mar 2023 14:26:48 -0700"/>
                            <attachment id="103200" name="dcubed-8291555_for_jdk21.git-20230331-2052-44050096-tier3-gc-vmTestbase_vm_compiler-linux-aarch64-debug-77-1680296705-40.log" size="43764" author="dcubed" created="Fri, 31 Mar 2023 14:26:48 -0700"/>
                            <attachment id="103006" name="m5_tier2_fastdebug_hs_err_pid41593.log" size="274069" author="dcubed" created="Tue, 14 Mar 2023 15:55:18 -0700"/>
                            <attachment id="103007" name="m5_tier2_slowdebug_hs_err_pid41774.log" size="979462" author="dcubed" created="Tue, 14 Mar 2023 15:55:19 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2y39v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>