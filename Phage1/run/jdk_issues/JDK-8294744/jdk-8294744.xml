<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:12:23 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8294744] AArch64: applications/kitchensink/Kitchensink.java crashed: assert(oopDesc::is_oop(obj)) failed: not an oop</title>
                <link>https://bugs.openjdk.org/browse/JDK-8294744</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94902/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2bcc81d4-11a4-454b-b693-b4de2771d176/runs/c4fc7d15-e479-4a77-afb5-74071239888a/workspace/open/src/hotspot/share/runtime/handles.cpp:41), pid=1597014, tid=1597054&lt;br/&gt;
#  assert(oopDesc::is_oop(obj)) failed: not an oop: 0x0000fffc07c14974&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (20.0+18) (fastdebug build 20-ea+18-1242)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+18-1242, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xd74de8]  HandleArea::allocate_handle(oop)+0x108&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94874/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/26a25f8e-ee5f-4606-a754-e896ab61a47c/runs/71ccaf50-8a17-4a5c-8c2c-1f88dc8e68c7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.1597014)&lt;br/&gt;
#&lt;br/&gt;
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94874/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/26a25f8e-ee5f-4606-a754-e896ab61a47c/runs/71ccaf50-8a17-4a5c-8c2c-1f88dc8e68c7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid1597014.jfr&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffc185f66f0):  JavaThread &amp;quot;ExceptionStressModule&amp;quot; [_thread_in_vm, id=1597054, stack(0x0000fffbd09c0000,0x0000fffbd0bc0000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffbd09c0000,0x0000fffbd0bc0000],  sp=0x0000fffbd0bbdd90,  free space=2039k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xd74de8]  HandleArea::allocate_handle(oop)+0x108  (handles.cpp:41)&lt;br/&gt;
V  [libjvm.so+0x8439f8]  Handle::Handle(Thread*, oop)+0xa8  (handles.inline.hpp:42)&lt;br/&gt;
V  [libjvm.so+0xe651cc]  InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)+0x108  (interpreterRuntime.cpp:466)&lt;br/&gt;
j  java.io.FileInputStream.open(Ljava/lang/String;)V+6 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream.&amp;lt;init&amp;gt;(Ljava/io/File;)V+96 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
J 1908 c1 applications.kitchensink.process.stress.modules.ExceptionStressModule.testCheckedIO()V (112 bytes) @ 0x0000fffc00919b70 [0x0000fffc009199c0+0x00000000000001b0]&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.runOneIteration()V+17&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.execute()V+20&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118&lt;br/&gt;
j  java.lang.Thread.run()V+13 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffc07c0017c&lt;br/&gt;
V  [libjvm.so+0xe78a9c]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:417)&lt;br/&gt;
V  [libjvm.so+0xe790c0]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3b0  (javaCalls.cpp:331)&lt;br/&gt;
V  [libjvm.so+0xe79414]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:193)&lt;br/&gt;
V  [libjvm.so+0xff35b8]  thread_entry(JavaThread*, JavaThread*)+0x118  (jvm.cpp:2876)&lt;br/&gt;
V  [libjvm.so+0xeaeb20]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)&lt;br/&gt;
V  [libjvm.so+0x17aee58]  Thread::call_run()+0xf8  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x14c4134]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)&lt;br/&gt;
C  [libpthread.so.0+0x7908]  start_thread+0x188</description>
                <environment></environment>
        <key id="5084634">JDK-8294744</key>
            <summary>AArch64: applications/kitchensink/Kitchensink.java crashed: assert(oopDesc::is_oop(obj)) failed: not an oop</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pchilanomate">Patricio Chilano Mateo</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>intermittent</label>
                            <label>regression</label>
                            <label>tier3</label>
                            <label>tier5</label>
                    </labels>
                <created>Mon, 3 Oct 2022 19:29:01 -0700</created>
                <updated>Tue, 17 Jan 2023 15:56:02 -0800</updated>
                            <resolved>Tue, 10 Jan 2023 09:18:23 -0800</resolved>
                                    <version>20</version>
                                    <fixVersion>20</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>16</watches>
                                                                                                                <comments>
                            <comment id="14550016" author="dukebot" created="Tue, 10 Jan 2023 09:18:21 -0800"  >Changeset: 151450ea&lt;br/&gt;
Author:    Patricio Chilano Mateo &amp;lt;&lt;a href=&apos;mailto:pchilanomate@openjdk.org&apos;&gt;pchilanomate@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-10 17:16:26 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk20/commit/151450ea9b78243130eb89a1c8ea9ad7ac13fb4a&quot;&gt;https://git.openjdk.org/jdk20/commit/151450ea9b78243130eb89a1c8ea9ad7ac13fb4a&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14549463" author="fyang" created="Sun, 8 Jan 2023 18:09:07 -0800"  >JVM on linux-riscv64 bears the same problem as it has the same handling as aarch64 on this part [1][2]. And linux-riscv64 doesn&amp;#39;t have a redzone defined/implemented either, which I have verified with a small C program with inline assembly like you do for x86 and aarch64. So I have prepared a fix for linux-riscv64. See comment on PR. Thanks.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8290280&quot;&gt;https://bugs.openjdk.org/browse/JDK-8290280&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/commit/4dd236b40abfeb1200e884021b90226046bc4b85&quot;&gt;https://github.com/openjdk/jdk/commit/4dd236b40abfeb1200e884021b90226046bc4b85&lt;/a&gt;</comment>
                            <comment id="14549074" author="roboduke" created="Thu, 5 Jan 2023 12:58:49 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20/pull/85&quot;&gt;https://git.openjdk.org/jdk20/pull/85&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-05 20:24:25 +0000</comment>
                            <comment id="14548532" author="pchilanomate" created="Tue, 3 Jan 2023 15:41:15 -0800"  >Ok, found the issue. The problem is a tricky interaction between part of the changes in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288971&quot; title=&quot;AArch64: Clean up stack and register handling in interpreter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288971&quot;&gt;&lt;strike&gt;JDK-8288971&lt;/strike&gt;&lt;/a&gt;, JFR sampling, and the fact that on Linux there is no red zone defined in the ABI (nor implemented it seems) for aarch64.&lt;br/&gt;
&lt;br/&gt;
The problem starts in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288971&quot; title=&quot;AArch64: Clean up stack and register handling in interpreter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288971&quot;&gt;&lt;strike&gt;JDK-8288971&lt;/strike&gt;&lt;/a&gt; with the value we set initially for extended_sp on natives frames, which is later used to restore the machine stack pointer. It doesn&amp;#39;t account for the oop that could be pushed to the stack in case the method throws an exception. This can create a situation in Interpreter::_throw_exception_entry where we push an exception oop to the Java expression stack below the actual physical stack pointer. &lt;br/&gt;
Looking at the code where this happens it might seem this shouldn&amp;#39;t be an issue because after pushing the oop we always immediately branch to Interpreter::_remove_activation_entry (no exception handler for native code) and the first instruction pops it back. Unfortunately when JFR is present the JavaThread could receive a suspend signal right between the push and pop operations. And here comes the last part of the puzzle: unlike the System V AMD64 ABI [1] (...&amp;quot;The 128-byte area beyond the location pointed to by %rsp is considered to be reserved and shall not be modified by signal or interrupt handlers&amp;quot;...), there is no red zone defined on Linux aarch64. This means the kernel can use the memory right below sp when setting up the signal handler. And this is actually what is happening. The oop is overwritten during the handling of the suspend signal and upon return we pop from the expression stack what we think should be the oop but it&amp;#39;s not anymore. When passing it around while rethrowing in the caller of this native method we crash.&lt;br/&gt;
&lt;br/&gt;
Just to confirm the behavior of signal handling regarding this red zone on different platforms I wrote a small C program with inline assembly (attached both x86 and aarch64 versions). It writes to the two words below the stack pointer, forces a sigsegv, and upon return from the signal handler it reads the two words back and verifies they were not overwritten. The test passes on macOS and Linux running on x86-64. This makes sense as per the ABI requirements mentioned before. On aarch64 however, the test passes on macOS but fails on Linux! I did a little bit of search and found that macOS does defines a redzone on aarch64 [2], so the fact it passes also makes sense (and also explains why we have only seen crashes on Linux but not on macOS).&lt;br/&gt;
&lt;br/&gt;
The more detailed scenario of the crash is as follows:&lt;br/&gt;
&lt;br/&gt;
1 - In the native wrapper, after returning from the native method the JavaThread sees it has a pending exception. After jumping through some hoops we end up in Interpreter::rethrow_exception_entry().&lt;br/&gt;
2 - Here we clear the expression stack (esp now points to interpreter_frame_monitor_block_top_offset in frame).&lt;br/&gt;
3 - We call InterpreterRuntime::exception_handler_for_exception(). Since this is a native method, i.e. no exception handler, the continuation returned is Interpreter::_remove_activation_entry. &lt;br/&gt;
4 - Before making a branch there we do two things. First we restore the machine sp with the extended_sp value saved when creating the frame. Now sp and esp are pointing to the same place (interpreter_frame_monitor_block_top_offset in frame). Second, we push the exception oop on the Java stack (this is a shared path in case we actually jump to an exception handler). Since esp and sp are equal, that means the pushed value will be stored below sp!&lt;br/&gt;
5 - Now, before branching to Interpreter::_remove_activation_entry, or right after it but before popping back the oop, we receive a signal from the JFR sampler. The set up of the signal handler by the kernel happens right below sp and the stored oop is now overwritten.&lt;br/&gt;
6 - We return from the signal handler, pop from the Java stack what we think should be the oop and pass it around when rethrowing in the caller where we crash.&lt;br/&gt;
&lt;br/&gt;
I verified all this trace by adding appropriate logging, including catching the JFR sampler suspending the crashing thread at a pc right between the push and pop.&lt;br/&gt;
&lt;br/&gt;
Before &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288971&quot; title=&quot;AArch64: Clean up stack and register handling in interpreter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288971&quot;&gt;&lt;strike&gt;JDK-8288971&lt;/strike&gt;&lt;/a&gt; this wasn&amp;#39;t an issue because we always added more space when restoring the machine sp. [3]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
I see two possible solutions:&lt;br/&gt;
&lt;br/&gt;
1- Add extra space for sp when creating a native frame as we do with normal frames.&lt;br/&gt;
2- When branching to Interpreter::_remove_activation_entry the oop will always be in r3, so although we need to do the pop we don&amp;#39;t need the value.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll test the first approach and send the patch for review if there are no issues.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://refspecs.linuxfoundation.org/elf/x86_64-abi-0.99.pdf&quot;&gt;https://refspecs.linuxfoundation.org/elf/x86_64-abi-0.99.pdf&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms&quot;&gt;https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms&lt;/a&gt;&lt;br/&gt;
[3] &lt;a href=&quot;https://github.com/openjdk/jdk/pull/9239/files#diff-243849000dba105909d30e884da7afeaea0dae7bd788732a1ef359d5f1f8a9f6L1746&quot;&gt;https://github.com/openjdk/jdk/pull/9239/files#diff-243849000dba105909d30e884da7afeaea0dae7bd788732a1ef359d5f1f8a9f6L1746&lt;/a&gt;</comment>
                            <comment id="14544187" author="coleenp" created="Fri, 9 Dec 2022 05:02:20 -0800"  >[~aph] we can help you run these closed tests if needed and send nmethod print outs.</comment>
                            <comment id="14543923" author="coleenp" created="Thu, 8 Dec 2022 07:07:53 -0800"  >I didn&amp;#39;t see anything confidential in the description so made the bug open.</comment>
                            <comment id="14543903" author="coleenp" created="Thu, 8 Dec 2022 05:51:13 -0800"  >[~rcastanedalo] Thank you for tracking down the cause.</comment>
                            <comment id="14543794" author="rcastanedalo" created="Wed, 7 Dec 2022 23:35:40 -0800"  >This failure can be traced to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288971&quot; title=&quot;AArch64: Clean up stack and register handling in interpreter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288971&quot;&gt;&lt;strike&gt;JDK-8288971&lt;/strike&gt;&lt;/a&gt; and/or its follow-up fix &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8289698&quot; title=&quot;AArch64: Need to relativize extended_sp in frame&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8289698&quot;&gt;&lt;strike&gt;JDK-8289698&lt;/strike&gt;&lt;/a&gt;, moving back to runtime.</comment>
                            <comment id="14542367" author="coleenp" created="Fri, 2 Dec 2022 16:07:23 -0800"  >I reset it to &amp;#39;new&amp;#39; so you&amp;#39;d see it.</comment>
                            <comment id="14542365" author="coleenp" created="Fri, 2 Dec 2022 16:06:25 -0800"  >I think this is a compiler bug.  Somehow the exception points into the code cache.  The interpreter frame could be the result of deoptimization.&lt;br/&gt;
&lt;br/&gt;
Run with below and you&amp;#39;ll get lots of the same failure:&lt;br/&gt;
&lt;br/&gt;
mach5 remote-build-and-test -b linux-aarch64-debug --test applications/kitchensink/Kitchensink.java --test-repeat 400 -a&lt;br/&gt;
&amp;nbsp;-XX:+UseParallelGC -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitial&lt;br/&gt;
CardMarks -XX:-ReduceBulkZeroing -XX:+UnlockDiagnosticVMOptions -XX:+ExpandSubTypeCheckAtParseTime</comment>
                            <comment id="14541930" author="coleenp" created="Thu, 1 Dec 2022 08:05:38 -0800"  >#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94906/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c0e181b-13b3-4e75-b2c4-4d68ecfbeee5/runs/93ec8f4b-0aca-4ebd-8450-f34ad559691a/workspace/open/src/hotspot/share/runtime/handles.cpp:41), pid=473227, tid=473272&lt;br/&gt;
#  assert(oopDesc::is_oop(obj)) failed: not an oop: 0x0000fffd983d49f4&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
This address is in the code heap.</comment>
                            <comment id="14538219" author="coleenp" created="Wed, 16 Nov 2022 12:20:08 -0800"  >Not all failures are parallel GC.</comment>
                            <comment id="14533181" author="dcubed" created="Fri, 28 Oct 2022 14:44:02 -0700"  >Here&amp;#39;s the crashing thread&amp;#39;s stack for the jdk-20+22-1566-tier5 sighting:&lt;br/&gt;
&lt;br/&gt;
applications/kitchensink/Kitchensink.java&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffda85fa6a0):  JavaThread &amp;quot;ExceptionStressModule&amp;quot; [_thread_in_vm, id=473272, stack(0x0000fffd69e80000,0x0000fffd6a080000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffd69e80000,0x0000fffd6a080000],  sp=0x0000fffd6a07de00,  free space=2039k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xda0468]  HandleArea::allocate_handle(oop)+0x108  (handles.cpp:41)&lt;br/&gt;
V  [libjvm.so+0x858c58]  Handle::Handle(Thread*, oop)+0xa8  (handles.inline.hpp:42)&lt;br/&gt;
V  [libjvm.so+0xe9375c]  InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)+0x108  (interpreterRuntime.cpp:467)&lt;br/&gt;
j  java.io.FileInputStream.open(Ljava/lang/String;)V+6 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream.&amp;lt;init&amp;gt;(Ljava/io/File;)V+96 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.testCheckedIO()V+21&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.runOneIteration()V+17&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.execute()V+20&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118&lt;br/&gt;
j  java.lang.Thread.run()V+13 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffd983c017c&lt;br/&gt;
V  [libjvm.so+0xea71dc]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:417)&lt;br/&gt;
V  [libjvm.so+0xea7800]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3b0  (javaCalls.cpp:331)&lt;br/&gt;
V  [libjvm.so+0xea7c78]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:193)&lt;br/&gt;
V  [libjvm.so+0x10238c8]  thread_entry(JavaThread*, JavaThread*)+0x118  (jvm.cpp:2876)&lt;br/&gt;
V  [libjvm.so+0xedd400]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)&lt;br/&gt;
V  [libjvm.so+0x17f2b18]  Thread::call_run()+0xf8  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x1500564]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)&lt;br/&gt;
C  [libpthread.so.0+0x7908]  start_thread+0x188&lt;br/&gt;
&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  java.io.FileInputStream.open(Ljava/lang/String;)V+6 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
j  java.io.FileInputStream.&amp;lt;init&amp;gt;(Ljava/io/File;)V+96 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.testCheckedIO()V+21&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.runOneIteration()V+17&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.execute()V+20&lt;br/&gt;
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118&lt;br/&gt;
j  java.lang.Thread.run()V+13 &lt;a href=&apos;mailto:java.base@20-ea&apos;&gt;java.base@20-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffd983c017c</comment>
                            <comment id="14531405" author="coleenp" created="Thu, 20 Oct 2022 13:16:48 -0700"  >(gdb) print exception&lt;br/&gt;
$3 = (oopDesc *) 0xfffd23a64974&lt;br/&gt;
(gdb) x 0xfffd23a64974/10x&lt;br/&gt;
exception in InterpreterRuntime::exception_handler_for_exception isn&amp;#39;t an oop</comment>
                            <comment id="14530275" author="coleenp" created="Mon, 17 Oct 2022 07:13:03 -0700"  >Looks like an exception oop was clobbered.  It&amp;#39;s only on aarch64 and it looks like a C2 bug. Edit. I don&amp;#39;t think C2 because one failure has a C1 compiled frame in the stack trace.</comment>
                            <comment id="14527787" author="mseledtsov" created="Tue, 4 Oct 2022 11:08:56 -0700"  >ILW = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5091219">JDK-8300004</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5091634">JDK-8300364</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                                        </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5078467">JDK-8289698</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5077638">JDK-8288971</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                                        </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102191" name="redzonetest_aarch64.c" size="2175" author="pchilanomate" created="Tue, 3 Jan 2023 15:42:45 -0800"/>
                            <attachment id="102237" name="redzonetest_riscv64.c" size="1728" author="fyang" created="Sun, 8 Jan 2023 18:07:47 -0800"/>
                            <attachment id="102190" name="redzonetest_x86.c" size="2097" author="pchilanomate" created="Tue, 3 Jan 2023 15:41:55 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17455"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22023">20</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yrwb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17504"><![CDATA[b31]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>