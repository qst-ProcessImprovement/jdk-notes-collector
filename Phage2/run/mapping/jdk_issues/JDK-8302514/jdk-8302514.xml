<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 16:49:47 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302514] Misleading error generated when empty class file encountered</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302514</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>If javac encounters a class file on the classpath that is empty, it generates a &amp;quot;bad class file&amp;quot; as expected but then goes on to claim the &amp;quot;class file contains wrong class: java.lang.AutoCloseable&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
There are several problems with the utility classes used by the compiler, and this error is a symptom of one of them.&lt;br/&gt;
&lt;br/&gt;
The problems identified are:&lt;br/&gt;
&lt;br/&gt;
*** ArrayUtils.java ***&lt;br/&gt;
&lt;br/&gt;
1. There is no protection from integer overflows, which can occur in several places. We should add a few basic checks so at least we fail fast with IllegalArgumentException instead of fail slow with ArrayIndexOutOfBoundsException.&lt;br/&gt;
&lt;br/&gt;
2. If ensureCapacity() were ever invoked on an array of length zero, an infinite loop would result.&lt;br/&gt;
&lt;br/&gt;
*** ByteBuffer.java ***&lt;br/&gt;
&lt;br/&gt;
1. The methods getInt(), getLong(), etc. do not check for data underflow (this is the root cause of the weird error above).&lt;br/&gt;
&lt;br/&gt;
2. The appendStream() method only reads input.available() bytes from the InputStream, which is totally broken. To quote the Javadoc from InputStream.available(): &amp;quot;Note that while some implementations of InputStream will return the total number of bytes in the stream, many will not. It is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream.&amp;quot; That&amp;#39;s exactly what this method does. So this could easily break when retrieving class files from non-standard sources.&lt;br/&gt;
&lt;br/&gt;
*** ClassReader.java, ModuleNameReader.java, PoolReader.java ***&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s not clear that these classes have systematic protection against truncated class files. Truncated files generate various different warnings, including:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- index 25926 is not within pool size 13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- bad constant pool tag: 0 at 28317&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- unexpected constant pool tag: 10 at 11&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- class file is invalid for class Empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- class file contains wrong class: java.lang.AutoCloseable&lt;br/&gt;
&lt;br/&gt;
All of the above errors were triggered by simply truncating the class file at various points. It would be better if a &amp;quot;truncated class file&amp;quot; error were generated whenever a truncated class file is encountered (i.e., whenever the compiler tries to read past the end of a class file).&lt;br/&gt;
</description>
                <environment>&lt;p&gt;jdk-21+9-20-g3b05a94c36e&lt;/p&gt;</environment>
        <key id="5094183">JDK-8302514</key>
            <summary>Misleading error generated when empty class file encountered</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="acobbs">Archie Cobbs</assignee>
                                    <reporter username="acobbs">Archie Cobbs</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Feb 2023 15:10:13 -0800</created>
                <updated>Wed, 22 Feb 2023 23:12:46 -0800</updated>
                            <resolved>Thu, 16 Feb 2023 06:50:44 -0800</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14560736" author="dukebot" created="Thu, 16 Feb 2023 06:50:43 -0800"  >Changeset: a58fa6e7&lt;br/&gt;
Author:    Archie L. Cobbs &amp;lt;&lt;a href=&apos;mailto:archie.cobbs@gmail.com&apos;&gt;archie.cobbs@gmail.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Julian Waters &amp;lt;&lt;a href=&apos;mailto:jwaters@openjdk.org&apos;&gt;jwaters@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-16 14:48:39 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a58fa6e73e4594cfb0e46bdbebad48072771e5bd&quot;&gt;https://git.openjdk.org/jdk/commit/a58fa6e73e4594cfb0e46bdbebad48072771e5bd&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14560422" author="roboduke" created="Wed, 15 Feb 2023 08:06:13 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12574&quot;&gt;https://git.openjdk.org/jdk/pull/12574&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-15 15:59:36 +0000</comment>
                            <comment id="14560128" author="JIRAUSER20702" created="Tue, 14 Feb 2023 16:00:43 -0800"  >Hmm, I don&amp;#39;t see where that&amp;#39;s documented. The Javadoc for FileInputStream.available() says this:&lt;br/&gt;
&lt;br/&gt;
------------------------&lt;br/&gt;
Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. Returns 0 when the file position is beyond EOF. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.&lt;br/&gt;
&lt;br/&gt;
In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.&lt;br/&gt;
------------------------&lt;br/&gt;
&lt;br/&gt;
I do believe that on UNIX platforms it so happens that available() is always accurate for plain files. But that&amp;#39;s not a safe assumption in general.&lt;br/&gt;
&lt;br/&gt;
In any case, the method takes an InputStream, not a FileInputStream, so it seems like poor form to make such an undocumented assumption.</comment>
                            <comment id="14560123" author="jjg" created="Tue, 14 Feb 2023 15:27:09 -0800"  >&amp;gt; 2. The appendStream() method only reads input.available() bytes from the InputStream, which is totally broken. To quote the Javadoc from InputStream.available(): &amp;quot;Note that while some implementations of InputStream will return the total number of bytes in the stream, many will not. It is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream.&amp;quot; That&amp;#39;s exactly what this method does. So this could easily break when retrieving class files from non-standard sources. &lt;br/&gt;
&lt;br/&gt;
I believe the semantics are better defined for FileInputStream, which is what is/was assumed.</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30dxv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>