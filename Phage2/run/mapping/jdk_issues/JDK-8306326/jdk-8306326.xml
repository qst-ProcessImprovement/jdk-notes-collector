<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 18:40:00 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8306326] [BACKOUT] 8277573: VmObjectAlloc is not generated by intrinsics methods which allocate objects</title>
                <link>https://bugs.openjdk.org/browse/JDK-8306326</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Regressions seen on Dotty, FinagleHttp, ScalaKmeans, and Scrabble.</description>
                <environment></environment>
        <key id="5098771">JDK-8306326</key>
            <summary>[BACKOUT] 8277573: VmObjectAlloc is not generated by intrinsics methods which allocate objects</summary>
                <type id="5" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14716&amp;avatarType=issuetype">Sub-task</type>
                            <parent id="5100199">JDK-8307519</parent>
                                    <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lmesnik">Leonid Mesnik</assignee>
                                    <reporter username="ecaspole">Eric Caspole</reporter>
                        <labels>
                            <label>c2</label>
                            <label>oracle-triage-21</label>
                            <label>perf-regression</label>
                    </labels>
                <created>Tue, 18 Apr 2023 11:49:22 -0700</created>
                <updated>Wed, 10 May 2023 23:52:42 -0700</updated>
                            <resolved>Fri, 5 May 2023 12:00:15 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14579468" author="dukebot" created="Fri, 5 May 2023 12:00:11 -0700"  >Changeset: e2b1013f&lt;br/&gt;
Author:    Leonid Mesnik &amp;lt;&lt;a href=&apos;mailto:lmesnik@openjdk.org&apos;&gt;lmesnik@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-05 18:57:33 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e2b1013f11fc605501c3bf77976facb9b870d28e&quot;&gt;https://git.openjdk.org/jdk/commit/e2b1013f11fc605501c3bf77976facb9b870d28e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14579107" author="roboduke" created="Thu, 4 May 2023 08:21:13 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13806&quot;&gt;https://git.openjdk.org/jdk/pull/13806&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-04 15:12:43 +0000</comment>
                            <comment id="14577437" author="thartmann" created="Thu, 27 Apr 2023 08:23:59 -0700"  >Right, I missed that the oop is passed to the callback in JvmtiExport::post_vm_object_alloc. Then option (1) is not really an option.</comment>
                            <comment id="14577435" author="lmesnik" created="Thu, 27 Apr 2023 08:16:55 -0700"  >Thanks for suggestions!&lt;br/&gt;
&lt;br/&gt;
The oop is required to generate post event, so it should be done after allocation.&lt;br/&gt;
Agree, the Unsafe.allocateUninitializedArray should be also updated, but it would be next step.&lt;br/&gt;
&lt;br/&gt;
So I am going to redo my fix and investigate other possible options.</comment>
                            <comment id="14577209" author="thartmann" created="Wed, 26 Apr 2023 23:35:20 -0700"  >&amp;gt; The posting event might cause change of &amp;#39;obj&amp;#39; because of safepoints. So the &amp;#39;notify_jvmti_object_alloc&amp;#39; returns the new oop for obj.&lt;br/&gt;
&lt;br/&gt;
Right, that&amp;#39;s a problem because C2&amp;#39;s attempts to optimize access to the newly allocated object will fail. For example, without your changes there&amp;#39;s a good chance that Escape Analysis will determine that the newly allocated object is non-escaping and can be scalarized (values can be kept in registers/stack slots). I.e., the allocation can often be removed completely and even if that is not possible, loads/stores can often be folded. With your changes, that&amp;#39;s not possible anymore because the runtime call to notify_jvmti_object_alloc returns an unknown oop.&lt;br/&gt;
&lt;br/&gt;
Options are:&lt;br/&gt;
- Call JvmtiExport::post_vm_object_alloc **before** the actual allocation. It does not really need the oop, right? It just needs `object-&amp;gt;klass()-&amp;gt;external_name()` and we could provide that before doing the actual allocation.&lt;br/&gt;
- Register a dependency to deoptimize the method if the event needs to be generated, see &lt;a href=&quot;https://github.com/openjdk/jdk/blob/c0b4957fcce530290fe3b1e730b593b6458285aa/src/hotspot/share/opto/parse1.cpp#L499&quot;&gt;https://github.com/openjdk/jdk/blob/c0b4957fcce530290fe3b1e730b593b6458285aa/src/hotspot/share/opto/parse1.cpp#L499&lt;/a&gt;&lt;br/&gt;
- Instead of calling notify_jvmti_object_alloc_Type, add an uncommon trap to deoptimize and throw the event from the interpreter.&lt;br/&gt;
&lt;br/&gt;
I think the first option would be least intrusive.&lt;br/&gt;
&lt;br/&gt;
Independent of that, what about LibraryCallKit::inline_unsafe_newArray (which implements `Unsafe.allocateUninitializedArray0`)? Shouldn&amp;#39;t that also throw the event?&lt;br/&gt;
&lt;br/&gt;
I would suggest to back out the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8277573&quot; title=&quot;VmObjectAlloc is not generated by intrinsics methods which allocate objects&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8277573&quot;&gt;&lt;strike&gt;JDK-8277573&lt;/strike&gt;&lt;/a&gt; for now and investigate in a REDO issue according to &lt;a href=&quot;https://openjdk.org/guide/#backing-out-a-change&quot;&gt;https://openjdk.org/guide/#backing-out-a-change&lt;/a&gt;.</comment>
                            <comment id="14577112" author="lmesnik" created="Wed, 26 Apr 2023 11:17:28 -0700"  >Thanks! Moving new_instance after ideal.if_then/else/end_if block would eliminate the difference. &lt;br/&gt;
However the obj is used for posting jvmti event. The posting event might cause change of &amp;#39;obj&amp;#39; because of safepoints.  So the &amp;#39;notify_jvmti_object_alloc&amp;#39; returns the new oop for obj.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14576907" author="thartmann" created="Tue, 25 Apr 2023 23:50:05 -0700"  >&amp;gt; However, I was able to reproduce the regressions with TieredCompilation and not with C2-only mode&lt;br/&gt;
&lt;br/&gt;
I think that&amp;#39;s not too surprising because turning of TieredCompilation has a significant effect on C2 compilation. For example, less accurate profile information could lead to different optimization decisions. To verify, you could simply disable the changes to `LibraryCallKit::inline_unsafe_allocate` and see if that makes the regression disappear.&lt;br/&gt;
&lt;br/&gt;
I had a quick look at &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8277573&quot; title=&quot;VmObjectAlloc is not generated by intrinsics methods which allocate objects&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8277573&quot;&gt;&lt;strike&gt;JDK-8277573&lt;/strike&gt;&lt;/a&gt; and one potential issue is that you added additional control/data flow between the allocation (call to `new_instance`) and its uses (below `set_result`). C2 tries to aggressively optimize accesses to newly allocated objects and it could well be that the additional control flow disables some of these optimizations. You should be able to verify this by simply moving your changes to before the call to `new_instance`.&lt;br/&gt;
&lt;br/&gt;
ILW = Significant performance regression (up to 30%), with renaissance benchmarks, no workaround = MMH = P3</comment>
                            <comment id="14576766" author="lmesnik" created="Tue, 25 Apr 2023 11:19:21 -0700"  >The  &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8277573&quot; title=&quot;VmObjectAlloc is not generated by intrinsics methods which allocate objects&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8277573&quot;&gt;&lt;strike&gt;JDK-8277573&lt;/strike&gt;&lt;/a&gt; fix changed C2 code only. It changes the C2 intrinsic of Unsafe.allocateInstance(). However, I was able to reproduce the regressions with TieredCompilation and not with C2-only mode. It is unclear more me how this change might has such effect. &lt;br/&gt;
Also, it would be nice if you could suggest which options for logging could I use to better understand the changes in compilation before and after fix. &lt;br/&gt;
&lt;br/&gt;
And, just to note. The regression is seen when not jvmti agent are attached and no events are allocated. </comment>
                            <comment id="14576747" author="mwthomps" created="Tue, 25 Apr 2023 10:37:50 -0700"  >&amp;lt;S12Y triage team&amp;gt;: Moved to Compiler team for initial evaluation of this tiered compilation issue.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5063203">JDK-8277573</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17554"><![CDATA[b18]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22711">21</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i315yj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>