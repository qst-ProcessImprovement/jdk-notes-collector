<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:49:41 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8304448] Kitchensink failed: assert(!thread-&gt;is_in_any_VTMS_transition()) failed: class prepare events are not allowed in any VTMS transition</title>
                <link>https://bugs.openjdk.org/browse/JDK-8304448</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
applications/kitchensink/Kitchensink.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
----------System.out:(42/3899)*----------&lt;br/&gt;
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\applications\\kitchensink\\resources\\kitchensink.default.properties&lt;br/&gt;
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\resources\\kitchensink.default.properties&lt;br/&gt;
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\applications\\kitchensink\\resources\\kitchensink.default.properties&lt;br/&gt;
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+15-1199\\src.full\\closed\\test\\hotspot\\jtreg\\applications\\kitchensink\\resources\\kitchensink.default.properties&lt;br/&gt;
[stress.process.out] For random generator using seed: 8396202546159738354&lt;br/&gt;
[stress.process.out] To re-run test with same seed value please add &amp;quot;-Djdk.test.lib.random.seed=8396202546159738354&amp;quot; to command line.&lt;br/&gt;
[stress.process.out] Stress process main method is started.&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] #  Internal Error (c:\\sb\\prod\\1679159541\\workspace\\open\\src\\hotspot\\share\\prims\\jvmtiExport.cpp:1374), pid=73168, tid=44832&lt;br/&gt;
[stress.process.out] #  assert(!thread-&amp;gt;is_in_any_VTMS_transition()) failed: class prepare events are not allowed in any VTMS transition&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (21.0+15) (fastdebug build 21-ea+15-LTS-1199)&lt;br/&gt;
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+15-LTS-1199, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)&lt;br/&gt;
[stress.process.out] # Core dump will be written. Default location: C:\\sb\\prod\\1679166106\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java\\scratch\\0\\hs_err_pid73168.mdmp&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] Unsupported internal testing APIs have been used.&lt;br/&gt;
[stress.process.out] &lt;br/&gt;
[stress.process.out] # An error report file with more information is saved as:&lt;br/&gt;
[stress.process.out] # C:\\sb\\prod\\1679166106\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java\\scratch\\0\\hs_err_pid73168.log&lt;br/&gt;
[stress.process.out] [3.038s][warning][os] Loading hsdis library failed&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # If you would like to submit a bug report, please visit:&lt;br/&gt;
[stress.process.out] #   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[2023-03-18T19:03:12.055455Z] Gathering output for process 42156&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000016b6a843150):  JavaThread &amp;quot;ForkJoinPool-1-worker-1&amp;quot; daemon [_thread_in_vm, id=44832, stack(0x00000035d6900000,0x00000035d6a00000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00000035d6900000,0x00000035d6a00000]&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [jvm.dll+0xbf2eb1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)&lt;br/&gt;
V  [jvm.dll+0xe6dd20]  VMError::report+0x10c0  (vmError.cpp:814)&lt;br/&gt;
V  [jvm.dll+0xe6f8d5]  VMError::report_and_die+0x645  (vmError.cpp:1587)&lt;br/&gt;
V  [jvm.dll+0xe6ffe4]  VMError::report_and_die+0x64  (vmError.cpp:1352)&lt;br/&gt;
V  [jvm.dll+0x577e39]  report_vm_error+0x79  (debug.cpp:181)&lt;br/&gt;
V  [jvm.dll+0x9e3843]  JvmtiExport::post_class_prepare+0x93  (jvmtiExport.cpp:1374)&lt;br/&gt;
V  [jvm.dll+0x791d3a]  InstanceKlass::link_class_impl+0x6ba  (instanceKlass.cpp:930)&lt;br/&gt;
V  [jvm.dll+0x78fb57]  InstanceKlass::initialize_impl+0x97  (instanceKlass.cpp:1033)&lt;br/&gt;
V  [jvm.dll+0x7ae1d3]  InterpreterRuntime::_new+0x203  (interpreterRuntime.cpp:227)&lt;br/&gt;
V  [jvm.dll+0x78fb57]  InstanceKlass::initialize_impl+0x97  (instanceKlass.cpp:1033)&lt;br/&gt;
V  [jvm.dll+0x7ae1d3]  InterpreterRuntime::_new+0x203  (interpreterRuntime.cpp:227)&lt;br/&gt;
C  0x000001695b41820c&lt;br/&gt;
&lt;br/&gt;
Unclear if the native stack indicates we are jumping from compiled code, but it is evidently truncated. Here&amp;#39;s the Java stack&lt;br/&gt;
&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  java.util.concurrent.ConcurrentHashMap.fullAddCount(JZ)V+384 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
J 725 c1 java.util.concurrent.ConcurrentHashMap.addCount(JI)V &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (280 bytes) @ 0x0000016953feddd4 [0x0000016953fed4c0+0x0000000000000914]&lt;br/&gt;
J 690 c1 java.util.concurrent.ConcurrentHashMap.putVal(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (432 bytes) @ 0x0000016953fe9744 [0x0000016953fe82a0+0x00000000000014a4]&lt;br/&gt;
J 41 c1 java.util.concurrent.ConcurrentHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (8 bytes) @ 0x0000016953eb7564 [0x0000016953eb74c0+0x00000000000000a4]&lt;br/&gt;
J 574 c1 java.lang.invoke.MethodType$ConcurrentWeakInternSet.add(Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (66 bytes) @ 0x0000016953fb6ae4 [0x0000016953fb6460+0x0000000000000684]&lt;br/&gt;
J 317 c1 java.lang.invoke.MethodType.makeImpl(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (109 bytes) @ 0x0000016953f23614 [0x0000016953f22da0+0x0000000000000874]&lt;br/&gt;
J 639 c1 java.lang.invoke.MethodType.insertParameterTypes(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType; &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (121 bytes) @ 0x0000016953fd34a4 [0x0000016953fd2d20+0x0000000000000784]&lt;br/&gt;
j  java.lang.invoke.VarHandle$AccessDescriptor.&amp;lt;init&amp;gt;(Ljava/lang/invoke/MethodType;II)V+29 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.MethodHandleNatives.varHandleOperationLinkerMethod(Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+40 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.MethodHandleNatives.linkMethodImpl(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+40 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.MethodHandleNatives.linkMethod(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+14 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x000001695b3d106f&lt;br/&gt;
j  jdk.internal.vm.Continuation.compareAndSetMounted(ZZ)Z+6 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.mount()V+3 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.run()V+1 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.runContinuation()V+81 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$$Lambda+0x00000008010d5b48.run()V+4 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask.doExec()I+10 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x000001695b3d106f&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5096563">JDK-8304448</key>
            <summary>Kitchensink failed: assert(!thread-&gt;is_in_any_VTMS_transition()) failed: class prepare events are not allowed in any VTMS transition</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sspitsyn">Serguei Spitsyn</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>intermittent</label>
                            <label>loom</label>
                            <label>tier3</label>
                            <label>tier7</label>
                    </labels>
                <created>Sat, 18 Mar 2023 22:11:29 -0700</created>
                <updated>Mon, 3 Apr 2023 12:09:01 -0700</updated>
                            <resolved>Mon, 27 Mar 2023 14:47:04 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14569823" author="dukebot" created="Mon, 27 Mar 2023 14:47:02 -0700"  >Changeset: 554bccf0&lt;br/&gt;
Author:    Serguei Spitsyn &amp;lt;&lt;a href=&apos;mailto:sspitsyn@openjdk.org&apos;&gt;sspitsyn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-27 21:44:48 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/554bccf0469fbaf65ac692b4e52bddedafadca6f&quot;&gt;https://git.openjdk.org/jdk/commit/554bccf0469fbaf65ac692b4e52bddedafadca6f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14569027" author="roboduke" created="Thu, 23 Mar 2023 02:17:22 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13154&quot;&gt;https://git.openjdk.org/jdk/pull/13154&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-23 09:10:26 +0000</comment>
                            <comment id="14568924" author="sspitsyn" created="Wed, 22 Mar 2023 17:11:20 -0700"  >This is a suggested fix from Alan:&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/java.base/share/classes/jdk/internal/vm/Continuation.java b/src/java.base/share/classes/jdk/internal/vm/Continuation.java&lt;br/&gt;
index cfb386227e1..fcff2adce75 100644&lt;br/&gt;
--- a/src/java.base/share/classes/jdk/internal/vm/Continuation.java&lt;br/&gt;
+++ b/src/java.base/share/classes/jdk/internal/vm/Continuation.java&lt;br/&gt;
@@ -31,12 +31,8 @@ import jdk.internal.vm.annotation.DontInline;&lt;br/&gt;
&amp;nbsp;import jdk.internal.vm.annotation.IntrinsicCandidate;&lt;br/&gt;
&amp;nbsp;import sun.security.action.GetPropertyAction;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-import java.lang.invoke.MethodHandles;&lt;br/&gt;
-import java.lang.invoke.VarHandle;&lt;br/&gt;
&amp;nbsp;import java.util.EnumSet;&lt;br/&gt;
-import java.util.Map;&lt;br/&gt;
&amp;nbsp;import java.util.Set;&lt;br/&gt;
-import java.util.concurrent.ConcurrentHashMap;&lt;br/&gt;
&amp;nbsp;import java.util.function.Supplier;&lt;br/&gt;
&amp;nbsp;import jdk.internal.access.JavaLangAccess;&lt;br/&gt;
&amp;nbsp;import jdk.internal.access.SharedSecrets;&lt;br/&gt;
@@ -46,6 +42,7 @@ import jdk.internal.access.SharedSecrets;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;public class Continuation {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final Unsafe U = Unsafe.getUnsafe();&lt;br/&gt;
+    private static final long MOUNTED_OFFSET = U.objectFieldOffset(Continuation.class, &amp;quot;mounted&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final boolean PRESERVE_SCOPED_VALUE_CACHE;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static {&lt;br/&gt;
@@ -58,8 +55,6 @@ public class Continuation {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PRESERVE_SCOPED_VALUE_CACHE = (value == null) || Boolean.parseBoolean(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-    private static final VarHandle MOUNTED;&lt;br/&gt;
-&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Reason for pinning */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public enum Pinned {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Native frame on stack */ NATIVE,&lt;br/&gt;
@@ -104,9 +99,6 @@ public class Continuation {&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// init Pinned to avoid classloading during mounting&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pinnedReason(2);&lt;br/&gt;
-&lt;br/&gt;
-            MethodHandles.Lookup l = MethodHandles.lookup();&lt;br/&gt;
-            MOUNTED = l.findVarHandle(Continuation.class, &amp;quot;mounted&amp;quot;, boolean.class);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new InternalError(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
@@ -125,7 +117,7 @@ public class Continuation {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private StackChunk tail;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private boolean done;&lt;br/&gt;
-    private volatile boolean mounted = false;&lt;br/&gt;
+    private volatile boolean mounted;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private Object yieldInfo;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private boolean preempted;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
@@ -461,9 +453,8 @@ public class Continuation {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private boolean compareAndSetMounted(boolean expectedValue, boolean newValue) {&lt;br/&gt;
-       boolean res = MOUNTED.compareAndSet(this, expectedValue, newValue);&lt;br/&gt;
-       return res;&lt;br/&gt;
-     }&lt;br/&gt;
+        return U.compareAndSetBoolean(this, MOUNTED_OFFSET, expectedValue, newValue);&lt;br/&gt;
+    }&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void setMounted(boolean newValue) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mounted = newValue; // MOUNTED.setVolatile(this, newValue);</comment>
                            <comment id="14568383" author="alanb" created="Tue, 21 Mar 2023 01:11:48 -0700"  >Continuation should probably be changed to use Unsafe.compareAndSetReference rather than a VH here. We had to change CHM and VT back to Unsafe for similar reasons.</comment>
                            <comment id="14568374" author="sspitsyn" created="Tue, 21 Mar 2023 00:28:28 -0700"  >Assigned to myself for bug evaluation.</comment>
                            <comment id="14568371" author="sspitsyn" created="Tue, 21 Mar 2023 00:21:28 -0700"  >Thank you, David.&lt;br/&gt;
I agree, class loading should not happen in the vthread mounting context:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;. . . . .&lt;br/&gt;
j  jdk.internal.vm.Continuation.compareAndSetMounted(ZZ)Z+6 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.mount()V+3 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.run()V+1 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.runContinuation()V+81 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;. . . . .&lt;br/&gt;
I&amp;#39;ll check with Alan or Ron.</comment>
                            <comment id="14567970" author="dholmes" created="Sun, 19 Mar 2023 18:33:00 -0700"  >I am going to guess that the continuation code has changed the VTMS state but within ConcurrentHashMap::fullAddCount we are loading the ThreadLocalRandom class and so hit the assert.&lt;br/&gt;
&lt;br/&gt;
Not sure this is really a JVMTI issue - seems like a more general continuations problem to me.</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17005"><![CDATA[windows]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30smj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="372"><![CDATA[jvmti]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>