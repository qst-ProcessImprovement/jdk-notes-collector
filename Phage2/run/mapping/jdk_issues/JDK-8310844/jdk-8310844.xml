<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:47:13 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8310844] [AArch64] C1 compilation fails because monitor offset in OSR buffer is too large for immediate</title>
                <link>https://bugs.openjdk.org/browse/JDK-8310844</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Passing on a report from: &lt;a href=&quot;https://github.com/adoptium/adoptium-support/issues/810&quot;&gt;https://github.com/adoptium/adoptium-support/issues/810&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
In certain cases - when starting an application it crashes with a bug that looks very similar to something that appears to have been fixed in one of the previous releases, i.e.:&lt;br/&gt;
Internal Error (assembler_aarch64.hpp:267), pid=2929, tid=25347&lt;br/&gt;
&lt;br/&gt;
Hard to reproduce exactly when it happens - sometime during the application startup.&lt;br/&gt;
&lt;br/&gt;
What Java Version are you using?&lt;br/&gt;
openjdk version &amp;quot;17.0.7&amp;quot; 2023-04-18 OpenJDK Runtime Environment Temurin-17.0.7+7 (build 17.0.7+7) OpenJDK 64-Bit Server VM Temurin-17.0.7+7 (build 17.0.7+7, mixed mode)&lt;br/&gt;
&lt;br/&gt;
What is your operating system and platform?&lt;br/&gt;
MacOS Ventura 13.4, ARM64 / M1&lt;br/&gt;
&lt;br/&gt;
How did you install Java?&lt;br/&gt;
Through homebrew.&lt;br/&gt;
&lt;br/&gt;
Did it work before?&lt;br/&gt;
Hard to say as this is a new application - never had the same conditions before.&lt;br/&gt;
&lt;br/&gt;
Did you test with the latest update version?&lt;br/&gt;
Yes.&lt;br/&gt;
&lt;br/&gt;
Did you test with other Java versions?&lt;br/&gt;
Yes, with Zulu 17 as well as Oracle, both crash.&lt;br/&gt;
&lt;br/&gt;
Relevant log output&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (assembler_aarch64.hpp:267), pid=2929, tid=25347&lt;br/&gt;
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment Temurin-17.0.7+7 (17.0.7+7) (build 17.0.7+7)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.7+7 (17.0.7+7, mixed mode, emulated-client, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://github.com/adoptium/adoptium-support/issues&quot;&gt;https://github.com/adoptium/adoptium-support/issues&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
---------------  S U M M A R Y ------------&lt;br/&gt;
&lt;br/&gt;
Command Line: -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:64579,suspend=y,server=n -XX:TieredStopAtLevel=1 -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -Dmanagement.endpoints.jmx.exposure.include=* -javaagent:/Users/bos/Library/Caches/JetBrains/IntelliJIdea2023.1/captureAgent/debugger-agent.jar -Dfile.encoding=UTF-8 care.better.demographics.DemographicsApplicationKt --spring.config.additional-location=./conf/&lt;br/&gt;
&lt;br/&gt;
Host: &amp;quot;MacBookPro18,3&amp;quot; arm64, 10 cores, 16G, Darwin 22.5.0, macOS 13.4 (22F66)&lt;br/&gt;
Time: Fri Jun  2 13:59:01 2023 CEST elapsed time: 21.592415 seconds (0d 0h 0m 21s)&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x000000011e018200):  JavaThread &amp;quot;C1 CompilerThread1&amp;quot; daemon [_thread_in_native, id=25347, stack(0x000000016ef30000,0x000000016f133000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:  21592 18532 %s    1       care.better.demographics.index.indexing.param.DatabaseAwareSearchParameterRetriever::syncSearchParametersIfNecessary @ 89 (1754 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000016ef30000,0x000000016f133000],  sp=0x000000016f1319a0,  free space=2054k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0xa1a1d8]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x490&lt;br/&gt;
V  [libjvm.dylib+0xa1a95c]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40&lt;br/&gt;
V  [libjvm.dylib+0x2c5188]  report_vm_error(char const*, int, char const*, char const*, ...)+0x78&lt;br/&gt;
V  [libjvm.dylib+0x872478]  Address::encode_pair(Instruction_aarch64*) const+0x128&lt;br/&gt;
V  [libjvm.dylib+0x8722fc]  Assembler::ld_st1(int, int, int, int, RegisterImpl*, RegisterImpl*, Address, bool)+0x20c&lt;br/&gt;
V  [libjvm.dylib+0x1a320c]  LIR_Assembler::osr_entry()+0x1e8&lt;br/&gt;
V  [libjvm.dylib+0x1a10d0]  LIR_Assembler::emit_lir_list(LIR_List*)+0x9c&lt;br/&gt;
V  [libjvm.dylib+0x1a1178]  LIR_Assembler::emit_code(BlockList*)+0x74&lt;br/&gt;
V  [libjvm.dylib+0x17333c]  Compilation::emit_code_body()+0xe0&lt;br/&gt;
V  [libjvm.dylib+0x1739e4]  Compilation::compile_java_method()+0x354&lt;br/&gt;
V  [libjvm.dylib+0x173c1c]  Compilation::compile_method()+0x124&lt;br/&gt;
V  [libjvm.dylib+0x173fb0]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x19c&lt;br/&gt;
V  [libjvm.dylib+0x1751cc]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x5c&lt;br/&gt;
V  [libjvm.dylib+0x2a0c7c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x528&lt;br/&gt;
V  [libjvm.dylib+0x2a06bc]  CompileBroker::compiler_thread_loop()+0x440&lt;br/&gt;
V  [libjvm.dylib+0x9ac384]  JavaThread::thread_main_inner()+0x150&lt;br/&gt;
V  [libjvm.dylib+0x9aaa0c]  Thread::call_run()+0xe0&lt;br/&gt;
V  [libjvm.dylib+0x7ca4c8]  thread_native_entry(Thread*)+0x158&lt;br/&gt;
C  [libsystem_pthread.dylib+0x6fa8]  _pthread_start+0x94&lt;br/&gt;
&lt;br/&gt;
(truncated to get under 64k limit)</description>
                <environment></environment>
        <key id="5104089">JDK-8310844</key>
            <summary>[AArch64] C1 compilation fails because monitor offset in OSR buffer is too large for immediate</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thartmann">Tobias Hartmann</assignee>
                                    <reporter username="karianna">Martijn Verburg</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c1</label>
                            <label>hgupdate-sync</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-22</label>
                    </labels>
                <created>Sat, 24 Jun 2023 02:21:35 -0700</created>
                <updated>Wed, 12 Feb 2025 13:39:20 -0800</updated>
                            <resolved>Fri, 5 Jan 2024 05:49:57 -0800</resolved>
                                    <version>17.0.6</version>
                    <version>20</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14638610" author="roboduke" created="Tue, 9 Jan 2024 08:38:26 -0800"  >[jdk17u-fix-request] Approval Request from Dmitry Chuyko&lt;br/&gt;
Clean backport to fix 1.5 yrs old regression. Effectively reverts &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8293671&quot; title=&quot;AArch64: Merge LDR instructions to improve C1 OSR performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8293671&quot;&gt;&lt;strike&gt;JDK-8293671&lt;/strike&gt;&lt;/a&gt;. New regression test works.</comment>
                            <comment id="14638607" author="roboduke" created="Tue, 9 Jan 2024 08:28:01 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2117&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2117&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-09 15:10:52 +0000</comment>
                            <comment id="14638029" author="roboduke" created="Mon, 8 Jan 2024 01:44:01 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22/pull/38&quot;&gt;https://git.openjdk.org/jdk22/pull/38&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-08 09:36:25 +0000</comment>
                            <comment id="14638015" author="roboduke" created="Mon, 8 Jan 2024 01:22:37 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/137&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/137&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-08 09:14:24 +0000</comment>
                            <comment id="14638014" author="roboduke" created="Mon, 8 Jan 2024 01:22:33 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to fix 1.5 yrs old regression. Effectively reverts &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287349&quot; title=&quot;AArch64: Merge LDR instructions to improve C1 OSR performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287349&quot;&gt;&lt;strike&gt;JDK-8287349&lt;/strike&gt;&lt;/a&gt;. New regression test works.</comment>
                            <comment id="14637728" author="dukebot" created="Fri, 5 Jan 2024 05:49:56 -0800"  >Changeset: ade21a96&lt;br/&gt;
Author:    Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-05 13:48:31 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ade21a965f8a5fc889cd48bba76fad507bdeddf5&quot;&gt;https://git.openjdk.org/jdk/commit/ade21a965f8a5fc889cd48bba76fad507bdeddf5&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14637414" author="roboduke" created="Thu, 4 Jan 2024 04:45:15 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17266&quot;&gt;https://git.openjdk.org/jdk/pull/17266&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-04 12:39:18 +0000</comment>
                            <comment id="14637351" author="thartmann" created="Thu, 4 Jan 2024 01:14:18 -0800"  >Found two unrelated bugs when working on the reproducer: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322992&quot; title=&quot;Javac fails with StackOverflowError when compiling deeply nested synchronized blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322992&quot;&gt;&lt;strike&gt;JDK-8322992&lt;/strike&gt;&lt;/a&gt; (javac) and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322996&quot; title=&quot;BoxLockNode creation fails with assert(reg &amp;lt; CHUNK_SIZE) failed: sanity&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322996&quot;&gt;&lt;strike&gt;JDK-8322996&lt;/strike&gt;&lt;/a&gt; (C2).</comment>
                            <comment id="14637346" author="thartmann" created="Thu, 4 Jan 2024 01:00:08 -0800"  >We found this in our own testing (thanks to [~mschoene] for reporting!) and I was able to extract a simple reproducer (see attached Test2.java).&lt;br/&gt;
&lt;br/&gt;
java -Xbatch -XX:CompileCommand=compileonly,Test2::* -XX:CompileCommand=quiet -XX:+PrintCompilation Test2.java&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/afbc6042-3a24-4198-9369-18c663a3f74c-S29988/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1497bb84-eae7-47a0-9606-31ab1a44332c/runs/671d5cb7-8e32-4061-9b1b-5d6b408baf34/workspace/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:265), pid=1055310, tid=1055325&lt;br/&gt;
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+21) (fastdebug build 22-ea+21-1619)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+21-1619, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x6b1c14]  LIR_Assembler::osr_entry()+0x800&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:1683   81 % !b  3       Test2::test @ 13 (54 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff6c540000,0x0000ffff6c740000],  sp=0x0000ffff6c73bbc0,  free space=2030k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x6b1c14]  LIR_Assembler::osr_entry()+0x800  (assembler_aarch64.hpp:265)&lt;br/&gt;
V  [libjvm.so+0x6ae444]  LIR_Assembler::emit_lir_list(LIR_List*)+0xe4&lt;br/&gt;
V  [libjvm.so+0x6af144]  LIR_Assembler::emit_code(BlockList*)+0x264&lt;br/&gt;
V  [libjvm.so+0x659160]  Compilation::emit_code_body()+0x150&lt;br/&gt;
V  [libjvm.so+0x659764]  Compilation::compile_java_method()+0x3b0&lt;br/&gt;
V  [libjvm.so+0x659fa8]  Compilation::compile_method()+0x168&lt;br/&gt;
V  [libjvm.so+0x65a6b8]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x248&lt;br/&gt;
V  [libjvm.so+0x65c3d8]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xd8&lt;br/&gt;
V  [libjvm.so+0x91e8c4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x8e4&lt;br/&gt;
V  [libjvm.so+0x91f3dc]  CompileBroker::compiler_thread_loop()+0x5bc&lt;br/&gt;
V  [libjvm.so+0xdba010]  JavaThread::thread_main_inner()+0xec&lt;br/&gt;
V  [libjvm.so+0x16055a4]  Thread::call_run()+0xb0&lt;br/&gt;
V  [libjvm.so+0x136df08]  thread_native_entry(Thread*)+0x138&lt;br/&gt;
C  [libpthread.so.0+0x7950]  start_thread+0x190&lt;br/&gt;
&lt;br/&gt;
The problem is that the slot offset for the monitor in the OSR buffer is too large for the &amp;#39;ldp&amp;#39; immediate in &amp;#39;LIR_Assembler::osr_entry&amp;#39;. This is a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287349&quot; title=&quot;AArch64: Merge LDR instructions to improve C1 OSR performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287349&quot;&gt;&lt;strike&gt;JDK-8287349&lt;/strike&gt;&lt;/a&gt; in JDK 20 b03 (backported to JDK 17.0.6).</comment>
                            <comment id="14628516" author="karianna" created="Wed, 22 Nov 2023 11:28:19 -0800"  >Also from the OP&lt;br/&gt;
&lt;br/&gt;
&amp;quot;It&amp;#39;s been 5 days, and we&amp;#39;ve continued to see no crashes on the hosts running the code with the problematic method rewritten. Similarly we&amp;#39;ve seen no crashes with -XX:CICompilerCount=2 -XX:CompilationMode=high-only.&amp;quot;</comment>
                            <comment id="14628515" author="karianna" created="Wed, 22 Nov 2023 11:27:36 -0800"  >The user was able to extract a backtrace from a core dump:&lt;br/&gt;
&lt;br/&gt;
#0  0x0000ffffb0b43274 in raise () from /lib64/libc.so.6&lt;br/&gt;
#1  0x0000ffffb0b2da2c in abort () from /lib64/libc.so.6&lt;br/&gt;
#2  0x0000ffffb0380c28 in os::abort (dump_core=true, siginfo=&amp;lt;optimized out&amp;gt;, context=&amp;lt;optimized out&amp;gt;) at src/hotspot/os/posix/os_posix.cpp:2082&lt;br/&gt;
#3  0x0000ffffb05ffc1c in VMError::report_and_die (id=id@entry=-536870912, message=message@entry=0xffffb06843d8 &amp;quot;guarantee(chk == -1 || chk == 0) failed&amp;quot;, detail_fmt=detail_fmt@entry=0xffffb067b5e8 &amp;quot;Field too big for insn&amp;quot;, detail_args=&amp;lt;error reading variable: Cannot access memory at address 0x8&amp;gt;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread=0xffffa881c150, pc=pc@entry=0x0, siginfo=siginfo@entry=0x0, context=context@entry=0xffffb0a8c260 &amp;lt;g_stored_assertion_context&amp;gt;, filename=filename@entry=0xffffb067b628 &amp;quot;src/hotspot/cpu/aarch64/assembler_aarch64.hpp&amp;quot;, lineno=lineno@entry=267, size=size@entry=0) at src/hotspot/share/utilities/vmError.cpp:1816&lt;br/&gt;
#4  0x0000ffffb0600670 in VMError::report_and_die (thread=&amp;lt;optimized out&amp;gt;, context=context@entry=0xffffb0a8c260 &amp;lt;g_stored_assertion_context&amp;gt;, filename=filename@entry=0xffffb067b628 &amp;quot;src/hotspot/cpu/aarch64/assembler_aarch64.hpp&amp;quot;, lineno=lineno@entry=267,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;message=message@entry=0xffffb06843d8 &amp;quot;guarantee(chk == -1 || chk == 0) failed&amp;quot;, detail_fmt=detail_fmt@entry=0xffffb067b5e8 &amp;quot;Field too big for insn&amp;quot;, detail_args=&amp;lt;error reading variable: Cannot access memory at address 0xffffffffffffffff&amp;gt;) at src/hotspot/share/utilities/vmError.cpp:1509&lt;br/&gt;
#5  0x0000ffffafddcb38 in report_vm_error (file=file@entry=0xffffb067b628 &amp;quot;src/hotspot/cpu/aarch64/assembler_aarch64.hpp&amp;quot;, line=line@entry=267, error_msg=error_msg@entry=0xffffb06843d8 &amp;quot;guarantee(chk == -1 || chk == 0) failed&amp;quot;, detail_fmt=detail_fmt@entry=0xffffb067b5e8 &amp;quot;Field too big for insn&amp;quot;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at src/hotspot/share/runtime/thread.hpp:692&lt;br/&gt;
#6  0x0000ffffafc880f8 in Instruction_aarch64::sf (lsb=15, msb=21, val=118, this=0xffff6ae0c450) at src/hotspot/cpu/aarch64/assembler_aarch64.hpp:267&lt;br/&gt;
#7  Address::encode_pair (i=0xffff6ae0c450, this=&amp;lt;synthetic pointer&amp;gt;) at src/hotspot/cpu/aarch64/assembler_aarch64.hpp:567&lt;br/&gt;
#8  Assembler::ld_st1 (no_allocate=false, adr=..., Rt2=&amp;lt;optimized out&amp;gt;, Rt1=&amp;lt;optimized out&amp;gt;, L=1, V=0, p1=5, opc=2, this=&amp;lt;optimized out&amp;gt;) at src/hotspot/cpu/aarch64/assembler_aarch64.hpp:1414&lt;br/&gt;
#9  Assembler::ldp (adr=..., Rt2=&amp;lt;optimized out&amp;gt;, Rt1=&amp;lt;optimized out&amp;gt;, this=&amp;lt;optimized out&amp;gt;) at src/hotspot/cpu/aarch64/assembler_aarch64.hpp:1428&lt;br/&gt;
#10 LIR_Assembler::osr_entry (this=0xffff6ae0c560) at src/hotspot/cpu/aarch64/c1_LIRAssembler_aarch64.cpp:285&lt;br/&gt;
#11 0x0000ffffafc85994 in LIR_Assembler::emit_lir_list (this=0xffff6ae0c560, list=0xaaaaf600edb0) at src/hotspot/share/c1/c1_LIRAssembler.cpp:302&lt;br/&gt;
#12 0x0000ffffafc85b8c in LIR_Assembler::emit_block (block=0xffff64ad8110, this=0xffff6ae0c560) at src/hotspot/share/c1/c1_Instruction.hpp:1722&lt;br/&gt;
#13 LIR_Assembler::emit_code (this=this@entry=0xffff6ae0c560, hir=0xaaaaf68921e0) at src/hotspot/share/c1/c1_LIRAssembler.cpp:226&lt;br/&gt;
#14 0x0000ffffafc56560 in Compilation::emit_code_body (this=this@entry=0xffff6ae0d020) at src/hotspot/share/c1/c1_IR.hpp:321&lt;br/&gt;
#15 0x0000ffffafc56964 in Compilation::compile_java_method (this=this@entry=0xffff6ae0d020) at src/hotspot/share/c1/c1_Compilation.cpp:401&lt;br/&gt;
#16 0x0000ffffafc56b70 in Compilation::compile_method (this=0xffff6ae0d020) at src/hotspot/share/c1/c1_Compilation.cpp:457&lt;br/&gt;
#17 Compilation::compile_method (this=0xffff6ae0d020) at src/hotspot/share/c1/c1_Compilation.cpp:426&lt;br/&gt;
#18 0x0000ffffafc56ee8 in Compilation::Compilation (this=0xffff6ae0d020, compiler=&amp;lt;optimized out&amp;gt;, env=&amp;lt;optimized out&amp;gt;, method=0xaaaaf6c408a0, osr_bci=&amp;lt;optimized out&amp;gt;, buffer_blob=&amp;lt;optimized out&amp;gt;, install_code=&amp;lt;optimized out&amp;gt;, directive=&amp;lt;optimized out&amp;gt;) at src/hotspot/share/c1/c1_Compilation.cpp:581&lt;br/&gt;
#19 0x0000ffffafc57a04 in Compiler::compile_method (this=&amp;lt;optimized out&amp;gt;, env=&amp;lt;optimized out&amp;gt;, method=&amp;lt;optimized out&amp;gt;, entry_bci=&amp;lt;optimized out&amp;gt;, install_code=&amp;lt;optimized out&amp;gt;, directive=&amp;lt;optimized out&amp;gt;) at src/hotspot/share/c1/c1_Compiler.cpp:248&lt;br/&gt;
#20 0x0000ffffafdb18ac in CompileBroker::invoke_compiler_on_method (task=task@entry=0xffffa88296b0) at src/hotspot/share/compiler/compileBroker.cpp:2330&lt;br/&gt;
#21 0x0000ffffafdb231c in CompileBroker::compiler_thread_loop () at src/hotspot/share/compiler/compileBroker.cpp:2001&lt;br/&gt;
#22 0x0000ffffb0587020 in JavaThread::thread_main_inner (this=0xffffa881c150) at src/hotspot/share/runtime/thread.hpp:1123&lt;br/&gt;
#23 0x0000ffffb058c0ec in Thread::call_run (this=0xffffa881c150) at src/hotspot/share/runtime/thread.cpp:395&lt;br/&gt;
#24 0x0000ffffb0375dfc in thread_native_entry (thread=0xffffa881c150) at src/hotspot/os/linux/os_linux.cpp:725&lt;br/&gt;
#25 0x0000ffffb0cab8b8 in start_thread () from /lib64/libpthread.so.0&lt;br/&gt;
#26 0x0000ffffb0b30afc in thread_start () from /lib64/libc.so.6</comment>
                            <comment id="14626700" author="karianna" created="Wed, 15 Nov 2023 18:29:58 -0800"  >Had a separate C1 crash on Linux AArch64 (17.0.9+9 this time) around the same area (`LIR_Assembler::osr_entry()`). &lt;a href=&quot;https://github.com/adoptium/adoptium-support/issues/951&quot;&gt;https://github.com/adoptium/adoptium-support/issues/951&lt;/a&gt; for the full details.&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffffa881c260):  JavaThread &amp;quot;C1 CompilerThread0&amp;quot; daemon [_thread_in_native, id=3720547, stack(0x0000ffff6ae10000,0x0000ffff6b00e000)]&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:22791144 31861 %s!   3       org.apache.hadoop.hbase.regionserver.MetricsRegionServerWrapperImpl$RegionServerMetricsWrapperRunnable::run @ 568 (2086 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff6ae10000,0x0000ffff6b00e000],  sp=0x0000ffff6b00b3b0,  free space=2028k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x4880f0]  LIR_Assembler::osr_entry()+0x200&lt;br/&gt;
V  [libjvm.so+0x485994]  LIR_Assembler::emit_lir_list(LIR_List*)+0x90&lt;br/&gt;
V  [libjvm.so+0x485b8c]  LIR_Assembler::emit_code(BlockList*)+0x5c&lt;br/&gt;
V  [libjvm.so+0x456560]  Compilation::emit_code_body()+0x110&lt;br/&gt;
V  [libjvm.so+0x456964]  Compilation::compile_java_method()+0x2e4&lt;br/&gt;
V  [libjvm.so+0x456b70]  Compilation::compile_method()+0x10c&lt;br/&gt;
V  [libjvm.so+0x456ee8]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x1a8&lt;br/&gt;
V  [libjvm.so+0x457a04]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x74&lt;br/&gt;
V  [libjvm.so+0x5b18ac]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd18&lt;br/&gt;
V  [libjvm.so+0x5b231c]  CompileBroker::compiler_thread_loop()+0x4fc&lt;br/&gt;
V  [libjvm.so+0xd87020]  JavaThread::thread_main_inner()+0x15c&lt;br/&gt;
V  [libjvm.so+0xd8c0ec]  Thread::call_run()+0xb8&lt;br/&gt;
V  [libjvm.so+0xb75dfc]  thread_native_entry(Thread*)+0xdc&lt;br/&gt;
C  [libpthread.so.0+0x78b8]  start_thread+0x188&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve also asked them to try running with C1 effectively switched off.</comment>
                            <comment id="14593284" author="thartmann" created="Sun, 2 Jul 2023 22:27:22 -0700"  >Okay, thanks for checking [~karianna]. </comment>
                            <comment id="14593191" author="karianna" created="Fri, 30 Jun 2023 16:36:25 -0700"  >[~thartmann] unfortunately the OP is not able to share the details of that class. I&amp;#39;ve asked them to run with a debug build but not sure if they&amp;#39;ll give us a result there.  The only thing they added was that the function was a JDBC call and the underlying driver is postgresql 42.5.4.&lt;br/&gt;
&lt;br/&gt;
I also asked them to run without -XX:TieredStopAtLevel=1 and they&amp;#39;ve reported no crashes so far with that flag removed.</comment>
                            <comment id="14591900" author="thartmann" created="Sun, 25 Jun 2023 23:41:20 -0700"  >ILW = Same as &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8296924&quot; title=&quot;C2: assert(is_valid_AArch64_address(dest.target())) failed: bad address&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8296924&quot;&gt;&lt;strike&gt;JDK-8296924&lt;/strike&gt;&lt;/a&gt; = P3</comment>
                            <comment id="14591898" author="thartmann" created="Sun, 25 Jun 2023 23:37:41 -0700"  >[~karianna] Could we get &amp;#39;care/better/demographics/index/indexing/param/DatabaseAwareSearchParameterRetriever&amp;#39; (.class file is fine) from the submitter?&lt;br/&gt;
&lt;br/&gt;
And as usual, other things to try would be:&lt;br/&gt;
- Run with a more recent JDK version&lt;br/&gt;
- Run with a debug VM build</comment>
                            <comment id="14591897" author="thartmann" created="Sun, 25 Jun 2023 23:35:30 -0700"  >Looks like &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8296924&quot; title=&quot;C2: assert(is_valid_AArch64_address(dest.target())) failed: bad address&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8296924&quot;&gt;&lt;strike&gt;JDK-8296924&lt;/strike&gt;&lt;/a&gt; but that should be fixed in 17.0.7.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5118286">JDK-8323171</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118383">JDK-8323257</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118394">JDK-8323266</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118443">JDK-8323313</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118654">JDK-8323514</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5119894">JDK-8324588</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5127544">JDK-8330806</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5075646">JDK-8287349</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5115383">JDK-8320682</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118086">JDK-8322996</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="107797" name="Test2.java" size="8670" author="thartmann" created="Thu, 4 Jan 2024 00:57:09 -0800"/>
                            <attachment id="104411" name="hs_err_pid2929.log" size="134788" author="karianna" created="Sat, 24 Jun 2023 02:21:31 -0700"/>
                            <attachment id="104412" name="replay_pid2929.log" size="1150819" author="karianna" created="Sat, 24 Jun 2023 02:21:22 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3225v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>