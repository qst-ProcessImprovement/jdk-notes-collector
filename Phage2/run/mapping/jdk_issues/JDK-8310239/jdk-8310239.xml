<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:00:11 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8310239] Add missing cross modifying fence in nmethod entry barriers</title>
                <link>https://bugs.openjdk.org/browse/JDK-8310239</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/gc/vector/NonbranchyTreeHigh/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(6/330)----------&lt;br/&gt;
command: main gc.vector.SimpleGC.SimpleGC -ms high -gp nonbranchyTree(high)&lt;br/&gt;
reason: User specified action: run main/othervm gc.vector.SimpleGC.SimpleGC -ms high -gp nonbranchyTree(high) &lt;br/&gt;
started: Fri Jun 16 18:15:40 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
finished: Fri Jun 16 18:15:51 UTC 2023&lt;br/&gt;
elapsed time (seconds): 10.911&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(34/1800)----------&lt;br/&gt;
Stress time: 30 seconds&lt;br/&gt;
Stress iterations factor: 1&lt;br/&gt;
Stress threads factor: 1&lt;br/&gt;
Stress runs factor: 1&lt;br/&gt;
Max memory: 1040187392&lt;br/&gt;
Sleep time: 500&lt;br/&gt;
Iterations: 0&lt;br/&gt;
Number of threads: 24&lt;br/&gt;
Run GC thread: false&lt;br/&gt;
Run mem diag thread: true&lt;br/&gt;
Run forever: false&lt;br/&gt;
Memory to fill out: 624112435&lt;br/&gt;
Array lenght: 100&lt;br/&gt;
Object size: 6241124&lt;br/&gt;
Garbage producer: nsk.share.gc.gp.tree.NonbranchyTreeProducer&lt;br/&gt;
Memory Strategy: high&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f5334ae0ff0, pid=4136100, tid=4136115&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0+28) (build 21-ea+28-LTS-2348)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+28-LTS-2348, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xf9aff0]  ZBarrier::mark_from_young_slow_path(zaddress)+0x50&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S180241/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/506ba9a0-b8ed-44d8-a614-4ea7e3c52a46/runs/cd6888e5-38ba-493f-9042-829339a13225/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_container/scratch/0/core.4136100)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S180241/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/506ba9a0-b8ed-44d8-a614-4ea7e3c52a46/runs/cd6888e5-38ba-493f-9042-829339a13225/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_container/scratch/0/hs_err_pid4136100.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(37/7959)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
result: Failed. Unexpected exit from test [exit code: 134]</description>
                <environment></environment>
        <key id="5103431">JDK-8310239</key>
            <summary>Add missing cross modifying fence in nmethod entry barriers</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="eosterlund">Erik &#214;sterlund</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>CPU21_02-critical-request</label>
                            <label>amazon-interest</label>
                            <label>genzgc</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>tier5</label>
                            <label>tier7</label>
                    </labels>
                <created>Fri, 16 Jun 2023 11:46:18 -0700</created>
                <updated>Wed, 26 Jun 2024 03:52:07 -0700</updated>
                            <resolved>Mon, 30 Oct 2023 07:01:24 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14658933" author="shade" created="Wed, 20 Mar 2024 03:36:43 -0700"  >This looks like a day 1 issue with nmethod barriers (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8210498&quot; title=&quot;nmethod entry barriers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8210498&quot;&gt;&lt;strike&gt;JDK-8210498&lt;/strike&gt;&lt;/a&gt;), it only started to trigger visibly recently, as we started to rely on nmethod barriers more heavily. So I think JDK 17 also deserves a fix, provided we see no performance regressions in 22 and 21.0.2 with it.&lt;br/&gt;
&lt;br/&gt;
Does that sound accurate?</comment>
                            <comment id="14643828" author="epavlova" created="Thu, 25 Jan 2024 11:05:11 -0800"  >Checked that vmTestbase/gc/vector/NonbranchyTreeHigh/TestDescription.java  passed in both JDK22 ATR and GenZGC ATR.</comment>
                            <comment id="14626029" author="eosterlund" created="Tue, 14 Nov 2023 00:56:26 -0800"  >Since this can cause a crash (as observed) without the fix, and the patch just adds some fencing with minimal risk, I would like this to go into JDK21u.02.</comment>
                            <comment id="14626024" author="roboduke" created="Tue, 14 Nov 2023 00:48:26 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/359&quot;&gt;https://git.openjdk.org/jdk21u/pull/359&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-14 08:40:42 +0000</comment>
                            <comment id="14625723" author="eosterlund" created="Mon, 13 Nov 2023 07:55:14 -0800"  >Fix Request&lt;br/&gt;
This fix is important as it causes crashes that have been observed in practice. The fix only adds fencing that wasn&amp;#39;t there before, so the risk should be minimal. The patch applies clean.</comment>
                            <comment id="14622035" author="dukebot" created="Mon, 30 Oct 2023 07:01:23 -0700"  >Changeset: 4679e9aa&lt;br/&gt;
Author:    Erik &amp;#xD6;sterlund &amp;lt;&lt;a href=&apos;mailto:eosterlund@openjdk.org&apos;&gt;eosterlund@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-30 13:59:08 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4679e9aa00c098cff715fb4deeb4d736e1063571&quot;&gt;https://git.openjdk.org/jdk/commit/4679e9aa00c098cff715fb4deeb4d736e1063571&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14615815" author="dcubed" created="Wed, 4 Oct 2023 06:17:22 -0700"  >[~eosterlund] - We&amp;#39;ve had 3 sightings of this failure mode in the last 3 days and&lt;br/&gt;
each is in a different test. Any idea why this one became more active?</comment>
                            <comment id="14590311" author="roboduke" created="Mon, 19 Jun 2023 08:34:04 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14543&quot;&gt;https://git.openjdk.org/jdk/pull/14543&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-19 15:26:37 +0000</comment>
                            <comment id="14590301" author="eosterlund" created="Mon, 19 Jun 2023 07:42:43 -0700"  >In fact, there is a current race in the nmethod entry barriers, where what we are doing violates the AMD APM (cf. APM volume 2 section 7.6.1 &lt;a href=&quot;https://www.amd.com/system/files/TechDocs/24593.pdf)&quot;&gt;https://www.amd.com/system/files/TechDocs/24593.pdf)&lt;/a&gt;.&lt;br/&gt;
In particular, if the compare instruction is not yet patched and we call a slow path on thread 1, then before taking the nmethod entry lock, another thread 2 could fix and disarm the nmethod. Then thread 1 will observe *data* suggesting the nmethod has been patched, but never re-executes the patched compare (which might indeed still be stale), hence not qualifying for asynchronous cross modifying code, and neither do we run a serializing cpuid instruction, qualifying for synchronous cross modifying code. In this scenario, we can indeed start executing the nmethod instructions, while observing inconsistent concurrent patching effects, where some instructions will be updated and some not. This is consistent with the observed behaviour.</comment>
                            <comment id="14590246" author="eosterlund" created="Mon, 19 Jun 2023 05:01:57 -0700"  >After digging around in the core file with [~aboldtch], we can draw some conclusions.&lt;br/&gt;
A LinkedMemoryObject was allocated after the previous young mark start. A constructor initialized its &amp;quot;storage&amp;quot; field to a pointer to a byte array, which looks broken.&lt;br/&gt;
&lt;br/&gt;
Since the object was allocated after the previous mark start, the GC should not have followed the fields, and hence not touched the &amp;quot;storage&amp;quot; field. In other words, the field value we observe seems to be the value written by the constructor from the mutator.&lt;br/&gt;
&lt;br/&gt;
Looking at the field bits, we can see that the colours are indeed from after the previous young mark start, and before the previous young relocate start. However, the shift value for the address is 16, which is consistent with the expected shift *after* the previous young relocate start. The shift value from before previous young mark start should have been 15 - and indeed there is the expected object.&lt;br/&gt;
&lt;br/&gt;
We can also see from the Java code that the field being written, is the result of an allocation inside of the constructor of the LinkedMemoryObject. So the address was not the result of loading something with a load barrier. We had the address from the allocation, and coloured it, and the result was bananas.&lt;br/&gt;
&lt;br/&gt;
So to summarise:&lt;br/&gt;
1. The mutator wrote the field, nobody else has touched the field.&lt;br/&gt;
2. The colour written and the shift, are not consistent. The colour is from before previous young relocate start, and the shift from after previous young relocate start.&lt;br/&gt;
3. The address being coloured was a new allocation, and not the result of a load barrier.&lt;br/&gt;
&lt;br/&gt;
This seems to suggest some kind of nasty race with nmethod entry barriers, where the patched instructions are not observed in the right order. That code assumes there is instruction cache coherency on x86. This crash seems to indicate that this property has been violated, either in the hypervisor or in the hardware.&lt;br/&gt;
&lt;br/&gt;
...or our analysis is wildly inaccurate and there is a bug in the JVM.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5115260">JDK-8320578</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5132571">JDK-8334890</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22711">21</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31y3n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>