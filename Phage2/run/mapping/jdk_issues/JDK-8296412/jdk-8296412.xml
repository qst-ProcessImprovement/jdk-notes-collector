<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:20:12 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8296412] Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts</title>
                <link>https://bugs.openjdk.org/browse/JDK-8296412</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Working hypothesis:&lt;br/&gt;
Maybe backedge of irreducible loop is missing a SafePoint.&lt;br/&gt;
&lt;br/&gt;
During fuzzing work of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280126&quot; title=&quot;C2: detect and remove dead irreducible loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280126&quot;&gt;&lt;strike&gt;JDK-8280126&lt;/strike&gt;&lt;/a&gt;, I found an S.jasm that triggers the following assert:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/loopnode.cpp:3610), pid=159269, tid=159282&lt;br/&gt;
#  assert(is_member(nlpt)) failed: nested loop&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xf5cb86]  IdealLoopTree::check_safepts(VectorSet&amp;amp;, Node_List&amp;amp;)+0x200&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:    742   26    b        S::test (27 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f4a65dfe000,0x00007f4a65eff000],  sp=0x00007f4a65ef9090,  free space=1004k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xf5cb86]  IdealLoopTree::check_safepts(VectorSet&amp;amp;, Node_List&amp;amp;)+0x200  (loopnode.cpp:3610)&lt;br/&gt;
V  [libjvm.so+0xf5c9f7]  IdealLoopTree::check_safepts(VectorSet&amp;amp;, Node_List&amp;amp;)+0x71  (loopnode.cpp:3584)&lt;br/&gt;
V  [libjvm.so+0xf5c9cf]  IdealLoopTree::check_safepts(VectorSet&amp;amp;, Node_List&amp;amp;)+0x49  (loopnode.cpp:3583)&lt;br/&gt;
V  [libjvm.so+0xf5ff1f]  PhaseIdealLoop::build_and_optimize()+0x8bf  (loopnode.cpp:4358)&lt;br/&gt;
V  [libjvm.so+0x8a6343]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;amp;, LoopOptsMode)+0x105  (loopnode.hpp:1087)&lt;br/&gt;
V  [libjvm.so+0x8a653e]  PhaseIdealLoop::optimize(PhaseIterGVN&amp;amp;, LoopOptsMode)+0x46  (loopnode.hpp:1166)&lt;br/&gt;
V  [libjvm.so+0x899177]  Compile::Optimize()+0xa69  (compile.cpp:2365)&lt;br/&gt;
V  [libjvm.so+0x892104]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1404  (compile.cpp:830)&lt;br/&gt;
V  [libjvm.so+0x780a9b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x179  (c2compiler.cpp:113)&lt;br/&gt;
V  [libjvm.so+0x8b0df8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x916  (compileBroker.cpp:2240)&lt;br/&gt;
V  [libjvm.so+0x8afa61]  CompileBroker::compiler_thread_loop()+0x3ed  (compileBroker.cpp:1916)&lt;br/&gt;
V  [libjvm.so+0x8d01aa]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x72  (compilerThread.cpp:58)&lt;br/&gt;
V  [libjvm.so+0xc5e0cc]  JavaThread::thread_main_inner()+0x144  (javaThread.cpp:699)&lt;br/&gt;
V  [libjvm.so+0xc5df84]  JavaThread::run()+0x182  (javaThread.cpp:684)&lt;br/&gt;
V  [libjvm.so+0x13306e7]  Thread::call_run()+0x195  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x10ddf15]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)&lt;br/&gt;
&lt;br/&gt;
Reproduce it:&lt;br/&gt;
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm S.jasm&lt;br/&gt;
java -Xcomp -XX:CompileCommand=compileonly,S::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 -XX:-RenumberLiveNodes S&lt;br/&gt;
&lt;br/&gt;
Note that the flags&lt;br/&gt;
&amp;nbsp;-XX:PerMethodTrapLimit=0 -XX:-RenumberLiveNodes&lt;br/&gt;
are not required, but simplify the graph by removing traps (no predicates inserted), and the node idx are stable as they are not renumbered during remove useless.&lt;br/&gt;
&lt;br/&gt;
While it is well possible that this is only reproducilbe with irreducible loops, it does not seem to have to do with dead irreducible loops, so it is a separate bug from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280126&quot; title=&quot;C2: detect and remove dead irreducible loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280126&quot;&gt;&lt;strike&gt;JDK-8280126&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
Analysis:&lt;br/&gt;
(please look at attached png&amp;#39;s for node idx)&lt;br/&gt;
In IdealLoopTree::check_safepts.&lt;br/&gt;
this:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N37/N57&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Loop: N37/N56  sfpts={ 44 }&lt;br/&gt;
We start walking from n = tail() up the n = idom(n):&lt;br/&gt;
57  IfFalse&lt;br/&gt;
55  If&lt;br/&gt;
We realize that 55 If belongs to:&lt;br/&gt;
Loop: N37/N56&lt;br/&gt;
Hence, we jump to head of that loop, so set n:&lt;br/&gt;
37  Region&lt;br/&gt;
(note: this is the loop head of &amp;quot;this&amp;quot; loop, we should abort the idom walk)&lt;br/&gt;
We take n = idom(n), and get:&lt;br/&gt;
25  IfTrue&lt;br/&gt;
(this node is outside the loop, but the assumption of the code is that we are still inside the loop)&lt;br/&gt;
This node&amp;#39;s loop (nlpt) is:&lt;br/&gt;
Loop: N0/N0  has_sfpt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N103/N102  sfpts={ 82 70 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N37/N57&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Loop: N37/N56  sfpts={ 44 }&lt;br/&gt;
(this is the root loop)&lt;br/&gt;
Now we hit the assert, we check that &amp;quot;nlpt&amp;quot; is a member of &amp;quot;this&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
Why does this usually work?&lt;br/&gt;
Usually, when we have a nested loop, where the loop is shared, we seem to always have a SafePoint on the backedge of the outer loop. So when we exit the inner loop, we expect to go through a SafePoint before we take the backedge to the loop head.&lt;br/&gt;
This seems not to be given, and may well have to do with the fact that we have an irreducible loop here (37 and 38 Region).&lt;br/&gt;
&lt;br/&gt;
What could be solutions?&lt;br/&gt;
I have not really understood the issue. But some first thoughts include:&lt;br/&gt;
1) Checking when we jump to the loop-head of the inner loop, if this is also the loop head of the outer loop. But this would be accepting that backedges of outer-loops do not have safepoints.&lt;br/&gt;
2) Insert the safepoint during parsing.</description>
                <environment></environment>
        <key id="5086838">JDK-8296412</key>
            <summary>Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>c2</label>
                            <label>irreducibility</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk20u-fix-SQE-ok-next</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>oracle-triage-20</label>
                    </labels>
                <created>Fri, 4 Nov 2022 09:23:47 -0700</created>
                <updated>Wed, 24 May 2023 00:39:38 -0700</updated>
                            <resolved>Mon, 19 Dec 2022 04:23:06 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14575388" author="roboduke" created="Thu, 20 Apr 2023 04:31:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1287&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1287&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-20 11:22:46 +0000</comment>
                            <comment id="14575374" author="goetz" created="Thu, 20 Apr 2023 04:08:18 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.8-oracle.&lt;br/&gt;
A small C2 change with the typical risk.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes and fails without the fix.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14571683" author="roboduke" created="Tue, 4 Apr 2023 06:36:21 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/49&quot;&gt;https://git.openjdk.org/jdk20u/pull/49&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-04 13:27:12 +0000</comment>
                            <comment id="14571675" author="thartmann" created="Tue, 4 Apr 2023 06:27:56 -0700"  >Fix Request (JDK 20u)&lt;br/&gt;
Fixes an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.</comment>
                            <comment id="14546398" author="dukebot" created="Mon, 19 Dec 2022 04:23:05 -0800"  >Changeset: da38d43f&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2022-12-19 12:21:50 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/da38d43fcc640ea9852db6c7c23817dcef7080d5&quot;&gt;https://git.openjdk.org/jdk/commit/da38d43fcc640ea9852db6c7c23817dcef7080d5&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14546049" author="roboduke" created="Fri, 16 Dec 2022 03:18:27 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11706&quot;&gt;https://git.openjdk.org/jdk/pull/11706&lt;/a&gt;&lt;br/&gt;
Date: 2022-12-16 09:57:35 +0000</comment>
                            <comment id="14545083" author="JIRAUSER19821" created="Tue, 13 Dec 2022 06:20:29 -0800"  >Current understanding:&lt;br/&gt;
Issue is not irreducibility (at least not primarily).&lt;br/&gt;
Rather, we have an issue if a loop-entry (or just loop-head) comes after (a part of) its loop body. During parsing, we only insert SafePoints when we jump from a higher to lower bci. That ensures every backedge has a SafePoint (at least initially). But if the head is after the body, there is no SafePoint on the backedge, but the SafePoint is somewhere in the loop-body. This is not expected in the logic of IdealLoopTree::check_safepts.&lt;br/&gt;
There is an issue for irreducible loops: at least one loop-entry cannot be the first block of the loop. If all other loop-entries were to lose their entry, we now have a loop-head that is not in the first block, hence no SafePoints on backedges.</comment>
                            <comment id="14535021" author="dlong" created="Fri, 4 Nov 2022 19:35:33 -0700"  >ILW = assert in debug build; debug only, jasm test; no workaround = MMH = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5097388">JDK-8305168</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098256">JDK-8305876</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099418">JDK-8306826</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099670">JDK-8307046</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5066201">JDK-8280126</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5086737">JDK-8296318</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5090238">JDK-8299214</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="101450" name="S.jasm" size="704" author="epeter" created="Fri, 4 Nov 2022 09:12:56 -0700"/>
                            <attachment id="101449" name="S.jasm.0.png" size="79182" author="epeter" created="Fri, 4 Nov 2022 09:12:56 -0700"/>
                            <attachment id="101448" name="S.jasm.1.png" size="57956" author="epeter" created="Fri, 4 Nov 2022 09:12:56 -0700"/>
                            <attachment id="101447" name="S.jasm.2.png" size="59902" author="epeter" created="Fri, 4 Nov 2022 09:12:56 -0700"/>
                            <attachment id="101452" name="hs_err_pid159269.log" size="76393" author="epeter" created="Fri, 4 Nov 2022 09:12:41 -0700"/>
                            <attachment id="101451" name="replay_pid159269.log" size="150170" author="epeter" created="Fri, 4 Nov 2022 09:12:41 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2z4wz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>