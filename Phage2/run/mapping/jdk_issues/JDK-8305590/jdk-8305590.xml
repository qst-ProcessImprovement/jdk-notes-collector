<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 18:19:09 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8305590] Remove nothrow exception specifications from operator new</title>
                <link>https://bugs.openjdk.org/browse/JDK-8305590</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Only allocation functions (e.g. `operator new`) that can actually return null should have nothrow exception specs.  Having unnecessary nothrow exception specs causes the compiler to generate useless null checks.&lt;br/&gt;
&lt;br/&gt;
JDK-8021954 added `throw()` exception specifications to all allocation functions provided by HotSpot.  This was in response to a metaspace allocation failure returning null, leading to a crash.&lt;br/&gt;
&lt;br/&gt;
The standard (C++03 5.3.4/13, C++14 5.3.4/15) provides the rationale for that change.  An allocation function can report allocation failure either by returning null (when it must have a nothrow exception specification), or by throwing `std::bad_alloc` (so obviously must not be declared as non-throwing).&lt;br/&gt;
&lt;br/&gt;
The purpose of the nothrow exception spec is to allow a `new` expression to detect a potential null allocation, for which it must itself return null, without attempting initialization.&lt;br/&gt;
&lt;br/&gt;
However, the JDK-8021954 change was an over-response to the problem.  We only need nothrow exception spes for allocation functions that return null to indicate failure.  Many (nearly all?) of our `operator new` functions indicate allocation failure by terminating the program rather than returning null.  This is typically determined by a given `operator new` passing the appropriate AllocFailStrategy to the underlying implementation.  `Metaspace::allocate` returns null to indicate allocation failure, and many of the callers (including the allocation functions for MetaspaceObj and Klass) just pass that null result along to their callers for appropriate handling.&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;re also unnecessarily using the gcc option `-fcheck-new`.  That option is redundant when the allocation function has a nothrow spec (indicating it can return null), because the compiler will generate the null check regardless of that option.  And if the allocation function never returns null (indicated by not having a nothrow spec), then that option is just making the compiler generate a useless null check.&lt;br/&gt;
&lt;br/&gt;
StackObj::operator new will need additional adjustment.  Perhaps it can just have the allocation and deallocation functions declared deleted?&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5097893">JDK-8305590</key>
            <summary>Remove nothrow exception specifications from operator new</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="azafari">Afshin Zafari</assignee>
                                    <reporter username="kbarrett">Kim Barrett</reporter>
                        <labels>
                            <label>cpp</label>
                    </labels>
                <created>Tue, 4 Apr 2023 09:48:03 -0700</created>
                <updated>Fri, 13 Jun 2025 03:21:19 -0700</updated>
                            <resolved>Sun, 23 Apr 2023 08:22:41 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14575899" author="dukebot" created="Sun, 23 Apr 2023 08:22:40 -0700"  >Changeset: 0f51e632&lt;br/&gt;
Author:    Afshin Zafari &amp;lt;&lt;a href=&apos;mailto:Afshin.zafari@oracle.com&apos;&gt;Afshin.zafari@oracle.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Jesper Wilhelmsson &amp;lt;&lt;a href=&apos;mailto:jwilhelm@openjdk.org&apos;&gt;jwilhelm@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-23 15:20:18 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/0f51e6326373ff7d4a4d9a0e3a2788401f73405d&quot;&gt;https://git.openjdk.org/jdk/commit/0f51e6326373ff7d4a4d9a0e3a2788401f73405d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14575467" author="kbarrett" created="Thu, 20 Apr 2023 09:55:49 -0700"  >[~dholmes] The effect of the nothrow spec is to make the compiler check the result for null.  What possible bug would make such a check necessary for a function that never returns null?&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s possible the referenced article was misleading or contained misinformation. That&amp;#39;s hard to know without being able to read it (and I spent a bit of time trying but failing to find it, because I was curious). But having just read the Visual Studio documentation for /Zc:throwingNew (see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8306579&quot; title=&quot;Consider building with /Zc:throwingNew&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8306579&quot;&gt;&lt;strike&gt;JDK-8306579&lt;/strike&gt;&lt;/a&gt;) I can easily believe that&amp;#39;s the problem.&lt;br/&gt;
</comment>
                            <comment id="14575403" author="dholmes" created="Thu, 20 Apr 2023 05:39:28 -0700"  >[~kbarrett] Maybe there was a bug in clang? My assumption is that something in that article led to the conclusion that &amp;quot;empty exception throw() specifications must be added to all user-defined operator new()&amp;#39;s.&amp;quot;.</comment>
                            <comment id="14575280" author="kbarrett" created="Thu, 20 Apr 2023 01:09:42 -0700"  >[~dholmes] I don&amp;#39;t see how it could have been necessary at the time. One can infer what that blog post said without having access - it was an explanation of the requirement to mark allocation functions noexcept if they can return null. It has never made sense for an allocation function to be noexcept even though it never returns null.  That just causes the compiler to generate useless null checks. No change to clang would have changed that.  But now, due to improved value propagation, those useless null checks are causing problems.&lt;br/&gt;
&lt;br/&gt;
Aside: The purpose of gcc&amp;#39;s `-fcheck-new` is to request the compiler generate null checks for allocation functions that aren&amp;#39;t noexcept. The point seems to be that one may be dealing with allocation functions that can return null but don&amp;#39;t have the required noexcept to indicate that, but for whatever reason you can&amp;#39;t fix that missing noexcept.  Maybe it&amp;#39;s in 3rd-party code that you aren&amp;#39;t allowed to modify, or something like that.&lt;br/&gt;
</comment>
                            <comment id="14575234" author="dholmes" created="Wed, 19 Apr 2023 22:05:00 -0700"  >[~kbarrett] I understand that is how it is viewed now, but it seemed to be deemed necessary at the time - but without the original motivating article I can&amp;#39;t confirm one way or the other. I presume clang has changed in the last 10 years. :)</comment>
                            <comment id="14575187" author="kbarrett" created="Wed, 19 Apr 2023 13:33:12 -0700"  >[~dholmes] That&amp;#39;s the &amp;quot;over-response&amp;quot; mentioned in the description.  Not all user-defined operator new()&amp;#39;s needed the empty exception specification.  Only those that report failure by returning null need it.  That empty exception spec is the signal to the language implementation that it needs to check for a null return and behave accordingly (see refs to the Standard).  Looking at change history, I think that at the time JDK-8021954 went in we already had in place some things like AllocFailStrategy (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8000617&quot; title=&quot;It should be possible to allocate memory without the VM dying on failure.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8000617&quot;&gt;&lt;strike&gt;JDK-8000617&lt;/strike&gt;&lt;/a&gt;), so even back then we had operator new()s that didn&amp;#39;t report failure by returning null, so did not need an empty exception spec.&lt;br/&gt;
</comment>
                            <comment id="14575045" author="dholmes" created="Wed, 19 Apr 2023 05:03:26 -0700"  >The summary from  JDK-8021954 was:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;The clang++ compiler does not support the  -fcheck-new option. To obtain similiar functionality when building Hotspot with clang++, empty exception throw() specifications must be added to all user-defined operator new()&amp;#39;s. &amp;quot;&lt;br/&gt;
&lt;br/&gt;
Unfortunately the article explaining this need no longer seems to exist and it was nearly 10 years ago.</comment>
                            <comment id="14574649" author="roboduke" created="Tue, 18 Apr 2023 05:58:50 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13498&quot;&gt;https://git.openjdk.org/jdk/pull/13498&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-17 17:09:44 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5099055">JDK-8306579</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5098057">JDK-8305719</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111065">JDK-8316930</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5032725">JDK-8255082</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5141992">JDK-8342639</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i310jn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>