<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:50:04 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302351] &quot;assert(!JavaThread::current()-&gt;is_interp_only_mode() || !nm-&gt;method()-&gt;is_continuation_enter_intrinsic() || ContinuationEntry::is_interpreted_call(return_pc)) failed: interp_only_mode but not in enterSpecial interpreted entry&quot; in fixup_callers_callsite</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302351</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
applications/kitchensink/Kitchensink.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
[2023-02-11T20:43:15.889002068Z] Gathering output for process 2310136&lt;br/&gt;
[2023-02-11T20:43:22.081309540Z] Waiting for completion for process 2310136&lt;br/&gt;
[2023-02-11T20:43:22.081390780Z] Waiting for completion finished for process 2310136&lt;br/&gt;
Output and diagnostic info for process 2310136 was saved into &amp;#39;pid-2310136-output.log&amp;#39;&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151618/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a4d65992-3afb-47b6-b336-7e34fa3a803f/runs/750ecb11-b813-450b-8537-da6a29c4cd6a/workspace/open/src/hotspot/share/runtime/sharedRuntime.cpp:2132), pid=2301175, tid=2310378&lt;br/&gt;
[stress.process.out] #  assert(!JavaThread::current()-&amp;gt;is_interp_only_mode() || !nm-&amp;gt;method()-&amp;gt;is_continuation_enter_intrinsic() || ContinuationEntry::is_interpreted_call(return_pc)) failed: interp_only_mode but not in enterSpecial interpreted entry&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (21.0+10) (fastdebug build 21-ea+10-LTS-728)&lt;br/&gt;
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+10-LTS-728, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
[stress.process.out] # Problematic frame:&lt;br/&gt;
[stress.process.out] # V  [libjvm.so+0x16a9bf0]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S33376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6d2b36a6-871e-4ef2-9072-52d82df296fd/runs/9e712550-718c-400e-afa6-b22ae22c70f7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.2301175)&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] Unsupported internal testing APIs have been used.&lt;br/&gt;
[stress.process.out] &lt;br/&gt;
[stress.process.out] # An error report file with more information is saved as:&lt;br/&gt;
[stress.process.out] # /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S33376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6d2b36a6-871e-4ef2-9072-52d82df296fd/runs/9e712550-718c-400e-afa6-b22ae22c70f7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid2301175.log&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[stress.process.out] # If you would like to submit a bug report, please visit:&lt;br/&gt;
[stress.process.out] #   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
[stress.process.out] #&lt;br/&gt;
[2023-02-11T20:44:22.086497406Z] Gathering output for process 2310520&lt;br/&gt;
[2023-02-11T20:44:22.094622277Z] Waiting for completion for process 2310520&lt;br/&gt;
[2023-02-11T20:44:22.094691037Z] Waiting for completion finished for process 2310520&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffe800dc2a0):  JavaThread &amp;quot;ForkJoinPool-1-worker-33&amp;quot; daemon [_thread_in_Java, id=2310378, stack(0x0000fffea17a0000,0x0000fffea19a0000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffea17a0000,0x0000fffea19a0000],  sp=0x0000fffea199dbf0,  free space=2038k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x16a9bf0]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0  (sharedRuntime.cpp:2132)&lt;br/&gt;
v  ~BufferBlob::I2C/C2I adapters 0x0000ffff843ff190&lt;br/&gt;
J 16823  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (0 bytes) @ 0x0000ffff85c12ed8 [0x0000ffff85c12dc0+0x0000000000000118]&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (printing native stack (with source info)), id 0xb, SIGSEGV (0xb) at pc=0x0000ffff9a74662c]&lt;br/&gt;
&lt;br/&gt;
Retrying call stack printing without source information...&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x16a9bf0]  SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0  (sharedRuntime.cpp:2132)&lt;br/&gt;
v  ~BufferBlob::I2C/C2I adapters 0x0000ffff843ff190&lt;br/&gt;
J 16823  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (0 bytes) @ 0x0000ffff85c12ed8 [0x0000ffff85c12dc0+0x0000000000000118]&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (retry printing native stack (no source info)), id 0xb, SIGSEGV (0xb) at pc=0x0000ffff9a74662c]</description>
                <environment></environment>
        <key id="5094001">JDK-8302351</key>
            <summary>&quot;assert(!JavaThread::current()-&gt;is_interp_only_mode() || !nm-&gt;method()-&gt;is_continuation_enter_intrinsic() || ContinuationEntry::is_interpreted_call(return_pc)) failed: interp_only_mode but not in enterSpecial interpreted entry&quot; in fixup_callers_callsite</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pchilanomate">Patricio Chilano Mateo</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>loom</label>
                            <label>oracle-triage-21</label>
                            <label>test-bigapps-Kitchensink</label>
                            <label>tier4</label>
                            <label>tier7</label>
                            <label>tier8</label>
                    </labels>
                <created>Mon, 13 Feb 2023 09:49:38 -0800</created>
                <updated>Tue, 25 Jul 2023 04:32:19 -0700</updated>
                            <resolved>Thu, 6 Jul 2023 12:17:53 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14594768" author="roboduke" created="Mon, 10 Jul 2023 07:43:34 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/106&quot;&gt;https://git.openjdk.org/jdk21/pull/106&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-10 14:23:18 +0000</comment>
                            <comment id="14594299" author="dukebot" created="Thu, 6 Jul 2023 12:17:52 -0700"  >Changeset: 0c86c31b&lt;br/&gt;
Author:    Patricio Chilano Mateo &amp;lt;&lt;a href=&apos;mailto:pchilanomate@openjdk.org&apos;&gt;pchilanomate@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-06 19:15:45 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/0c86c31bccd676e1cfbd35898ee16e89d5752688&quot;&gt;https://git.openjdk.org/jdk/commit/0c86c31bccd676e1cfbd35898ee16e89d5752688&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14583941" author="roboduke" created="Tue, 23 May 2023 15:21:22 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14108&quot;&gt;https://git.openjdk.org/jdk/pull/14108&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-23 22:07:37 +0000</comment>
                            <comment id="14583458" author="pchilanomate" created="Mon, 22 May 2023 13:33:36 -0700"  >Thanks [~dlong]. I will finish testing the proposed fix then and send a PR to fix this crash. We can keep &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8218403&quot; title=&quot;Deoptimizing top frame not always sufficient to reach interpreter-only mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8218403&quot;&gt;JDK-8218403&lt;/a&gt; open if you think there are still other issues remaining with JVMCI.</comment>
                            <comment id="14583440" author="dlong" created="Mon, 22 May 2023 11:44:18 -0700"  >[~pchilanomate], it&amp;#39;s been a long time since I thought about these problems, so my answers might not be 100% right.  I think your proposed solution above would probably work for most cases.  If I remember correctly, the hard cases for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8218403&quot; title=&quot;Deoptimizing top frame not always sufficient to reach interpreter-only mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8218403&quot;&gt;JDK-8218403&lt;/a&gt; and when ForceEarlyReturn/PopFrame are involved, especially in the past when -Xcomp with JVMCI could cause a Java upcall in the resolve stub.  But JVMCI no longer does that, so some of the problems that caused me to file &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8218403&quot; title=&quot;Deoptimizing top frame not always sufficient to reach interpreter-only mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8218403&quot;&gt;JDK-8218403&lt;/a&gt; may be impossible to reproduce now.</comment>
                            <comment id="14582998" author="pchilanomate" created="Fri, 19 May 2023 14:12:15 -0700"  >[~dlong] I read the possible solutions listed in 8218403. Whats wrong with just checking if the thread is in interpreted only mode before returning to Java and in that case return the c2i adapter instead?:&lt;br/&gt;
&lt;br/&gt;
return current-&amp;gt;is_interp_only_mode() ? callee_method-&amp;gt;get_c2i_entry() : callee_method-&amp;gt;verified_code_entry(); </comment>
                            <comment id="14582967" author="pchilanomate" created="Fri, 19 May 2023 11:11:03 -0700"  >The assert we hit was added along the changes for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288949&quot; title=&quot;serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java failing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288949&quot;&gt;&lt;strike&gt;JDK-8288949&lt;/strike&gt;&lt;/a&gt; but this issue is pre-existent. It&amp;#39;s just that now the assert made the bug visible. I see this is actually a duplicate of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8218403&quot; title=&quot;Deoptimizing top frame not always sufficient to reach interpreter-only mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8218403&quot;&gt;JDK-8218403&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
In &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288949&quot; title=&quot;serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java failing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288949&quot;&gt;&lt;strike&gt;JDK-8288949&lt;/strike&gt;&lt;/a&gt; there were changes made to resolve_static_call_C() that also deal with interpreted only mode. But the issue that was addressed in that bug was slightly different. It was trying to fix the case where the JavaThread already noticed it was in interpreted only mode but because enterSpecial didn&amp;#39;t had an interpreted version we switched from interpreted to compiled and from there we incorrectly called the compiled version of enter() leading to asserts in JVMTI code about stack depth.&lt;br/&gt;
</comment>
                            <comment id="14582966" author="pchilanomate" created="Fri, 19 May 2023 11:09:31 -0700"  >Ok, after looking at all the wrong places in the code(JVMTI) I finally found the issue. I attached a reproducer.&lt;br/&gt;
&lt;br/&gt;
The issue is in all the calls to the runtime to resolve compiled callsites. An EnterInterpOnlyModeClosure handshake can caught the JavaThread at the JRT_BLOCK_END transition on those calls. None of those calls consider this scenario and just return callee_method-&amp;gt;verified_code_entry() even if now the JavaThread is in interpreted only mode, e.g.:&lt;br/&gt;
&lt;br/&gt;
// resolve virtual call and update inline cache to monomorphic&lt;br/&gt;
JRT_BLOCK_ENTRY(address, SharedRuntime::resolve_virtual_call_C(JavaThread* current))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;methodHandle callee_method;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JRT_BLOCK&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;callee_method = SharedRuntime::resolve_helper(true, false, CHECK_NULL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;current-&amp;gt;set_vm_result_2(callee_method());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JRT_BLOCK_END&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// return compiled code entry point after potential safepoints&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(callee_method-&amp;gt;verified_code_entry() != nullptr, &amp;quot; Jump to zero!&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return callee_method-&amp;gt;verified_code_entry();&lt;br/&gt;
JRT_END&lt;br/&gt;
&lt;br/&gt;
The JavaThread will return back to the runtime stub where we restore all registers and will jump to callee_method-&amp;gt;verified_code_entry(), which will be the compiled version of callee if there was one. The JavaThread will continue calling the compiled versions of methods without noticing it is in interpreted only mode until it either calls a method that hasn&amp;#39;t been compiled yet or it returns to the caller of that resolved callee where the change to interpreter only mode happened (since the EnterInterpOnlyModeClosure handshake marked all the frames on the stack for deoptimization).&lt;br/&gt;
&lt;br/&gt;
So in our crashing case: &lt;br/&gt;
A carrier is on its path to mount some virtual thread. Somewhere along that path, before executing notifyJvmtiMount() where JVMTI operations will be disabled for this thread until the transition finishes, the carrier calls one of this methods to resolve some callsite. An EnterInterpOnlyModeClosure happens on the JRT_BLOCK_END transition. On return to Java we still call the compiled version of that method and continue in compiled mode all the way up to enterSpecial. In enterSpecial the static callsite to enter() happens to go through the c2i adapter where we see there is a compiled version of enter() so we call fixup_callers_callsite() and hit the assert.</comment>
                            <comment id="14578501" author="thartmann" created="Tue, 2 May 2023 22:43:57 -0700"  >This does not look like a JIT issue, moved to hotspot/runtime.</comment>
                            <comment id="14568875" author="kvn" created="Wed, 22 Mar 2023 11:57:18 -0700"  >V [libjvm.so+0x16a9bf0] SharedRuntime::fixup_callers_callsite(Method*, unsigned char*)+0x2e0 (sharedRuntime.cpp:2132) &lt;br/&gt;
v ~BufferBlob::I2C/C2I adapters 0x0000ffff843ff190 &lt;br/&gt;
J 16823 jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt; (0 bytes) @ 0x0000ffff85c12ed8 [0x0000ffff85c12dc0+0x0000000000000118] &lt;br/&gt;
&lt;br/&gt;
It seems deoptimization happens when we process fixup request. There is no compiled method on top of call stack.&lt;br/&gt;
There is comment about that in SharedRuntime::fixup_callers_callsite():&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/sharedRuntime.cpp#L2038&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/sharedRuntime.cpp#L2038&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14559996" author="rpressler" created="Tue, 14 Feb 2023 06:53:31 -0800"  >[~dlong] Hmm, I&amp;#39;m not sure, but a race with interp_only_mode sounds like a reasonable explanation.</comment>
                            <comment id="14559808" author="dlong" created="Mon, 13 Feb 2023 20:39:22 -0800"  >ILW = assert in debug build; seen in closed stress test only, intermittent; no workaround = MMH = P3</comment>
                            <comment id="14559806" author="dlong" created="Mon, 13 Feb 2023 20:37:51 -0800"  >[~rpressler], this assert was added by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288949&quot; title=&quot;serviceability/jvmti/vthread/ContStackDepthTest/ContStackDepthTest.java failing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288949&quot;&gt;&lt;strike&gt;JDK-8288949&lt;/strike&gt;&lt;/a&gt;.  Could it be too strong, or maybe there is a race setting interp_only_mode?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105241">JDK-8311876</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106406">JDK-8312900</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4982558">JDK-8218403</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103557">JDK-8310340</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5077613">JDK-8288949</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5104846">JDK-8311516</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5096436">JDK-8304354</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103907" name="Repro8302351.zip" size="2878" author="pchilanomate" created="Fri, 19 May 2023 11:08:19 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30ctf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>