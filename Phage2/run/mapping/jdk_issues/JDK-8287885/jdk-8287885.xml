<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:58:37 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8287885] Local classes cause ClassLoader error if the type names are similar but not same</title>
                <link>https://bugs.openjdk.org/browse/JDK-8287885</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
OS = Windows 11, but I am 99% certain that this occurs for most Windows Operating systems. The relevant ones to test would be Windows 10 and Windows 8.&lt;br/&gt;
&lt;br/&gt;
$ javac --version&lt;br/&gt;
javac 18&lt;br/&gt;
&lt;br/&gt;
$ java --version&lt;br/&gt;
java 18 2022-03-22&lt;br/&gt;
Java(TM) SE Runtime Environment (build 18+36-2087)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
Here is a relevant StackOverflow post -- &lt;a href=&quot;https://stackoverflow.com/q/72438283/10118965&quot;&gt;https://stackoverflow.com/q/72438283/10118965&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
On Windows, if I have an ABC.java and an Abc.java in the same folder, then they are treated as the same filename, and thus, forbidden, as you cannot have duplicate filenames in the same folder. That is because Windows is case-insensitive.&lt;br/&gt;
&lt;br/&gt;
Java, on the other hand, IS case-sensitive. Therefore, ABC.java and Abc.java are considered meaningfully unique type names, and thus, are permitted.&lt;br/&gt;
&lt;br/&gt;
This causes problems when making local classes (and maybe other parts of Java too). In the attached example, I have a local enum called ABC inside of method1(), and another local enum called Abc inside of method2(). Then, I use the following command to compile the class.&lt;br/&gt;
&lt;br/&gt;
javac        ClassLoaderIssue.java&lt;br/&gt;
&lt;br/&gt;
Then I use the following command to run it.&lt;br/&gt;
&lt;br/&gt;
java    ClassLoaderIssue&lt;br/&gt;
&lt;br/&gt;
Which then throws the following error.&lt;br/&gt;
&lt;br/&gt;
Error: Could not find or load main class ClassLoaderIssue&lt;br/&gt;
Caused by: java.lang.NoClassDefFoundError: io/github/davidalayachew/ClassLoaderIssue (wrong name: ClassLoaderIssue)&lt;br/&gt;
&lt;br/&gt;
If you look at the folder to see the generated .class files, you will see that there was only 1 of the local enums generated. On my machine, I see that only ClassLoaderIssue$1ABC.class was created, but there was no ClassLoaderIssue$1Abc.class. That is because Java treats these 2 names is unique, and therefore, is unable to create 2 different files of the same name. If I had to guess, the first local enum is created, and then the second one is created and either overwrites the first one, or silently fails to create a file.&lt;br/&gt;
&lt;br/&gt;
Regardless, the point is, this is a problem. As you can see, this is a Windows specific problem, but if I am on a Linux system (or another operating system that IS case sensitive), then this problem will not exist.&lt;br/&gt;
&lt;br/&gt;
I believe there is a very easy and simple fix here - simply increment the number when creating the local enum. Doing so should solve the problem, whether or not the underlying operating is case sensitive or case insensitive.&lt;br/&gt;
&lt;br/&gt;
So, the expected output of compiling this program should be something like the following.&lt;br/&gt;
&lt;br/&gt;
ClassLoaderIssue.class&lt;br/&gt;
ClassLoaderIssue$1ABC.class&lt;br/&gt;
ClassLoaderIssue$2Abc.class&lt;br/&gt;
&lt;br/&gt;
This way, we can be case sensitive regardless of the underlying operating system file name case sensitivity.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
1 - Create a new folder named ClassLoaderIssue&lt;br/&gt;
&lt;br/&gt;
2 - Place the attached ClassLoaderIssue.java file into that folder&lt;br/&gt;
&lt;br/&gt;
3 - Open a command line terminal and navigate into the above folder containing the above file&lt;br/&gt;
&lt;br/&gt;
4 - Enter the following command&lt;br/&gt;
&lt;br/&gt;
javac        ClassLoaderIssue.java&lt;br/&gt;
&lt;br/&gt;
5 - Look at the contents of the folder. If you are using CommandPrompt, that would be dir. If you are using a Linux system, that would be ls&lt;br/&gt;
&lt;br/&gt;
6 - Notice how there is only ClassLoaderIssue.java, and then only a single ClassLoaderIssue$1...........java file. We should expect 2 files of that format because there are 2 local enums inside of ClassLoaderIssue.java&lt;br/&gt;
&lt;br/&gt;
7 - Execute the following command&lt;br/&gt;
&lt;br/&gt;
java    ClassLoaderIssue&lt;br/&gt;
&lt;br/&gt;
8 - If you are running this on Windows, you should receive the error mentioned in the description&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
I expected my class to run without error&lt;br/&gt;
ACTUAL -&lt;br/&gt;
It received the following error upon execution&lt;br/&gt;
&lt;br/&gt;
Error: Could not find or load main class ClassLoaderIssue&lt;br/&gt;
Caused by: java.lang.NoClassDefFoundError: io/github/davidalayachew/ClassLoaderIssue (wrong name: ClassLoaderIssue)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
/** There seems to be a class loader error when running the below method in main(). */&lt;br/&gt;
public class ClassLoaderIssue&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Method 1. */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private void method1()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enum ABC { A, B, C, ; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(ABC.A);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Method 2. */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private void method2()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enum Abc { A, B, C, ; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Abc.A);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Main method.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @param   args  commandline arguments that we don&amp;#39;t care about for this example.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ClassLoaderIssue().method1();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
I could rename the enum. Regardless, this is still a problem and something that definitely needs to be fixed.&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5076239">JDK-8287885</key>
            <summary>Local classes cause ClassLoader error if the type names are similar but not same</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="vromero">Vicente Arturo Romero Zaldivar</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>additional-information-received</label>
                            <label>dcsad</label>
                            <label>noreg-hard</label>
                            <label>release-note=yes</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Fri, 3 Jun 2022 16:58:46 -0700</created>
                <updated>Mon, 21 Aug 2023 12:47:58 -0700</updated>
                            <resolved>Mon, 27 Mar 2023 14:36:08 -0700</resolved>
                                    <version>18</version>
                                    <fixVersion>21</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                                                            <comments>
                            <comment id="14569818" author="dukebot" created="Mon, 27 Mar 2023 14:36:07 -0700"  >Changeset: 14b970dc&lt;br/&gt;
Author:    Archie L. Cobbs &amp;lt;&lt;a href=&apos;mailto:archie.cobbs@gmail.com&apos;&gt;archie.cobbs@gmail.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Vicente Romero &amp;lt;&lt;a href=&apos;mailto:vromero@openjdk.org&apos;&gt;vromero@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-27 21:33:01 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/14b970dc9e8d0fe1173039c01cced8a9422ec1ae&quot;&gt;https://git.openjdk.org/jdk/commit/14b970dc9e8d0fe1173039c01cced8a9422ec1ae&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14568099" author="roboduke" created="Mon, 20 Mar 2023 07:31:20 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12754&quot;&gt;https://git.openjdk.org/jdk/pull/12754&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-25 21:22:57 +0000</comment>
                            <comment id="14561851" author="JIRAUSER20702" created="Tue, 21 Feb 2023 16:38:50 -0800"  >FYI discussion on compiler-dev: &lt;a href=&quot;https://mail.openjdk.org/pipermail/compiler-dev/2023-February/022222.html&quot;&gt;https://mail.openjdk.org/pipermail/compiler-dev/2023-February/022222.html&lt;/a&gt;</comment>
                            <comment id="14561501" author="roboduke" created="Mon, 20 Feb 2023 12:55:46 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12678&quot;&gt;https://git.openjdk.org/jdk/pull/12678&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-20 20:50:48 +0000</comment>
                            <comment id="14506844" author="pnarayanaswa" created="Sun, 3 Jul 2022 21:49:34 -0700"  >Additional Information from submitter:&lt;br/&gt;
======================================&lt;br/&gt;
I understand how now might not be the best time to tackle this issue. After all, this may be a bigger change than advertised. Changing the naming structure of .class files is changing a foundational feature of the compiler&amp;#39;s behaviour.&lt;br/&gt;
&lt;br/&gt;
However, I believe calling this a &amp;quot;nice to have&amp;quot; minimizes the damage this problem causes. More specifically, it can lead to unexpected behaviour that may mask itself as a valid error. I firmly believe that labeling this as an enhancement is a mistake.&lt;br/&gt;
&lt;br/&gt;
First off, there are no errors or warnings upon compilation. The .class file in my example is either overwritten by whichever class gets written second, or it silently fails to generate one. Because of this, there is no indicator that all necessary .class files are created and present. At best, I can open up my directory and dig through the pile of .class files, and figure out which combination of ...$3ErrorCode.class maps to the local enum I am talking about. That is unideal.&lt;br/&gt;
&lt;br/&gt;
This is especially problematic because the only error you receive occurs at runtime, and it only tells you that it cannot find the correct .class file. It doesn&amp;#39;t tell you that it was the compiler itself who overwrote it. As a result, the user is sent on a wild goose chase to track down a problem that has many possible causes, when in reality, it was the compiler itself that caused it.&lt;br/&gt;
&lt;br/&gt;
Next, this damages Java&amp;#39;s maintainability in massive ways. If I make great use of local enums to keep my domain logic at the edge, and I one day decide to switch from a Linux virtual machine to a Windows virtual machine, I will be in for a rude (and very long-winded) awakening.&lt;br/&gt;
&lt;br/&gt;
In my example above, I only had 2 methods -- method1 and method2. But what if there were 8 methods, each with their own casing? You would think that you would receive 7 error messages for each unique casing, but you do not. You receive exactly 1, as the JVM will not fail until it attempts to use the class in question.&lt;br/&gt;
&lt;br/&gt;
And that is especially bad as well. If I have a portion of my code base that has this issue, I will not receive the error until I attempt to use the class that is missing its .class file. So I could have my system fully start up and operational, lulling me into a false sense of security until I run one of my infrequent operations, only to find out what&amp;#39;s actually going on.&lt;br/&gt;
&lt;br/&gt;
And even if I immediately identify the source of my problem, I will then have to rewrite each and every similarly sounding local class/enum/interface/record to have a new name. And this would be especially difficult because these are local classes, so it is not as if I can search the file directory to find it. And remember, you can only find these errors one at a time, so you may be forced to restart and reattempt this process 7 times in order to validate all 8 .class files have been properly created.&lt;br/&gt;
&lt;br/&gt;
Obviously, when moving to a new environment, some porting is necessary. But to tell me that I must rename many of my local classes because the compiler refuses to name them with respect to the operating system? Classes are supposed to be one of the most basic and simple features of the Java language. To imply that I must port something as integral as a class implies that very little of this language can be considered platform agnostic. That portability is supposed to be this languages strong suit.&lt;br/&gt;
&lt;br/&gt;
Finally (and frankly), generating proper .class files from the source code is one of the compiler&amp;#39;s most important responsibilities. If the compiler can&amp;#39;t even do that correctly for the operating system it is on, then how can we call this language portable? How can we look at this as anything other than a bug? That would be like saying there is no problem with the grocery store putting fresh produce next to a warm kitchen because the only job of the grocery store is to put the products out, not care about how their placement affects the product. And in case it isn&amp;#39;t clear, putting fresh fruit nearby a warm kitchen means it will spoil very quickly and go bad in little time. For most grocery stores, the produce area is the coldest area of the building, save for the freezers.&lt;br/&gt;
&lt;br/&gt;
If this is something that just cannot be cleanly fixed, then let&amp;#39;s acknowledge it for what it is - a bug where fixing it would require more effort than it is worth. I am ignorant to the level of effort, so maybe you can explain why it is so difficult. But regardless, calling this an enhancement is a mistake for the reasons I&amp;#39;ve listed above.&lt;br/&gt;
&lt;br/&gt;
Please reconsider.&lt;br/&gt;
</comment>
                            <comment id="14505262" author="vromero" created="Fri, 24 Jun 2022 14:19:53 -0700"  >this could be a nice to have in any case, not a bug, but I&amp;#39;m not sure right now that it is a good idea to change this area</comment>
                            <comment id="14500569" author="adev" created="Mon, 6 Jun 2022 21:07:03 -0700"  >stackoverflow discussion: &lt;a href=&quot;https://stackoverflow.com/questions/72438283/why-is-there-a-classloader-exception-when-there-are-2-objects-with-similar-type&quot;&gt;https://stackoverflow.com/questions/72438283/why-is-there-a-classloader-exception-when-there-are-2-objects-with-similar-type&lt;/a&gt;</comment>
                            <comment id="14500568" author="adev" created="Mon, 6 Jun 2022 21:05:48 -0700"  >Windows uses class insensitive names. &lt;br/&gt;
So,&lt;br/&gt;
ClassLoaderIssue$ABC.class&lt;br/&gt;
ClassLoaderIssue$Abc.class &lt;br/&gt;
are same and thus only one of them can exist on the disl.&lt;br/&gt;
&lt;br/&gt;
Using the following compiled names would solve the problem on case insensitive operating system.&lt;br/&gt;
ClassLoaderIssue.class&lt;br/&gt;
ClassLoaderIssue$1ABC.class&lt;br/&gt;
ClassLoaderIssue$2Abc.class </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5086355">JDK-8296656</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="99400" name="ClassLoaderIssue.java" size="545" author="adev" created="Mon, 6 Jun 2022 21:02:09 -0700"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5108484">JDK-8314673</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17005"><![CDATA[windows]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2xciz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>