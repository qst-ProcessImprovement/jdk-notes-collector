<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:59:48 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8304893] Link Time Optimization with gcc can be faster</title>
                <link>https://bugs.openjdk.org/browse/JDK-8304893</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>A previous argument against link time optimization support that we have for gcc is that it was extremely slow. After some checks it turns out we are passing rather inefficient flags to gcc in optimized builds. Changing these flags to run the linker optimizations in parallel and passing additional flags to the compiler have the ability to speed this process up significantly. Also fixes some incorrect flags passed to ld for linking as well, since strict-aliasing is required for both linker and compiler, and the same optimization level should be specified instead of letting the default -O1 be passed to the linker</description>
                <environment></environment>
        <key id="5097087">JDK-8304893</key>
            <summary>Link Time Optimization with gcc can be faster</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jwaters">Julian Waters</assignee>
                                    <reporter username="jwaters">Julian Waters</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Mar 2023 10:21:59 -0700</created>
                <updated>Wed, 20 Nov 2024 00:48:47 -0800</updated>
                            <resolved>Sat, 1 Apr 2023 23:56:40 -0700</resolved>
                                                    <fixVersion>21</fixVersion>
                                    <component>infrastructure</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14724109" author="mbaesken" created="Wed, 20 Nov 2024 00:47:24 -0800"  >Hi Julian, I created &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8344607&quot;&gt;https://bugs.openjdk.org/browse/JDK-8344607&lt;/a&gt; .</comment>
                            <comment id="14724072" author="JIRAUSER20000" created="Tue, 19 Nov 2024 23:29:14 -0800"  >Go ahead, I wouldn&amp;#39;t mind :) Though might consider removing isCompiler soon, so maybe check $(TOOLCHAIN_TYPE) instead. Also, clang LTO has a lot more knobs to turn than gcc or VC LTO, so in the future we might need to add a different interface specifically for clang outside of --enable-jvm-feature-link-time-opt</comment>
                            <comment id="14723823" author="mbaesken" created="Tue, 19 Nov 2024 08:02:09 -0800"  >On my SUSE Linux x86_64 machine , the build with and without lto is more or less comparable when looking at build times. This is with gcc 11.3.0 .  I set  JOBS=16 when running the build (so that the machine is not overloaded by this single build execution).&lt;br/&gt;
When using lto with gcc, the libjvm.so gets significantly smaller than without lto  (22M compared to 26M).&lt;br/&gt;
&lt;br/&gt;
I also tried to use clang15 with lto on Linux, but did not see this size improvement there.&lt;br/&gt;
Patch for using lto with clang  (builds nicely on Linux, still fails on macoS with XCode 13 because of issues with inline assembler) :&lt;br/&gt;
&lt;br/&gt;
diff --git a/make/hotspot/lib/JvmFeatures.gmk b/make/hotspot/lib/JvmFeatures.gmk&lt;br/&gt;
index b94031515f7..dcfddb54e75 100644&lt;br/&gt;
--- a/make/hotspot/lib/JvmFeatures.gmk&lt;br/&gt;
+++ b/make/hotspot/lib/JvmFeatures.gmk&lt;br/&gt;
@@ -174,6 +174,9 @@ ifeq ($(call check-jvm-feature, link-time-opt), true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-fno-fat-lto-objects&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVM_LDFLAGS_FEATURES += $(CXX_O_FLAG_HIGHEST_JVM) -flto=auto \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-fuse-linker-plugin -fno-strict-aliasing&lt;br/&gt;
+  else ifeq ($(call isCompiler, clang), true)&lt;br/&gt;
+    JVM_CFLAGS_FEATURES += -flto -fno-strict-aliasing&lt;br/&gt;
+    JVM_LDFLAGS_FEATURES += $(CXX_O_FLAG_HIGHEST_JVM) -flto -fno-strict-aliasing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;else ifeq ($(call isCompiler, microsoft), true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVM_CFLAGS_FEATURES += -GL&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVM_LDFLAGS_FEATURES += -LTCG:INCREMENTAL&lt;br/&gt;
&lt;br/&gt;
Some additional flags we set with gcc/lto do not work with clang :&lt;br/&gt;
clang-15.0: warning: optimization flag &amp;#39;-fno-fat-lto-objects&amp;#39; is not supported [-Wignored-optimization-argument]&lt;br/&gt;
clang-15.0: warning: optimization flag &amp;#39;-fuse-linker-plugin&amp;#39; is not supported [-Wignored-optimization-argument]&lt;br/&gt;
(and -flto=auto works with clang15 on Linux but not with the older Xcode13)&lt;br/&gt;
Should I create a PR for this simple clang/lto support ? (even if it is only for Linux at the moment)</comment>
                            <comment id="14571117" author="dukebot" created="Sat, 1 Apr 2023 23:56:39 -0700"  >Changeset: aa762102&lt;br/&gt;
Author:    Julian Waters &amp;lt;&lt;a href=&apos;mailto:jwaters@openjdk.org&apos;&gt;jwaters@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-02 06:54:09 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/aa762102e9328ca76663b56b3be6f6141b044744&quot;&gt;https://git.openjdk.org/jdk/commit/aa762102e9328ca76663b56b3be6f6141b044744&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14570837" author="JIRAUSER20000" created="Thu, 30 Mar 2023 16:30:41 -0700"  >For Windows it&amp;#39;s for the entire compilation of jvm.dll (compiling and linking combined), but it would be significantly faster on other platforms since Windows lto is notorious for not making proper use of the parallel resources provided (and gcc cannot yet compile for Windows, so this change is primarily aimed at the targets that it is indeed used for)</comment>
                            <comment id="14570836" author="erikj" created="Thu, 30 Mar 2023 16:25:43 -0700"  >Is that for the whole build or just the link step of jvm.dll?</comment>
                            <comment id="14570833" author="JIRAUSER20000" created="Thu, 30 Mar 2023 16:16:00 -0700"  >Hi Erik, sorry for not replying sooner, I was on a much-needed vacation to clear my thoughts. With just the parallelization alone link time optimization can already be as much as 20-40% faster than normal, citing the usual figures for gcc online. Anecdotally, even on Windows where (a presumably Windows targeting) gcc&amp;#39;s lto doesn&amp;#39;t typically receive as much speedup as it would on a Unix system, compile times can go from as long as almost an hour to just over 20 minutes on my end</comment>
                            <comment id="14570416" author="erikj" created="Wed, 29 Mar 2023 06:30:19 -0700"  >Do you have any numbers for this speedup, even if just anecdotal, to give us an idea of what kind of improvement this gives us?</comment>
                            <comment id="14569417" author="roboduke" created="Fri, 24 Mar 2023 10:27:34 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13180&quot;&gt;https://git.openjdk.org/jdk/pull/13180&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-24 17:12:26 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5144355">JDK-8344607</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5097123">JDK-8304930</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30vuz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17417"><![CDATA[b17]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="199"><![CDATA[build]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>