<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:06:46 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8332920] C2: Partial Peeling is wrongly applied for CmpU with negative limit</title>
                <link>https://bugs.openjdk.org/browse/JDK-8332920</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following code executes incorrectly, stoppin after about 800&amp;#39;000 iterations and performing the last `System.out.printf`. The exact number of iterations changes from run to run, probably depending on compilation timing.&lt;br/&gt;
&lt;br/&gt;
But there is more: commenting out the lines after the loop and executing throws a &amp;quot;/ by zero&amp;quot; ArithmeticException on L.12.&lt;br/&gt;
&lt;br/&gt;
In both cases, it should instead report `n=-2147483647, q=0, q1=1` and exit with code 22, as when executed in interpreter mode with -Xint.&lt;br/&gt;
&lt;br/&gt;
Tried on macOS 14.5/AArch64 and Ubuntu 22.04.4/x64 with JDK 21 and 22. Executes correctly on JDK 17.&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
import static java.lang.Integer.*;&lt;br/&gt;
&lt;br/&gt;
public class Buggy {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int N = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int d = MIN_VALUE + 1;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long i = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int n = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (; compareUnsigned(n, N) &amp;lt; 0; ++n, ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q = divideUnsigned(n, d + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q1 = divideUnsigned(n, d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (q1 != q) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;n=%d, q=%d, q1=%d%n&amp;quot;, n, q, q1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q = divideUnsigned(n, d + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q1 = divideUnsigned(n, d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (q1 != q) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;n=%d, q=%d, q1=%d&amp;quot;, n, q, q1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;counted=%d, expected=%d%n&amp;quot;, i, (N &amp;amp; 0xFFFF_FFFFL) + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```</description>
                <environment></environment>
        <key id="5130302">JDK-8332920</key>
            <summary>C2: Partial Peeling is wrongly applied for CmpU with negative limit</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="chagedorn">Christian Hagedorn</assignee>
                                    <reporter username="rgiulietti">Raffaello Giulietti</reporter>
                        <labels>
                            <label>c2</label>
                            <label>hgupdate-sync</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-23</label>
                            <label>regression</label>
                    </labels>
                <created>Fri, 24 May 2024 13:47:39 -0700</created>
                <updated>Tue, 25 Jun 2024 00:28:30 -0700</updated>
                            <resolved>Tue, 11 Jun 2024 04:47:03 -0700</resolved>
                                    <version>18</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                                                                <comments>
                            <comment id="14683862" author="roboduke" created="Sat, 22 Jun 2024 12:53:30 -0700"  >[jdk21u-fix-request] Approval Request from Martin&lt;br/&gt;
Should get backported for parity with 21.0.5-oracle. Applies cleanly, but the test needs an adaptation which has been reviewed by the original author. Tier 1-4 have passed.</comment>
                            <comment id="14681765" author="roboduke" created="Fri, 14 Jun 2024 08:47:59 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/728&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/728&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-14 15:38:59 +0000</comment>
                            <comment id="14680541" author="roboduke" created="Tue, 11 Jun 2024 04:55:46 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19653&quot;&gt;https://git.openjdk.org/jdk/pull/19653&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-11 11:48:55 +0000</comment>
                            <comment id="14680539" author="chagedorn" created="Tue, 11 Jun 2024 04:45:45 -0700"  >Fix was pushed to JDK 24 while this main issue was targeted to JDK 23. Reset this issue to fixed in JDK 24 and copied the Robo Duke entry here.</comment>
                            <comment id="14680538" author="chagedorn" created="Tue, 11 Jun 2024 04:45:16 -0700"  >Changeset: ef101f1b&lt;br/&gt;
Author: Christian Hagedorn &amp;lt;&lt;a href=&apos;mailto:chagedorn@openjdk.org&apos;&gt;chagedorn@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date: 2024-06-11 11:32:12 +0000&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ef101f1bf20f2813f855af4bc4eb317565175208&quot;&gt;https://git.openjdk.org/jdk/commit/ef101f1bf20f2813f855af4bc4eb317565175208&lt;/a&gt;</comment>
                            <comment id="14678254" author="roboduke" created="Mon, 3 Jun 2024 06:10:06 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19522&quot;&gt;https://git.openjdk.org/jdk/pull/19522&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-03 12:39:05 +0000</comment>
                            <comment id="14678118" author="thartmann" created="Mon, 3 Jun 2024 00:26:28 -0700"  >Thanks Christian!</comment>
                            <comment id="14677892" author="chagedorn" created="Fri, 31 May 2024 10:40:05 -0700"  >Thanks everyone for analyzing and narrowing the problem down and attaching simplified reducers! [~djelinski] is right I think, we should not apply this optimization if limit is negative. So, I think it is not directly related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8276162&quot; title=&quot;Optimise unsigned comparison pattern&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8276162&quot;&gt;&lt;strike&gt;JDK-8276162&lt;/strike&gt;&lt;/a&gt; but it just revealed the issue. Before that, I&amp;#39;m not sure how to get an unsigned comparison with a negative value or if it&amp;#39;s even possible. The compareUnsigned() intrinsic was also only introduced later with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8283726&quot; title=&quot;x86_64 intrinsics for compareUnsigned method in Integer and Long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8283726&quot;&gt;&lt;strike&gt;JDK-8283726&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
About the stride, I think it does not matter if the iv phi overflows or not.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve prepared a patch with some more tests and also included the mentioned test cases above. To be sure to not hit the CCP assert found by [~thartmann], I&amp;#39;ve filed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8333366&quot; title=&quot;C2: CmpU3Nodes are not pushed back to worklist in PhaseCCP leading to non-fixpoint assertion failure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8333366&quot;&gt;&lt;strike&gt;JDK-8333366&lt;/strike&gt;&lt;/a&gt; to get this fixed first (just sent out a PR for it). The fix is straight forward. Once it is in, we can also get this in. I will run some testing over the weekend and if it results look good, I can prepare a PR. I think we can still make it before the fork (but given it&amp;#39;s a P2, we would still have more time).</comment>
                            <comment id="14677416" author="thartmann" created="Wed, 29 May 2024 23:55:19 -0700"  >[~djelinski] Yes, the logic in PhaseIdealLoop::insert_cmpi_loop_exit seems flawed. -XX:-PartialPeelAtUnsignedTests will disable it and serves as a workaround.&lt;br/&gt;
&lt;br/&gt;
Looking at the code again, I just noticed that I fixed something similar a few years ago with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8251535&quot; title=&quot;Partial peeling at unsigned test adds incorrect loop exit check&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8251535&quot;&gt;&lt;strike&gt;JDK-8251535&lt;/strike&gt;&lt;/a&gt;. I think the fix is incomplete.</comment>
                            <comment id="14677405" author="JIRAUSER19825" created="Wed, 29 May 2024 23:33:49 -0700"  >[~qamai] that&amp;#39;s an interesting pointer! Started going through the code, and immediately found a few comments that look suspicious.&lt;br/&gt;
&lt;br/&gt;
These two are only true if limit is non-negative, otherwise the and/or predicates need to be swapped:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L3042&quot;&gt;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L3042&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L3046&quot;&gt;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L3046&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
This one is only reliable if stride =+-1, for larger strides the counter might wrap:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L3047&quot;&gt;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L3047&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Also, this optimization can be turned off with -XX:-PartialPeelAtUnsignedTests. I haven&amp;#39;t checked if that helps yet.&lt;br/&gt;
&lt;br/&gt;
On a side note, the Intel optimization manual recommends to prefer unsigned loop variables over signed. That recommendation dates back to pre-Nehalem days and doesn&amp;#39;t matter much on modern hardware, but still suggests that replacing unsigned with signed loops might not always be the right thing to do.&lt;br/&gt;
</comment>
                            <comment id="14677404" author="thartmann" created="Wed, 29 May 2024 23:32:53 -0700"  >Thanks, [~qamai]. Sure, I&amp;#39;ll re-assign.</comment>
                            <comment id="14677261" author="JIRAUSER19817" created="Wed, 29 May 2024 08:59:44 -0700"  >I believe this is due to our policy of preferring signed comparisons to unsigned ones during partial peeling being incorrect [1]. The solution may be just not doing that?&lt;br/&gt;
&lt;br/&gt;
[~thartmann] The solution to me seems to have unknown impacts and I&amp;#39;m not really familiar with loop opts, so please re-assign the issue as this has a high priority.&lt;br/&gt;
&lt;br/&gt;
[1]: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L2989&quot;&gt;https://github.com/openjdk/jdk/blob/bc7d9e3d0bc663bbbeb068889082da4a9f0fa8de/src/hotspot/share/opto/loopopts.cpp#L2989&lt;/a&gt;</comment>
                            <comment id="14677236" author="thartmann" created="Wed, 29 May 2024 07:50:39 -0700"  >Running below version of the test with OSR disabled triggers an assert in PhaseCCP (it&amp;#39;s a separate issue though because the test also fails without PhaseCCP):&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static boolean test() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = MAX_VALUE - 50_000; compareUnsigned(i, -1) &amp;lt; 0; ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (compareUnsigned(MIN_VALUE, i) &amp;lt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; 10_000; ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!test()) throw new RuntimeException(&amp;quot;Test failed&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
java -XX:-TieredCompilation -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test* -Xbatch -XX:-UseOnStackReplacement Test.java&lt;br/&gt;
&lt;br/&gt;
Missed Value optimization:&lt;br/&gt;
dist dump&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1   22  ConI  === 0  [[ 49 96 60 98 38 ]]  #int:-1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1   89  AddI  === _ 73 27  [[ 98 90 96 73 ]]  !jvms: Test::test @ bci:22 (line 18)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0   96  CmpU3  === _ 89 22  [[ 106 ]]  !jvms: Test::test @ bci:5 (line 18)&lt;br/&gt;
Current type:&lt;br/&gt;
int:-1&lt;br/&gt;
Optimized type:&lt;br/&gt;
int:-1..0&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/workspace/open/src/hotspot/share/opto/phaseX.cpp:1834), pid=2347935, tid=2347949&lt;br/&gt;
#  assert(!failure) failed: PhaseCCP not at fixpoint: analysis result may be unsound.&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0+25) (fastdebug build 23-ea+25-2051)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-ea+25-2051, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x152922d]  PhaseCCP::analyze()+0x63d&lt;br/&gt;
</comment>
                            <comment id="14677234" author="thartmann" created="Wed, 29 May 2024 07:44:46 -0700"  >[~qamai] It might well be that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8276162&quot; title=&quot;Optimise unsigned comparison pattern&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8276162&quot;&gt;&lt;strike&gt;JDK-8276162&lt;/strike&gt;&lt;/a&gt; just triggers an existing issue. Do you plan to investigate further or should we re-assign? Thanks!</comment>
                            <comment id="14677233" author="thartmann" created="Wed, 29 May 2024 07:43:36 -0700"  >&amp;gt; Commenting out these 2 lines seems to fix the issue&lt;br/&gt;
&lt;br/&gt;
[~djelinski] That essentially disables &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8276162&quot; title=&quot;Optimise unsigned comparison pattern&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8276162&quot;&gt;&lt;strike&gt;JDK-8276162&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; the above assembly snippet is unique to the cmpU3 node. However, IGVisualizer shows that the only cmpU3 node was removed very early, in the RemoveUseless step. How did it manage to generate code?&lt;br/&gt;
&lt;br/&gt;
The CmpU3 is converted to a CmpU that is then incorrectly optimized. The assembly snippet is not unique to a CmpU3.</comment>
                            <comment id="14677230" author="thartmann" created="Wed, 29 May 2024 07:37:48 -0700"  >Here is an even simpler test:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static boolean test() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = MAX_VALUE - 50_000; compareUnsigned(i, -1) &amp;lt; 0; ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (compareUnsigned(MIN_VALUE, i) &amp;lt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; 2; ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!test()) throw new RuntimeException(&amp;quot;Test failed&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
java -XX:-TieredCompilation -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test* Test.java&lt;br/&gt;
&lt;br/&gt;
Also reproduces when turning off some optimizations via -XX:LoopUnrollLimit=0 -XX:-UseLoopPredicate -XX:-RangeCheckElimination&lt;br/&gt;
</comment>
                            <comment id="14676633" author="JIRAUSER19817" created="Mon, 27 May 2024 23:46:54 -0700"  >Try this function:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static int test() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int N = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int d = MIN_VALUE + 1;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int n = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (; compareUnsigned(n, N) &amp;lt; 0; ++n) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q = divideUnsigned(n, d + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q1 = divideUnsigned(n, d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (q1 != q) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
After partial peeling, the exit test seems to be converted to n &amp;lt; N, which seems completely wrong. This leads to all iterations other than the first one, which was peeled out already, removed.</comment>
                            <comment id="14676565" author="JIRAUSER19825" created="Mon, 27 May 2024 10:58:03 -0700"  >the above assembly snippet is unique to the cmpU3 node. However, IGVisualizer shows that the only cmpU3 node was removed very early, in the RemoveUseless step. How did it manage to generate code?</comment>
                            <comment id="14676555" author="JIRAUSER19825" created="Mon, 27 May 2024 08:53:19 -0700"  >fwiw, the generated code is failing because the compareUnsigned clobbers the dst register.&lt;br/&gt;
&lt;br/&gt;
Tried the PrintAssembly, got:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007ce190b40e78:   cmp    %ebx,%r14d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007ce190b40e7b:   mov    $0xffffffff,%ebp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007ce190b40e80:   jb     0x00007ce190b40e8a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007ce190b40e82:   setne  %bpl&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007ce190b40e86:   movzbl %bpl,%ebp                    ;*invokestatic compareUnsigned {reexecute=0 rethrow=0 return_oop=0}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - Test::&lt;a href=&apos;mailto:main@13&apos;&gt;main@13&lt;/a&gt; (line 10)&lt;br/&gt;
&lt;br/&gt;
EBP is also used as one of the constant divisors in the loop, and is not saved/restored around the compareUnsigned; as soon as this code is executed, the loop starts dividing by the wrong number.</comment>
                            <comment id="14676554" author="JIRAUSER19825" created="Mon, 27 May 2024 08:41:42 -0700"  >Commenting out these 2 lines seems to fix the issue:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/be1d374bc54d43aae3b3c1feace22d38fe2156b6/src/hotspot/share/opto/subnode.cpp#L876-L877&quot;&gt;https://github.com/openjdk/jdk/blob/be1d374bc54d43aae3b3c1feace22d38fe2156b6/src/hotspot/share/opto/subnode.cpp#L876-L877&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14676248" author="thartmann" created="Sun, 26 May 2024 23:33:54 -0700"  >[~qamai], could you please have a look?</comment>
                            <comment id="14676245" author="thartmann" created="Sun, 26 May 2024 23:32:30 -0700"  >ILW = Wrong result with C2 compiled code, reproducible with test using unsigned compare, no workaround but disable compilation of affected method = HMM = P2 </comment>
                            <comment id="14676233" author="thartmann" created="Sun, 26 May 2024 22:56:24 -0700"  >This is a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8276162&quot; title=&quot;Optimise unsigned comparison pattern&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8276162&quot;&gt;&lt;strike&gt;JDK-8276162&lt;/strike&gt;&lt;/a&gt; in JDK 18.</comment>
                            <comment id="14676140" author="JIRAUSER19600" created="Sat, 25 May 2024 03:33:42 -0700"  >One way to overcome the issue and have correct behavior is to split the loop in two halves, like so&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (; compareUnsigned(n, N &amp;gt;&amp;gt;&amp;gt; 1) &amp;lt; 0; ++n, ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q = divideUnsigned(n, d + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q1 = divideUnsigned(n, d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (q1 != q) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;n=%d, q=%d, q1=%d%n&amp;quot;, n, q, q1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (; compareUnsigned(n, N) &amp;lt; 0; ++n, ++i) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q = divideUnsigned(n, d + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int q1 = divideUnsigned(n, d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (q1 != q) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;n=%d, q=%d, q1=%d%n&amp;quot;, n, q, q1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
```</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5131591">JDK-8334030</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5132509">JDK-8334840</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5132614">JDK-8334933</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131570">JDK-8334008</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131753">JDK-8334178</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="5130801">JDK-8333366</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5027319">JDK-8251535</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5061445">JDK-8276162</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109491" name="after_peeling.pdf" size="13581" author="qamai" created="Mon, 27 May 2024 23:48:57 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17624"><![CDATA[b24]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="21802">18</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36h4z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17317"><![CDATA[b02]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>