<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:57:07 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8330748] ByteArrayOutputStream.writeTo(OutputStream) pins carrier</title>
                <link>https://bugs.openjdk.org/browse/JDK-8330748</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>All BAOS operations are synchronized since early JDK releases. While undocumented, there are compatibility concerns with dropping the synchronization that have prevented its removal.&lt;br/&gt;
&lt;br/&gt;
For virtual threads the BAOS.writeTo method is problematic as writing to the target output stream may block indefinitely and prevent a carrier thread from being released when writeTo is invoked from a virtual thread. This will be non-issue when the object monitors work is in a JDK release. In the mean-time, it may require a workaround. Replacing the synchronization with j.u.concurrent lock when a BAOS is directly used (not subclassed) is technically possible but it changes the performance in subtle ways. Instead, it may be simpler to just work around the issue with the one method with:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void writeTo(OutputStream out) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (Thread.currentThread().isVirtual()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.write(toByteArray());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else synchronized (this) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.write(buf, 0, count);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
That is, take a (potentially costly) snapshot of the bytes and write them to the target output stream. The only compatibility concern is where something is relying on the undocumented synchronized and expects a concurrent write + writeTo be execute sequential rather than concurrently.</description>
                <environment></environment>
        <key id="5127470">JDK-8330748</key>
            <summary>ByteArrayOutputStream.writeTo(OutputStream) pins carrier</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bpb">Brian Burkhalter</assignee>
                                    <reporter username="alanb">Alan Bateman</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                            <label>loom</label>
                    </labels>
                <created>Sun, 21 Apr 2024 00:17:11 -0700</created>
                <updated>Thu, 25 Jul 2024 23:14:43 -0700</updated>
                            <resolved>Mon, 29 Apr 2024 10:57:48 -0700</resolved>
                                                    <fixVersion>23</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14678152" author="roboduke" created="Mon, 3 Jun 2024 01:48:32 -0700"  >[jdk21u-fix-request] Approval Request from Martin&lt;br/&gt;
Should get backported for parity with 21.0.5-oracle. Applies cleanly and tier 1-4 have passed.</comment>
                            <comment id="14677915" author="roboduke" created="Fri, 31 May 2024 12:30:57 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/641&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/641&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-31 19:27:22 +0000</comment>
                            <comment id="14670674" author="roboduke" created="Fri, 3 May 2024 02:44:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/182&quot;&gt;https://git.openjdk.org/jdk22u/pull/182&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-03 09:40:00 +0000</comment>
                            <comment id="14670672" author="JIRAUSER20601" created="Fri, 3 May 2024 02:41:46 -0700"  >Fix request 22u:&lt;br/&gt;
&lt;br/&gt;
clean backport of &lt;a href=&quot;https://github.com/openjdk/jdk/pull/18901&quot;&gt;https://github.com/openjdk/jdk/pull/18901&lt;/a&gt;</comment>
                            <comment id="14669055" author="dukebot" created="Mon, 29 Apr 2024 10:57:47 -0700"  >Changeset: 819f3d6f&lt;br/&gt;
Author:    Brian Burkhalter &amp;lt;&lt;a href=&apos;mailto:bpb@openjdk.org&apos;&gt;bpb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-04-29 17:54:13 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/819f3d6fc70ff6fe54ac5f9033c17c3dd4326aa5&quot;&gt;https://git.openjdk.org/jdk/commit/819f3d6fc70ff6fe54ac5f9033c17c3dd4326aa5&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14667413" author="jpai" created="Tue, 23 Apr 2024 05:14:26 -0700"  >&amp;gt; The only compatibility concern is where something is relying on the undocumented synchronized and expects a concurrent write + writeTo be execute sequential rather than concurrently.&lt;br/&gt;
&lt;br/&gt;
Another side effect of this proposed change could be that writeTo may not write anything, if some code is relying on the undocumented synchronized and expects concurrent writeTo() + reset() to execute sequentially. With this proposed change, those two methods can now execute concurrently and it can so happen that reset() from one thread might happen before a snapshot has been taken of the underlying byte array in the implementation of writeTo().&lt;br/&gt;
&lt;br/&gt;
It is however a corner case and it&amp;#39;s highly unlikely this kind of usage would have been relied upon.</comment>
                            <comment id="14667059" author="roboduke" created="Mon, 22 Apr 2024 12:11:46 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18901&quot;&gt;https://git.openjdk.org/jdk/pull/18901&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-22 19:07:04 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5128603">JDK-8331624</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129425">JDK-8332224</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5130879">JDK-8333422</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3609f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="244"><![CDATA[java.io]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>