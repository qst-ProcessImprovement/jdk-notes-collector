<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:38:31 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8320212] Disable GCC stringop-overflow warning for affected files</title>
                <link>https://bugs.openjdk.org/browse/JDK-8320212</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>With the changes in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319883&quot; title=&quot;Zero: Use atomic built-ins for 64-bit accesses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319883&quot;&gt;&lt;strike&gt;JDK-8319883&lt;/strike&gt;&lt;/a&gt; GCC 13.2.0 generates stringop-overflow warnings on linux-x64-zero fastdebug. For example:&lt;br/&gt;
&lt;br/&gt;
In file included from src/hotspot/share/runtime/atomic.hpp:859,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from src/hotspot/share/oops/oop.hpp:34,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from src/hotspot/share/runtime/handles.hpp:29,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from src/hotspot/share/classfile/vmClasses.hpp:30,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from src/hotspot/share/classfile/javaClasses.hpp:28,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from src/hotspot/share/runtime/handshake.cpp:26:&lt;br/&gt;
In member function &amp;#39;T Atomic::PlatformLoad&amp;lt;byte_size&amp;gt;::operator()(const volatile T*) const [with T = long unsigned int; long unsigned int byte_size = 8]&amp;#39;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;T Atomic::LoadImpl&amp;lt;T, PlatformOp, typename std::enable_if&amp;lt;(std::is_integral&amp;lt;_Tp&amp;gt;::value || std::is_pointer&amp;lt;_Tp&amp;gt;::value), void&amp;gt;::type&amp;gt;::operator()(const volatile T*) const [with T = long unsigned int; PlatformOp = Atomic::PlatformLoad&amp;lt;8&amp;gt;]&amp;#39; at src/hotspot/share/runtime/atomic.hpp:513:24,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;static T Atomic::load(const volatile T*) [with T = long unsigned int]&amp;#39; at src/hotspot/share/runtime/atomic.hpp:870:49,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;T Atomic::PlatformOrderedLoad&amp;lt;byte_size, type&amp;gt;::operator()(const volatile T*) const [with T = long unsigned int; long unsigned int byte_size = 8; ScopedFenceType type = X_ACQUIRE]&amp;#39; at src/hotspot/share/runtime/atomic.hpp:878:24,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;T Atomic::LoadImpl&amp;lt;T, PlatformOp, typename std::enable_if&amp;lt;(std::is_integral&amp;lt;_Tp&amp;gt;::value || std::is_pointer&amp;lt;_Tp&amp;gt;::value), void&amp;gt;::type&amp;gt;::operator()(const volatile T*) const [with T = long unsigned int; PlatformOp = Atomic::PlatformOrderedLoad&amp;lt;8, X_ACQUIRE&amp;gt;]&amp;#39; at src/hotspot/share/runtime/atom\&lt;br/&gt;
ic.hpp:513:24,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;static T Atomic::load_acquire(const volatile T*) [with T = long unsigned int]&amp;#39; at src/hotspot/share/runtime/atomic.hpp:884:67,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;uintptr_t SafepointMechanism::ThreadData::get_polling_word()&amp;#39; at src/hotspot/share/runtime/safepointMechanism.inline.hpp:48:30,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;static bool SafepointMechanism::local_poll_armed(JavaThread*)&amp;#39; at src/hotspot/share/runtime/safepointMechanism.inline.hpp:52:47,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;static bool SafepointMechanism::should_process(JavaThread*, bool)&amp;#39; at src/hotspot/share/runtime/safepointMechanism.inline.hpp:60:24,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inlined from &amp;#39;static void Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)&amp;#39; at src/hotspot/share/runtime/handshake.cpp:404:43:&lt;br/&gt;
src/hotspot/os_cpu/linux_zero/atomic_linux_zero.hpp:147:16: error: &amp;#39;long unsigned int __atomic_load_8(const volatile void*, int)&amp;#39; writing 8 bytes into a region of size 0 overflows the destination [-Werror=stringop-overflow=]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;147 |   __atomic_load(const_cast&amp;lt;T*&amp;gt;(src), &amp;amp;dest, __ATOMIC_RELAXED);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|   ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;br/&gt;
In static member function &amp;#39;static void Handshake::execute(HandshakeClosure*, ThreadsListHandle*, JavaThread*)&amp;#39;:&lt;br/&gt;
cc1plus: note: destination object is likely at address zero</description>
                <environment></environment>
        <key id="5114857">JDK-8320212</key>
            <summary>Disable GCC stringop-overflow warning for affected files</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikael">Mikael Vidstedt</assignee>
                                    <reporter username="mikael">Mikael Vidstedt</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Wed, 15 Nov 2023 15:21:35 -0800</created>
                <updated>Fri, 27 Sep 2024 11:00:29 -0700</updated>
                            <resolved>Fri, 17 Nov 2023 13:40:00 -0800</resolved>
                                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14685373" author="roboduke" created="Thu, 27 Jun 2024 05:49:12 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
This batch of fixes improves the warnings handling for newer GCCs. Part of atomic 21u PR, since it contextually depends on other fixes. Risk is low: adds warnings and moves the code around. Was in mainline for months without ill effects.</comment>
                            <comment id="14685299" author="roboduke" created="Thu, 27 Jun 2024 01:46:59 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/797&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/797&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-27 08:39:08 +0000</comment>
                            <comment id="14627419" author="dcubed" created="Sat, 18 Nov 2023 08:16:13 -0800"  >The fix for this bug is integrated in jdk-22+25-1955.</comment>
                            <comment id="14627364" author="dukebot" created="Fri, 17 Nov 2023 13:39:58 -0800"  >Changeset: a1e7a302&lt;br/&gt;
Author:    Mikael Vidstedt &amp;lt;&lt;a href=&apos;mailto:mikael@openjdk.org&apos;&gt;mikael@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-17 21:37:49 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a1e7a302c8a3d7a1069659653042476b20becabe&quot;&gt;https://git.openjdk.org/jdk/commit/a1e7a302c8a3d7a1069659653042476b20becabe&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14627047" author="roboduke" created="Thu, 16 Nov 2023 16:38:13 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16702&quot;&gt;https://git.openjdk.org/jdk/pull/16702&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-17 00:31:36 +0000</comment>
                            <comment id="14626706" author="dholmes" created="Wed, 15 Nov 2023 20:02:04 -0800"  >&amp;lt;incorrect comment deleted&amp;gt;</comment>
                            <comment id="14626681" author="mikael" created="Wed, 15 Nov 2023 15:23:22 -0800"  >I think I finally figured out what GCC is _actually_ whining about:&lt;br/&gt;
&lt;br/&gt;
The way JavaThread::current() is implemented it (looks to GCC like it) can return nullptr, and when that gets used to read the _polling_word it all goes through the atomic template magic and ends up as an argument to __atomic_load. For a nullptr object the region is indeed of size 0.&lt;br/&gt;
&lt;br/&gt;
(It doesn&amp;#39;t exactly help that the GCC warning complains about the &amp;quot;destination&amp;quot; when, in fact, it&amp;#39;s all about the source pointer/data.)&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5133038">JDK-8335324</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5140182">JDK-8341108</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5114498">JDK-8319883</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5115014">JDK-8320353</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33w2j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>