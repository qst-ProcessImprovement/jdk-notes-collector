<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:23:09 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8316436] ContinuationWrapper uses unhandled nullptr oop</title>
                <link>https://bugs.openjdk.org/browse/JDK-8316436</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Test java/lang/Thread/virtual/stress/Skynet.java#ZGenerational with &amp;#39;	-XX:+CheckUnhandledOops&amp;#39; crashes with &lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S141889/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2482e760-6b8d-48c4-b062-c03db9324bca/runs/3739b499-f91f-47a2-9386-602b54684864/workspace/open/src/hotspot/share/gc/z/zAddress.inline.hpp:296), pid=986260, tid=986296&lt;br/&gt;
#  assert(!assert_on_failure) failed: Has low-order bits set: 0xfffffffffffffff1&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0) (fastdebug build 22-internal-2023-09-18-0647334.leonid.mesnik.jdk-flags)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-09-18-0647334.leonid.mesnik.jdk-flags, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x1962fda]  initialize_check_oop_function()::{lambda(oopDesc*)#1}::_FUN(oopDesc*)+0x5a&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
The stack: &lt;br/&gt;
Current thread (0x00007f5c7c03dcd0):  JavaThread &amp;quot;ForkJoinPool-1-worker-1&amp;quot; daemon [_thread_in_Java, id=986296, stack(0x00007f613d325000,0x00007f613d425000) (1024K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f613d325000,0x00007f613d425000],  sp=0x00007f613d4229e0,  free space=1014k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x1962fda]  initialize_check_oop_function()::{lambda(oopDesc*)#1}::_FUN(oopDesc*)+0x5a  (zAddress.inline.hpp:296)&lt;br/&gt;
V  [libjvm.so+0xa6d484]  ContinuationWrapper::~ContinuationWrapper()+0x24  (oopsHierarchy.hpp:89)&lt;br/&gt;
V  [libjvm.so+0xa66c83]  int freeze_internal&amp;lt;Config&amp;lt;(oop_kind)1, ZBarrierSet&amp;gt; &amp;gt;(JavaThread*, long*)+0x373  (continuationFreezeThaw.cpp:1584)&lt;br/&gt;
V  [libjvm.so+0xa6711b]  int freeze&amp;lt;Config&amp;lt;(oop_kind)1, ZBarrierSet&amp;gt; &amp;gt;(JavaThread*, long*)+0x5b  (continuationFreezeThaw.cpp:272)&lt;br/&gt;
J 216  jdk.internal.vm.Continuation.doYield()I &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt; (0 bytes) @ 0x00007f614c630875 [0x00007f614c630820+0x0000000000000055]&lt;br/&gt;
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+18 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.yieldContinuation()Z+8 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.park()V+45 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.System$2.parkVirtualThread()V+17 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.misc.VirtualThreads.park()V+3 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.locks.LockSupport.park()V+9 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.LinkedTransferQueue$DualNode.await(Ljava/lang/Object;JLjava/lang/Object;Z)Ljava/lang/Object;+226 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.SynchronousQueue$Transferer.xferLifo(Ljava/lang/Object;J)Ljava/lang/Object;+223 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.SynchronousQueue.xfer(Ljava/lang/Object;J)Ljava/lang/Object;+27 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.SynchronousQueue.take()Ljava/lang/Object;+11 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  Skynet$Channel.receive()Ljava/lang/Object;+6&lt;br/&gt;
j  Skynet.skynet(LSkynet$Channel;III)V+82&lt;br/&gt;
j  Skynet.lambda$skynet$0(LSkynet$Channel;I)V+5&lt;br/&gt;
j  Skynet$$Lambda+0x00007f5cab003800.run()V+8&lt;br/&gt;
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.enter0()V+4 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
J 202  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt; (0 bytes) @ 0x00007f614c62eb44 [0x00007f614c62e9e0+0x0000000000000164]&lt;br/&gt;
j  jdk.internal.vm.Continuation.run()V+122 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.runContinuation()V+75 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$$Lambda+0x00007f5cab04df78.run()V+4 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask.doExec()I+10 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f614c08bd1a&lt;br/&gt;
V  [libjvm.so+0xe84c4f]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x47f  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0xe852a1]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x331  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0xe854b5]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x75  (javaCalls.cpp:191)&lt;br/&gt;
V  [libjvm.so+0xfe13c3]  thread_entry(JavaThread*, JavaThread*)+0x93  (jvm.cpp:2937)&lt;br/&gt;
V  [libjvm.so+0xeba2cc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:720)&lt;br/&gt;
V  [libjvm.so+0x17a1a3a]  Thread::call_run()+0xba  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x14a68ea]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
J 202  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt; (0 bytes) @ 0x00007f614c62eb53 [0x00007f614c62e9e0+0x0000000000000173]&lt;br/&gt;
j  jdk.internal.vm.Continuation.run()V+122 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread.runContinuation()V+75 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.VirtualThread$$Lambda+0x00007f5cab04df78.run()V+4 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinTask.doExec()I+10 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f614c08bd1a&lt;br/&gt;
Registers:&lt;br/&gt;
RAX=0x00007f616554b000, RBX=0x00007f613d422a50, RCX=0x00007f616424cbb9, RDX=0x00007f61642bb618&lt;br/&gt;
RSP=0x00007f613d4229e0, RBP=0x00007f613d4229e0, RSI=0x0000000000000128, RDI=0x00007f61642bb640&lt;br/&gt;
R8 =0x00007f616424cc70, R9 =0xfffffffffffffff1, R10=0x00007f6161c82000, R11=0x0000000000000000&lt;br/&gt;
R12=0x00007f5c7c03dcd0, R13=0x0000000000000000, R14=0x00007f613d422a80, R15=0x00007f613d422a50&lt;br/&gt;
RIP=0x00007f6164163fda, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRAPNO=0x000000000000000e&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5110501">JDK-8316436</key>
            <summary>ContinuationWrapper uses unhandled nullptr oop</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stefank">Stefan Karlsson</assignee>
                                    <reporter username="lmesnik">Leonid Mesnik</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                    </labels>
                <created>Mon, 18 Sep 2023 10:22:27 -0700</created>
                <updated>Tue, 9 Jan 2024 10:33:08 -0800</updated>
                            <resolved>Fri, 20 Oct 2023 00:08:54 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14625460" author="roboduke" created="Fri, 10 Nov 2023 01:35:57 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to improve Loom code reliability. Applies cleanly. Testing passes.</comment>
                            <comment id="14625317" author="roboduke" created="Thu, 9 Nov 2023 10:54:55 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/346&quot;&gt;https://git.openjdk.org/jdk21u/pull/346&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-09 18:47:37 +0000</comment>
                            <comment id="14619724" author="dukebot" created="Fri, 20 Oct 2023 00:08:48 -0700"  >Changeset: 292aad2c&lt;br/&gt;
Author:    Stefan Karlsson &amp;lt;&lt;a href=&apos;mailto:stefank@openjdk.org&apos;&gt;stefank@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-20 07:07:42 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/292aad2c4901f2ffba37274763e1cc617711918e&quot;&gt;https://git.openjdk.org/jdk/commit/292aad2c4901f2ffba37274763e1cc617711918e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14612314" author="mseledtsov" created="Tue, 19 Sep 2023 11:11:42 -0700"  >ILW = HLM = P3</comment>
                            <comment id="14612148" author="roboduke" created="Mon, 18 Sep 2023 23:57:38 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15810&quot;&gt;https://git.openjdk.org/jdk/pull/15810&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-19 06:51:16 +0000</comment>
                            <comment id="14612139" author="stefank" created="Mon, 18 Sep 2023 23:37:55 -0700"  >I would classify this as a bug in Loom. This is the scenario that triggers this bug:&lt;br/&gt;
1) ContinuationWrapper is created on the stack&lt;br/&gt;
2) We enter a JRT_BLOCK section&lt;br/&gt;
3) Call ContinuationWrapper::done()&lt;br/&gt;
4) Exit the JRT_BLOCK&lt;br/&gt;
5) ~ContinuationWrapper is called&lt;br/&gt;
&lt;br/&gt;
(3) sets ContinuationWrapper::_continuation to nullptr&lt;br/&gt;
(4) hits a safepoint and sets ContinuationWrapper::_continuation to 0xfffffffffffffff1&lt;br/&gt;
(5) uses ContinuationWrapper::_continuation in `_continuation != nullptr`, which triggers ZGC&amp;#39;s verification code that finds the broken oop.&lt;br/&gt;
&lt;br/&gt;
So, this crashes with ZGC, but that&amp;#39;s because ZGC finds a broken usage of _continuation. To show that this is still a problem with other GCs I added this assert:&lt;br/&gt;
```&lt;br/&gt;
diff --git a/src/hotspot/share/runtime/javaThread.hpp b/src/hotspot/share/runtime/javaThread.hpp&lt;br/&gt;
index 40205d324a6..80b60d0b7b8 100644&lt;br/&gt;
--- a/src/hotspot/share/runtime/javaThread.hpp&lt;br/&gt;
+++ b/src/hotspot/share/runtime/javaThread.hpp&lt;br/&gt;
@@ -258,7 +258,7 @@ class JavaThread: public Thread {&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;void inc_no_safepoint_count() { _no_safepoint_count++; }&lt;br/&gt;
-  void dec_no_safepoint_count() { _no_safepoint_count--; }&lt;br/&gt;
+  void dec_no_safepoint_count() { _no_safepoint_count--; assert(_no_safepoint_count &amp;gt;= 0, &amp;quot;Catch G1 in the act!&amp;quot;); }&lt;br/&gt;
&amp;nbsp;#endif // ASSERT&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// These functions check conditions before possibly going to a safepoint.&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
To catch the broken nullptr check in:&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;void allow_safepoint() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef ASSERT&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// we could have already allowed safepoints in done&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (_continuation != nullptr &amp;amp;&amp;amp; _current_thread-&amp;gt;is_Java_thread()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread::cast(_current_thread)-&amp;gt;dec_no_safepoint_count();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
The assert is triggered when I run the test with G1. I think this can be fixed by stop setting _continuation to nullptr as a way to indicate cancellation of the ContinuationWrapper, and instead use a bool for that.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5114708">JDK-8320074</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118512">JDK-8323380</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="106453" name="hs_err_pid986260.log" size="153553" author="lmesnik" created="Mon, 18 Sep 2023 10:23:17 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i335mb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>