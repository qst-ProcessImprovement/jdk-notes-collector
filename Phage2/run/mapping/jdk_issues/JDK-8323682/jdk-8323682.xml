<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:43:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8323682] C2: guard check is not generated in Arrays.copyOfRange intrinsic when allocation is eliminated by EA</title>
                <link>https://bugs.openjdk.org/browse/JDK-8323682</link>
                <project id="10100" key="JDK">JDK</project>
                    <description># Failure analysis&lt;br/&gt;
&lt;br/&gt;
The library intrinsic _copyOfRange does not guard for start indices that are larger than the length of the source arrays. At the same time, _copyOfRange indicates that the arguments do have the necessary guards (i.e., are validated). As a result, the escape analysis can remove a number of nodes, which in turn leads to the removal of the ArrayCopyNode generated by _copyOfRange. Consequently, we never generate the required guard for the start index.&lt;br/&gt;
&lt;br/&gt;
For reference: if we turn off the escape analysis with -XX:-DoEscapeAnalysis, we generate the appropriate guard during ArrayCopy macro expansion and the issue does not surface.&lt;br/&gt;
&lt;br/&gt;
# Original description&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
### Description:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
public class FailedToCatch {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] var0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object[] arr = new Object[10];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int catchTime = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int i = 0; i &amp;lt; 20000; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m(arr, 15, 20);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (ArrayIndexOutOfBoundsException var4) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catchTime++;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int loopIndex = 1; loopIndex &amp;lt; 100; loopIndex++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Catch Time: &amp;quot; + catchTime);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static Object[] m(Object[] var0, int var1, int var2) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Arrays.copyOfRange(var0, var1, var2, Object[].class);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
The test program shown above is designed to catch the&amp;#xA0;`ArrayIndexOutOfBoundsException`&amp;#xA0;when invoking the method&amp;#xA0;`m()`. According to the code logic, the expected catch time should be 20,000. However, when executing this test program on OpenJDK 11, 17, and 21, the actual catch time is incorrect. For example, running the program on OpenJDK 11 outputs&amp;#xA0;`Catch Time: 2560`.&lt;br/&gt;
&lt;br/&gt;
**Expected Behavior:**&lt;br/&gt;
&lt;br/&gt;
The catch time should be 20,000, indicating that the exception is successfully caught every time the method&amp;#xA0;`m()`&amp;#xA0;is invoked.&lt;br/&gt;
&lt;br/&gt;
**Observed Behavior:**&lt;br/&gt;
&lt;br/&gt;
The catch time is incorrect when executing the test program on OpenJDK 11, 17, and 21, suggesting that the&amp;#xA0;`ArrayIndexOutOfBoundsException`&amp;#xA0;is not consistently caught. This issue does not occur when running the program on OpenJDK 8.&lt;br/&gt;
&lt;br/&gt;
Test Program : &lt;a href=&quot;https://drive.google.com/file/d/1S4ogjVOUBFjmfyyv666MZXNaFsgtfOl_/view?usp=sharing&quot;&gt;https://drive.google.com/file/d/1S4ogjVOUBFjmfyyv666MZXNaFsgtfOl_/view?usp=sharing&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
macOS version:&lt;br/&gt;
&lt;br/&gt;
```java&lt;br/&gt;
Software:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System Software Overview:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System Version: macOS 13.2 (22D49)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Kernel Version: Darwin 22.3.0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Boot Volume: Macintosh HD&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Boot Mode: Normal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Computer Name: MacBook Pro&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;User Name: MacBook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Secure Virtual Memory: Enabled&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System Integrity Protection: Enabled&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Time since boot: 1 day, 2 hours, 19 minutes&lt;br/&gt;
&lt;br/&gt;
Hardware:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hardware Overview:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Model Name: MacBook Pro&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Model Identifier: MacBookPro18,1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Model Number: MK193CH/A&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chip: Apple M1 Pro&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Total Number of Cores: 10 (8 performance and 2 efficiency)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory: 16 GB&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System Firmware Version: 8419.80.7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OS Loader Version: 8419.80.7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Activation Lock Status: Disabled&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
OpenJDK version:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
openjdk version &amp;quot;11.0.21&amp;quot; 2023-10-17&lt;br/&gt;
OpenJDK Runtime Environment Temurin-11.0.21+9 (build 11.0.21+9)&lt;br/&gt;
OpenJDK 64-Bit Server VM Temurin-11.0.21+9 (build 11.0.21+9, mixed mode)&lt;br/&gt;
&lt;br/&gt;
openjdk version &amp;quot;17.0.9&amp;quot; 2023-10-17&lt;br/&gt;
OpenJDK Runtime Environment Temurin-17.0.9+9 (build 17.0.9+9)&lt;br/&gt;
OpenJDK 64-Bit Server VM Temurin-17.0.9+9 (build 17.0.9+9, mixed mode)&lt;br/&gt;
&lt;br/&gt;
openjdk version &amp;quot;21.0.1&amp;quot; 2023-10-17 LTS&lt;br/&gt;
OpenJDK Runtime Environment Temurin-21.0.1+12 (build 21.0.1+12-LTS)&lt;br/&gt;
OpenJDK 64-Bit Server VM Temurin-21.0.1+12 (build 21.0.1+12-LTS, mixed mode)&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
REGRESSION : Last worked in version 8u391&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5118219">JDK-8323682</key>
            <summary>C2: guard check is not generated in Arrays.copyOfRange intrinsic when allocation is eliminated by EA</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dlunden">Daniel Lunden</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>c2-ea</label>
                            <label>dcsmco</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-23</label>
                            <label>reproducer-yes</label>
                            <label>starter</label>
                            <label>webbug</label>
                    </labels>
                <created>Sat, 6 Jan 2024 23:26:34 -0800</created>
                <updated>Thu, 13 Jun 2024 02:52:56 -0700</updated>
                            <resolved>Tue, 2 Apr 2024 22:53:50 -0700</resolved>
                                    <version>9</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14681295" author="roboduke" created="Thu, 13 Jun 2024 00:58:14 -0700"  >[jdk21u-fix-request] Approval Request from Martin&lt;br/&gt;
Should get backported for parity with 21.0.25-oracle. Applies cleanly and tier 1-4 have passed.</comment>
                            <comment id="14680895" author="roboduke" created="Wed, 12 Jun 2024 05:29:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/704&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/704&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-12 12:23:40 +0000</comment>
                            <comment id="14662446" author="dukebot" created="Tue, 2 Apr 2024 22:53:49 -0700"  >Changeset: 92f5c0be&lt;br/&gt;
Author:    Daniel Lund&amp;#xE9;n &amp;lt;&lt;a href=&apos;mailto:dlunden@openjdk.org&apos;&gt;dlunden@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-04-03 05:50:41 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/92f5c0be8e3b47343b54a26940df691faaf49b23&quot;&gt;https://git.openjdk.org/jdk/commit/92f5c0be8e3b47343b54a26940df691faaf49b23&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14660073" author="roboduke" created="Mon, 25 Mar 2024 06:33:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18472&quot;&gt;https://git.openjdk.org/jdk/pull/18472&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-25 13:28:32 +0000</comment>
                            <comment id="14660011" author="JIRAUSER21007" created="Mon, 25 Mar 2024 03:56:00 -0700"  >OK, thanks [~kvn]</comment>
                            <comment id="14659714" author="kvn" created="Fri, 22 Mar 2024 09:47:21 -0700"  >It was performance fix for case when length was 0.&lt;br/&gt;
</comment>
                            <comment id="14659713" author="kvn" created="Fri, 22 Mar 2024 09:45:30 -0700"  >&amp;gt; I&amp;#39;m also curious why the negative length guard was originally moved from PhaseMacroExpand::expand_arraycopy_node [3], where all the other guards are generated, to PhaseMacroExpand::generate_arraycopy.&lt;br/&gt;
&lt;br/&gt;
It was part of fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6544710&quot; title=&quot;Performance regression in RangeCheckMicroBenchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6544710&quot;&gt;&lt;strike&gt;JDK-6544710&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14659588" author="JIRAUSER21007" created="Fri, 22 Mar 2024 03:29:57 -0700"  >I have now checked the macro expansion of ArrayCopy nodes (PhaseMacroExpand::expand_arraycopy_node) and, except the case identified in this issue, we do generate the necessary guards in LibraryCallKit::inline_array_copyOf.&lt;br/&gt;
&lt;br/&gt;
For reference and clarification: the _only_ guard generated during macro expansion of copyOfRange-generated ArrayCopy nodes is the negative length check corresponding to generate_negative_guard(moved, bailout, &amp;amp;moved) suggested by [~kvn] above. The guard is generated in PhaseMacroExpand::generate_arraycopy [1]. I also stumbled upon a comment in LibraryCallKit::inline_arraycopy [2] that led me to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8159611&quot; title=&quot;C2: ArrayCopy elimination skips required parameter checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8159611&quot;&gt;&lt;strike&gt;JDK-8159611&lt;/strike&gt;&lt;/a&gt;, which, it seems, is very closely related to this issue.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m also curious why the negative length guard was originally moved from PhaseMacroExpand::expand_arraycopy_node [3], where all the other guards are generated, to PhaseMacroExpand::generate_arraycopy. Do you know anything more [~kvn] [~thartmann]? Should I investigate if we can move it back to [3]? Doing this would perhaps expose more places where we do not generate appropriate guards.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/481473efce9f51a497e26002c6da52b0ddc9ea8f/src/hotspot/share/opto/macroArrayCopy.cpp#L484&quot;&gt;https://github.com/openjdk/jdk/blob/481473efce9f51a497e26002c6da52b0ddc9ea8f/src/hotspot/share/opto/macroArrayCopy.cpp#L484&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/481473efce9f51a497e26002c6da52b0ddc9ea8f/src/hotspot/share/opto/library_call.cpp#L5709-L5712&quot;&gt;https://github.com/openjdk/jdk/blob/481473efce9f51a497e26002c6da52b0ddc9ea8f/src/hotspot/share/opto/library_call.cpp#L5709-L5712&lt;/a&gt;&lt;br/&gt;
[3] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/481473efce9f51a497e26002c6da52b0ddc9ea8f/src/hotspot/share/opto/macroArrayCopy.cpp#L1389&quot;&gt;https://github.com/openjdk/jdk/blob/481473efce9f51a497e26002c6da52b0ddc9ea8f/src/hotspot/share/opto/macroArrayCopy.cpp#L1389&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14642428" author="kvn" created="Mon, 22 Jan 2024 13:01:54 -0800"  >I think we need to change Subject to something like next:&lt;br/&gt;
&amp;quot;C2: guard check is not generate in Arrays.copyOfRange intrinsic when allocation is eliminated by EA.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
With suggested fix EA still eliminate allocation but keep guard check. And that is correct.</comment>
                            <comment id="14642286" author="JIRAUSER21007" created="Mon, 22 Jan 2024 04:58:22 -0800"  >Thanks for all the input [~thartmann] and [~kvn]. I&amp;#39;ll have a look at this as soon as I finish up some other issues.</comment>
                            <comment id="14642003" author="kvn" created="Fri, 19 Jan 2024 14:21:35 -0800"  >I will leave checking to Daniel.  We need to look on guard checks generated during macro expansion of ArayCopy node and see if existing checks in `LibraryCallKit::inline_array_copyOf()` cover them.</comment>
                            <comment id="14641775" author="thartmann" created="Thu, 18 Jan 2024 23:12:03 -0800"  >Yes, I think so too but we should double-check.</comment>
                            <comment id="14641681" author="kvn" created="Thu, 18 Jan 2024 12:14:36 -0800"  >Yes, you are right. Setting `validated` flag based only on class check is wrong.&lt;br/&gt;
I think there was assumption that we have guard. check for all arguments. It missed that some guard checks are generated only during ArraryCopy macro expansion which could be late as in this case.&lt;br/&gt;
&lt;br/&gt;
With moved guard check, as suggested, the `validate` flag check is correct, I think, because we check all arguments now. Or I am missing some?</comment>
                            <comment id="14641420" author="thartmann" created="Wed, 17 Jan 2024 22:42:40 -0800"  >&amp;gt; `validated` flag is related to class check based on code in `inline_array_copyOf()` code.&lt;br/&gt;
&lt;br/&gt;
I think it should only be set if all arguments are validated (the class check is not sufficient). In fact, the corresponding field in ArrayCopyNode is called _arguments_validated and EA sets the arguments as non-escaping only if the array copy is validated:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (call-&amp;gt;is_ArrayCopy()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayCopyNode* ac = call-&amp;gt;as_ArrayCopy();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (ac-&amp;gt;is_clonebasic() ||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ac-&amp;gt;is_arraycopy_validated() ||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ac-&amp;gt;is_copyof_validated() ||&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ac-&amp;gt;is_copyofrange_validated()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;es = PointsToNode::NoEscape;&lt;br/&gt;
&lt;br/&gt;
And yes, I agree that the fix is to move the check to before the node is expanded. </comment>
                            <comment id="14640789" author="kvn" created="Tue, 16 Jan 2024 12:41:31 -0800"  >Fix:&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp&lt;br/&gt;
index 7caed54bd99..3f453a457db 100644&lt;br/&gt;
--- a/src/hotspot/share/opto/library_call.cpp&lt;br/&gt;
+++ b/src/hotspot/share/opto/library_call.cpp&lt;br/&gt;
@@ -4334,6 +4334,13 @@ bool LibraryCallKit::inline_array_copyOf(bool is_copyOfRange) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// should be thrown&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generate_negative_guard(length, bailout, &amp;amp;length);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+    // How many elements will we copy from the original?&lt;br/&gt;
+    // The answer is MinI(orig_length - start, length).&lt;br/&gt;
+    Node* orig_tail = _gvn.transform(new SubINode(orig_length, start));&lt;br/&gt;
+    Node* moved = generate_min_max(vmIntrinsics::_min, orig_tail, length);&lt;br/&gt;
+    generate_negative_guard(moved, bailout, &amp;amp;moved);&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (bailout-&amp;gt;req() &amp;gt; 1) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PreserveJVMState pjvms(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set_control(_gvn.transform(bailout));&lt;br/&gt;
@@ -4344,8 +4351,8 @@ bool LibraryCallKit::inline_array_copyOf(bool is_copyOfRange) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!stopped()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// How many elements will we copy from the original?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The answer is MinI(orig_length - start, length).&lt;br/&gt;
-      Node* orig_tail = _gvn.transform(new SubINode(orig_length, start));&lt;br/&gt;
-      Node* moved = generate_min_max(vmIntrinsics::_min, orig_tail, length);&lt;br/&gt;
+//      Node* orig_tail = _gvn.transform(new SubINode(orig_length, start));&lt;br/&gt;
+//      Node* moved = generate_min_max(vmIntrinsics::_min, orig_tail, length);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Generate a direct call to the right arraycopy function(s).&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// We know the copy is disjoint but we might not know if the&lt;br/&gt;
@@ -4392,7 +4399,7 @@ bool LibraryCallKit::inline_array_copyOf(bool is_copyOfRange) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!stopped()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newcopy = new_array(klass_node, length, 0);  // no arguments to push&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-        ArrayCopyNode* ac = ArrayCopyNode::make(this, true, original, start, newcopy, intcon(0), moved, true, false,&lt;br/&gt;
+        ArrayCopyNode* ac = ArrayCopyNode::make(this, true, original, start, newcopy, intcon(0), moved, true, true,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;load_object_klass(original), klass_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!is_copyOfRange) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ac-&amp;gt;set_copyof(validated);&lt;br/&gt;
</comment>
                            <comment id="14640788" author="kvn" created="Tue, 16 Jan 2024 12:40:39 -0800"  >`validated` flag is related to class check based on code in `inline_array_copyOf()` code.&lt;br/&gt;
&lt;br/&gt;
The issue is that ArrayCopyNode expanded (and added negative length check) after EA is done. As result the check is not generated after EA removed new array.&lt;br/&gt;
&lt;br/&gt;
We should add guard check for `moved` in  `inline_array_copyOf()`:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// How many elements will we copy from the original?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The answer is MinI(orig_length - start, length).&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node* orig_tail = _gvn.transform(new SubINode(orig_length, start));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node* moved = generate_min_max(vmIntrinsics::_min, orig_tail, length);&lt;br/&gt;
&lt;br/&gt;
and pass `has_negative_length_guard` == `true` to `ArrayCopyNode::make` to avoid duplicated check.&lt;br/&gt;
&lt;br/&gt;
With this I see that we still eliminate new array allocation but the length check is in code.</comment>
                            <comment id="14640096" author="thartmann" created="Mon, 15 Jan 2024 00:55:41 -0800"  >I attached a simplified version of the original test:&lt;br/&gt;
java -XX:-TieredCompilation -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,FailedToCatch::test -Xbatch FailedToCatch.java&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s not an issue with loop optimizations but a bug in Escape Analysis in combination with the _copyOf intrinsic. The issue was introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8076188&quot; title=&quot;Optimize arraycopy out for non escaping destination&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8076188&quot;&gt;&lt;strike&gt;JDK-8076188&lt;/strike&gt;&lt;/a&gt; in JDK 9. I had a quick look and I think the problem is that the copyOf intrinsic marks the ArrayCopyNode as validated, although it does not fully validate all input arguments. EA then treats the destination array as non-escaping and the ArrayCopyNode as side-effect-free (because it&amp;#39;s validated). The destination array allocation and the array copy are then removed because they don&amp;#39;t have any uses. In the end, FailedToCatch::test is basically and empty method.&lt;br/&gt;
&lt;br/&gt;
I think we should either fully very the array copy in the intrinsic or not mark it as verified. We should also check if there are similar issues with other uses of array copy.&lt;br/&gt;
&lt;br/&gt;
ILW = Incorrect execution of C2 compiled code, easy to reproduce but edge case, -XX:DisabledIntrinsic=_copyOf or disable C2 compilation of affected method = HLM = P3</comment>
                            <comment id="14640050" author="dholmes" created="Sun, 14 Jan 2024 14:46:20 -0800"  >The change in behaviour can first be seen in Java 9. It appears to be a C2 bug and only happens once you get to tiered-compilation level 4:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;gt; java9 -Xint FailedToCatch&lt;br/&gt;
Catch Time: 20000&lt;br/&gt;
&amp;nbsp;&amp;gt; java9 -XX:TieredStopAtLevel=1 FailedToCatch&lt;br/&gt;
Catch Time: 20000&lt;br/&gt;
&amp;nbsp;&amp;gt; java9 -XX:TieredStopAtLevel=2 FailedToCatch&lt;br/&gt;
Catch Time: 20000&lt;br/&gt;
&amp;nbsp;&amp;gt; java9 -XX:TieredStopAtLevel=3 FailedToCatch&lt;br/&gt;
Catch Time: 20000&lt;br/&gt;
&amp;nbsp;&amp;gt; java9 -XX:TieredStopAtLevel=4 FailedToCatch&lt;br/&gt;
Catch Time: 1374&lt;br/&gt;
&lt;br/&gt;
Same pattern is observed with Java 21.&lt;br/&gt;
&lt;br/&gt;
I have to assume a loop-unrolling bug</comment>
                            <comment id="14639947" author="JIRAUSER19827" created="Fri, 12 Jan 2024 11:20:15 -0800"  >Verified in-house with different versions of OS (macbookpro m1, Oracle Linux 8) and different versions of Oracle JDK, and OpenJDK, finding that JDK 8 worked as expected while JDK 11, JDK 17, JDK 21 are showing a different behavior. Expected value for Catch time is 20000.&lt;br/&gt;
&lt;br/&gt;
On MacProBook M1:&lt;br/&gt;
Open jdk-21.0.1.jdk&lt;br/&gt;
Catch Time: 1357&lt;br/&gt;
&lt;br/&gt;
Oracle jdk17.0.3.1&lt;br/&gt;
Catch Time: 1441&lt;br/&gt;
&lt;br/&gt;
On Oracle Linux 8 - &lt;br/&gt;
java version &amp;quot;1.8.0_391&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.8.0_391-b25)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 25.391-b25, mixed mode)&lt;br/&gt;
Catch Time: 20000&lt;br/&gt;
&lt;br/&gt;
java version &amp;quot;11.0.20.0.4&amp;quot; 2023-09-15 LTS&lt;br/&gt;
Java(TM) SE Runtime Environment 18.9 (build 11.0.20.0.4+1-LTS-4)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.20.0.4+1-LTS-4, mixed mode)&lt;br/&gt;
Catch Time: 1883&lt;br/&gt;
&lt;br/&gt;
java version &amp;quot;17.0.9&amp;quot; 2023-10-17 LTS&lt;br/&gt;
Java(TM) SE Runtime Environment (build 17.0.9+11-LTS-201)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 17.0.9+11-LTS-201, mixed mode, sharing)&lt;br/&gt;
Catch Time: 1196&lt;br/&gt;
&lt;br/&gt;
java version &amp;quot;21.0.1&amp;quot; 2023-10-17 LTS&lt;br/&gt;
Java(TM) SE Runtime Environment (build 21.0.1+11-LTS-27)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 21.0.1+11-LTS-27, mixed mode, sharing)&lt;br/&gt;
Catch Time: 1112&lt;br/&gt;
&lt;br/&gt;
Moving to dev for further analysis.&lt;br/&gt;
&lt;br/&gt;
ILW = inconsistent behavior, reproducible with single test, no workaround available =  HHH = P1&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5131632">JDK-8334066</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131783">JDK-8334206</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4888911">JDK-8159611</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="107886" name="FailedToCatch.java" size="726" author="thartmann" created="Mon, 15 Jan 2024 00:36:16 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17872"><![CDATA[b99]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="14949">9</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34fxn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17417"><![CDATA[b17]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>