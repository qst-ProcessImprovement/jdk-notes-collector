<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:45:11 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8260943] C2 SuperWord: Remove dead vectorization optimization added by 8076284</title>
                <link>https://bugs.openjdk.org/browse/JDK-8260943</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8251994&quot; title=&quot;VM crashed running TestComplexAddrExpr.java test with -XX:UseAVX=X&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8251994&quot;&gt;&lt;strike&gt;JDK-8251994&lt;/strike&gt;&lt;/a&gt; changes excluded optimization added by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8076284&quot; title=&quot;Improve vectorization of parallel streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8076284&quot;&gt;&lt;strike&gt;JDK-8076284&lt;/strike&gt;&lt;/a&gt;. It is incomplete and buggy in current state.&lt;br/&gt;
&lt;br/&gt;
Using unrolling and cloning information to vectorize is interesting idea but as I see it is not complete. Even if pack_parallel() method is able create packs, they are all removed by filter_packs() method.  And additionally the cases listed in RFR are vectorized without hoisting loads and pack_parallel - I verified it:&lt;br/&gt;
&lt;a href=&quot;https://mail.openjdk.java.net/pipermail/hotspot-compiler-dev/2015-April/017645.html&quot;&gt;https://mail.openjdk.java.net/pipermail/hotspot-compiler-dev/2015-April/017645.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
This code should be revisited to be useful or removed.</description>
                <environment></environment>
        <key id="5040968">JDK-8260943</key>
            <summary>C2 SuperWord: Remove dead vectorization optimization added by 8076284</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="kvn">Vladimir Kozlov</reporter>
                        <labels>
                            <label>c2</label>
                            <label>c2-superword</label>
                    </labels>
                <created>Tue, 2 Feb 2021 07:58:32 -0800</created>
                <updated>Sun, 28 May 2023 20:48:02 -0700</updated>
                            <resolved>Tue, 23 May 2023 03:02:40 -0700</resolved>
                                    <version>17</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14583607" author="dukebot" created="Tue, 23 May 2023 03:02:38 -0700"  >Changeset: bdd24028&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-23 09:51:19 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/bdd240283e1690adf52b2fe7a751d579cb89b33b&quot;&gt;https://git.openjdk.org/jdk/commit/bdd240283e1690adf52b2fe7a751d579cb89b33b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14581776" author="roboduke" created="Mon, 15 May 2023 21:56:12 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13930&quot;&gt;https://git.openjdk.org/jdk/pull/13930&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-11 12:15:08 +0000</comment>
                            <comment id="14562482" author="JIRAUSER19821" created="Thu, 23 Feb 2023 08:54:23 -0800"  >Maybe we should rather delete the old code that is buggy, and try to improve the alignment analysis to allow for more vectorization.&lt;br/&gt;
If the work of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303113&quot; title=&quot;C2 SuperWord: improve packing to remove _do_vector_loop&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303113&quot;&gt;JDK-8303113&lt;/a&gt; succeeds, we should be able to vectorize much more than now.&lt;br/&gt;
&lt;br/&gt;
Maybe we should have a collection of examples that do not vectorize currently, but where we would like it to be vectorized.&lt;br/&gt;
I can come up with a few right here:&lt;br/&gt;
&lt;br/&gt;
// only works with _do_vector_loop == true&lt;br/&gt;
for (i ...) {  arr[i] = arr[i] + arr[i+1]; }&lt;br/&gt;
&lt;br/&gt;
// arr and arr2 are on same slice&lt;br/&gt;
// It would be nice if we could improve the escape analysis. Or locally figure out if two arrays cannot be the same (eg if one is passed as argument to method, and the other created locally). And finally, we could speculate: runtime check if they are the same, and go into two different loops. Or somehow gather info through profiling and uncommon trap if they turn out to be the same after all.&lt;br/&gt;
for (i ...) { arr[i] = arr2[i-1]; }&lt;br/&gt;
&lt;br/&gt;
// extended example: some kernel&lt;br/&gt;
for (i ...) { arr[i] = arr2[i-1] + arr2[i] + arr2[i+1]; } // box kernel, blur kernel or whatever&lt;br/&gt;
&lt;br/&gt;
Maybe we can go and investigate what are the most rejected loops, and if we can do something about them? It would be nice to figure out where we are currently really missing out. Does someone have an idea how to do that?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5027992">JDK-8251994</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5094895">JDK-8303113</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2re3f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17436"><![CDATA[b24]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>