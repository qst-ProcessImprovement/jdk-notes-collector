<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:59:41 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8316961] Fallback implementations for 64-bit Atomic::{add,xchg} on 32-bit platforms</title>
                <link>https://bugs.openjdk.org/browse/JDK-8316961</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Currently, trying to use Atomic::add with 64-bit value/destination on 32-bit platform would fail to build with obscure linkage error, because these operations are not implemented for 32-bit platforms. This is an ongoing hassle when developing generic VM code: the 64-bit systems work well, and developers usually discover this pitfall when building/testing 32-bit builds. atomic.hpp suggests to conditionalize the caller code on supports_cx8(), but hardly anyone remembers to do it.&lt;br/&gt;
&lt;br/&gt;
64-bit Atomic::cmpxchg is implemented on almost all platforms, though, which means we can write the fallback implementations for 64-bit add and xchg using 64-bit cmpxchg. When 64-bit cmpchg is not available, we can do what Access API does: take a lock.&lt;br/&gt;
&lt;br/&gt;
This would simplify future development.&lt;br/&gt;
&lt;br/&gt;
The caveat with such delegation would be giving up on wait-freedom that hardware implementations for xadd/xchg implicitly have. Implementing xadd/xchg with CAS loops makes them lock-free, but not wait-free. Implementing them with locks makes them not lock-free. This might not be a problem in practice. &lt;br/&gt;
&lt;br/&gt;
Existing code in this area:&lt;br/&gt;
&amp;nbsp;1. Fallback implementations for e.g. Unsafe::getAndAdd and Unsafe::getAndSet already do fallback CAS loops: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/1f7dfda7059f9dc14bff61b3c77d769ade85557d/src/java.base/share/classes/jdk/internal/misc/Unsafe.java#L2471-L2507&quot;&gt;https://github.com/openjdk/jdk/blob/1f7dfda7059f9dc14bff61b3c77d769ade85557d/src/java.base/share/classes/jdk/internal/misc/Unsafe.java#L2471-L2507&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;2. Access API takes a lock: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/1f7dfda7059f9dc14bff61b3c77d769ade85557d/src/hotspot/share/oops/accessBackend.inline.hpp#L217-L253&quot;&gt;https://github.com/openjdk/jdk/blob/1f7dfda7059f9dc14bff61b3c77d769ade85557d/src/hotspot/share/oops/accessBackend.inline.hpp#L217-L253&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
A draft version for Atomic::add and CAS loops looks like this:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/compare/master...shipilev:wip-32bit-add&quot;&gt;https://github.com/openjdk/jdk/compare/master...shipilev:wip-32bit-add&lt;/a&gt;</description>
                <environment></environment>
        <key id="5111095">JDK-8316961</key>
            <summary>Fallback implementations for 64-bit Atomic::{add,xchg} on 32-bit platforms</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>google-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oraclejdk-na</label>
                    </labels>
                <created>Tue, 26 Sep 2023 07:29:34 -0700</created>
                <updated>Tue, 6 Feb 2024 23:46:45 -0800</updated>
                            <resolved>Wed, 25 Oct 2023 01:31:44 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14647062" author="roboduke" created="Tue, 6 Feb 2024 08:09:50 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to complete Atomics support and make future backports safe from accidents. This patch affects x86_32 and ARM32 that do not have add/xchg implementations. Current code does not do add/xchg for 32-bit platforms at the moment (except in the gtest), which would be the linkage error without this patch. Therefore, the risk is low. Tests on x86_32 pass. Zero builds (which include 32-bit platforms too) also pass.</comment>
                            <comment id="14647061" author="roboduke" created="Tue, 6 Feb 2024 08:09:11 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/233&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/233&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-03 10:27:43 +0000</comment>
                            <comment id="14620916" author="dukebot" created="Wed, 25 Oct 2023 01:31:43 -0700"  >Changeset: ba7d08b8&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-25 08:29:58 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ba7d08b8199172058bd369d880d2d6a9f9649319&quot;&gt;https://git.openjdk.org/jdk/commit/ba7d08b8199172058bd369d880d2d6a9f9649319&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14619628" author="manc" created="Thu, 19 Oct 2023 12:32:21 -0700"  >Thank you for implementing this!</comment>
                            <comment id="14619307" author="roboduke" created="Wed, 18 Oct 2023 12:04:36 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16252&quot;&gt;https://git.openjdk.org/jdk/pull/16252&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-18 18:58:58 +0000</comment>
                            <comment id="14614204" author="dholmes" created="Tue, 26 Sep 2023 15:59:57 -0700"  >[~shade] this sounds perfectly reasonable. If we have 64-bit CAS then we can implement any atomic op in terms of it; else we have the existing lock mechanism to fall back on.</comment>
                            <comment id="14614102" author="shade" created="Tue, 26 Sep 2023 07:31:43 -0700"  >[~dholmes], please poke the holes in this proposal, before we spend more time on it?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5120898">JDK-8325389</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="5114685">JDK-8320052</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5114685">JDK-8320052</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114684">JDK-8320050</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5113149">JDK-8318776</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i339ab:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>