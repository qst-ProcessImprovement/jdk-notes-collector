<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 08:43:28 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8244289] fatal error: Possible safepoint reached by thread that does not allow it</title>
                <link>https://bugs.openjdk.org/browse/JDK-8244289</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/scratch/mesos/slaves/805146e6-8fdb-4552-bf9e-385b73cf7129-S64/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/589fc727-34c6-410d-a3d3-6561940a2473/runs/49875ea5-557b-4454-8c7a-8500648c1618/workspace/open/src/hotspot/share/runtime/thread.cpp:996), pid=79006, tid=37635&lt;br/&gt;
#  fatal error: Possible safepoint reached by thread that does not allow it&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fc479a92800):  JavaThread &amp;quot;com.oracle.jfr.jmh.simple.Basic.mtDynamic-jmh-worker-3&amp;quot; daemon [_thread_in_vm, id=37635, stack(0x000070001044a000,0x000070001054a000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000070001044a000,0x000070001054a000],  sp=0x00007000105488d0,  free space=1018k&lt;br/&gt;
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0xb3a0af]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e5&lt;br/&gt;
V  [libjvm.dylib+0xb3a7cb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x47&lt;br/&gt;
V  [libjvm.dylib+0x3345dc]  report_fatal(char const*, int, char const*, ...)+0xd2&lt;br/&gt;
V  [libjvm.dylib+0xaae5d6]  Thread::check_possible_safepoint()+0x48&lt;br/&gt;
V  [libjvm.dylib+0xaddcc7]  ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState)+0xc7&lt;br/&gt;
V  [libjvm.dylib+0x56b7a9]  jfr_event_writer_flush+0x1d8&lt;br/&gt;
J 1385  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@15-ea&apos;&gt;jdk.jfr@15-ea&lt;/a&gt; (0 bytes) @ 0x00000001160814e2 [0x00000001160813e0+0x0000000000000102]&lt;br/&gt;
J 1376 c2 jdk.jfr.DynamicEvent1.commit()V &lt;a href=&apos;mailto:jdk.jfr@15-ea&apos;&gt;jdk.jfr@15-ea&lt;/a&gt; (77 bytes) @ 0x0000000116083c70 [0x0000000116082fa0+0x0000000000000cd0]</description>
                <environment></environment>
        <key id="5017993">JDK-8244289</key>
            <summary>fatal error: Possible safepoint reached by thread that does not allow it</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mgronlun">Markus Gr&#246;nlund</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>problemlist</label>
                            <label>tier5</label>
                            <label>tier8</label>
                    </labels>
                <created>Sun, 3 May 2020 00:25:17 -0700</created>
                <updated>Tue, 5 Nov 2024 00:12:24 -0800</updated>
                            <resolved>Thu, 13 Jul 2023 09:52:56 -0700</resolved>
                                    <version>14</version>
                    <version>15</version>
                    <version>16</version>
                    <version>17</version>
                    <version>19</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>16</watches>
                                                                                                                <comments>
                            <comment id="14609764" author="shade" created="Fri, 8 Sep 2023 06:22:08 -0700"  >Fix Request (17u)&lt;br/&gt;
&lt;br/&gt;
Improves JFR reliability. Applies cleanly. Tests pass.</comment>
                            <comment id="14609761" author="roboduke" created="Fri, 8 Sep 2023 06:09:38 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1726&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1726&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-08 13:02:30 +0000</comment>
                            <comment id="14596107" author="roboduke" created="Thu, 13 Jul 2023 10:06:28 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/124&quot;&gt;https://git.openjdk.org/jdk21/pull/124&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-13 16:59:15 +0000</comment>
                            <comment id="14596097" author="dukebot" created="Thu, 13 Jul 2023 09:52:55 -0700"  >Changeset: 61932f49&lt;br/&gt;
Author:    Markus Gr&amp;#xF6;nlund &amp;lt;&lt;a href=&apos;mailto:mgronlun@openjdk.org&apos;&gt;mgronlun@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-13 16:50:16 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/61932f49a58b73530e89e511874fbe2fbc343e99&quot;&gt;https://git.openjdk.org/jdk/commit/61932f49a58b73530e89e511874fbe2fbc343e99&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14595016" author="roboduke" created="Tue, 11 Jul 2023 06:09:18 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14828&quot;&gt;https://git.openjdk.org/jdk/pull/14828&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-11 13:03:08 +0000</comment>
                            <comment id="14594987" author="mgronlun" created="Tue, 11 Jul 2023 04:38:11 -0700"  >// I was finally able to pinpoint this strange problem.&lt;br/&gt;
&lt;br/&gt;
[jmh] # Warmup: 5 iterations, 10 s each&lt;br/&gt;
[jmh] # Measurement: 5 iterations, 10 s each&lt;br/&gt;
[jmh] # Timeout: 10 min per iteration&lt;br/&gt;
[jmh] # Threads: 4 threads, will synchronize iterations&lt;br/&gt;
[jmh] # Benchmark mode: Average time, time/op&lt;br/&gt;
[jmh] # Benchmark: com.oracle.jfr.jmh.simple.Basic.mtEmpty&lt;br/&gt;
[jmh] # Parameters: (mode = MEM) // &amp;lt;&amp;lt;---- not to disk, but to memory which is a degraded mode of execution, entailing discarding old data.&lt;br/&gt;
[jmh] # Run progress: 25.00% complete, ETA 00:05:25&lt;br/&gt;
[jmh] # Fork: 1 of 1&lt;br/&gt;
[jmh] # Warmup Iteration   1: 299.576 ?(99.9%) 399.921 ns/op&lt;br/&gt;
[jmh] # Warmup Iteration   2:  Locks owned:&lt;br/&gt;
[jmh] Mutex: [0x00000001122781a0] JfrBuffer_lock - owner: 0x00007f8e47022810 allow_vm_block nosafepoint&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] #  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S75086/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/06c7806a-183a-4092-a492-031d815356f6/runs/412b1358-09c7-45ab-85c5-31aa3ea66798/workspace/open/src/hotspot/share/runtime/javaThread.cpp:362), pid=10143, tid=25091&lt;br/&gt;
[jmh] #  assert(false) failed: Possible safepoint reached by thread that does not allow it&lt;br/&gt;
&lt;br/&gt;
// When the system is configured not to write to disk, the oldest data is discarded when the global buffers fill up. Here is the start of the buffer discard routine:&lt;br/&gt;
&lt;br/&gt;
void JfrStorage::discard_oldest(Thread* thread) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (JfrBuffer_lock-&amp;gt;try_lock()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!control().should_discard()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// another thread handled it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return; // &amp;lt;&amp;lt;--- invalid since the lock is not an RAII construct!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;....&lt;br/&gt;
&lt;br/&gt;
// The return here is invalid when combined with the try_lock() construct. On return, the JfrBuffer_lock is still held by the thread. What is the relation to _no_safepoint_count?&lt;br/&gt;
// Take a look at Mutex::set_owner_implementation()&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;void Mutex::set_owner_implementation(Thread *new_owner) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The tty_lock is special because it is released for the safepoint by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// the safepoint mechanism.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (new_owner-&amp;gt;is_Java_thread() &amp;amp;&amp;amp; _allow_vm_block &amp;amp;&amp;amp; this != tty_lock) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_owner-&amp;gt;as_Java_thread()-&amp;gt;inc_no_safepoint_count(); // &amp;lt;&amp;lt;--- iff the lock is ranked nosafepoint or below, i.e. _allow_vm_block, the _no_safepoint_count field is incremented for the thread.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MUTEX_DEFN(JfrBuffer_lock                  , PaddedMutex  , nosafepoint);&lt;br/&gt;
&lt;br/&gt;
// The assert then fires when returning to native from VM:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~ThreadInVMfromNative() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// We cannot assert !_thread-&amp;gt;owns_locks() since we have valid cases where&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// we call known native code using this wrapper holding locks.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transition_from_vm(_thread, _thread_in_native);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to == _thread_in_native || to == _thread_blocked, &amp;quot;invalid transition&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Check NoSafepointVerifier. This also clears unhandled oops if CheckUnhandledOops is used.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread-&amp;gt;check_possible_safepoint(); // &amp;lt;&amp;lt;-- check for possible safepoint when transitioning back from _thread_in_vm to _thread_in_native&lt;br/&gt;
&lt;br/&gt;
#ifdef ASSERT&lt;br/&gt;
// Checks safepoint allowed and clears unhandled oops at potential safepoints.&lt;br/&gt;
void JavaThread::check_possible_safepoint() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (_no_safepoint_count &amp;gt; 0) { // &amp;lt;&amp;lt;--- the check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print_owned_locks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(false, &amp;quot;Possible safepoint reached by thread that does not allow it&amp;quot;); // &amp;lt;--- the assert&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
// How could the _no_safepoint_count field of the problematic thread end up 0 when inspected in core files? The answer is here:&lt;br/&gt;
&lt;br/&gt;
jvm!JavaThread::dec_no_safepoint_count+0x1d [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\javaThread.hpp @ 260] &lt;br/&gt;
jvm!Mutex::set_owner_implementation+0x2ec [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\mutex.cpp @ 523] &lt;br/&gt;
jvm!Mutex::set_owner+0x1d [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\mutex.hpp @ 191] &lt;br/&gt;
jvm!Mutex::unlock+0x27 [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\mutex.cpp @ 199] &lt;br/&gt;
jvm!prepare_for_emergency_dump+0x96 [d:\dev\github\jdk_copy3\open\src\hotspot\share\jfr\recorder\repository\jfrEmergencyDump.cpp @ 472] &lt;br/&gt;
jvm!JfrEmergencyDump::on_vm_shutdown+0x49 [d:\dev\github\jdk_copy3\open\src\hotspot\share\jfr\recorder\repository\jfrEmergencyDump.cpp @ 587] &lt;br/&gt;
jvm!Jfr::on_vm_shutdown+0x2b [d:\dev\github\jdk_copy3\open\src\hotspot\share\jfr\jfr.cpp @ 129] &lt;br/&gt;
jvm!VMError::report_and_die+0x7ed [d:\dev\github\jdk_copy3\open\src\hotspot\share\utilities\vmError.cpp @ 1807] &lt;br/&gt;
jvm!VMError::report_and_die+0x81 [d:\dev\github\jdk_copy3\open\src\hotspot\share\utilities\vmError.cpp @ 1563] &lt;br/&gt;
jvm!report_vm_error+0x7b [d:\dev\github\jdk_copy3\open\src\hotspot\share\utilities\debug.cpp @ 192] &lt;br/&gt;
jvm!JavaThread::check_possible_safepoint+0x58 [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\javaThread.cpp @ 362] &lt;br/&gt;
jvm!ThreadStateTransition::transition_from_vm+0xcd [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\interfaceSupport.inline.hpp @ 121] &lt;br/&gt;
jvm!ThreadInVMfromNative::~ThreadInVMfromNative+0x1e [d:\dev\github\jdk_copy3\open\src\hotspot\share\runtime\interfaceSupport.inline.hpp @ 180] &lt;br/&gt;
jvm!JfrJavaEventWriter::flush+0x2de [d:\dev\github\jdk_copy3\open\src\hotspot\share\jfr\writers\jfrJavaEventWriter.cpp @ 140] &lt;br/&gt;
jvm!jfr_event_writer_flush+0x33 [d:\dev\github\jdk_copy3\open\src\hotspot\share\jfr\jni\jfrJniMethod.cpp @ 295] &lt;br/&gt;
&lt;br/&gt;
static bool prepare_for_emergency_dump(Thread* thread) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(thread != nullptr, &amp;quot;invariant&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (thread-&amp;gt;is_Watcher_thread()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// need WatcherThread as a safeguard against potential deadlocks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
#ifdef ASSERT&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mutex* owned_lock = thread-&amp;gt;owned_locks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (owned_lock != nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Mutex* next = owned_lock-&amp;gt;next();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owned_lock-&amp;gt;unlock(); // &amp;lt;&amp;lt;--- Unlocks all locks held before attempting to issue the JFR emergency dump.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owned_lock = next;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
#endif // ASSERT&lt;br/&gt;
&lt;br/&gt;
// The intermittent nature of this problem is related to how quickly the global buffers fill up and the interleaving of the threads attempting to discard data. </comment>
                            <comment id="14546497" author="dcubed" created="Mon, 19 Dec 2022 11:57:41 -0800"  >Here&amp;#39;s a log file snippet from the jdk-21+3-93-tier5 sighting:&lt;br/&gt;
&lt;br/&gt;
applications/microbenchmarks/other/Test_8.java#id0&lt;br/&gt;
&lt;br/&gt;
[jmh] # JMH version: 1.21&lt;br/&gt;
[jmh] # VM version: JDK 21-ea, Java HotSpot(TM) 64-Bit Server VM, 21-ea+3-LTS-93&lt;br/&gt;
[jmh] # VM invoker: /opt/mach5/mesos/work_dir/jib-master/install/jdk-21+3-93/linux-aarch64-debug.jdk/jdk-21/fastdebug/bin/java&lt;br/&gt;
[jmh] # VM options: -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockCommercialFeatures --add-exports=jdk.jfr/jdk.jfr.internal=ALL-UNNAMED -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+TieredCompilation --add-opens=java.base/java.io=ALL-UNNAMED -Djmh.ignoreLock=true -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0&lt;br/&gt;
[jmh] # Warmup: 5 iterations, 10 s each&lt;br/&gt;
[jmh] # Measurement: 5 iterations, 10 s each&lt;br/&gt;
[jmh] # Timeout: 10 min per iteration&lt;br/&gt;
[jmh] # Threads: 4 threads, will synchronize iterations&lt;br/&gt;
[jmh] # Benchmark mode: Average time, time/op&lt;br/&gt;
[jmh] # Benchmark: com.oracle.jfr.jmh.simple.Basic.mtDynamic&lt;br/&gt;
[jmh] # Parameters: (mode = MEM)&lt;br/&gt;
[jmh] # Run progress: 25.00% complete, ETA 00:08:35&lt;br/&gt;
[jmh] # Fork: 1 of 1&lt;br/&gt;
[jmh] # Warmup Iteration   1:  Locks owned:&lt;br/&gt;
[jmh] Mutex: [0x0000fffcd8029340] JfrBuffer_lock - owner: 0x0000fffcd86957f0 allow_vm_block nosafepoint&lt;br/&gt;
[jmh] # To suppress the following error report, specify this argument&lt;br/&gt;
[jmh] # after -XX: or in .hotspotrc:  SuppressErrorAt=/javaThread.cpp:360&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151565/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de46b5c3-7fd3-4a2a-93e1-8bf971a343d8/runs/4aca0750-a03f-4119-aec9-fb571919d068/workspace/open/src/hotspot/share/runtime/javaThread.cpp:360), pid=3587172, tid=3587216&lt;br/&gt;
[jmh] #  assert(false) failed: Possible safepoint reached by thread that does not allow it&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # JRE version: Java(TM) SE Runtime Environment (21.0+3) (fastdebug build 21-ea+3-LTS-93)&lt;br/&gt;
[jmh] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+3-LTS-93, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
[jmh] # Problematic frame:&lt;br/&gt;
[jmh] # V  [libjvm.so+0xed4ae8]  JavaThread::check_possible_safepoint()+0x58&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0/core.3587172)&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0/hs_err_pid3587172.jfr&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # An error report file with more information is saved as:&lt;br/&gt;
[jmh] # /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0/hs_err_pid3587172.log&lt;br/&gt;
[jmh] [13.634s][warning][os] Loading hsdis library failed&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # If you would like to submit a bug report, please visit:&lt;br/&gt;
[jmh] #   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] &amp;lt;forked VM failed with exit code 134&amp;gt;&lt;br/&gt;
[jmh] &amp;lt;stdout last=&amp;#39;20 lines&amp;#39;&amp;gt;&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] #  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151565/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de46b5c3-7fd3-4a2a-93e1-8bf971a343d8/runs/4aca0750-a03f-4119-aec9-fb571919d068/workspace/open/src/hotspot/share/runtime/javaThread.cpp:360), pid=3587172, tid=3587216&lt;br/&gt;
[jmh] #  assert(false) failed: Possible safepoint reached by thread that does not allow it&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # JRE version: Java(TM) SE Runtime Environment (21.0+3) (fastdebug build 21-ea+3-LTS-93)&lt;br/&gt;
[jmh] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+3-LTS-93, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
[jmh] # Problematic frame:&lt;br/&gt;
[jmh] # V  [libjvm.so+0xed4ae8]  JavaThread::check_possible_safepoint()+0x58&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0/core.3587172)&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0/hs_err_pid3587172.jfr&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # An error report file with more information is saved as:&lt;br/&gt;
[jmh] # /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151558/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/49b221ac-f98f-482c-888f-3925aed4f188/runs/ea939f84-0007-4dd8-be03-943521509244/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_microbenchmarks_other_Test_8_java/scratch/0/hs_err_pid3587172.log&lt;br/&gt;
[jmh] [13.634s][warning][os] Loading hsdis library failed&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] # If you would like to submit a bug report, please visit:&lt;br/&gt;
[jmh] #   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
[jmh] #&lt;br/&gt;
[jmh] &amp;lt;/stdout&amp;gt;&lt;br/&gt;
[jmh] &amp;lt;stderr last=&amp;#39;20 lines&amp;#39;&amp;gt;&lt;br/&gt;
[jmh] &amp;lt;/stderr&amp;gt;&lt;br/&gt;
[jmh] Benchmark had encountered error, and fail on error was requested&lt;br/&gt;
----------System.err:(26/1514)----------&lt;br/&gt;
[jmh] ERROR: org.openjdk.jmh.runner.RunnerException: Benchmark caught the exception&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:578)&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:320)&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.runner.Runner.run(Runner.java:209)&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.Main.main(Main.java:71)&lt;br/&gt;
[jmh] Caused by: org.openjdk.jmh.runner.BenchmarkException: Benchmark error&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.runner.Runner.doFork(Runner.java:771)&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.runner.Runner.runSeparate(Runner.java:663)&lt;br/&gt;
[jmh] 	at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:561)&lt;br/&gt;
[jmh] 	... 3 more&lt;br/&gt;
[jmh] 	Suppressed: java.lang.IllegalStateException: Forked VM failed with exit code 134&lt;br/&gt;
[jmh] 		... 6 more&lt;br/&gt;
java.lang.RuntimeException: assertEquals: expected 0 to equal 1&lt;br/&gt;
	at jdk.test.lib.Asserts.fail(Asserts.java:594)&lt;br/&gt;
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)&lt;br/&gt;
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)&lt;br/&gt;
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:166)&lt;br/&gt;
	at applications.microbenchmarks.MicroRunner.main(MicroRunner.java:33)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: java.lang.RuntimeException&lt;br/&gt;
JavaTest Message: shutting down test&lt;br/&gt;
&lt;br/&gt;
result: Failed. Execution failed: `main&amp;#39; threw exception: java.lang.RuntimeException: assertEquals: expected 0 to equal 1&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffcd86957f0):  JavaThread &amp;quot;com.oracle.jfr.jmh.simple.Basic.mtDynamic-jmh-worker-1&amp;quot; daemon [_thread_in_vm, id=3587216, stack(0x0000fffcad5e0000,0x0000fffcad7e0000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffcad5e0000,0x0000fffcad7e0000],  sp=0x0000fffcad7dd9c0,  free space=2038k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xed4ae8]  JavaThread::check_possible_safepoint()+0x58  (javaThread.cpp:360)&lt;br/&gt;
V  [libjvm.so+0xf2e994]  jfr_event_writer_flush+0x154  (interfaceSupport.inline.hpp:118)&lt;br/&gt;
J 1574  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/event/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@21-ea&apos;&gt;jdk.jfr@21-ea&lt;/a&gt; (0 bytes) @ 0x0000fffcc8a62180 [0x0000fffcc8a620c0+0x00000000000000c0]&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (printing native stack (with source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151565/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de46b5c3-7fd3-4a2a-93e1-8bf971a343d8/runs/4aca0750-a03f-4119-aec9-fb571919d068/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]&lt;br/&gt;
&lt;br/&gt;
Retrying call stack printing without source information...&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xed4ae8]  JavaThread::check_possible_safepoint()+0x58  (javaThread.cpp:360)&lt;br/&gt;
V  [libjvm.so+0xf2e994]  jfr_event_writer_flush+0x154&lt;br/&gt;
J 1574  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/event/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@21-ea&apos;&gt;jdk.jfr@21-ea&lt;/a&gt; (0 bytes) @ 0x0000fffcc8a62180 [0x0000fffcc8a620c0+0x00000000000000c0]&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (retry printing native stack (no source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151565/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de46b5c3-7fd3-4a2a-93e1-8bf971a343d8/runs/4aca0750-a03f-4119-aec9-fb571919d068/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
J 1574  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/event/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@21-ea&apos;&gt;jdk.jfr@21-ea&lt;/a&gt; (0 bytes) @ 0x0000fffcc8a62180 [0x0000fffcc8a620c0+0x00000000000000c0]&lt;br/&gt;
J 1591 c2 jdk.jfr.internal.event.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@21-ea&apos;&gt;jdk.jfr@21-ea&lt;/a&gt; (7 bytes) @ 0x0000fffcc8a6e2a4 [0x0000fffcc8a6e240+0x0000000000000064]&lt;br/&gt;
J 1572% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtDynamic_jmhTest.mtDynamic_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x0000fffcc8a635dc [0x0000fffcc8a62840+0x0000000000000d9c]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtDynamic_jmhTest.mtDynamic_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
j  java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+14 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+73 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025400.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+22 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+72 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+19 &lt;a href=&apos;mailto:java.base@21-ea&apos;&gt;java.base@21-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub 0x0000fffcc83e017c</comment>
                            <comment id="14478298" author="dholmes" created="Sat, 19 Feb 2022 01:19:16 -0800"  >So the error indicates there is a NoSafepointVerifier active - yet from the stack that should not be possible. So it may be that something else has failed to restore the no safepoint count properly.</comment>
                            <comment id="14478206" author="dcubed" created="Fri, 18 Feb 2022 07:42:59 -0800"  >Here&amp;#39;s the crashing thread&amp;#39;s stack from the jdk-19+11-612-tier5 sighting:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffe6c6da2c0):  JavaThread &amp;quot;com.oracle.jfr.jmh.simple.Basic.mtFull-jmh-worker-3&amp;quot; daemon [_thread_in_vm, id=909890, stack(0x0000fffe3ddc0000,0x0000fffe3dfc0000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffe3ddc0000,0x0000fffe3dfc0000],  sp=0x0000fffe3dfbd980,  free space=2038k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x18146e8]  JavaThread::check_possible_safepoint()+0xa8&lt;br/&gt;
V  [libjvm.so+0xf598f0]  jfr_event_writer_flush+0x160&lt;br/&gt;
j  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z+0 &lt;a href=&apos;mailto:jdk.jfr@19-ea&apos;&gt;jdk.jfr@19-ea&lt;/a&gt;&lt;br/&gt;
J 2195 c2 jdk.jfr.internal.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@19-ea&apos;&gt;jdk.jfr@19-ea&lt;/a&gt; (7 bytes) @ 0x0000fffe612f0e94 [0x0000fffe612f0e40+0x0000000000000054]&lt;br/&gt;
J 2198% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtFull_jmhTest.mtFull_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x0000fffe613fdcfc [0x0000fffe613fcf00+0x0000000000000dfc]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtFull_jmhTest.mtFull_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
j  java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+14 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+73 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025400.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+22 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+72 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
V  [libjvm.so+0xee211c]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x58c&lt;br/&gt;
V  [libjvm.so+0xee2788]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3e8&lt;br/&gt;
V  [libjvm.so+0xee2b04]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70&lt;br/&gt;
V  [libjvm.so+0x1043328]  thread_entry(JavaThread*, JavaThread*)+0x118&lt;br/&gt;
V  [libjvm.so+0x1815188]  JavaThread::thread_main_inner()+0x268&lt;br/&gt;
V  [libjvm.so+0x181d488]  Thread::call_run()+0xf8&lt;br/&gt;
V  [libjvm.so+0x153f224]  thread_native_entry(Thread*)+0x104&lt;br/&gt;
C  [libpthread.so.0+0x7868]  start_thread+0x188&lt;br/&gt;
&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
j  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z+0 &lt;a href=&apos;mailto:jdk.jfr@19-ea&apos;&gt;jdk.jfr@19-ea&lt;/a&gt;&lt;br/&gt;
J 2195 c2 jdk.jfr.internal.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@19-ea&apos;&gt;jdk.jfr@19-ea&lt;/a&gt; (7 bytes) @ 0x0000fffe612f0e94 [0x0000fffe612f0e40+0x0000000000000054]&lt;br/&gt;
J 2198% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtFull_jmhTest.mtFull_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x0000fffe613fdcfc [0x0000fffe613fcf00+0x0000000000000dfc]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtFull_jmhTest.mtFull_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
j  java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+14 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+73 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025400.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+22 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+72 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@19-ea&apos;&gt;java.base@19-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub</comment>
                            <comment id="14462708" author="dholmes" created="Mon, 6 Dec 2021 16:54:07 -0800"  >Just hit this in a personal mach5 submission on Aarch64:&lt;br/&gt;
&lt;br/&gt;
applications/microbenchmarks/other/Test_8.java#id0&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffff306efd60):  JavaThread &amp;quot;com.oracle.jfr.jmh.simple.Basic.mtDynamic-jmh-worker-4&amp;quot; daemon [_thread_in_vm, id=1495423, stack(0x0000ffff007e0000,0x0000ffff009e0000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff007e0000,0x0000ffff009e0000],  sp=0x0000ffff009dda10,  free space=2038k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x17f84d8]  JavaThread::check_possible_safepoint()+0xa8&lt;br/&gt;
V  [libjvm.so+0xf40934]  jfr_event_writer_flush+0x174&lt;br/&gt;
J 1455  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@18-internal&apos;&gt;jdk.jfr@18-internal&lt;/a&gt; (0 bytes) @ 0x0000ffff21199cd8 [0x0000ffff21199c40+0x0000000000000098]&lt;br/&gt;
J 1443 c2 java.lang.invoke.LambdaForm$DMH+0x00000008010c6400.newInvokeSpecial(Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt; (32 bytes) @ 0x0000ffff21198a6c [0x0000ffff211989c0+0x00000000000000ac]&lt;br/&gt;
J 1450% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtDynamic_jmhTest.mtDynamic_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x0000ffff21197b6c [0x0000ffff21197a00+0x000000000000016c]&lt;br/&gt;
J 1213% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtDynamic_jmhTest.mtDynamic_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult; (628 bytes) @ 0x0000ffff2117044c [0x0000ffff21170180+0x00000000000002cc]&lt;br/&gt;
j  java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+14 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+73 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.invoke.LambdaForm$MH+0x0000000801025400.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+22 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+72 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@18-internal&apos;&gt;java.base@18-internal&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
V  [libjvm.so+0xec86ec]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x58c&lt;br/&gt;
V  [libjvm.so+0xec8d80]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x410&lt;br/&gt;
V  [libjvm.so+0xec9120]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70&lt;br/&gt;
V  [libjvm.so+0x102b198]  thread_entry(JavaThread*, JavaThread*)+0x128&lt;br/&gt;
V  [libjvm.so+0x17f8f68]  JavaThread::thread_main_inner()+0x268&lt;br/&gt;
V  [libjvm.so+0x18012a8]  Thread::call_run()+0xf8&lt;br/&gt;
V  [libjvm.so+0x1528224]  thread_native_entry(Thread*)+0x104&lt;br/&gt;
C  [libpthread.so.0+0x7868]  start_thread+0x188&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14389203" author="coleenp" created="Thu, 17 Dec 2020 06:22:46 -0800"  >I was looking at this bug because I was wondering why this p2 bug is tbd, and was checking that my NoSafepointVerifier work earlier in the year didn&amp;#39;t cause it (it doesn&amp;#39;t seem to have).  Only the current thread can set the _no_safepoint_count field.&lt;br/&gt;
In SA, besides the failing thread, there are two others in JFR but SA couldn&amp;#39;t read their stacks (because they&amp;#39;re likely compiled with no last_Java_sp set):&lt;br/&gt;
----------------- 31854 -----------------&lt;br/&gt;
&amp;quot;com.oracle.jfr.jmh.simple.Basic.mtEmpty-jmh-worker-1&amp;quot; #16 daemon prio=5 tid=0x00007fa0b0620bf0 nid=0x7c6e runnable [0x0000000000000000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: RUNNABLE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread state: _thread_in_java&lt;br/&gt;
0x00007ffc9f197795              ????????&lt;br/&gt;
0x00007ffc9f197992              ????????&lt;br/&gt;
0x00007fa0b927d88d              ????????&lt;br/&gt;
----------------- 31855 -----------------&lt;br/&gt;
&amp;quot;com.oracle.jfr.jmh.simple.Basic.mtEmpty-jmh-worker-2&amp;quot; #17 daemon prio=5 tid=0x00007fa0b0621af0 nid=0x7c6f runnable [0x0000000000000000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: RUNNABLE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread state: _thread_in_java&lt;br/&gt;
&lt;br/&gt;
I can&amp;#39;t find any other suspicious activity.</comment>
                            <comment id="14388847" author="coleenp" created="Wed, 16 Dec 2020 06:24:05 -0800"  >No, it just looks really funny.  And it didn&amp;#39;t used to be faster to call Thread::current().  Maybe it is now but seems like a weird thing to optimize by such a small amount.</comment>
                            <comment id="14388842" author="mgronlun" created="Wed, 16 Dec 2020 06:19:33 -0800"  >I might have misunderstood your question. IIRC the choice was made because it was faster to get the thread from the TLS instead of from off the JNIEnv* pointer. At that time it was harder to motivate new open changes so i guess we went with this solution because it was available -  I agree that it might look a bit funny, but it has been there for the last 7 years or so...do you see a problem?</comment>
                            <comment id="14388837" author="coleenp" created="Wed, 16 Dec 2020 06:05:50 -0800"  >Looking at the core, yes, _no_safepoint_count is zero so this assert shouldn&amp;#39;t be fired.  I have testing where I assert that only the current thread can set _no_safepoint_count, which passes the jfr and tier1 tests.&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the memory around _no_safepoint_count.  Nothing really suspicious.&lt;br/&gt;
(gdb) print _no_safepoint_count&lt;br/&gt;
$2 = 0&lt;br/&gt;
(gdb) print &amp;amp;_no_safepoint_count&lt;br/&gt;
$3 = (int *) 0x7fa0b0624a60&lt;br/&gt;
(gdb) &lt;br/&gt;
0x7fa0b0624a58:	0x00000000&lt;br/&gt;
(gdb) &lt;br/&gt;
0x7fa0b0624a5c:	0x00000000&lt;br/&gt;
(gdb) &lt;br/&gt;
0x7fa0b0624a60:	0x00000000&lt;br/&gt;
(gdb) &lt;br/&gt;
0x7fa0b0624a64:	0xf1f1f100&lt;br/&gt;
(gdb) &lt;br/&gt;
0x7fa0b0624a68:	0xfffffffe&lt;br/&gt;
&lt;br/&gt;
JFR data in the thread:&lt;br/&gt;
{_java_event_writer = 0x7fa0b0380568, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_java_buffer = 0x7fa040022550, _native_buffer = 0x7fa04002a730, _shelved_buffer = 0x0, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_load_barrier_buffer_epoch_0 = 0x0, _load_barrier_buffer_epoch_1 = 0x0, _stackframes = 0x0, _trace_id = 25, _thread = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_ptr = 0x0}, _data_lost = 0, _stack_trace_id = 18446744073709551615, _user_time = 0, _cpu_time = 0, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_wallclock_time = 391424005155435, _stack_trace_hash = 0, _stackdepth = 0, _entering_suspend_flag = 0, _excluded = false, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_dead = false, _parent_trace_id = 1},</comment>
                            <comment id="14388834" author="coleenp" created="Wed, 16 Dec 2020 05:52:26 -0800"  >? The JNI calling convention passes the env though so why use JVM_ENTRY_NO_ENV rather than JNI_ENTRY. I don&amp;#39;t see the connection to the stub library in the JDK.  I&amp;#39;m looking at the WB_ENTRYs.</comment>
                            <comment id="14388701" author="mgronlun" created="Tue, 15 Dec 2020 16:44:13 -0800"  >JNI calling convention, methods are registered using env-&amp;gt;RegisterNatives(), to be called directly instead of using a stub library in the JDK. We don&amp;#39;t read the thread from the env, but can use Thread::current() directly.</comment>
                            <comment id="14388679" author="coleenp" created="Tue, 15 Dec 2020 15:30:01 -0800"  >JVM_ENTRY_NO_ENV(jboolean, jfr_event_writer_flush(JNIEnv* env, jclass cls, jobject writer, jint used_size, jint requested_size))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return JfrJavaEventWriter::flush(writer, used_size, requested_size, thread);&lt;br/&gt;
JVM_END&lt;br/&gt;
&lt;br/&gt;
Why do these functions have JVM_ENTRY_NO_ENV when there&amp;#39;s an env ?</comment>
                            <comment id="14385120" author="dcubed" created="Tue, 1 Dec 2020 12:38:11 -0800"  >Here&amp;#39;s the crashing thread&amp;#39;s stack for the applications/microbenchmarks/other/Test_8.java#id1&lt;br/&gt;
sighting in jdk-16+26-1753-tier5:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fa0b0624940):  JavaThread &amp;quot;com.oracle.jfr.jmh.simple.Basic.mtEmpty-jmh-worker-4&amp;quot; daemon [_thread_in_vm, id=31857, stack(0x00007fa0948f4000,0x00007fa0949f5000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fa0948f4000,0x00007fa0949f5000],  sp=0x00007fa0949f2b30,  free space=1018k&lt;br/&gt;
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x1896a43]  Thread::check_possible_safepoint()+0xb3&lt;br/&gt;
V  [libjvm.so+0xec2bec]  jfr_event_writer_flush+0x28c&lt;br/&gt;
J 1208  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (0 bytes) @ 0x00007fa0a137d162 [0x00007fa0a137d060+0x0000000000000102]&lt;br/&gt;
J 1211 c2 jdk.jfr.internal.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (7 bytes) @ 0x00007fa0a1390cf4 [0x00007fa0a1390cc0+0x0000000000000034]&lt;br/&gt;
J 1205% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x00007fa0a1387208 [0x00007fa0a13868e0+0x0000000000000928]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
V  [libjvm.so+0xe49265]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, Thread*)+0x595&lt;br/&gt;
V  [libjvm.so+0x168a795]  invoke(InstanceKlass*, methodHandle const&amp;amp;, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, Thread*) [clone .constprop.0]+0xee5&lt;br/&gt;
V  [libjvm.so+0x168b91a]  Reflection::invoke_method(oop, Handle, objArrayHandle, Thread*)+0x19a&lt;br/&gt;
V  [libjvm.so+0xffe2eb]  JVM_InvokeMethod+0x1cb&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+146 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
V  [libjvm.so+0xe49265]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, Thread*)+0x595&lt;br/&gt;
V  [libjvm.so+0xe49ae5]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5&lt;br/&gt;
V  [libjvm.so+0xe49f8c]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0xac&lt;br/&gt;
V  [libjvm.so+0xfdda0b]  thread_entry(JavaThread*, Thread*)+0x12b&lt;br/&gt;
V  [libjvm.so+0x189ab96]  JavaThread::thread_main_inner()+0x256&lt;br/&gt;
V  [libjvm.so+0x18a1520]  Thread::call_run()+0x100&lt;br/&gt;
V  [libjvm.so+0x1584f46]  thread_native_entry(Thread*)+0x116&lt;br/&gt;
&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
J 1208  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (0 bytes) @ 0x00007fa0a137d0e9 [0x00007fa0a137d060+0x0000000000000089]&lt;br/&gt;
J 1211 c2 jdk.jfr.internal.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (7 bytes) @ 0x00007fa0a1390cf4 [0x00007fa0a1390cc0+0x0000000000000034]&lt;br/&gt;
J 1205% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x00007fa0a1387208 [0x00007fa0a13868e0+0x0000000000000928]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+146 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub</comment>
                            <comment id="14382564" author="dcubed" created="Fri, 20 Nov 2020 13:28:03 -0800"  >Here&amp;#39;s the crashing thread&amp;#39;s stack for the jdk-16+26-1678-tier5 sighting:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f6f50692440):  JavaThread &amp;quot;com.oracle.jfr.jmh.simple.Basic.mtEmpty-jmh-worker-2&amp;quot; daemon [_thread_in_vm, id=3280, stack(0x00007f6f34bf7000,0x00007f6f34cf8000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f6f34bf7000,0x00007f6f34cf8000],  sp=0x00007f6f34cf5b30,  free space=1018k&lt;br/&gt;
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x1889623]  Thread::check_possible_safepoint()+0xb3&lt;br/&gt;
V  [libjvm.so+0xeb396c]  jfr_event_writer_flush+0x28c&lt;br/&gt;
J 1355  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (0 bytes) @ 0x00007f6f413e2362 [0x00007f6f413e2260+0x0000000000000102]&lt;br/&gt;
J 1357 c2 jdk.jfr.internal.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (7 bytes) @ 0x00007f6f413f0374 [0x00007f6f413f0340+0x0000000000000034]&lt;br/&gt;
J 1354% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x00007f6f413ec274 [0x00007f6f413eb960+0x0000000000000914]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
V  [libjvm.so+0xe3a425]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, Thread*)+0x595&lt;br/&gt;
V  [libjvm.so+0x167e615]  invoke(InstanceKlass*, methodHandle const&amp;amp;, Handle, bool, objArrayHandle, BasicType, objArrayHandle, bool, Thread*) [clone .constprop.0]+0xee5&lt;br/&gt;
V  [libjvm.so+0x167f79a]  Reflection::invoke_method(oop, Handle, objArrayHandle, Thread*)+0x19a&lt;br/&gt;
V  [libjvm.so+0xfef09b]  JVM_InvokeMethod+0x1cb&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+146 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
V  [libjvm.so+0xe3a425]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, Thread*)+0x595&lt;br/&gt;
V  [libjvm.so+0xe3aca5]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x4c5&lt;br/&gt;
V  [libjvm.so+0xe3b14c]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Thread*)+0xac&lt;br/&gt;
V  [libjvm.so+0xfce7eb]  thread_entry(JavaThread*, Thread*)+0x12b&lt;br/&gt;
V  [libjvm.so+0x188d746]  JavaThread::thread_main_inner()+0x256&lt;br/&gt;
V  [libjvm.so+0x18940d0]  Thread::call_run()+0x100&lt;br/&gt;
V  [libjvm.so+0x1574996]  thread_native_entry(Thread*)+0x116&lt;br/&gt;
&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
J 1355  jdk.jfr.internal.JVM.flush(Ljdk/jfr/internal/EventWriter;II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (0 bytes) @ 0x00007f6f413e22e9 [0x00007f6f413e2260+0x0000000000000089]&lt;br/&gt;
J 1357 c2 jdk.jfr.internal.EventWriter.flush(II)Z &lt;a href=&apos;mailto:jdk.jfr@16-ea&apos;&gt;jdk.jfr@16-ea&lt;/a&gt; (7 bytes) @ 0x00007f6f413f0374 [0x00007f6f413f0340+0x0000000000000034]&lt;br/&gt;
J 1354% c2 com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_avgt_jmhStub(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/results/RawResults;Lorg/openjdk/jmh/infra/BenchmarkParams;Lorg/openjdk/jmh/infra/IterationParams;Lorg/openjdk/jmh/infra/ThreadParams;Lorg/openjdk/jmh/infra/Blackhole;Lorg/openjdk/jmh/infra/Control;ILcom/oracle/jfr/jmh/simple/generated/Basic_jmhType;)V (51 bytes) @ 0x00007f6f413ec274 [0x00007f6f413eb960+0x0000000000000914]&lt;br/&gt;
j  com.oracle.jfr.jmh.simple.generated.Basic_mtEmpty_jmhTest.mtEmpty_AverageTime(Lorg/openjdk/jmh/runner/InfraControl;Lorg/openjdk/jmh/infra/ThreadParams;)Lorg/openjdk/jmh/results/BenchmarkTaskResult;+264&lt;br/&gt;
v  ~StubRoutines::call_stub&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+0 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+146 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+6 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+59 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Lorg/openjdk/jmh/results/BenchmarkTaskResult;+50&lt;br/&gt;
j  org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call()Ljava/lang/Object;+1&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.FutureTask.run()V+39 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
j  java.lang.Thread.run()V+11 &lt;a href=&apos;mailto:java.base@16-ea&apos;&gt;java.base@16-ea&lt;/a&gt;&lt;br/&gt;
v  ~StubRoutines::call_stub</comment>
                            <comment id="14346240" author="mgronlun" created="Thu, 11 Jun 2020 03:19:28 -0700"  >Context for the asserting thread (from core file):&lt;br/&gt;
&lt;br/&gt;
...&lt;br/&gt;
_real_malloc_address = 0x7fb678944020, _threads_hazard_ptr = 0x0, _threads_list_ptr = 0x0, _nested_threads_hazard_ptr_cnt = 0, _SR_lock = 0x7fb678945070, _suspend_flags = 0, _num_nested_signal = 0, _suspendible_thread = false, _active_handles = 0x7fb6100012a0, _free_handle_block = 0x7fb6100014d0, _last_handle_mark = 0x7fb658efded0, _threads_do_token = 12, _rcu_counter = 0, _missed_ic_stub_refill_verifier = 0x0, _no_safepoint_count = 0, _skip_gcalot = false, _polling_page = 0x7fb682c6f000&lt;br/&gt;
....&lt;br/&gt;
&lt;br/&gt;
Noteworthy: _no_safepoint_count = 0.&lt;br/&gt;
&lt;br/&gt;
disass&lt;br/&gt;
Dump of assembler code for function Thread::check_possible_safepoint():&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc10 &amp;lt;+0&amp;gt;:	push   rbp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc11 &amp;lt;+1&amp;gt;:	mov    rbp,rsp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc14 &amp;lt;+4&amp;gt;:	push   r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc16 &amp;lt;+6&amp;gt;:	push   r12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc18 &amp;lt;+8&amp;gt;:	mov    r12,rdi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc1b &amp;lt;+11&amp;gt;:	push   rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc1c &amp;lt;+12&amp;gt;:	sub    rsp,0x8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc20 &amp;lt;+16&amp;gt;:	mov    rax,QWORD PTR [rdi] &amp;lt;&amp;lt;--  get vtable from thread in rdi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc23 &amp;lt;+19&amp;gt;:	call   QWORD PTR [rax+0x50] &amp;lt;&amp;lt;-- virtual call is_Java_thread()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc26 &amp;lt;+22&amp;gt;:	test   al,al &amp;lt;&amp;lt;--&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc28 &amp;lt;+24&amp;gt;:	je     0x7fb68186dc46 &amp;lt;Thread::check_possible_safepoint()+54&amp;gt; &amp;lt;&amp;lt;-- not a JavaThread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc2a &amp;lt;+26&amp;gt;:	mov    eax,DWORD PTR [r12+0x120] &amp;lt;&amp;lt;-- read _no_safepoint_count field&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc32 &amp;lt;+34&amp;gt;:	test   eax,eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc34 &amp;lt;+36&amp;gt;:	jg     0x7fb68186dc58 &amp;lt;Thread::check_possible_safepoint()+72&amp;gt; &amp;lt;&amp;lt;-- != 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc36 &amp;lt;+38&amp;gt;:	lea    rax,[rip+0x78194d]        # 0x7fb681fef58a &amp;lt;CheckUnhandledOops&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc3d &amp;lt;+45&amp;gt;:	cmp    BYTE PTR [rax],0x0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc40 &amp;lt;+48&amp;gt;:	jne    0x7fb68186dcdb &amp;lt;Thread::check_possible_safepoint()+203&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc46 &amp;lt;+54&amp;gt;:	add    rsp,0x8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc4a &amp;lt;+58&amp;gt;:	pop    rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc4b &amp;lt;+59&amp;gt;:	pop    r12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc4d &amp;lt;+61&amp;gt;:	pop    r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc4f &amp;lt;+63&amp;gt;:	pop    rbp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc50 &amp;lt;+64&amp;gt;:	ret    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc51 &amp;lt;+65&amp;gt;:	nop    DWORD PTR [rax+0x0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc58 &amp;lt;+72&amp;gt;:	lea    rax,[rip+0x7a4b01]        # 0x7fb682012760 &amp;lt;tty&amp;gt; &amp;lt;&amp;lt;-- no_safepoint_count != 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc5f &amp;lt;+79&amp;gt;:	mov    rbx,QWORD PTR [r12+0x2f0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc67 &amp;lt;+87&amp;gt;:	mov    r13,QWORD PTR [rax]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc6a &amp;lt;+90&amp;gt;:	test   rbx,rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc6d &amp;lt;+93&amp;gt;:	je     0x7fb68186dcf8 &amp;lt;Thread::check_possible_safepoint()+232&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc73 &amp;lt;+99&amp;gt;:	lea    rsi,[rip+0x3b0456]        # 0x7fb681c1e0d0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc7a &amp;lt;+106&amp;gt;:	mov    rdi,r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc7d &amp;lt;+109&amp;gt;:	xor    eax,eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc7f &amp;lt;+111&amp;gt;:	call   0x7fb6815b97b0 &amp;lt;outputStream::print_cr(char const*, ...)&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc84 &amp;lt;+116&amp;gt;:	nop    DWORD PTR [rax+0x0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc88 &amp;lt;+120&amp;gt;:	mov    rax,QWORD PTR [rbx]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc8b &amp;lt;+123&amp;gt;:	mov    rdi,rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc8e &amp;lt;+126&amp;gt;:	mov    rsi,r13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc91 &amp;lt;+129&amp;gt;:	call   QWORD PTR [rax]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc93 &amp;lt;+131&amp;gt;:	mov    rbx,QWORD PTR [rbx+0xb8]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc9a &amp;lt;+138&amp;gt;:	test   rbx,rbx&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc9d &amp;lt;+141&amp;gt;:	jne    0x7fb68186dc88 &amp;lt;Thread::check_possible_safepoint()+120&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dc9f &amp;lt;+143&amp;gt;:	lea    rax,[rip+0x6dacf2]        # 0x7fb681f48998 &amp;lt;g_assert_poison&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dca6 &amp;lt;+150&amp;gt;:	lea    rdx,[rip+0x32e273]        # 0x7fb681b9bf20&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dcad &amp;lt;+157&amp;gt;:	mov    esi,0x3d5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dcb2 &amp;lt;+162&amp;gt;:	lea    rdi,[rip+0x32d897]        # 0x7fb681b9b550&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dcb9 &amp;lt;+169&amp;gt;:	mov    rax,QWORD PTR [rax]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dcbc &amp;lt;+172&amp;gt;:	mov    BYTE PTR [rax],0x58&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dcbf &amp;lt;+175&amp;gt;:	xor    eax,eax&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x00007fb68186dcc1 &amp;lt;+177&amp;gt;:	call   0x7fb680c03d30 &amp;lt;report_fatal(char const*, int, char const*, ...)&amp;gt;&lt;br/&gt;
=&amp;gt; 0x00007fb68186dcc6 &amp;lt;+182&amp;gt;:	call   0x7fb68159e9b0 &amp;lt;breakpoint()&amp;gt;</comment>
                            <comment id="14346231" author="dholmes" created="Thu, 11 Jun 2020 02:54:12 -0700"  >Reopening as this has also been seen recently in JDK 14 CI.</comment>
                            <comment id="14346230" author="mgronlun" created="Thu, 11 Jun 2020 02:40:50 -0700"  >This error is very strange:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (_no_safepoint_count &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print_owned_locks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fatal(&amp;quot;Possible safepoint reached by thread that does not allow it&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
But the thread is coming from Java, via  jdk.jfr.internal.JVM.flush(), the thread just transitioned from _thread_in_native to _thread_in_vm.&lt;br/&gt;
&lt;br/&gt;
The only logical way for this to occur would be if a NoSafepointVerifier construct has a scope that includes the invoked java code, but this is impossible.&lt;br/&gt;
&lt;br/&gt;
Most likely a low-level corruption of some sort.&lt;br/&gt;
&lt;br/&gt;
Will close this as cannot reproduce, taking note that David mentioned he had seen this before?</comment>
                            <comment id="14336186" author="mseledtsov" created="Tue, 5 May 2020 11:12:54 -0700"  >ILW = HLH = P2</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105492">JDK-8312090</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106425">JDK-8312919</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110014">JDK-8316013</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5112272">JDK-8318009</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                                        </outwardlinks>
                                                                <inwardlinks description="relates to">
                                                        </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2nhtv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="374"><![CDATA[jfr]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>