<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:31:12 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8314225] SIGSEGV in JavaThread::is_lock_owned</title>
                <link>https://bugs.openjdk.org/browse/JDK-8314225</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
applications/runthese/RunThese8H.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s snippets from the hs_err_pid file:&lt;br/&gt;
&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f2b1eb8e363, pid=3558129, tid=1440504&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0+35) (build 21+35-LTS-2513)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21+35-LTS-2513, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x8f9363]  JavaThread::is_lock_owned(unsigned char*) const+0x23&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f23f09ba260):  JavaThread &amp;quot;Thread-1833141&amp;quot; daemon [_thread_in_vm, id=1440504, stack(0x00007f2524600000,0x00007f2524700000) (1024K)] _threads_hazard_ptr=0x00007f25c88e3bb0&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f2524600000,0x00007f2524700000],  sp=0x00007f25246fdf40,  free space=1015k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x8f9363]  JavaThread::is_lock_owned(unsigned char*) const+0x23  (monitorChunk.hpp:40)&lt;br/&gt;
V  [libjvm.so+0xea3a84]  Threads::owning_thread_from_monitor(ThreadsList*, ObjectMonitor*)+0xd4  (threads.cpp:1214)&lt;br/&gt;
V  [libjvm.so+0xe9f65a]  ThreadSnapshot::initialize(ThreadsList*, JavaThread*)+0x1fa  (threadService.cpp:948)&lt;br/&gt;
V  [libjvm.so+0xe9f914]  ThreadDumpResult::add_thread_snapshot(JavaThread*)+0x64  (threadService.cpp:573)&lt;br/&gt;
V  [libjvm.so+0xc01665]  jmm_GetThreadInfo+0x4a5  (management.cpp:1133)&lt;br/&gt;
J 1904181  sun.management.ThreadImpl.getThreadInfo1([JI[Ljava/lang/management/ThreadInfo;)V &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt; (0 bytes) @ 0x00007f2b0c159b95 [0x00007f2b0c159aa0+0x00000000000000f5]&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo([JI)[Ljava/lang/management/ThreadInfo;+60 &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo(JI)Ljava/lang/management/ThreadInfo;+13 &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo(J)Ljava/lang/management/ThreadInfo;+3 &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt;&lt;br/&gt;
j  javasoft.sqe.tests.api.java.lang.management.ThreadInfo.ThreadInfo_addTests.ThreadInfo0027()Ljavasoft/sqe/javatest/Status;+103&lt;br/&gt;
J 21627 c2 java.lang.invoke.DirectMethodHandle$Holder.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (14 bytes) @ 0x00007f2b08e02d6c [0x00007f2b08e02d20+0x000000000000004c]&lt;br/&gt;
J 423344 c2 java.lang.invoke.LambdaForm$MH+0x00007f2668009800.invoke(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (35 bytes) @ 0x00007f2b08f946ac [0x00007f2b08f945e0+0x00000000000000cc]&lt;br/&gt;
J 66077 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (108 bytes) @ 0x00007f2b0a3cf400 [0x00007f2b0a3cef00+0x0000000000000500]&lt;br/&gt;
j  javasoft.sqe.javatest.lib.MultiTest.invokeTestCase(Ljava/lang/reflect/Method;)Ljavasoft/sqe/javatest/Status;+8&lt;br/&gt;
j  javasoft.sqe.javatest.lib.MultiTest.run([Ljava/lang/String;Ljava/io/PrintWriter;Ljava/io/PrintWriter;)Ljavasoft/sqe/javatest/Status;+139&lt;br/&gt;
j  javasoft.sqe.javatest.lib.MultiTest.run([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)Ljavasoft/sqe/javatest/Status;+46&lt;br/&gt;
j  javasoft.sqe.tests.api.java.lang.management.ThreadInfo.ThreadInfo_addTests.main([Ljava/lang/String;)V+16&lt;br/&gt;
J 406357 c2 java.lang.invoke.LambdaForm$DMH+0x00007f2668002c00.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (14 bytes) @ 0x00007f2b0cb2cdec [0x00007f2b0cb2cda0+0x000000000000004c]&lt;br/&gt;
J 406358 c2 java.lang.invoke.LambdaForm$MH+0x00007f26680a1000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (38 bytes) @ 0x00007f2b0ec17084 [0x00007f2b0ec16fe0+0x00000000000000a4]&lt;br/&gt;
J 401516 c2 applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$$Lambda+0x00007f266800dc00.run()V (24 bytes) @ 0x00007f2b094db2bc [0x00007f2b094dae80+0x000000000000043c]&lt;br/&gt;
J 36726 c2 java.lang.Thread.run()V &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (23 bytes) @ 0x00007f2b0a2ae3d0 [0x00007f2b0a2ae320+0x00000000000000b0]&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f2b08070cbf&lt;br/&gt;
V  [libjvm.so+0x8dd585]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2e5  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0x8def02]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x1d2  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0x9acd5e]  thread_entry(JavaThread*, JavaThread*)+0x8e  (jvm.cpp:2919)&lt;br/&gt;
V  [libjvm.so+0x8f36f8]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:719)&lt;br/&gt;
V  [libjvm.so+0xe97ed8]  Thread::call_run()+0xa8  (thread.cpp:217)&lt;br/&gt;
V  [libjvm.so+0xcbe25a]  thread_native_entry(Thread*)+0xda  (os_linux.cpp:778)&lt;br/&gt;
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)&lt;br/&gt;
J 1904181  sun.management.ThreadImpl.getThreadInfo1([JI[Ljava/lang/management/ThreadInfo;)V &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt; (0 bytes) @ 0x00007f2b0c159b1e [0x00007f2b0c159aa0+0x000000000000007e]&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo([JI)[Ljava/lang/management/ThreadInfo;+60 &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo(JI)Ljava/lang/management/ThreadInfo;+13 &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt;&lt;br/&gt;
j  sun.management.ThreadImpl.getThreadInfo(J)Ljava/lang/management/ThreadInfo;+3 &lt;a href=&apos;mailto:java.management@21&apos;&gt;java.management@21&lt;/a&gt;&lt;br/&gt;
j  javasoft.sqe.tests.api.java.lang.management.ThreadInfo.ThreadInfo_addTests.ThreadInfo0027()Ljavasoft/sqe/javatest/Status;+103&lt;br/&gt;
J 21627 c2 java.lang.invoke.DirectMethodHandle$Holder.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (14 bytes) @ 0x00007f2b08e02d6c [0x00007f2b08e02d20+0x000000000000004c]&lt;br/&gt;
J 423344 c2 java.lang.invoke.LambdaForm$MH+0x00007f2668009800.invoke(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (35 bytes) @ 0x00007f2b08f946ac [0x00007f2b08f945e0+0x00000000000000cc]&lt;br/&gt;
J 66077 c2 java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (108 bytes) @ 0x00007f2b0a3cf400 [0x00007f2b0a3cef00+0x0000000000000500]&lt;br/&gt;
j  javasoft.sqe.javatest.lib.MultiTest.invokeTestCase(Ljava/lang/reflect/Method;)Ljavasoft/sqe/javatest/Status;+8&lt;br/&gt;
j  javasoft.sqe.javatest.lib.MultiTest.run([Ljava/lang/String;Ljava/io/PrintWriter;Ljava/io/PrintWriter;)Ljavasoft/sqe/javatest/Status;+139&lt;br/&gt;
j  javasoft.sqe.javatest.lib.MultiTest.run([Ljava/lang/String;Ljava/io/PrintStream;Ljava/io/PrintStream;)Ljavasoft/sqe/javatest/Status;+46&lt;br/&gt;
j  javasoft.sqe.tests.api.java.lang.management.ThreadInfo.ThreadInfo_addTests.main([Ljava/lang/String;)V+16&lt;br/&gt;
J 406357 c2 java.lang.invoke.LambdaForm$DMH+0x00007f2668002c00.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (14 bytes) @ 0x00007f2b0cb2cdec [0x00007f2b0cb2cda0+0x000000000000004c]&lt;br/&gt;
J 406358 c2 java.lang.invoke.LambdaForm$MH+0x00007f26680a1000.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (38 bytes) @ 0x00007f2b0ec17084 [0x00007f2b0ec16fe0+0x00000000000000a4]&lt;br/&gt;
J 401516 c2 applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$$Lambda+0x00007f266800dc00.run()V (24 bytes) @ 0x00007f2b094db2bc [0x00007f2b094dae80+0x000000000000043c]&lt;br/&gt;
J 36726 c2 java.lang.Thread.run()V &lt;a href=&apos;mailto:java.base@21&apos;&gt;java.base@21&lt;/a&gt; (23 bytes) @ 0x00007f2b0a2ae3d0 [0x00007f2b0a2ae320+0x00000000000000b0]&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f2b08070cbf&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 128 (SI_KERNEL), si_addr: 0x0000000000000000&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Since the crash occurred in JavaThread::is_lock_owned(), I could&lt;br/&gt;
start this bug off in hotspot/runtime, but since that function is called&lt;br/&gt;
from M&amp;amp;M VM code, I&amp;#39;m leaning toward hotspot/svc.</description>
                <environment></environment>
        <key id="5107964">JDK-8314225</key>
            <summary>SIGSEGV in JavaThread::is_lock_owned</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kevinw">Kevin Walls</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22-defer-request</label>
                            <label>jdk22-defer-yes</label>
                            <label>noreg-hard</label>
                            <label>test-bigapps-runThese</label>
                            <label>tier8</label>
                    </labels>
                <created>Mon, 14 Aug 2023 08:14:24 -0700</created>
                <updated>Mon, 13 Jan 2025 07:34:40 -0800</updated>
                            <resolved>Thu, 9 May 2024 04:50:04 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14735804" author="goetz" created="Sun, 5 Jan 2025 02:57:45 -0800"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.15-oracle.&lt;br/&gt;
Medium risk, change to core functionality. Basically removes an optimization.&lt;br/&gt;
Large resolves needed, but no semantic code changes.&lt;br/&gt;
No specific tests. SAP nightly testing passed.</comment>
                            <comment id="14735665" author="roboduke" created="Fri, 3 Jan 2025 04:04:28 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3177&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3177&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-29 18:02:48 +0000</comment>
                            <comment id="14678158" author="roboduke" created="Mon, 3 Jun 2024 01:55:11 -0700"  >[jdk21u-fix-request] Approval Request from Martin&lt;br/&gt;
Should get backported for parity with 21.0.5-oracle. Applies cleanly and tier 1-4 have passed.</comment>
                            <comment id="14677922" author="roboduke" created="Fri, 31 May 2024 12:47:51 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/644&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/644&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-31 19:42:23 +0000</comment>
                            <comment id="14672262" author="dukebot" created="Thu, 9 May 2024 04:50:03 -0700"  >Changeset: ad0b54d4&lt;br/&gt;
Author:    Kevin Walls &amp;lt;&lt;a href=&apos;mailto:kevinw@openjdk.org&apos;&gt;kevinw@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-05-09 11:47:45 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ad0b54d429fdbd806c09aa06bb42f1ed4a0297e8&quot;&gt;https://git.openjdk.org/jdk/commit/ad0b54d429fdbd806c09aa06bb42f1ed4a0297e8&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14669501" author="roboduke" created="Wed, 1 May 2024 01:22:58 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18940&quot;&gt;https://git.openjdk.org/jdk/pull/18940&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-24 19:50:08 +0000</comment>
                            <comment id="14647464" author="kvn" created="Wed, 7 Feb 2024 11:08:26 -0800"  >Deferral for JDK 22 approved. This is not new regression in JDK 22, it was observed in previous releases.</comment>
                            <comment id="14647460" author="kevinw" created="Wed, 7 Feb 2024 10:48:29 -0800"  >Deferral Request&lt;br/&gt;
&lt;br/&gt;
Requesting deferral from jdk 22.&lt;br/&gt;
This is a vanishingly rare crash, a race condition that has always been there.&lt;br/&gt;
We have two sightings across many years, one in 8u60, and one in our CI testing for jdk21.&lt;br/&gt;
&lt;br/&gt;
Review is in progress for jdk23, good discussions of how this day-one code actual works, and whether it is needed.</comment>
                            <comment id="14643882" author="roboduke" created="Thu, 25 Jan 2024 13:38:42 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17566&quot;&gt;https://git.openjdk.org/jdk/pull/17566&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-25 11:04:03 +0000</comment>
                            <comment id="14635513" author="kevinw" created="Tue, 19 Dec 2023 06:37:57 -0800"  >Digging into the race some more: jmm_GetThreadInfo is racing with deoptimization.&lt;br/&gt;
&lt;br/&gt;
jmm_GetThreadInfo reads and follows the _monitor_chunks in a JavaThread (and crashes while following an invalid _monitor_chunks).&lt;br/&gt;
&lt;br/&gt;
Deoptimization is happening in event log 10ms before crash.&lt;br/&gt;
By the time we read the core file, the JavaThread&amp;#39;s _monitor_chunks is zero.&lt;br/&gt;
&lt;br/&gt;
But when jmm_GetThreadInfo was creating ThreadDumpResult/ThreadSnapshot and calling  Threads::owning_thread_from_monitor / JavaThread::is_lock_owned, it was following a bad _monitor_chunks pointer.&lt;br/&gt;
&lt;br/&gt;
Last Deoptimization events before crash are in the problem thread:&lt;br/&gt;
Event: 16009.090 Thread 0x00007f25e30ec890 DEOPT PACKING pc=0x00007f2b0204cd7c sp=0x00007f250e5fdff0&lt;br/&gt;
Event: 16009.090 Thread 0x00007f25e30ec890 DEOPT UNPACKING pc=0x00007f2b080c402f sp=0x00007f250e5fd510 mode 1&lt;br/&gt;
&lt;br/&gt;
&amp;quot;DEOPT UNPACKING&amp;quot; tells us we were in &lt;br/&gt;
void vframeArray::unpack_to_stack(frame &amp;amp;unpack_frame, int exec_mode, int caller_actual_parameters)&lt;br/&gt;
..very recently.&lt;br/&gt;
&lt;br/&gt;
vframeArray::unpack_to_stack calls deallocate_monitor_chunks(); right at the end.  &lt;br/&gt;
The window for problems seems to be while unpack_to_stack is working, but the monitor_chunks() are still visible to other threads before they are cleared.&lt;br/&gt;
</comment>
                            <comment id="14625531" author="kevinw" created="Fri, 10 Nov 2023 06:38:17 -0800"  >&amp;gt; There is no synchronization at all so is_lock_owner is not safe to call on an arbitrary thread.&lt;br/&gt;
&lt;br/&gt;
There is a race:&lt;br/&gt;
in  JavaThread::is_lock_owned(adr), &lt;br/&gt;
monitor_chunks() returned a non-null pointer that we followed, and crashed following junk,&lt;br/&gt;
RDX=0x726f74696e6f4d74 read from JavaThread* 0x00007f25e30ec890+0x440&lt;br/&gt;
However in the core, that monitor_chunks value is zero so we would not crash reading the memory in place by the time the process crashes and the core is written.&lt;br/&gt;
MonitorChunk* _monitor_chunks = 0x0  offset=0x440&lt;br/&gt;
</comment>
                            <comment id="14608600" author="kevinw" created="Mon, 4 Sep 2023 02:10:20 -0700"  >A thread was added, the Event log shows the Thread address was used and reused:&lt;br/&gt;
...&lt;br/&gt;
Event: 16009.047 Thread 0x00007f25e30ec890 Thread exited: 0x00007f25e30ec890&lt;br/&gt;
Event: 16009.048 Thread 0x00007f25d2af31b0 Thread exited: 0x00007f25d2af31b0&lt;br/&gt;
Event: 16009.049 Thread 0x00007f25e30ec890 Thread added: 0x00007f25e30ec890&lt;br/&gt;
...&lt;br/&gt;
Event: 16009.065 Thread 0x00007f25e30ec890 Thread exited: 0x00007f25e30ec890&lt;br/&gt;
Event: 16009.069 Thread 0x00007f25e30ec890 Thread added: 0x00007f25e30ec890&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
We are working on this thread at the crash (calling is_lock_owned): RDI=0x00007f25e30ec890&lt;br/&gt;
&lt;br/&gt;
We know it&amp;#39;s a thread (mtThread):&lt;br/&gt;
RDI=0x00007f25e30ec890 into live malloced block starting at 0x00007f25e30ec890, size 1792, tag mtThread&lt;br/&gt;
...and can also inspect it as a JavaThread*&lt;br/&gt;
&lt;br/&gt;
But, it&amp;#39;s NOT in the thread list, as shown in hs_err.&lt;br/&gt;
&lt;br/&gt;
jmm_GetThreadInfo takes a thread id, should be recognising if it&amp;#39;s a bad ID.&lt;br/&gt;
&lt;br/&gt;
(jmm_)GetThreadInfo:&lt;br/&gt;
Was called with maxDepth of 0 (as we get to line 1133)&lt;br/&gt;
&lt;br/&gt;
For each jlong tid in the array, which should be only one item as we are called by ThreadImpl.getThreadInfo(J):&lt;br/&gt;
1127        JavaThread* jt = dump_result.t_list()-&amp;gt;find_JavaThread_from_java_tid(tid);&lt;br/&gt;
&lt;br/&gt;
jt was not null, so find_JavaThread_from_java_tid returned a JavaThread (possibly it should not have?) , and we are at: &lt;br/&gt;
1133          dump_result.add_thread_snapshot(jt);&lt;br/&gt;
(although jt is NOT in the thread list in the hs_err)&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14605839" author="mwthomps" created="Tue, 22 Aug 2023 10:48:53 -0700"  >ILW=HLH=P2</comment>
                            <comment id="14603937" author="dholmes" created="Mon, 14 Aug 2023 22:42:47 -0700"  >From [~pchilanomate]:&lt;br/&gt;
&lt;br/&gt;
I don&#8217;t see any synchronization used while reading/writing to _monitor_chunks. This ThreadSnapshot is also not using a handshake/safepoint operation either so seems the target could have removed those monitor chunks in vframeArray::unpack_to_stack() while we are walking that list. Might be a long-standing bug.&lt;br/&gt;
&lt;br/&gt;
---&lt;br/&gt;
&lt;br/&gt;
I agree. There is no synchronization at all so is_lock_owner is not safe to call on an arbitrary thread.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5130881">JDK-8333424</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147895">JDK-8347594</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5116974">JDK-8322049</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5130015">JDK-8332672</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5142905">JDK-8343422</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5128656">JDK-8331661</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17004"><![CDATA[x86]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32pyr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="369"><![CDATA[svc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>