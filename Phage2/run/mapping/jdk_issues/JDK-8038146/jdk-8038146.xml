<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:31:07 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8038146] Clarify Map.Entry&apos;s connection to the underlying map</title>
                <link>https://bugs.openjdk.org/browse/JDK-8038146</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>FULL PRODUCT VERSION :&lt;br/&gt;
java version &amp;quot;1.7.0_51&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.7.0_51-b13)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 24.51-b03, mixed mode, sharing)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
The javadoc for java.util.TreeMap states:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;All Map.Entry pairs returned by methods in this class and its views represent snapshots of mappings at the time they were produced. They do not support the Entry.setValue method. (Note however that it is possible to change mappings in the associated map using put.)&amp;quot;&lt;br/&gt;
&lt;br/&gt;
However Entry.setValue is supported, and does change the underlying map, as demonstrated by the attached test case.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
REPRODUCIBILITY :&lt;br/&gt;
This bug can be reproduced always.&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
import java.util.Map.Entry;&lt;br/&gt;
import java.util.TreeMap;&lt;br/&gt;
import org.junit.Test;&lt;br/&gt;
import static org.junit.Assert.*;&lt;br/&gt;
&lt;br/&gt;
public class TreeMapEntrySetValueTest&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void setValueTest()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final String key = &amp;quot;key&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final String initialValue = &amp;quot;initialvalue&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final String newValue = &amp;quot;newvalue&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TreeMap&amp;lt;String, String&amp;gt; map = new TreeMap&amp;lt;String, String&amp;gt;();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.put(key, initialValue);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (Entry&amp;lt;String, String&amp;gt; e : map.entrySet())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.setValue(newValue);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(newValue, map.get(key));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4716871">JDK-8038146</key>
            <summary>Clarify Map.Entry&apos;s connection to the underlying map</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="smarks">Stuart Marks</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>7-wnf</label>
                            <label>noreg-doc</label>
                            <label>webbug</label>
                    </labels>
                <created>Wed, 5 Mar 2014 13:11:59 -0800</created>
                <updated>Tue, 25 Mar 2025 17:45:53 -0700</updated>
                            <resolved>Fri, 20 Jan 2023 08:37:02 -0800</resolved>
                                    <version>7u51</version>
                    <version>11</version>
                    <version>17</version>
                    <version>18</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14553124" author="dukebot" created="Fri, 20 Jan 2023 08:37:01 -0800"  >Changeset: c6d56003&lt;br/&gt;
Author:    Stuart Marks &amp;lt;&lt;a href=&apos;mailto:smarks@openjdk.org&apos;&gt;smarks@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-20 16:33:48 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/c6d560039682ec52efa6fa7755d2aa86f20e1148&quot;&gt;https://git.openjdk.org/jdk/commit/c6d560039682ec52efa6fa7755d2aa86f20e1148&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14552584" author="smarks" created="Wed, 18 Jan 2023 17:26:48 -0800"  >Some background and rationale.&lt;br/&gt;
&lt;br/&gt;
The primary use case for Map.Entry was to allow mutation of mappings during iteration.&lt;br/&gt;
Earlier versions of the Map.Entry specification mentioned that the ONLY way to obtain&lt;br/&gt;
an instance was by iterating the map&amp;#39;s entrySet. The intention was that a Map.Entry&lt;br/&gt;
was a public interface that would reference various bits of internal structure of a map&lt;br/&gt;
implementation. Indeed, HashMap.Node and TreeMap.Entry both implement Map.Entry.&lt;br/&gt;
&lt;br/&gt;
As the JDK evolved, the original spec wording became obsolete. New concrete classes&lt;br/&gt;
AbstractMap.SimpleEntry and AbstractMap.SimpleImmutableEntry were added, whose&lt;br/&gt;
instances aren&amp;#39;t associated with any map. NavigableMap added support for direct access&lt;br/&gt;
to Map.Entry objects via methods such as firstEntry() but that weren&amp;#39;t connected to the&lt;br/&gt;
original map. In addition, IdentityHashMap, ConcurrentHashMap, ConcurrentSkipListMap,&lt;br/&gt;
and unmodifiable maps (Map.of) have different implementations whose internal objects&lt;br/&gt;
don&amp;#39;t implement Map.Entry.&lt;br/&gt;
&lt;br/&gt;
The stipulation of a Map.Entry maintaining its connection to the underlying map only&lt;br/&gt;
during iteration of the entrySet is a compromise. The map and its entrySet can&amp;#39;t tell&lt;br/&gt;
when the iteration actually terminates, so in practice the connection will be maintained&lt;br/&gt;
for longer. However, if any internals shift around in the map, the connection might be&lt;br/&gt;
broken, so it seems safest to stick to the original stipulation (dating back to JDK 1.2)&lt;br/&gt;
of the connection being maintained only during iteration. There doesn&amp;#39;t seem to be a&lt;br/&gt;
better boundary on the entry&amp;#39;s lifetime.&lt;br/&gt;
&lt;br/&gt;
Note that HashMap&amp;#39;s Map.Entry maintains a two-way connection: Entry.setValue() will&lt;br/&gt;
update the map, and calling map.put(key, newVal) will update an Entry for key if&lt;br/&gt;
you&amp;#39;ve stashed it away somewhere. This is because a HashMap&amp;#39;s Map.Entry really points&lt;br/&gt;
into its internals. However, this isn&amp;#39;t true of other maps, so the reverse connection is&lt;br/&gt;
unspecified. Also, HashMap maintains a connection for any entry obtained from the entrySet,&lt;br/&gt;
even if not by iteration (e.g. by toArray). However, other maps do not. Bug &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8217972&quot; title=&quot;IdentityHashMap.entrySet().toArray() doesn&amp;#39;t return actual entries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8217972&quot;&gt;&lt;strike&gt;JDK-8217972&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
complains about this with respect to IdentityHashMap, among other things. Since there is&lt;br/&gt;
variation in behavior, these behaviors too need to be left unspecified.&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s unfortunate that so much about the connection to the underlying map is unspecified,&lt;br/&gt;
but I don&amp;#39;t see an alternative, given the existing implementations and their variations in&lt;br/&gt;
behavior. A small mitigation is that the Map.Entry.copyOf() method can be used to guarantee&lt;br/&gt;
that any connection to an underlying map will be severed.&lt;br/&gt;
&lt;br/&gt;
An Entry obtained via a direct method call was probably never intended to be connected&lt;br/&gt;
to the underlying map, but this intent was obscured by some confusing wording that&lt;br/&gt;
the fix for this bug corrects. I&amp;#39;ve strengthened this wording as well, since the existing&lt;br/&gt;
implementations (TreeMap and ConcurrentSkipListMap) do not maintain a connection at&lt;br/&gt;
all in entries obtained via direct method calls. However, the wording cannot be a definite&lt;br/&gt;
assertion, as there might be NavigableMap implementations out there that do maintain&lt;br/&gt;
a connection from entries obtained this way, and we mustn&amp;#39;t invalidate them.&lt;br/&gt;
&lt;br/&gt;
Finally, the SequencedCollection proposal adds SequencedMap, which promotes various&lt;br/&gt;
direct entry-returning methods more broadly. The specifications for these methods also&lt;br/&gt;
will generally require snapshot semantics.</comment>
                            <comment id="14550536" author="roboduke" created="Wed, 11 Jan 2023 17:59:45 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11956&quot;&gt;https://git.openjdk.org/jdk/pull/11956&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-12 01:50:51 +0000</comment>
                            <comment id="14550073" author="smarks" created="Tue, 10 Jan 2023 12:01:38 -0800"  >NavigableMap&amp;#39;s class specification also has the somewhat confusing statement:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;* &amp;lt;p&amp;gt;Implementations of entry-returning methods are expected to&lt;br/&gt;
&amp;nbsp;* return {@code Map.Entry} pairs representing snapshots of mappings&lt;br/&gt;
&amp;nbsp;* at the time they were produced, and thus generally do &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt;&lt;br/&gt;
&amp;nbsp;* support the optional {@code Entry.setValue} method. Note however&lt;br/&gt;
&amp;nbsp;* that it is possible to change mappings in the associated map using&lt;br/&gt;
&amp;nbsp;* method {@code put}.&lt;br/&gt;
&lt;br/&gt;
This is true, if &amp;quot;entry-returning methods&amp;quot; means methods directly on this interface that return Map.Entry,&lt;br/&gt;
as opposed to methods that obtain a Map.Entry from this map&amp;#39;s entrySet(). This should probably be&lt;br/&gt;
clarified as well.&lt;br/&gt;
&lt;br/&gt;
ConcurrentSkipListMap&amp;#39;s entries never support setValue(), regardless of how the entry was obtained, so&lt;br/&gt;
probably nothing needs to be updated in that class.</comment>
                            <comment id="14520727" author="darcy" created="Mon, 29 Aug 2022 13:50:09 -0700"  >FYI, the particular change in question did have a CCC review under &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-4155650&quot; title=&quot;(coll) Sorted Collection Classes with bidirectional navigation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-4155650&quot;&gt;&lt;strike&gt;JDK-4155650&lt;/strike&gt;&lt;/a&gt;; however, the next text was not hgihlighted.</comment>
                            <comment id="14520535" author="dl" created="Sun, 28 Aug 2022 04:36:45 -0700"  >That JDK6 update included changes from (but not actual commits by) Josh Bloch and me. But I have no recollection about how the overly broad disclaimer arose. It should (and must) be changed as Stuart suggests, to cover only those Entry objects returned by firstEntry(), lastEntry(), lowerEntry(), floorEntry(), higherEntry(), and ceilingEntry(). Introducing this for EntrySet Entry objects would have introduced compatibility issue (wrt JDK5) that was never intended.&lt;br/&gt;
</comment>
                            <comment id="14520533" author="alanb" created="Sat, 27 Aug 2022 23:47:42 -0700"  >I checked the pre OpenJDK history and it seems to have been added in Sep 2005 (for JDK 6). It was a bulk update with the following issues listed so it would require further digging.&lt;br/&gt;
&lt;br/&gt;
4137464: (coll) TreeMap should have bi-directional iterator&lt;br/&gt;
4155650: (coll) Sorted Collection Classes with bidirectional navigation&lt;br/&gt;
4216399: (coll) TreeMap: please make getCeilEntry and getPreviousEntry &amp;gt;&amp;gt;public&amp;lt;&amp;lt;&lt;br/&gt;
4294891: (coll) Add &amp;quot;next/previous&amp;quot; to both SortedMap and SortedSet&lt;br/&gt;
4802637: (coll) Minor change to TreeMap.getEntry comparison code for performance&lt;br/&gt;
4942830: (coll spec) TreeSet.remove - absence of Compara{ble,tor} throws ClassCastException&lt;br/&gt;
5018254: (coll) &amp;#39;remove&amp;#39; operation fails in tailMap of a null-key-allowing TreeMap&lt;br/&gt;
6245166: (coll spec) TreeMap class documentation should use SortedMap instead of Map&lt;br/&gt;
6264242: (coll spec) foo(E o) -&amp;gt; foo(E e)&lt;br/&gt;
6268386: jsr166x -- collections and concurrency maintenance update&lt;br/&gt;
6269713: (coll) Unchecked exception specifications of collection classes are missing or inaccurate&lt;br/&gt;
6271387: (coll spec) toArray method javadocs are inaccur</comment>
                            <comment id="14520529" author="smarks" created="Sat, 27 Aug 2022 16:57:39 -0700"  >The cited sentence from the specification is indeed overly broad. The Entry objects returned by the firstEntry(), lastEntry(), lowerEntry(), floorEntry(), higherEntry(), and ceilingEntry() methods on TreeMap and its subMap views don&amp;#39;t support the setValue() method. However, the Entry objects obtained from an entrySet() do support setValue(). So yes this assertion needs to be adjusted.&lt;br/&gt;
&lt;br/&gt;
I suspect this has something to do with specified lifetime of such Entry objects; see the Map.Entry class specification. Those instances obtained by iterating an entrySet are defined to remain connected to the original map only for the duration of iteration of the entrySet. (In practice they seem to last indefinitely, possibly until the mapping is removed, but their actual lifetime might differ across Map implementations.) Of course the Map can&amp;#39;t know when the iteration actually ends, but at least the specification puts a lower bound on the lifetime of such entries that Map implementations can adhere to and that Map clients can rely on.&lt;br/&gt;
&lt;br/&gt;
For the direct Entry-returning methods, there&amp;#39;s no iteration to bound the lifetime of such Entry instances. Instead of specifying them to have some indefinite but unknowable lifetime, the designers probably felt that making them be snapshots -- both in the specification and the implementation -- would provide the most predictable and reliable behavior. That&amp;#39;s my guess. I&amp;#39;ll poke around in the history and see if I can come up with anything more definite.</comment>
                            <comment id="14520526" author="martin" created="Sat, 27 Aug 2022 14:33:08 -0700"  >Java 1.6 was a time of peak Compatibility Concern, and so any such spec change should have been accompanied by a Compatibility Justification, which should still be accessible by Java Archaeologists working at Oracle.  If it was merely copypasta, maybe it slipped through unnoticed?</comment>
                            <comment id="14520525" author="forax" created="Sat, 27 Aug 2022 13:55:24 -0700"  >At least JDK 1.2 beta2 implementation support it.&lt;br/&gt;
see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-4108662&quot;&gt;https://bugs.openjdk.org/browse/JDK-4108662&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
In term of spec, the sentence was introduced in Java 1.6  (i&amp;#39;ve checked the different api specs).&lt;br/&gt;
</comment>
                            <comment id="14520524" author="martin" created="Sat, 27 Aug 2022 13:12:49 -0700"  >Even Java Historian can&amp;#39;t remember how that spec about setValue got into TreeMap.java.&lt;br/&gt;
&lt;br/&gt;
There&amp;#39;s some existing explicit testing of setValue in Map implementations in test/jdk/java/util/concurrent/tck:&lt;br/&gt;
./ConcurrentHashMapTest.java:61:            public boolean supportsSetValue() { return true; }&lt;br/&gt;
./MapTest.java:109:            if (impl.supportsSetValue()) {&lt;br/&gt;
./MapTest.java:129:        if (!impl.supportsSetValue()) return;&lt;br/&gt;
./ConcurrentSkipListMapTest.java:61:            public boolean supportsSetValue() { return false; }&lt;br/&gt;
./MapImplementation.java:54:    public boolean supportsSetValue();&lt;br/&gt;
./TreeMapTest.java:59:            public boolean supportsSetValue() { return true; }&lt;br/&gt;
./HashMapTest.java:52:            public boolean supportsSetValue() { return true; }&lt;br/&gt;
./LinkedHashMapTest.java:52:            public boolean supportsSetValue() { return true; }&lt;br/&gt;
./HashtableTest.java:50:            public boolean supportsSetValue() { return true; }&lt;br/&gt;
&lt;br/&gt;
Probably setValue works perfectly in TreeMap but not in ConcurrentSkipListMap, and one suspects a spec copypasta error in ancient history. Perhaps an archaeologist at Oracle could find out.&lt;br/&gt;
&lt;br/&gt;
We should remove that erroneous spec snippet from TreeMap.java, and perhaps add some more tests for setValue, perhaps to MapTest.java</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5091912">JDK-8300622</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4981719">JDK-8217972</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4954752">JDK-8199318</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5153524">JDK-8352596</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0gdnj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>95525</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="669"><![CDATA[java.util:collections]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>