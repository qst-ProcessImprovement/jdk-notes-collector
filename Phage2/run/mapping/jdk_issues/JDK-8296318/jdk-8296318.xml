<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:18:42 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8296318] use-def assert: special case undetected loops nested in infinite loops</title>
                <link>https://bugs.openjdk.org/browse/JDK-8296318</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>During the work of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280126&quot; title=&quot;C2: detect and remove dead irreducible loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280126&quot;&gt;&lt;strike&gt;JDK-8280126&lt;/strike&gt;&lt;/a&gt;, I found this P2.java, which fails with:&lt;br/&gt;
&lt;br/&gt;
java -Xcomp -XX:CompileCommand=compileonly,P2::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 P2.java&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/block.cpp:1382), pid=59759, tid=59772&lt;br/&gt;
#  assert(is_loop || block-&amp;gt;find_node(def) &amp;lt; j) failed: uses must follow definitions&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x659166]  PhaseCFG::verify() const+0x4c8&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   5503   83    b        P2::test (27 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f9fde757000,0x00007f9fde858000],  sp=0x00007f9fde853000,  free space=1008k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x659166]  PhaseCFG::verify() const+0x4c8  (block.cpp:1382)&lt;br/&gt;
V  [libjvm.so+0x89baf3]  Compile::Code_Gen()+0x229  (compile.cpp:2948)&lt;br/&gt;
V  [libjvm.so+0x89229f]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159f  (compile.cpp:863)&lt;br/&gt;
V  [libjvm.so+0x780a9b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x179  (c2compiler.cpp:113)&lt;br/&gt;
V  [libjvm.so+0x8b0d32]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x916  (compileBroker.cpp:2240)&lt;br/&gt;
V  [libjvm.so+0x8af99b]  CompileBroker::compiler_thread_loop()+0x3ed  (compileBroker.cpp:1916)&lt;br/&gt;
V  [libjvm.so+0x8d00e4]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x72  (compilerThread.cpp:58)&lt;br/&gt;
V  [libjvm.so+0xc5e006]  JavaThread::thread_main_inner()+0x144  (javaThread.cpp:699)&lt;br/&gt;
V  [libjvm.so+0xc5debe]  JavaThread::run()+0x182  (javaThread.cpp:684)&lt;br/&gt;
V  [libjvm.so+0x1330627]  Thread::call_run()+0x195  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x10dde55]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)</description>
                <environment></environment>
        <key id="5086737">JDK-8296318</key>
            <summary>use-def assert: special case undetected loops nested in infinite loops</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>c2</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk20u-fix-SQE-ok-next</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>oracle-triage-20</label>
                    </labels>
                <created>Thu, 3 Nov 2022 09:37:20 -0700</created>
                <updated>Wed, 24 May 2023 00:39:39 -0700</updated>
                            <resolved>Wed, 14 Dec 2022 09:27:56 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>18</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14574049" author="roboduke" created="Sun, 16 Apr 2023 23:10:51 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1247&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1247&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-17 06:05:32 +0000</comment>
                            <comment id="14574005" author="goetz" created="Sun, 16 Apr 2023 08:18:25 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.8-oracle.&lt;br/&gt;
Very low risk, fixes assertion.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes and fails without the fix. SAP nightly testing passed.</comment>
                            <comment id="14571687" author="roboduke" created="Tue, 4 Apr 2023 06:37:22 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/51&quot;&gt;https://git.openjdk.org/jdk20u/pull/51&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-04 13:29:12 +0000</comment>
                            <comment id="14571679" author="thartmann" created="Tue, 4 Apr 2023 06:29:43 -0700"  >Fix Request (JDK 20u)&lt;br/&gt;
Fixes an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.</comment>
                            <comment id="14545451" author="dukebot" created="Wed, 14 Dec 2022 09:27:55 -0800"  >Changeset: 736fcd49&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2022-12-14 17:25:49 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/736fcd49f7cd3aa6f226b2e088415eaf05f97ee8&quot;&gt;https://git.openjdk.org/jdk/commit/736fcd49f7cd3aa6f226b2e088415eaf05f97ee8&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14544999" author="roboduke" created="Mon, 12 Dec 2022 23:56:55 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11642&quot;&gt;https://git.openjdk.org/jdk/pull/11642&lt;/a&gt;&lt;br/&gt;
Date: 2022-12-13 07:49:47 +0000</comment>
                            <comment id="14544628" author="JIRAUSER19821" created="Mon, 12 Dec 2022 06:25:49 -0800"  >Currently testing my fix</comment>
                            <comment id="14542238" author="JIRAUSER19821" created="Fri, 2 Dec 2022 06:06:04 -0800"  >Quick summary:&lt;br/&gt;
This is another casualty of infinite loops. Just like &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297642&quot; title=&quot;PhaseIdealLoop::only_has_infinite_loops must detect all loops that never lead to termination&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297642&quot;&gt;&lt;strike&gt;JDK-8297642&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
An inner loop of an infinite loop is not attached to the loop-tree.&lt;br/&gt;
Later, during scheduling we assume that in a block all uses are after the definitions.&lt;br/&gt;
Except for LoopNodes - there we accept that a phi may have some operations below, that feed back into the phi.&lt;br/&gt;
Sadly, we do not replace the inner loop&amp;#39;s region-node with a LoopNode, as the infinite loop is not attached to the loop-tree.&lt;br/&gt;
We assert.&lt;br/&gt;
&lt;br/&gt;
Idea: can we uncommon_trap infinite loops?&lt;br/&gt;
&lt;br/&gt;
Alternative: special case the assert. Check if we are (nested) in an infinite loop, and so maybe the loop head was not turned into a LoopNode.</comment>
                            <comment id="14534860" author="JIRAUSER19821" created="Fri, 4 Nov 2022 05:23:05 -0700"  >I suspect that this is only a but in the verification code, so it would not reproduce in product builds.&lt;br/&gt;
Did not reproduce on product build of:&lt;br/&gt;
openjdk 17.0.4 2022-07-19&lt;br/&gt;
&lt;br/&gt;
The assert is wrong in this case. So we only fail in debug builds.&lt;br/&gt;
Argument:&lt;br/&gt;
If we had registered the Loop, then we would not have checked/executed the assert. We did not register the Loop since it was part of an infinite-loop subgraph, and we do not attach such loops to the loop tree, and then we do not replace the RegionNode with a LoopNode in beautify_loop.</comment>
                            <comment id="14534718" author="dlong" created="Thu, 3 Nov 2022 14:56:24 -0700"  >ILW = assert in debug, unknown in product; reproduces with specific test and flags; no workaround = MMH = P3</comment>
                            <comment id="14534659" author="JIRAUSER19821" created="Thu, 3 Nov 2022 10:45:06 -0700"  >Some solution ideas:&lt;br/&gt;
&lt;br/&gt;
We could attach loops to the loop-tree even if the subgraph is an infinite loop.&lt;br/&gt;
For one, it is very rare to have &amp;quot;true-infinite-loops&amp;quot;. In most cases, we have some predicate, uncommon trap etc that lead us out of the loop to a HaltNode. We also insert NeverBranch nodes once we detect true-infinite-loops, and on any subsequent pass we then have a loop-exit, and the loop does not count as infinite any more.&lt;br/&gt;
Thus, the cost would probably be low.&lt;br/&gt;
It may also be desired to optimize even infinite loops, even if they never terminate they can still do more work, and do the work more efficiently.&lt;br/&gt;
We may be able to attach the loops directly, or just rerun build_loop_tree.&lt;br/&gt;
&lt;br/&gt;
Alternative:&lt;br/&gt;
Adapt the assert. The difficulty is that we do not know which Regions should actually have been Loop heads. Disabling the assert would be unfortunate. Tagging all regions of infinite loops would also complicate the code unnecessarily, and be bug-prone.</comment>
                            <comment id="14534655" author="JIRAUSER19821" created="Thu, 3 Nov 2022 10:38:02 -0700"  >Please see P2.java.crash.png, it displays the relevant nodes of the graph at the time of the assert.&lt;br/&gt;
&lt;br/&gt;
Analysis:&lt;br/&gt;
We have an infinite loop: &amp;quot;while(true)&amp;quot; (16 Region)&lt;br/&gt;
During PhaseIdealLoop::build_loop_tree, we build the loop-tree bottom up.&lt;br/&gt;
However, at that time the loop has no exit, hence we add the NeverBranch node.&lt;br/&gt;
One other unfortunate consequence is that none of the bottom-up detected loops (16/52 and 26/55) are attached to the loop-tree. We only attach loops once we find a loop exit (we &amp;quot;sort&amp;quot; loops). The inner loop can be attached to the outer, but the outer has no exit and is never attached to the root of the loop-tree.&lt;br/&gt;
The consequence of this is that we do not do any &amp;quot;optimizations&amp;quot; on the non-attached loops.&lt;br/&gt;
This is intentional - why waste compile time for loops that are infinite anyway.&lt;br/&gt;
The unfortunate effect is that we hence do not make LoopNodes out of the found loop-heads for the non-attached loops.&lt;br/&gt;
&lt;br/&gt;
During PhaseCFG::verify we check if blocks look reasonable.&lt;br/&gt;
In the picture, I marked all the control nodes orange, and the data-nodes dark blue.&lt;br/&gt;
block:&lt;br/&gt;
B8: #	out( B10 B9 ) &amp;lt;- in( N56 N57 )  Freq: 1e-35&lt;br/&gt;
&amp;nbsp;26  Region  === 26 55 54  [[ 26 23 24 35 ]]  !jvms: P2::test @ bci:13 (line 16)&lt;br/&gt;
&amp;nbsp;35  Phi  === 26 31 36  [[ 32 ]]  #int !jvms: P2::test @ bci:13 (line 16)&lt;br/&gt;
&amp;nbsp;32  decI_rReg  === _ 35  [[ 33 31 ]] #-1/0xffffffff&lt;br/&gt;
&amp;nbsp;33  MachProj  === 32  [[ ]] #1&lt;br/&gt;
&amp;nbsp;31  xorI_rReg_imm  === _ 32  [[ 34 35 41 23 23 22 17 ]] #1/0x00000001 !jvms: P2::test @ bci:17 (line 16)&lt;br/&gt;
&amp;nbsp;34  MachProj  === 31  [[ ]] #1&lt;br/&gt;
&amp;nbsp;29  tlsLoadP  === 7  [[ 24 18 ]]  !jvms: P2::test @ bci:20 (line 23)&lt;br/&gt;
&amp;nbsp;24  loadP  === 26 10 29  [[ 23 ]] rawptr:BotPTR&lt;br/&gt;
&amp;nbsp;23  safePoint_poll_tls  === 26 0 10 0 0 24 30 0 31 31  [[ 25 21 ]]  !jvms: P2::test @ bci:20 (line 23)&lt;br/&gt;
&amp;nbsp;25  MachProj  === 23  [[ ]] #1&lt;br/&gt;
&amp;nbsp;22  testI_reg  === _ 31  [[ 21 ]] #0/0x00000000&lt;br/&gt;
&amp;nbsp;21  jmpCon  === 23 22  [[ 27 20 ]] P=0.900000, C=-1.000000 !jvms: P2::test @ bci:20 (line 23)&lt;br/&gt;
&amp;nbsp;27  IfTrue  === 21  [[ 56 ]] #1 !jvms: P2::test @ bci:20 (line 23)&lt;br/&gt;
&amp;nbsp;20  IfFalse  === 21  [[ 53 ]] #0 !jvms: P2::test @ bci:20 (line 23)&lt;br/&gt;
&lt;br/&gt;
We assert for these nodes:&lt;br/&gt;
def:&lt;br/&gt;
&amp;nbsp;31  xorI_rReg_imm  === _ 32  [[ 34 35 41 23 23 22 17 ]] &lt;br/&gt;
n:&lt;br/&gt;
&amp;nbsp;35  Phi  === 26 31 36  [[ 32 ]] &lt;br/&gt;
We find that 31 is scheduled after 35, even though that 31 is an input to 35. We have a use-before-def assert.&lt;br/&gt;
&lt;br/&gt;
This would be problematic, except we are actually in a loop, we just have not realized it.&lt;br/&gt;
In fact, had we found the 26 Region to be a LoopNode, we would not have checked this assert.&lt;br/&gt;
For loops it is ok that Phi nodes have inputs that are scheduled after the Phi, in the same block, since those correspond to the values of the backedge.&lt;br/&gt;
&lt;br/&gt;
Why does this bug only reproduce with the flag -XX:PerMethodTrapLimit=0 ?&lt;br/&gt;
This is because if we do not disallow traps, we insert predicates before the inner loop, which effectively are loop-exits, and then the nested-loop is not an infinite loop anymore.&lt;br/&gt;
I was able to trigger this bug with irreducible loops, and without this flag, see P.jasm in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280126&quot; title=&quot;C2: detect and remove dead irreducible loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280126&quot;&gt;&lt;strike&gt;JDK-8280126&lt;/strike&gt;&lt;/a&gt;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5097355">JDK-8305136</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098227">JDK-8305851</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098977">JDK-8306506</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099667">JDK-8307043</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5066201">JDK-8280126</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5086838">JDK-8296412</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5088330">JDK-8297642</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5090238">JDK-8299214</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="101443" name="P2.java" size="1098" author="epeter" created="Fri, 4 Nov 2022 04:29:57 -0700"/>
                            <attachment id="101415" name="P2.java.before-loop-opts.png" size="47999" author="epeter" created="Thu, 3 Nov 2022 10:54:32 -0700"/>
                            <attachment id="101413" name="P2.java.crash.png" size="68905" author="epeter" created="Thu, 3 Nov 2022 10:23:46 -0700"/>
                            <attachment id="101409" name="hs_err_pid59759.log" size="77538" author="epeter" created="Thu, 3 Nov 2022 09:36:23 -0700"/>
                            <attachment id="101408" name="replay_pid59759.log" size="242996" author="epeter" created="Thu, 3 Nov 2022 09:36:24 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2z4aj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17317"><![CDATA[b02]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>