<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:05:30 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8332818] ubsan: archiveHeapLoader.cpp:70:27: runtime error: applying non-zero offset 18446744073707454464 to null pointer</title>
                <link>https://bugs.openjdk.org/browse/JDK-8332818</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When running :tier1 hs tests, the following issue has been reported with ubsan enabled (configure flag --enable-ubsan) the following issue is reported :&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;stderr: [/jdk/src/hotspot/share/cds/archiveHeapLoader.cpp:70:27: runtime error: applying non-zero offset 18446744073707454464 to null pointer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7f33db52823f in ArchiveHeapLoader::init_mapped_heap_info(unsigned char*, long, int) /jdk/src/hotspot/share/cds/archiveHeapLoader.cpp:70&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7f33dc6d3ad4 in FileMapInfo::map_heap_region_impl() /jdk/src/hotspot/share/cds/filemap.cpp:2211&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x7f33dc6d4ba4 in FileMapInfo::map_heap_region() /jdk/src/hotspot/share/cds/filemap.cpp:2129&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x7f33dc6d52a7 in FileMapInfo::map_or_load_heap_region() /jdk/src/hotspot/share/cds/filemap.cpp:2019&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x7f33ddaf7fdb in MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool) /jdk/src/hotspot/share/cds/metaspaceShared.cpp:1183&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#5 0x7f33ddaf8f54 in MetaspaceShared::initialize_runtime_shared_and_meta_spaces() /jdk/src/hotspot/share/cds/metaspaceShared.cpp:943&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#6 0x7f33ddadd60f in Metaspace::global_initialize() /jdk/src/hotspot/share/memory/metaspace.cpp:714&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#7 0x7f33de9bc7f9 in universe_init() /jdk/src/hotspot/share/memory/universe.cpp:866&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#8 0x7f33dcc93691 in init_globals() /jdk/src/hotspot/share/runtime/init.cpp:128&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#9 0x7f33de92a720 in Threads::create_vm(JavaVMInitArgs*, bool*) /jdk/src/hotspot/share/runtime/threads.cpp:553&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#10 0x7f33dd02d477 in JNI_CreateJavaVM_inner /jdk/src/hotspot/share/prims/jni.cpp:3581&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#11 0x7f33dd02d477 in JNI_CreateJavaVM /jdk/src/hotspot/share/prims/jni.cpp:3672&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#12 0x7f33e42a90e5 in InitializeJVM /jdk/src/java.base/share/native/libjli/java.c:1550&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#13 0x7f33e42a90e5 in JavaMain /jdk/src/java.base/share/native/libjli/java.c:491&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#14 0x7f33e42b2748 in ThreadJavaMain /jdk/src/java.base/unix/native/libjli/java_md.c:642&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#15 0x7f33e42616e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#16 0x7f33e391550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)</description>
                <environment></environment>
        <key id="5130173">JDK-8332818</key>
            <summary>ubsan: archiveHeapLoader.cpp:70:27: runtime error: applying non-zero offset 18446744073707454464 to null pointer</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mbaesken">Matthias Baesken</assignee>
                                    <reporter username="mbaesken">Matthias Baesken</reporter>
                        <labels>
                            <label>cds</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-SQE-ok</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                            <label>ubsan</label>
                    </labels>
                <created>Thu, 23 May 2024 05:11:32 -0700</created>
                <updated>Thu, 5 Dec 2024 04:49:20 -0800</updated>
                            <resolved>Fri, 14 Jun 2024 00:16:04 -0700</resolved>
                                    <version>23</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14728952" author="mbaesken" created="Thu, 5 Dec 2024 04:48:48 -0800"  >Looks like we have something similar here (Seen on macOS aarch64)&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8345569&quot;&gt;https://bugs.openjdk.org/browse/JDK-8345569&lt;/a&gt;&lt;br/&gt;
[ubsan] filemap.cpp:2215:47: runtime error: applying non-zero offset 34358689792 to null pointer</comment>
                            <comment id="14689618" author="roboduke" created="Sun, 14 Jul 2024 20:31:40 -0700"  >[jdk23u-fix-request] Approval Request from luwang1103&lt;br/&gt;
The code applies cleanly. Low risk: It is a corner case which is not triggered by the current code. In order to avoid bugs in the future, it is good to backport it.</comment>
                            <comment id="14689615" author="roboduke" created="Sun, 14 Jul 2024 20:18:02 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/23&quot;&gt;https://git.openjdk.org/jdk23u/pull/23&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-15 03:13:12 +0000</comment>
                            <comment id="14689326" author="roboduke" created="Fri, 12 Jul 2024 01:24:57 -0700"  >[jdk21u-fix-request] Approval Request from Wang Lu&lt;br/&gt;
The code applies cleanly. Low risk: It is a corner case which is not triggered by the current code. In order to avoid bugs in the future, it is good to backport it.</comment>
                            <comment id="14689249" author="roboduke" created="Thu, 11 Jul 2024 18:23:12 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/836&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/836&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-12 01:19:02 +0000</comment>
                            <comment id="14681616" author="dukebot" created="Fri, 14 Jun 2024 00:16:03 -0700"  >Changeset: 6861766b&lt;br/&gt;
Author:    Matthias Baesken &amp;lt;&lt;a href=&apos;mailto:mbaesken@openjdk.org&apos;&gt;mbaesken@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-06-14 07:13:22 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/6861766b638c5135ba40f261d78d9731954ce5ab&quot;&gt;https://git.openjdk.org/jdk/commit/6861766b638c5135ba40f261d78d9731954ce5ab&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14679782" author="roboduke" created="Fri, 7 Jun 2024 04:57:00 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19597&quot;&gt;https://git.openjdk.org/jdk/pull/19597&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-07 11:52:42 +0000</comment>
                            <comment id="14679552" author="mbaesken" created="Thu, 6 Jun 2024 08:50:20 -0700"  >&amp;gt; But I am not sure this is worth the effort.&lt;br/&gt;
&lt;br/&gt;
We can always annotate the method with an attribute to switch off ubsan for it. Might be an option here.</comment>
                            <comment id="14679550" author="stuefe" created="Thu, 6 Jun 2024 08:46:19 -0700"  >I agree with [~azafari] that there is no bug here. A base of 0 is fine. I believe even negative overflow can happen and is valid, IIUC. Since the distance between heap region start and current base can be smaller than between region start and base at dump time. IIUC, the code initializes an imaginary base that is used to calculate the current absolute pointer, at runtime, from a narrow Oop that has been stored with a different base at dump time. I think that imaginary base can be &amp;lt; 0.&lt;br/&gt;
&lt;br/&gt;
The &amp;quot;don&amp;#39;t calculate with nullptr&amp;quot; is a bit vague. There are platforms (e.g. traditional AS/400) where the hardware keeps track of pointer validity. So, to be super portable, one cannot calculate a pointer based on NULL, nor produce a pointer by casting from an integer. But if that were not to work, a lot of thinks would not work in hotspot.&lt;br/&gt;
&lt;br/&gt;
If we really want to improve this, we maybe could make the imaginary base address a signed 64-bit integer. But I am not sure this is worth the effort.&lt;br/&gt;
</comment>
                            <comment id="14679492" author="mbaesken" created="Thu, 6 Jun 2024 06:14:42 -0700"  >&amp;gt; So, would this be a correct workaround?&lt;br/&gt;
&lt;br/&gt;
I think it should be something like this  (taking sizeof into consideration) :&lt;br/&gt;
// helper templates to avoid undefined addition/subtraction from nullptr&lt;br/&gt;
template&amp;lt;typename T&amp;gt;&lt;br/&gt;
T* add_to_ptr_maybe_null(T* ptr, uintptr_t val) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return (T*)((uintptr_t)ptr + val * sizeof(T));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
template&amp;lt;typename T&amp;gt;&lt;br/&gt;
T* sub_from_ptr_maybe_null(T* ptr, uintptr_t val) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return (T*)((uintptr_t)ptr - val * sizeof(T));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
but in this PR discussion  &lt;a href=&quot;https://github.com/openjdk/jdk/pull/19424&quot;&gt;https://github.com/openjdk/jdk/pull/19424&lt;/a&gt;  it was concluded to avoid the nullptr  addition at all (not sure if this is possible here as well).</comment>
                            <comment id="14679109" author="JIRAUSER20409" created="Wed, 5 Jun 2024 02:56:01 -0700"  >So, would this be a correct workaround?&lt;br/&gt;
address base = CompressedOops::base();&lt;br/&gt;
address new_base = base == nullptr ? delta : base + delta;&lt;br/&gt;
.....</comment>
                            <comment id="14679045" author="mbaesken" created="Wed, 5 Jun 2024 00:44:43 -0700"  >&amp;gt; The nullptr here is the CompressedOops::base() where 0 is a valid value for it to have. &lt;br/&gt;
&lt;br/&gt;
Yes it is a valid value, but ....&lt;br/&gt;
&lt;br/&gt;
&amp;gt;So, this issue is a false positive and can be ignored.&lt;br/&gt;
&lt;br/&gt;
... adding to it is undefined behavior in C++, so better not ignore this.&lt;br/&gt;
It works well on the current compilers we use (at least I think so); but it is not guaranteed that it works well on future compilers/compiler versions or even the current ones with other optimization levels/flags.</comment>
                            <comment id="14678116" author="JIRAUSER20409" created="Mon, 3 Jun 2024 00:19:20 -0700"  >The nullptr here is the CompressedOops::base() where 0 is a valid value for it to have. So, this issue is a false positive and can be ignored.&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5134529">JDK-8336636</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134620">JDK-8336724</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5145477">JDK-8345569</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17004"><![CDATA[x86]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36gcb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>