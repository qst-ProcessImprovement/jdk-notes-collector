<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:45:19 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8313248] C2: setScopedValueCache intrinsic exposes nullptr pre-values to store barriers</title>
                <link>https://bugs.openjdk.org/browse/JDK-8313248</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Original found by this test:&lt;br/&gt;
&lt;br/&gt;
$ CONF=linux-x86_64-server-fastdebug make images test TEST=java/lang/ScopedValue/StressStackOverflow.java TEST_VM_OPTS=&amp;quot;-XX:+UseShenandoahGC&amp;quot;&lt;br/&gt;
&lt;br/&gt;
STDOUT:&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/gc/shenandoah/shenandoahMarkBitMap.cpp:127), pid=36594, tid=36748&lt;br/&gt;
#  assert(ShenandoahHeap::heap()-&amp;gt;is_in(addr)) failed: Trying to access bitmap 0x00007f0d180d17e0 for address 0x0000000000000000 not in the heap.&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x156c625]  ShenandoahMarkBitMap::check_mark(HeapWordImpl**) const+0x125&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f53342f4000,0x00007f53343f4000],  sp=0x00007f53343f2650,  free space=1017k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x156c625]  ShenandoahMarkBitMap::check_mark(HeapWordImpl**) const+0x125  (shenandoahMarkBitMap.cpp:127)&lt;br/&gt;
V  [libjvm.so+0x158a8e9]  ShenandoahSATBMarkQueueSet::filter(SATBMarkQueue&amp;amp;)+0x5b9  (shenandoahMarkBitMap.inline.hpp:94)&lt;br/&gt;
V  [libjvm.so+0x149ac13]  SATBMarkQueueSet::flush_queue(SATBMarkQueue&amp;amp;)+0x13  (satbMarkQueue.cpp:225)&lt;br/&gt;
V  [libjvm.so+0xceb146]  HandshakeOperation::do_handshake(JavaThread*)+0x46  (handshake.cpp:326)&lt;br/&gt;
V  [libjvm.so+0xcedde0]  VM_HandshakeAllThreads::doit()+0x5e0  (handshake.cpp:662)&lt;br/&gt;
V  [libjvm.so+0x17ef99e]  VM_Operation::evaluate()+0x21e  (vmOperations.cpp:71)&lt;br/&gt;
V  [libjvm.so+0x181171a]  VMThread::evaluate_operation(VM_Operation*)+0x15a  (vmThread.cpp:281)&lt;br/&gt;
V  [libjvm.so+0x18123ee]  VMThread::inner_execute(VM_Operation*)+0x22e  (vmThread.cpp:435)&lt;br/&gt;
V  [libjvm.so+0x181272c]  VMThread::loop()+0x6c  (vmThread.cpp:502)&lt;br/&gt;
V  [libjvm.so+0x1812862]  VMThread::run()+0x92  (vmThread.cpp:175)&lt;br/&gt;
V  [libjvm.so+0x171994f]  Thread::call_run()+0x12f  (thread.cpp:217)&lt;br/&gt;
V  [libjvm.so+0x135105e]  thread_native_entry(Thread*)+0x11e  (os_linux.cpp:783)</description>
                <environment></environment>
        <key id="5106787">JDK-8313248</key>
            <summary>C2: setScopedValueCache intrinsic exposes nullptr pre-values to store barriers</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>gc-g1</label>
                            <label>gc-shenandoah</label>
                            <label>intrinsic</label>
                            <label>jdk21-defer-request</label>
                            <label>jdk21-defer-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                            <label>noreg-sqe</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-22</label>
                    </labels>
                <created>Thu, 27 Jul 2023 05:35:26 -0700</created>
                <updated>Fri, 2 Feb 2024 05:28:01 -0800</updated>
                            <resolved>Fri, 4 Aug 2023 02:55:58 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14603032" author="thartmann" created="Wed, 9 Aug 2023 10:43:09 -0700"  >Deferral Request (JDK 21)&lt;br/&gt;
Non-trivial fix that needs some more bake time before being released and will therefore be integrated into JDK 21.0.1.</comment>
                            <comment id="14602911" author="roboduke" created="Wed, 9 Aug 2023 03:59:06 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/50&quot;&gt;https://git.openjdk.org/jdk21u/pull/50&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-09 10:51:18 +0000</comment>
                            <comment id="14602908" author="shade" created="Wed, 9 Aug 2023 03:52:22 -0700"  >Fix Request (21u)&lt;br/&gt;
&lt;br/&gt;
Fixes the important Loom bug, manifests reliably with Shenandoah. Applies cleanly. Original reproducer fails without the fix, passes with it.</comment>
                            <comment id="14602901" author="shade" created="Wed, 9 Aug 2023 03:26:00 -0700"  >Yes, it should, I am going to do it soon.</comment>
                            <comment id="14602899" author="thartmann" created="Wed, 9 Aug 2023 03:19:46 -0700"  >[~shade], should this go into JDK 21(u)?</comment>
                            <comment id="14601879" author="dukebot" created="Fri, 4 Aug 2023 02:55:57 -0700"  >Changeset: e8a37b90&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-08-04 09:53:20 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e8a37b90db8dca4dc3653970b2d66d2faf8ef452&quot;&gt;https://git.openjdk.org/jdk/commit/e8a37b90db8dca4dc3653970b2d66d2faf8ef452&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14600865" author="thartmann" created="Wed, 2 Aug 2023 00:57:22 -0700"  >ILW = Crash in GC due to unexpected NULL pre_val, reproducible with loom stress test and Shenandoah GC, disable _setScopedValueCache intrinsic = HMM = P2</comment>
                            <comment id="14600627" author="roboduke" created="Tue, 1 Aug 2023 05:25:24 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15105&quot;&gt;https://git.openjdk.org/jdk/pull/15105&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-01 12:18:22 +0000</comment>
                            <comment id="14600622" author="shade" created="Tue, 1 Aug 2023 04:44:26 -0700"  >Seems to exist since the original integration of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8284161&quot; title=&quot;Implementation of Virtual Threads (Preview)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8284161&quot;&gt;&lt;strike&gt;JDK-8284161&lt;/strike&gt;&lt;/a&gt;. Started to reproduce with Shenandoah after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299324&quot; title=&quot;inline_native_setCurrentThread lacks GC barrier for Shenandoah&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299324&quot;&gt;&lt;strike&gt;JDK-8299324&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14600621" author="shade" created="Tue, 1 Aug 2023 04:42:46 -0700"  >G1 SATB barriers do the same thing, AFAICS, so this makes it a generic C2 ScopeValues intrinsic bug.</comment>
                            <comment id="14600619" author="shade" created="Tue, 1 Aug 2023 04:40:36 -0700"  >I think I understand. The setter (`setScopedValueCache`) intrinsic passes `val_type` of `_gvn.type(arr)`, which is `narrowoop: java/lang/Object *[int:32] (java/lang/Cloneable,java/io/Serializable):NotNull:exact *`, and thus implies non-nullity. &lt;br/&gt;
&lt;br/&gt;
So when Shenandoah&amp;#39;s SATB barrier reloads, it folds the null-check, assuming the `pre_val` is not null, due to `val_type`. This passes `nullptr` to SATB queues or slowpath, and we crash in either queue filtering or barrier code that does not expect nullptrs on SATB paths. The getter (`scopedValueCache`) constructs the `objects_type` explicitly to imply the value can be null. I think we should do the same for setter, since it can hide the &amp;quot;getter&amp;quot; from SATB barrier inside of it.</comment>
                            <comment id="14600618" author="shade" created="Tue, 1 Aug 2023 04:17:54 -0700"  >The odd access comes from C2 intrinsic for setScopedValueCache. That access stores the oop to off-heap OopHandle in JavaThread, and enters the SATB path after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299324&quot; title=&quot;inline_native_setCurrentThread lacks GC barrier for Shenandoah&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299324&quot;&gt;&lt;strike&gt;JDK-8299324&lt;/strike&gt;&lt;/a&gt;. There, it reloads the oop from that oopHandle, and somehow misses the nullcheck. -XX:DisableIntrinsic=_setScopedValueCache makes the test pass.</comment>
                            <comment id="14600602" author="shade" created="Tue, 1 Aug 2023 04:01:37 -0700"  >More investigation. It is useful to replace the SATB queueing code with the direct runtime (slowpath) code. This would catch the nullptrs coming to SATB barrier before they get in queues. &lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;__ if_then(pre_val, BoolTest::ne, kit-&amp;gt;null()); {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// logging buffer is full, call the runtime&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const TypeFunc *tf = ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;__ make_leaf_call(tf, CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), &amp;quot;shenandoah_wb_pre&amp;quot;, pre_val, tls);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} __ end_if();  // (pre_val != nullptr)&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;-XX:+PreserveFramePointer allows a proper stack walk and disassembly when the failure comes from C2 SATB barrier invocation. &lt;br/&gt;
The call to the runtime below can be seen in hs_err like this:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
#  Internal Error (/home/shipilev/shipilev-jdk/src/hotspot/share/gc/shenandoah/shenandoahRuntime.cpp:47), pid=469, tid=496&lt;br/&gt;
#  assert(orig != nullptr) failed: should be optimized out&lt;br/&gt;
&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x157a99d]  ShenandoahRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)+0x19d  (shenandoahRuntime.cpp:47)&lt;br/&gt;
J 331 c2 java.lang.ScopedValue$Cache.put(Ljava/lang/ScopedValue;Ljava/lang/Object;)V &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt; (88 bytes) @ 0x00007f0c4c4edadc [0x00007f0c4c4ed640+0x000000000000049c]&lt;br/&gt;
J 321 c1 StressStackOverflow$DeepRecursion.run()V (326 bytes) @ 0x00007f0c4497846c [0x00007f0c44972d60+0x000000000000570c]&lt;br/&gt;
J 330 c2 StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00007f0c4c4ecdc0 [0x00007f0c4c4ecc00+0x00000000000001c0]&lt;br/&gt;
J 330 c2 StressStackOverflow.fibonacci_pad1(ILjava/lang/Runnable;)J (34 bytes) @ 0x00007f0c4c4eccbc [0x00007f0c4c4ecc00+0x00000000000000bc]&lt;br/&gt;
&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;;; B36: #      out( B8 ) &amp;lt;- in( B7 )  Freq: 0.000595774&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007f0c4c4edac9:   mov    (%rbx),%rdi                  ;*invokestatic scopedValueCache {reexecute=0 rethrow=0 return_oop=0}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.lang.ScopedValue::&lt;a href=&apos;mailto:scopedValueCache@0&apos;&gt;scopedValueCache@0&lt;/a&gt; (line 775)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.lang.ScopedValue$Cache::&lt;a href=&apos;mailto:put@0&apos;&gt;put@0&lt;/a&gt; (line 905)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007f0c4c4edacc:   mov    %r15,%rsi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007f0c4c4edacf:   movabs $0x7f0c64a28800,%r10   ; &amp;lt;---- call to ShenandoahRuntime::write_ref_field_pre_entry&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007f0c4c4edad9:   call   *%r10&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007f0c4c4edadc:   nopl   0x0(%rax,%rax,1)             ;*invokestatic setScopedValueCache {reexecute=0 rethrow=0 return_oop=0}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.lang.ScopedValue::&lt;a href=&apos;mailto:setScopedValueCache@1&apos;&gt;setScopedValueCache@1&lt;/a&gt; (line 779)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.lang.ScopedValue$Cache::&lt;a href=&apos;mailto:put@18&apos;&gt;put@18&lt;/a&gt; (line 908)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;   {other}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x00007f0c4c4edae4:   jmp    0x00007f0c4c4ed778&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
`%rdi` is supposed to be the `pre_val` for SATB barrier, and while C2 code emits the null check for it, that null check is nowhere to be seen in the generated code. So that null-check is somehow optimized away.</comment>
                            <comment id="14599696" author="shade" created="Thu, 27 Jul 2023 11:40:37 -0700"  >I am beginning to think that GC barriers wander into red/yellow zone and get wrecked there.</comment>
                            <comment id="14599694" author="shade" created="Thu, 27 Jul 2023 11:29:23 -0700"  >On Mac, it fails a bit differently:&lt;br/&gt;
&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00000001062e68cc, pid=76453, tid=24323&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, shenandoah gc, bsd-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.dylib+0x2368cc]  ShenandoahMarkingContext::is_marked_strong(oop) const+0xcc&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x0000000104715e10&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000016d8d0000,0x000000016dad3000],  sp=0x000000016d8f7c20,  free space=159k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0x2368cc]  ShenandoahMarkingContext::is_marked_strong(oop) const+0xcc&lt;br/&gt;
V  [libjvm.dylib+0x101fea4]  ShenandoahSATBMarkQueueFilterFn::operator()(void const*) const+0x94&lt;br/&gt;
V  [libjvm.dylib+0x101fc84]  void SATBMarkQueueSet::apply_filter&amp;lt;ShenandoahSATBMarkQueueFilterFn&amp;gt;(ShenandoahSATBMarkQueueFilterFn, SATBMarkQueue&amp;amp;)+0xac&lt;br/&gt;
V  [libjvm.dylib+0xf361dc]  SATBMarkQueueSet::flush_queue(SATBMarkQueue&amp;amp;)+0x20&lt;br/&gt;
V  [libjvm.dylib+0x7cf10c]  HandshakeOperation::do_handshake(JavaThread*)+0x5c&lt;br/&gt;
V  [libjvm.dylib+0x7d0fe0]  HandshakeState::process_by_self(bool, bool)+0x2b8&lt;br/&gt;
V  [libjvm.dylib+0xf33894]  SafepointMechanism::process(JavaThread*, bool, bool)+0x80&lt;br/&gt;
V  [libjvm.dylib+0x3e4190]  ThreadStateTransition::transition_from_vm(JavaThread*, JavaThreadState, bool)+0x70&lt;br/&gt;
V  [libjvm.dylib+0x86da0c]  InterpreterRuntime::throw_StackOverflowError(JavaThread*)+0x220&lt;br/&gt;
j  jdk.internal.vm.ScopedValueContainer.doRun(Ljava/lang/Runnable;)V+0 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  jdk.internal.vm.ScopedValueContainer.run(Ljava/lang/Runnable;)V+21 &lt;a href=&apos;mailto:java.base@22-internal&apos;&gt;java.base@22-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.ScopedValue$Carrier.runWith(Ljava/lang/ScopedValue$Snapshot;Ljava/lang/Runnable;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5107816">JDK-8314110</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5103768">JDK-8310536</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5090373">JDK-8299324</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120322">JDK-8324938</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5071507">JDK-8284161</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32itf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17338"><![CDATA[b10]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>