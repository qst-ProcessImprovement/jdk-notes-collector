<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 19:12:00 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8307425] Socket input stream read burns CPU cycles with back-to-back poll(0) calls</title>
                <link>https://bugs.openjdk.org/browse/JDK-8307425</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>This was originally found by Oli Gillespie [not an Author yet], submitting this on his behalf. Oli would do the patch work.&lt;br/&gt;
&lt;br/&gt;
One of our migrations to JDK 17 revealed an issue in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8221481&quot; title=&quot;Reimplement the Legacy Socket API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8221481&quot;&gt;&lt;strike&gt;JDK-8221481&lt;/strike&gt;&lt;/a&gt; that resulted in &amp;gt;10% CPU spent in nio waiting code. The minimized case shows how the waiting code ends up issuing back-to-back polls with zero timeout:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
import java.io.*;&lt;br/&gt;
import java.net.*;&lt;br/&gt;
&lt;br/&gt;
public class ReadSingle {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Socket s = new Socket(&amp;quot;shipilev.net&amp;quot;, 443);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.setSoTimeout(1); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.getOutputStream().write(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStream is = s.getInputStream();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Starting single byte read&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is.read();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
With current JDK:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;% strace -f build/linux-x86_64-server-release/images/jdk/bin/java ReadSingle.java 2&amp;gt;&amp;amp;1 | grep poll &lt;br/&gt;
[pid 35427] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN}])&lt;br/&gt;
[pid 35427] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN|POLLHUP}])&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 35427] poll([{fd=5, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
With JDK 17:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;% strace -f ../shipilev-jdk17u-dev/build/linux-x86_64-server-release/images/jdk/bin/java ReadSingle.java 2&amp;gt;&amp;amp;1 | grep poll                             &lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN|POLLHUP}])&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN}])&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
[pid 34344] poll([{fd=4, events=POLLIN}], 1, 0) = 0 (Timeout)&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
With JDK 17 and `-Djdk.net.usePlainSocketImpl`:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
% strace -f ../shipilev-jdk17u-dev/build/linux-x86_64-server-release/images/jdk/bin/java -Djdk.net.usePlainSocketImpl ReadSingle.java 2&amp;gt;&amp;amp;1 | grep poll&lt;br/&gt;
[pid 34653] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN}])&lt;br/&gt;
[pid 34653] poll([{fd=4, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=4, revents=POLLIN|POLLHUP}])&lt;br/&gt;
[pid 34653] poll([{fd=6, events=POLLIN|POLLERR}], 1, 1) = 0 (Timeout)&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
This looks like a regression since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8221481&quot; title=&quot;Reimplement the Legacy Socket API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8221481&quot;&gt;&lt;strike&gt;JDK-8221481&lt;/strike&gt;&lt;/a&gt;, and the cause seems to be this truncation of nanos to millis, which truncates the small nano-wait to 0, which is then passed to `poll(0)`, which returns immediately: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/e206d57bfc09032e17d09714fc54ab2f5e961792/src/java.base/share/classes/sun/nio/ch/NioSocketImpl.java#L184&quot;&gt;https://github.com/openjdk/jdk/blob/e206d57bfc09032e17d09714fc54ab2f5e961792/src/java.base/share/classes/sun/nio/ch/NioSocketImpl.java#L184&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void park(FileDescriptor fd, int event, long nanos) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread t = Thread.currentThread();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (t.isVirtual()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long millis;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (nanos == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;millis = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;millis = NANOSECONDS.toMillis(nanos); // &amp;lt;--- here&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Net.poll(fd, event, millis);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Note it would happen in nearly all cases where we timeout the read, as there will be a hot loop in the final sub-millisecond section which will truncate to zero millis. The read timeout would be more likely with smaller timeouts, but larger timeouts are also affected by this.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8253119&quot; title=&quot;Remove the legacy PlainSocketImpl and PlainDatagramSocketImpl implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8253119&quot;&gt;&lt;strike&gt;JDK-8253119&lt;/strike&gt;&lt;/a&gt; removed `-Djdk.net.usePlainSocketImpl`, so there is no recourse in JDK 18+ at all.&lt;br/&gt;
&lt;br/&gt;
This looks similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8210004&quot; title=&quot;Thread.sleep(millis, nanos) timeout returns early&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8210004&quot;&gt;&lt;strike&gt;JDK-8210004&lt;/strike&gt;&lt;/a&gt;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8065372&quot; title=&quot;Object.wait(ms, ns) timeout returns early&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8065372&quot;&gt;&lt;strike&gt;JDK-8065372&lt;/strike&gt;&lt;/a&gt; and others, and should probably be fixed the same way: rounding *up* to the nearest millisecond.</description>
                <environment></environment>
        <key id="5100093">JDK-8307425</key>
            <summary>Socket input stream read burns CPU cycles with back-to-back poll(0) calls</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ogillespie">Oli Gillespie</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk20u-fix-SQE-ok</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>regression</label>
                    </labels>
                <created>Thu, 4 May 2023 01:56:59 -0700</created>
                <updated>Mon, 5 Jun 2023 01:58:04 -0700</updated>
                            <resolved>Fri, 5 May 2023 12:40:25 -0700</resolved>
                                    <version>13</version>
                    <version>17</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14582572" author="dfuchs" created="Thu, 18 May 2023 02:28:10 -0700"  >Fix Request (20u)&lt;br/&gt;
&lt;br/&gt;
This is a small change that fixes a few places in NIO where nanoseconds are rounded down to milliseconds, potentially leading to expensive tight poll/read loops in some scenarios.&lt;br/&gt;
The fix has already been backported to 17u. The backport to 20u is a clean backport.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/80&quot;&gt;https://git.openjdk.org/jdk20u/pull/80&lt;/a&gt;&lt;br/&gt;
Tests: tier1 and tier2 came back green.</comment>
                            <comment id="14582424" author="roboduke" created="Wed, 17 May 2023 11:24:47 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/80&quot;&gt;https://git.openjdk.org/jdk20u/pull/80&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-17 18:17:03 +0000</comment>
                            <comment id="14581573" author="JIRAUSER20804" created="Mon, 15 May 2023 07:21:48 -0700"  >Fix Request (17u)&lt;br/&gt;
&lt;br/&gt;
This is purely a performance fix. I saw one application which reduces CPU usage by 10% with this fix; though I&amp;#39;m sure that&amp;#39;s an outlier, it shows it can be significant.&lt;br/&gt;
The main risk is that this could increase the observed delay in some cases since we&amp;#39;re now rounding up. However, this is at most 1 millisecond, and this is already the behaviour of other similar functions like Object.wait.&lt;br/&gt;
Backport is not quite clean; DatagramChannelImpl doesn&amp;#39;t override park in 17 so it is skipped, and NioSocketImpl/SelChImpl simply have an extra hunk for virtual threads which doesn&amp;#39;t materially affect the patch.</comment>
                            <comment id="14580660" author="roboduke" created="Wed, 10 May 2023 13:41:21 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1341&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1341&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-10 11:17:08 +0000</comment>
                            <comment id="14579480" author="dukebot" created="Fri, 5 May 2023 12:40:23 -0700"  >Changeset: 73ac7105&lt;br/&gt;
Author:    Oli Gillespie &amp;lt;&lt;a href=&apos;mailto:ogillesp@amazon.com&apos;&gt;ogillesp@amazon.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Alan Bateman &amp;lt;&lt;a href=&apos;mailto:alanb@openjdk.org&apos;&gt;alanb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-05 19:36:35 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/73ac710533a45bf5ba17f308aa49556b877b8bf9&quot;&gt;https://git.openjdk.org/jdk/commit/73ac710533a45bf5ba17f308aa49556b877b8bf9&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14579037" author="roboduke" created="Thu, 4 May 2023 04:26:23 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13798&quot;&gt;https://git.openjdk.org/jdk/pull/13798&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-04 10:42:02 +0000</comment>
                            <comment id="14579011" author="shade" created="Thu, 4 May 2023 03:13:28 -0700"  >Oli would do the work for this, I&amp;#39;ll mention this to him.</comment>
                            <comment id="14579008" author="alanb" created="Thu, 4 May 2023 03:11:30 -0700"  >[~shade] Would you mind changing SelChImpl.park to use a round up to 1ms too? That&amp;#39;s used by the socket adaptors that have a socket &amp;quot;view&amp;quot; on channels so it will have the same issue if they use setSoTimeout with a small timeout.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5101133">JDK-8308280</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101322">JDK-8308418</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101642">JDK-8308717</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4986676">JDK-8221481</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31dor:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="228"><![CDATA[java.nio]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>