<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:21:20 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8316337] (bf) Concurrency issue in DirectByteBuffer.Deallocator</title>
                <link>https://bugs.openjdk.org/browse/JDK-8316337</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The DirectByteBuffer.Deallocator is run via a Cleaner which, in turn, is run in a separate thread. This means the deallocator must be thread-safe. However, this is not the case as it does not adhere to fundamental safe-publication rules and modifies its internal state with normal memory semantics.</description>
                <environment></environment>
        <key id="5110381">JDK-8316337</key>
            <summary>(bf) Concurrency issue in DirectByteBuffer.Deallocator</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pminborg">Per-Ake Minborg</assignee>
                                    <reporter username="pminborg">Per-Ake Minborg</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-SQE-ok-next</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Fri, 15 Sep 2023 00:10:40 -0700</created>
                <updated>Tue, 20 Feb 2024 09:05:21 -0800</updated>
                            <resolved>Mon, 29 Jan 2024 10:07:45 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14644431" author="msheppar" created="Mon, 29 Jan 2024 10:21:49 -0800"  >&lt;br/&gt;
initially thought that &amp;quot;selfshunt&amp;quot; unit test could be used, but DirectByteBuffer is sealed and Deallocator is private so that prohibits such an approach.</comment>
                            <comment id="14644429" author="msheppar" created="Mon, 29 Jan 2024 10:12:48 -0800"  >Implicitly verified as no observed test failures in NIO buffer tests.&lt;br/&gt;
an associated issue will be opened to address a challenge that there exists the possibility of side effects from this fix i.e.the fix address the inconsistent state transition, but if there is concurrent invocation of Deallocaor run methods there is a question of over the idempotency of UNSAFE.freeMemory</comment>
                            <comment id="14644280" author="JIRAUSER20213" created="Mon, 29 Jan 2024 00:02:47 -0800"  >There might be additional fixes required as per the comments in this issue. These will be made under a new issue.</comment>
                            <comment id="14643930" author="jpai" created="Thu, 25 Jan 2024 22:21:43 -0800"  >Hello Mark,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Additionally, one can conceive a ( ,somewhat contrived ) scenario of concurrent invocations of a Deallocator::run, first run frees the referenced memory, the memory is returned to native allocator and re-allocated before the second concurrent run is invoked. Then the second concurrent Deallocator::run is invoked and that frees the already freed but now reallocated memory, with unforeseen side effects of that memory being unintentionally freed. &lt;br/&gt;
&lt;br/&gt;
From what I see in the DirectByteBuffer code, the Deallocator record is only used and enrolled with a Cleaner. So the run() method of the Deallocator where it frees the memory is only ever called by the Cleaner. The Cleaner (javadoc) further guarantees that:&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Cleaners may also be invoked directly; they are thread safe and ensure that they run their thunks at most once.&lt;br/&gt;
&lt;br/&gt;
So as far as I can see in the code, it doesn&amp;#39;t look like there&amp;#39;s any code which would end up calling Deallocator.run() more than once.</comment>
                            <comment id="14643612" author="msheppar" created="Wed, 24 Jan 2024 16:05:39 -0800"  >so looking at verifying this fix, as there are no explicit tests and such tests are difficult to construct -- it may be achievable with some package level &amp;quot;unit&amp;quot; tests using the self shunt idiom -- so it can be extrapolated that, as there are no failures in the current set of tests, then all is well.&lt;br/&gt;
Thus, no observed failures in ATR or in the CI pipelines == OK&lt;br/&gt;
&lt;br/&gt;
However, looking at the essential aspect of the change, that is, the refactor of the Deallocator to that of an immutable object, which by its nature implies thread safety. Thus, this achieves a resolution of a perceived concurrent access issue in the run method&amp;#39;s transitioning of a Dealloactor&amp;#39;s internal state (as per its member variables defined in its definition). However, this may introduce a side effect, and possible potential problem. The internal Deallocator state (address) is &amp;quot;referencing&amp;quot; a block of memory being used. The Dealloactor run method  frees this memory. In the original the state of that memory was tested to see if it was still allocated, i.e. address != 0, and if so then freed the memory. Then after the free operation the address set to 0 to indicate the memory is no longer allocated.&lt;br/&gt;
&lt;br/&gt;
With the current change that test is no longer performed, as the state is immutable, and the memory will always be freed in the invocation of run. Thus, this fix assumes that UNSAFE.freeMemory is idempotent. If UNSAFE.freeMemory maps to a native memory free call, then that assumption may not be valid, and behaviour can be unspecified, which may lead to &amp;quot;peculiar behaviour&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
As such there is an open question against this change and it can&amp;#39;t be verified.&lt;br/&gt;
&lt;br/&gt;
Additionally, one can conceive a ( ,somewhat contrived ) scenario of concurrent invocations of  a Deallocator::run, first run frees the referenced memory,  the memory is returned to native allocator and re-allocated before the second concurrent run is invoked. Then the second concurrent Deallocator::run is invoked and that frees the already freed but now reallocated memory, with unforeseen side effects of that memory being unintentionally freed.&lt;br/&gt;
&lt;br/&gt;
So the defined state of the Deallocator is not just the member variables, but the state of the underlying native memory implicitly referenced by address.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14616530" author="roboduke" created="Fri, 6 Oct 2023 11:53:28 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/231&quot;&gt;https://git.openjdk.org/jdk21u/pull/231&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-06 18:47:12 +0000</comment>
                            <comment id="14616529" author="roboduke" created="Fri, 6 Oct 2023 11:51:26 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to improve safety. Records are available in JDK 21, so the whole thing works. Tests pass.</comment>
                            <comment id="14612209" author="dukebot" created="Tue, 19 Sep 2023 06:13:37 -0700"  >Changeset: cf74b8c2&lt;br/&gt;
Author:    Per Minborg &amp;lt;&lt;a href=&apos;mailto:pminborg@openjdk.org&apos;&gt;pminborg@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-09-19 13:10:51 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/cf74b8c2a32f33019a13ce80b6667da502cc6722&quot;&gt;https://git.openjdk.org/jdk/commit/cf74b8c2a32f33019a13ce80b6667da502cc6722&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14611770" author="roboduke" created="Mon, 18 Sep 2023 04:07:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15784&quot;&gt;https://git.openjdk.org/jdk/pull/15784&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-18 11:00:51 +0000</comment>
                            <comment id="14611415" author="JIRAUSER20213" created="Fri, 15 Sep 2023 00:46:26 -0700"  >A similar problem exists for implementations of UnmapperProxy.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5112029">JDK-8317786</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5120357">JDK-8324972</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5120473">JDK-8325173</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i334vn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17352"><![CDATA[b15]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="228"><![CDATA[java.nio]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>