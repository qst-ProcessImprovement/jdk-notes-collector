<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:34:11 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8317987] C2 recompilations cause high memory footprint</title>
                <link>https://bugs.openjdk.org/browse/JDK-8317987</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>While playing with the new compiler memory statistic, I saw that +StressRecompile causes a ~x2 increase in memory used during compilations. That confused me since I would have thought a recompilation starts memory-wise with a clean slate.&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
&lt;br/&gt;
Baseline: highest peak during compilation is ~60 MB, caused by compilation of java/lang/invoke/LambdaForm$Kind::&amp;lt;clinit&amp;gt; with ~18k nodes.&lt;br/&gt;
&lt;br/&gt;
`./images/jdk/bin/java -XX:CompileCommand=&amp;#39;collectmemstat,*.*&amp;#39; -XX:-StressRecompilation -Xcomp -Xbatch -cp $REPROS_JAR de.stuefe.repros.Simple`&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
NMT:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
-                  Compiler (reserved=275KB, committed=275KB)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(malloc=79KB #30) (peak=93KB #35) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(arena=196KB #4) (peak=59292KB #11) &amp;lt;&amp;lt; peak&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Compiler.memory:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
total     NA        RA        #nodes  time    type  #rc thread              method&lt;br/&gt;
(3/1425)&lt;br/&gt;
59063K    13406K    40025K    18345   6,174   c2    2   0x00007fdc2c28e7b0  java/lang/invoke/LambdaForm$Kind::&amp;lt;clinit&amp;gt;(()V) &lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
&lt;br/&gt;
StressRecompile: highest peak during compilation is ~112 MB, same method, sameish node count.&lt;br/&gt;
&lt;br/&gt;
`./images/jdk/bin/java -XX:CompileCommand=&amp;#39;collectmemstat,*.*&amp;#39; -XX:+StressRecompilation -Xcomp -Xbatch -cp $REPROS_JAR de.stuefe.repros.Simple`&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
NMT:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
-                  Compiler (reserved=289KB, committed=289KB)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(malloc=93KB #35) (peak=107KB #40) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(arena=196KB #4) (peak=115628KB #11) &amp;lt;&amp;lt; peak&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Compiler.memory:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
total     NA        RA        #nodes  time    type  #rc thread              method&lt;br/&gt;
(16/1434)&lt;br/&gt;
112M      13469K    94987K    18791   16,451  c2    2   0x00007f790428e7b0  java/lang/invoke/LambdaForm$Kind::&amp;lt;clinit&amp;gt;(()V) &lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
&lt;br/&gt;
60M -&amp;gt; 112M. In both cases, a large part of the memory was allocated in resource areas. Its relative size compared to the total spike size increased.&lt;br/&gt;
&lt;br/&gt;
Therefore it looks to me like we accrue a lot of memory in ResourceArea over recompilations.&lt;br/&gt;
&lt;br/&gt;
As a test, I artificially increased the number of recompilations even further. As expected, memory footprint went up further.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5112247">JDK-8317987</key>
            <summary>C2 recompilations cause high memory footprint</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stuefe">Thomas Stuefe</assignee>
                                    <reporter username="stuefe">Thomas Stuefe</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>footprint</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-22</label>
                            <label>redhat-interest</label>
                    </labels>
                <created>Thu, 12 Oct 2023 00:10:17 -0700</created>
                <updated>Thu, 19 Oct 2023 22:41:21 -0700</updated>
                            <resolved>Thu, 12 Oct 2023 23:44:47 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14618792" author="roboduke" created="Tue, 17 Oct 2023 03:52:39 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/251&quot;&gt;https://git.openjdk.org/jdk21u/pull/251&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-13 12:11:39 +0000</comment>
                            <comment id="14618791" author="stuefe" created="Tue, 17 Oct 2023 03:47:35 -0700"  >Fix request jd21u:&lt;br/&gt;
&lt;br/&gt;
a low-risk fix to save potentially much memory on recompilations in C2.&lt;br/&gt;
&lt;br/&gt;
Applies cleanly, GHAs are green.</comment>
                            <comment id="14617954" author="dukebot" created="Thu, 12 Oct 2023 23:44:46 -0700"  >Changeset: c88b3878&lt;br/&gt;
Author:    Thomas Stuefe &amp;lt;&lt;a href=&apos;mailto:stuefe@openjdk.org&apos;&gt;stuefe@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-13 06:43:42 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/c88b387881a6e9206f9804b4ca966334c65c008a&quot;&gt;https://git.openjdk.org/jdk/commit/c88b387881a6e9206f9804b4ca966334c65c008a&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14617749" author="roboduke" created="Thu, 12 Oct 2023 06:33:31 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16161&quot;&gt;https://git.openjdk.org/jdk/pull/16161&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-12 08:15:12 +0000</comment>
                            <comment id="14617728" author="thartmann" created="Thu, 12 Oct 2023 04:54:10 -0700"  >ILW = High memory consumption of C2 compilation, when recompilation is triggered in C2, disable compilation of affected method = MLM = P4</comment>
                            <comment id="14617692" author="thartmann" created="Thu, 12 Oct 2023 01:21:22 -0700"  >Ah yes, that would make sense.</comment>
                            <comment id="14617691" author="stuefe" created="Thu, 12 Oct 2023 01:19:20 -0700"  >Yes, and I believe there is no archive yet, so no shared classes from CDS. That may have an influence.</comment>
                            <comment id="14617690" author="thartmann" created="Thu, 12 Oct 2023 01:16:16 -0700"  >Interesting observations. Maybe running with the generated image affects class loading and that in turn leads to fewer uncommon traps in C2 and therefore more nodes and a higher memory consumption.</comment>
                            <comment id="14617682" author="stuefe" created="Thu, 12 Oct 2023 00:40:46 -0700"  >Interesting side observation: Invoking java from the generated image (&amp;#39;./images/jdk/bin/java&amp;#39;) jdk directory causes the compiler to use a lot more memory than when I invoke it from the temporary jdk staging directory &amp;#39;./jdk/bin/java&amp;#39;. Node count is also increased in the former case. No clue yet why.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5112914">JDK-8318576</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33gdf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>