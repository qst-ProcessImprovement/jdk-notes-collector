<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:48:21 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8313678] SymbolTable can leak Symbols during cleanup</title>
                <link>https://bugs.openjdk.org/browse/JDK-8313678</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>While investigating a memory leak in one of my applications, I created a simple reproducer in which the symbol table grows unbounded.&lt;br/&gt;
&lt;br/&gt;
It is caused by an accidental increment of the Symbol refcount during bucket cleanup - the concurrentHashTable delete_in_bucket routine uses (abuses?) the lookup function given to it, which for symbol table increments the refcount, under the assumption that a successful lookup means a new reference.&lt;br/&gt;
&lt;br/&gt;
This new test case for test/hotspot/gtest/classfile/test_symbolTable.cpp shows the issue succintly:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;TEST_VM(SymbolTable, test_cleanup_leak) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// Check that dead entry cleanup doesn&amp;#39;t increment refcount of live entry in same bucket.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// Create symbol and release ref, marking it available for cleanup.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol* entry1 = SymbolTable::new_symbol(&amp;quot;hash_collision_123&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;entry1-&amp;gt;decrement_refcount();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// Create a new symbol in the same bucket, which will notice the dead entry and trigger cleanup.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// Note: relies on SymbolTable&amp;#39;s use of String::hashCode which collides for these two values.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol* entry2 = SymbolTable::new_symbol(&amp;quot;hash_collision_397476851&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ASSERT_EQ(entry2-&amp;gt;refcount(), 1) &amp;lt;&amp;lt; &amp;quot;Symbol refcount just created is 1&amp;quot;;&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
This test fails, entry2&amp;#39;s refcount is actually 2 at this point because of the cleanup logic incrementing the refcount via equals. I have a patch to fix this.&lt;br/&gt;
&lt;br/&gt;
Note that I observed this behaviour in a real application which churns through a lot of short-lived LambdaForms classes. I have attached a reproducer (ClassChurn.java) for the more realistic class churn scenario, where this leak (and possibly some others) can be observed. You can observe the RSS of the process growing over time, and the symbol table size can be observed growing via NativeMemoryTracking or jcmd VM.symboltable. I run it with `java -Xms200M -Xmx200m -XX:MaxMetaspaceSize=200M -XX:+AlwaysPreTouch ClassChurn.java`.</description>
                <environment></environment>
        <key id="5107305">JDK-8313678</key>
            <summary>SymbolTable can leak Symbols during cleanup</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ogillespie">Oli Gillespie</assignee>
                                    <reporter username="ogillespie">Oli Gillespie</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>classloading</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>regression</label>
                    </labels>
                <created>Thu, 3 Aug 2023 03:54:04 -0700</created>
                <updated>Fri, 1 Sep 2023 12:27:04 -0700</updated>
                            <resolved>Mon, 14 Aug 2023 09:00:43 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14606315" author="JIRAUSER20804" created="Thu, 24 Aug 2023 01:14:20 -0700"  >21u fix request. Clean backport to fix small memory leak. </comment>
                            <comment id="14605711" author="JIRAUSER20804" created="Tue, 22 Aug 2023 01:56:34 -0700"  >17u fix request. Fairly simple backport to fix small memory leak.</comment>
                            <comment id="14605247" author="roboduke" created="Mon, 21 Aug 2023 01:40:03 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/73&quot;&gt;https://git.openjdk.org/jdk21u/pull/73&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-21 08:32:32 +0000</comment>
                            <comment id="14605040" author="roboduke" created="Fri, 18 Aug 2023 09:36:05 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1674&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1674&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-18 16:31:51 +0000</comment>
                            <comment id="14603750" author="dukebot" created="Mon, 14 Aug 2023 09:00:42 -0700"  >Changeset: 4b2703ad&lt;br/&gt;
Author:    Oli Gillespie &amp;lt;&lt;a href=&apos;mailto:ogillespie@openjdk.org&apos;&gt;ogillespie@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-08-14 15:58:03 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4b2703ad39f8160264eb30c797824cc93a6b56e2&quot;&gt;https://git.openjdk.org/jdk/commit/4b2703ad39f8160264eb30c797824cc93a6b56e2&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14601625" author="roboduke" created="Thu, 3 Aug 2023 04:28:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15137&quot;&gt;https://git.openjdk.org/jdk/pull/15137&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-03 11:21:27 +0000</comment>
                            <comment id="14601613" author="shade" created="Thu, 3 Aug 2023 04:03:39 -0700"  >Seems to be introduced by original &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8195100&quot; title=&quot;Use a low latency hashtable for SymbolTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8195100&quot;&gt;&lt;strike&gt;JDK-8195100&lt;/strike&gt;&lt;/a&gt; in JDK 12, so it should not affect 11u and 8u.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5109106">JDK-8315228</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5109116">JDK-8315237</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5109503">JDK-8315559</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4949608">JDK-8195100</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="104978" name="ClassChurn.java" size="4442" author="ogillespie" created="Thu, 3 Aug 2023 04:31:56 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32lwb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>