<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:21:27 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8309756]  Occasional crashes with pipewire screen capture on Wayland</title>
                <link>https://bugs.openjdk.org/browse/JDK-8309756</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Some tests trigger a not very reproducible crash, and it wasn&amp;#39;t clear if it was a bug in pipewire.&lt;br/&gt;
&lt;br/&gt;
Whilst investigating another issue regarding capture of full screen windows, I found a&lt;br/&gt;
way to make the crash more reproducible.&lt;br/&gt;
&lt;br/&gt;
On my VirtualBox if I had just one CPU configured I could trigger a crash 80% of the time.&lt;br/&gt;
If I configured 6 (my default) it rarely crashed.&lt;br/&gt;
&lt;br/&gt;
The reported error was typically something like&lt;br/&gt;
&lt;br/&gt;
munmap_chunk(): invalid pointer&lt;br/&gt;
&lt;br/&gt;
or&lt;br/&gt;
&lt;br/&gt;
double free or corruption (out)&lt;br/&gt;
&lt;br/&gt;
or&lt;br/&gt;
&lt;br/&gt;
tcache_thread_shutdown(): unaligned tcache chunk detected&lt;br/&gt;
&lt;br/&gt;
and the error came right during clean up and it didn&amp;#39;t crash&lt;br/&gt;
if I commented out calls to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fp_pw_thread_loop_stop(pw.loop);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fp_pw_thread_loop_destroy(pw.loop);&lt;br/&gt;
&lt;br/&gt;
I turned on pipewire debugging at various levels from 1-5, eg&lt;br/&gt;
export PIPEWIRE_DEBUG=2&lt;br/&gt;
but it wasn&amp;#39;t pointing to a smoking gun but it seemed like we perhaps&lt;br/&gt;
had a threading related issue since the number of cores affected reproducibility.&lt;br/&gt;
&lt;br/&gt;
After a bit of studying the code with this in mind I think I found the problem.&lt;br/&gt;
We are using the thread loop functions (ie those mentioned above) and in such&lt;br/&gt;
a case  it is required to use pw_thread_loop_lock() / pw_thread_loop_unlock()&lt;br/&gt;
around calls&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://pipewire.github.io/pipewire/page_thread_loop.html&quot;&gt;https://pipewire.github.io/pipewire/page_thread_loop.html&lt;/a&gt;&lt;br/&gt;
&amp;quot;The lock needs to be held whenever you call any PipeWire function that uses an object associated with this loop.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s not super-specific but I noticed that a previous part of the clean up probably needed these calls but was missing them&lt;br/&gt;
Adding then as shown here seems to completely cure the crashes&lt;br/&gt;
&lt;br/&gt;
--- a/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c&lt;br/&gt;
+++ b/src/java.desktop/unix/native/libawt_xawt/awt/screencast_pipewire.c&lt;br/&gt;
@@ -887,8 +887,10 @@ JNIEXPORT jint JNICALL Java_sun_awt_screencast_ScreencastHelper_getRGBPixelsImpl&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;screenProps-&amp;gt;captureData = NULL;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;screenProps-&amp;gt;shouldCapture = FALSE;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+            fp_pw_thread_loop_lock(pw.loop);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fp_pw_stream_set_active(screenProps-&amp;gt;data-&amp;gt;stream, FALSE);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fp_pw_stream_disconnect(screenProps-&amp;gt;data-&amp;gt;stream);&lt;br/&gt;
+            fp_pw_thread_loop_unlock(pw.loop);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
I also noticed that the function doCleanUp() has&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (screenProps-&amp;gt;data-&amp;gt;stream) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fp_pw_stream_disconnect(screenProps-&amp;gt;data-&amp;gt;stream);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fp_pw_stream_destroy(screenProps-&amp;gt;data-&amp;gt;stream);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;screenProps-&amp;gt;data-&amp;gt;stream = NULL;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}      &lt;br/&gt;
&lt;br/&gt;
This&lt;br/&gt;
(1) Again doesn&amp;#39;t have any locking but it doesn&amp;#39;t seem to be causing a problem here but I think should be added anyway&lt;br/&gt;
(2) Seems to repeat the disconnect call. I&amp;#39;m inclined to leave this alone for now since it doesn&amp;#39;t seem to cause harm&lt;br/&gt;
but I don&amp;#39;t know that its guaranteed to be idempotent.  This needs more analysis probably under a separate bug id.</description>
                <environment></environment>
        <key id="5102852">JDK-8309756</key>
            <summary> Occasional crashes with pipewire screen capture on Wayland</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="prr">Philip Race</assignee>
                                    <reporter username="prr">Philip Race</reporter>
                        <labels>
                            <label>hgupdate-sync</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>noreg-other</label>
                            <label>sn_146</label>
                            <label>wayland</label>
                    </labels>
                <created>Fri, 9 Jun 2023 15:18:15 -0700</created>
                <updated>Tue, 24 Sep 2024 00:48:02 -0700</updated>
                            <resolved>Thu, 15 Jun 2023 15:50:37 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>client-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14689785" author="mbaesken" created="Mon, 15 Jul 2024 04:52:14 -0700"  >jdk17u-dev backport request&lt;br/&gt;
I would like to have the patch in jdk17u-dev as well, for parity with Oracle JDK. The backport is clean and low to medium risk.</comment>
                            <comment id="14689381" author="roboduke" created="Fri, 12 Jul 2024 05:30:29 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2712&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2712&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-12 12:24:18 +0000</comment>
                            <comment id="14590024" author="roboduke" created="Fri, 16 Jun 2023 13:40:19 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/25&quot;&gt;https://git.openjdk.org/jdk21/pull/25&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-16 20:33:32 +0000</comment>
                            <comment id="14589773" author="dukebot" created="Thu, 15 Jun 2023 15:50:36 -0700"  >Changeset: d3d0dbc3&lt;br/&gt;
Author:    Phil Race &amp;lt;&lt;a href=&apos;mailto:prr@openjdk.org&apos;&gt;prr@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-15 22:47:57 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/d3d0dbc36369da0c17a66f8b633e73a150ab8c4f&quot;&gt;https://git.openjdk.org/jdk/commit/d3d0dbc36369da0c17a66f8b633e73a150ab8c4f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14588629" author="roboduke" created="Mon, 12 Jun 2023 14:29:56 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14428&quot;&gt;https://git.openjdk.org/jdk/pull/14428&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-12 21:24:16 +0000</comment>
                            <comment id="14588273" author="prr" created="Fri, 9 Jun 2023 15:19:38 -0700"  >testing looked OK with just the first extra lock/unlock pair but I am going to re-test with the 2nd pair as well before sending out a review</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5103449">JDK-8310256</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103653">JDK-8310432</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133397">JDK-8335635</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134305">JDK-8336431</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5136153">JDK-8337842</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5139282">JDK-8340305</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31ujn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="196"><![CDATA[java.awt]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>