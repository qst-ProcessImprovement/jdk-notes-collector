<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:37:02 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8315503] G1: Code root scan causes long GC pauses due to imbalanced iteration</title>
                <link>https://bugs.openjdk.org/browse/JDK-8315503</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>In some internal test we found that the current claiming policy of one region per thread can cause huge imbalance and very long pause times, see the log:&lt;br/&gt;
&lt;br/&gt;
[4179,965s][gc,phases      ] GC(273)   Evacuate Collection Set: 812,18ms&lt;br/&gt;
[..]&lt;br/&gt;
[4179,965s][gc,phases      ] GC(273)     Code Root Scan (ms):           Min: 0,00, Avg: 59,03, Max: 775,12, Diff: 775,12, Sum: 944,44, Workers: 16&lt;br/&gt;
[4179,965s][gc,phases      ] GC(273)     Object Copy (ms):              Min: 26,74, Avg: 101,06, Max: 118,92, Diff: 92,18, Sum: 1616,98, Workers: 16&lt;br/&gt;
[4179,965s][gc,phases      ] GC(273)     Termination (ms):              Min: 0,03, Avg: 643,90, Max: 690,96, Diff: 690,93, Sum: 10302,47, Workers: 16&lt;br/&gt;
[4179,965s][gc,phases      ] GC(273)       Termination Attempts:          Min: 1, Avg:  1,0, Max: 1, Diff: 0, Sum: </description>
                <environment></environment>
        <key id="5109442">JDK-8315503</key>
            <summary>G1: Code root scan causes long GC pauses due to imbalanced iteration</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tschatzl">Thomas Schatzl</assignee>
                                    <reporter username="tschatzl">Thomas Schatzl</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>gc-g1</label>
                            <label>gc-g1-remset</label>
                            <label>gc-pending-review</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>performance</label>
                    </labels>
                <created>Fri, 1 Sep 2023 02:17:53 -0700</created>
                <updated>Tue, 3 Jun 2025 05:39:49 -0700</updated>
                            <resolved>Mon, 2 Oct 2023 00:46:49 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                                                            <comments>
                            <comment id="14663727" author="goetz" created="Mon, 8 Apr 2024 13:43:05 -0700"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.4-oracle.&lt;br/&gt;
Medium to larger risk. Central component, larger change, has already3 follow-up fixes. &lt;br/&gt;
Hung since 10/23, released with jdk22, so it underwent lots of testing. &lt;br/&gt;
I resolved 4 hunks. I inlcude follow-ups &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8317440&quot; title=&quot;Lock rank checking fails when code root set is modified with the Servicelock held after JDK-8315503&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8317440&quot;&gt;&lt;strike&gt;JDK-8317440&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318720&quot; title=&quot;G1: Memory leak in G1CodeRootSet after JDK-8315503&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318720&quot;&gt;&lt;strike&gt;JDK-8318720&lt;/strike&gt;&lt;/a&gt; in this change (both clean on top) and &lt;br/&gt;
backport larger &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8323685&quot; title=&quot;PrintSystemDictionaryAtExit has mutex rank assert&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8323685&quot;&gt;&lt;strike&gt;JDK-8323685&lt;/strike&gt;&lt;/a&gt; as dependent PR.&lt;br/&gt;
Test passes. SAP nightly testing passed.</comment>
                            <comment id="14663715" author="roboduke" created="Mon, 8 Apr 2024 13:06:48 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/476&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/476&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-08 20:00:14 +0000</comment>
                            <comment id="14615144" author="dukebot" created="Mon, 2 Oct 2023 00:46:48 -0700"  >Changeset: 795e5dcc&lt;br/&gt;
Author:    Thomas Schatzl &amp;lt;&lt;a href=&apos;mailto:tschatzl@openjdk.org&apos;&gt;tschatzl@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-02 07:35:02 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/795e5dcc856491031b87a1f2a942681a582673ab&quot;&gt;https://git.openjdk.org/jdk/commit/795e5dcc856491031b87a1f2a942681a582673ab&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14614736" author="tschatzl" created="Thu, 28 Sep 2023 08:31:58 -0700"  >Attached a reproducer for this issue heavily based on the &amp;quot;CodeCacheStress&amp;quot; jmh benchmark.&lt;br/&gt;
&lt;br/&gt;
Run with something like:&lt;br/&gt;
&lt;br/&gt;
java -Xlog:gc,gc+phases=debug:/tmp/ccstress.log CCStress.java &lt;br/&gt;
&lt;br/&gt;
JDK22 pre-change results:&lt;br/&gt;
&lt;br/&gt;
ccstress.jdk22:[1.359s][debug][gc,phases] GC(0)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max:  5.9, Diff:  5.9, Sum: 14.3, Workers: 28&lt;br/&gt;
ccstress.jdk22:[1.738s][debug][gc,phases] GC(1)     Code Root Scan (ms):           Min:  0.0, Avg:  0.3, Max:  7.7, Diff:  7.7, Sum:  7.9, Workers: 28&lt;br/&gt;
ccstress.jdk22:[2.462s][debug][gc,phases] GC(2)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 12.9, Diff: 12.9, Sum: 14.1, Workers: 28&lt;br/&gt;
ccstress.jdk22:[5.167s][debug][gc,phases] GC(3)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 11.8, Diff: 11.8, Sum: 12.7, Workers: 28&lt;br/&gt;
ccstress.jdk22:[7.173s][debug][gc,phases] GC(4)     Code Root Scan (ms):           Min:  0.0, Avg:  0.6, Max: 15.4, Diff: 15.4, Sum: 17.2, Workers: 28&lt;br/&gt;
ccstress.jdk22:[9.111s][debug][gc,phases] GC(5)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 13.9, Diff: 13.9, Sum: 14.2, Workers: 28&lt;br/&gt;
ccstress.jdk22:[10.819s][debug][gc,phases] GC(6)     Code Root Scan (ms):           Min:  0.0, Avg:  0.6, Max: 17.3, Diff: 17.3, Sum: 17.8, Workers: 28&lt;br/&gt;
ccstress.jdk22:[12.445s][debug][gc,phases] GC(7)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 14.6, Diff: 14.6, Sum: 14.7, Workers: 28&lt;br/&gt;
ccstress.jdk22:[14.154s][debug][gc,phases] GC(8)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 14.3, Diff: 14.3, Sum: 14.4, Workers: 28&lt;br/&gt;
ccstress.jdk22:[16.285s][debug][gc,phases] GC(9)     Code Root Scan (ms):           Min:  0.0, Avg:  0.7, Max: 18.8, Diff: 18.8, Sum: 19.0, Workers: 28&lt;br/&gt;
ccstress.jdk22:[18.209s][debug][gc,phases] GC(10)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 15.2, Diff: 15.2, Sum: 15.4, Workers: 28&lt;br/&gt;
ccstress.jdk22:[20.140s][debug][gc,phases] GC(11)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 14.2, Diff: 14.2, Sum: 14.4, Workers: 28&lt;br/&gt;
ccstress.jdk22:[22.040s][debug][gc,phases] GC(12)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 13.1, Diff: 13.1, Sum: 13.3, Workers: 28&lt;br/&gt;
ccstress.jdk22:[24.016s][debug][gc,phases] GC(13)     Code Root Scan (ms):           Min:  0.0, Avg:  0.7, Max: 19.5, Diff: 19.5, Sum: 19.7, Workers: 28&lt;br/&gt;
ccstress.jdk22:[25.970s][debug][gc,phases] GC(14)     Code Root Scan (ms):           Min:  0.0, Avg:  0.5, Max: 14.3, Diff: 14.3, Sum: 14.5, Workers: 28&lt;br/&gt;
ccstress.jdk22:[27.885s][debug][gc,phases] GC(15)     Code Root Scan (ms):           Min:  0.0, Avg:  0.6, Max: 18.0, Diff: 18.0, Sum: 18.1, Workers: 28&lt;br/&gt;
ccstress.jdk22:[29.785s][debug][gc,phases] GC(16)     Code Root Scan (ms):           Min:  0.0, Avg:  0.1, Max:  1.5, Diff:  1.5, Sum:  1.6, Workers: 28&lt;br/&gt;
ccstress.jdk22:[31.689s][debug][gc,phases] GC(17)     Code Root Scan (ms):           Min:  0.0, Avg:  0.1, Max:  2.5, Diff:  2.5, Sum:  2.7, Workers: 28&lt;br/&gt;
ccstress.jdk22:[33.589s][debug][gc,phases] GC(18)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  1.1, Diff:  1.1, Sum:  1.2, Workers: 28&lt;br/&gt;
ccstress.jdk22:[35.536s][debug][gc,phases] GC(19)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  0.7, Diff:  0.7, Sum:  0.8, Workers: 28&lt;br/&gt;
ccstress.jdk22:[37.427s][debug][gc,phases] GC(20)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  0.3, Diff:  0.3, Sum:  0.4, Workers: 28&lt;br/&gt;
ccstress.jdk22:[39.315s][debug][gc,phases] GC(21)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  0.9, Diff:  0.9, Sum:  1.0, Workers: 28&lt;br/&gt;
ccstress.jdk22:[41.247s][debug][gc,phases] GC(22)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.1, Workers: 28&lt;br/&gt;
ccstress.jdk22:[43.168s][debug][gc,phases] GC(23)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.1, Workers: 28&lt;br/&gt;
ccstress.jdk22:[45.059s][debug][gc,phases] GC(24)     Code Root Scan (ms):           Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.1, Workers: 28&lt;br/&gt;
&lt;br/&gt;
after:&lt;br/&gt;
&lt;br/&gt;
ccstress.log:[1.334s][debug][gc,phases] GC(0)     Code Root Scan (ms):           Min: 0.01, Avg: 1.33, Max: 3.37, Diff: 3.36, Sum: 37.32, Workers: 28&lt;br/&gt;
ccstress.log:[1.702s][debug][gc,phases] GC(1)     Code Root Scan (ms):           Min: 0.01, Avg: 1.26, Max: 2.00, Diff: 1.99, Sum: 35.25, Workers: 28&lt;br/&gt;
ccstress.log:[2.390s][debug][gc,phases] GC(2)     Code Root Scan (ms):           Min: 0.02, Avg: 1.18, Max: 2.66, Diff: 2.64, Sum: 33.12, Workers: 28&lt;br/&gt;
ccstress.log:[5.026s][debug][gc,phases] GC(3)     Code Root Scan (ms):           Min: 0.10, Avg: 0.88, Max: 2.30, Diff: 2.19, Sum: 24.71, Workers: 28&lt;br/&gt;
ccstress.log:[7.043s][debug][gc,phases] GC(4)     Code Root Scan (ms):           Min: 0.13, Avg: 3.97, Max: 4.82, Diff: 4.69, Sum: 111.30, Workers: 28&lt;br/&gt;
ccstress.log:[8.947s][debug][gc,phases] GC(5)     Code Root Scan (ms):           Min: 0.10, Avg: 3.60, Max: 4.56, Diff: 4.47, Sum: 100.89, Workers: 28&lt;br/&gt;
ccstress.log:[10.671s][debug][gc,phases] GC(6)     Code Root Scan (ms):           Min: 0.11, Avg: 2.68, Max: 3.92, Diff: 3.81, Sum: 74.96, Workers: 28&lt;br/&gt;
ccstress.log:[12.403s][debug][gc,phases] GC(7)     Code Root Scan (ms):           Min: 0.12, Avg: 2.47, Max: 4.08, Diff: 3.96, Sum: 69.14, Workers: 28&lt;br/&gt;
ccstress.log:[14.082s][debug][gc,phases] GC(8)     Code Root Scan (ms):           Min: 0.09, Avg: 2.12, Max: 3.77, Diff: 3.68, Sum: 59.34, Workers: 28&lt;br/&gt;
ccstress.log:[15.698s][debug][gc,phases] GC(9)     Code Root Scan (ms):           Min: 0.13, Avg: 2.20, Max: 3.14, Diff: 3.01, Sum: 61.62, Workers: 28&lt;br/&gt;
ccstress.log:[17.256s][debug][gc,phases] GC(10)     Code Root Scan (ms):           Min: 0.09, Avg: 1.03, Max: 2.88, Diff: 2.79, Sum: 28.84, Workers: 28&lt;br/&gt;
ccstress.log:[18.788s][debug][gc,phases] GC(11)     Code Root Scan (ms):           Min: 0.10, Avg: 1.84, Max: 4.19, Diff: 4.09, Sum: 51.48, Workers: 28&lt;br/&gt;
ccstress.log:[20.297s][debug][gc,phases] GC(12)     Code Root Scan (ms):           Min: 0.10, Avg: 2.72, Max: 4.21, Diff: 4.11, Sum: 76.05, Workers: 28&lt;br/&gt;
ccstress.log:[21.853s][debug][gc,phases] GC(13)     Code Root Scan (ms):           Min: 0.10, Avg: 1.57, Max: 2.95, Diff: 2.84, Sum: 44.00, Workers: 28&lt;br/&gt;
ccstress.log:[23.483s][debug][gc,phases] GC(14)     Code Root Scan (ms):           Min: 0.09, Avg: 2.14, Max: 4.51, Diff: 4.41, Sum: 60.03, Workers: 28&lt;br/&gt;
ccstress.log:[25.070s][debug][gc,phases] GC(15)     Code Root Scan (ms):           Min: 0.10, Avg: 2.44, Max: 3.80, Diff: 3.70, Sum: 68.32, Workers: 28&lt;br/&gt;
ccstress.log:[26.579s][debug][gc,phases] GC(16)     Code Root Scan (ms):           Min: 0.08, Avg: 0.13, Max: 0.60, Diff: 0.51, Sum: 3.63, Workers: 28&lt;br/&gt;
ccstress.log:[28.092s][debug][gc,phases] GC(17)     Code Root Scan (ms):           Min: 0.09, Avg: 0.14, Max: 0.81, Diff: 0.72, Sum: 3.89, Workers: 28&lt;br/&gt;
ccstress.log:[29.588s][debug][gc,phases] GC(18)     Code Root Scan (ms):           Min: 0.09, Avg: 0.13, Max: 0.64, Diff: 0.55, Sum: 3.53, Workers: 28&lt;br/&gt;
ccstress.log:[31.089s][debug][gc,phases] GC(19)     Code Root Scan (ms):           Min: 0.08, Avg: 0.12, Max: 0.51, Diff: 0.43, Sum: 3.46, Workers: 28&lt;br/&gt;
ccstress.log:[32.588s][debug][gc,phases] GC(20)     Code Root Scan (ms):           Min: 0.09, Avg: 0.12, Max: 0.30, Diff: 0.21, Sum: 3.33, Workers: 28&lt;br/&gt;
ccstress.log:[34.082s][debug][gc,phases] GC(21)     Code Root Scan (ms):           Min: 0.08, Avg: 0.12, Max: 0.23, Diff: 0.15, Sum: 3.38, Workers: 28&lt;br/&gt;
ccstress.log:[35.629s][debug][gc,phases] GC(22)     Code Root Scan (ms):           Min: 0.09, Avg: 0.12, Max: 0.20, Diff: 0.11, Sum: 3.31, Workers: 28&lt;br/&gt;
ccstress.log:[37.158s][debug][gc,phases] GC(23)     Code Root Scan (ms):           Min: 0.08, Avg: 0.11, Max: 0.13, Diff: 0.05, Sum: 3.07, Workers: 28&lt;br/&gt;
ccstress.log:[38.692s][debug][gc,phases] GC(24)     Code Root Scan (ms):           Min: 0.09, Avg: 0.11, Max: 0.14, Diff: 0.04, Sum: 3.13, Workers: 28&lt;br/&gt;
ccstress.log:[40.182s][debug][gc,phases] GC(25)     Code Root Scan (ms):           Min: 0.09, Avg: 0.11, Max: 0.13, Diff: 0.04, Sum: 3.10, Workers: 28&lt;br/&gt;
ccstress.log:[41.679s][debug][gc,phases] GC(26)     Code Root Scan (ms):           Min: 0.09, Avg: 0.12, Max: 0.15, Diff: 0.05, Sum: 3.42, Workers: 28&lt;br/&gt;
ccstress.log:[43.169s][debug][gc,phases] GC(27)     Code Root Scan (ms):           Min: 0.09, Avg: 0.12, Max: 0.15, Diff: 0.06, Sum: 3.36, Workers: 28&lt;br/&gt;
ccstress.log:[44.690s][debug][gc,phases] GC(28)     Code Root Scan (ms):           Min: 0.10, Avg: 0.12, Max: 0.16, Diff: 0.07, Sum: 3.36, Workers: 28&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
With the change there is more cpu usage if there is not that much parallelism to extract, but it is much better in case of actual unbalanced code root sets.</comment>
                            <comment id="14612460" author="roboduke" created="Wed, 20 Sep 2023 00:27:44 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15811&quot;&gt;https://git.openjdk.org/jdk/pull/15811&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-19 08:04:23 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5126002">JDK-8329514</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127364">JDK-8330652</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="5111148">JDK-8317007</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5110235">JDK-8316212</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="5160252">JDK-8358342</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="4935501">JDK-8184746</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5015038">JDK-8242043</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5113088">JDK-8318720</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111641">JDK-8317440</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5129650">JDK-8332420</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121005">JDK-8326092</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4302452">JDK-7145569</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="106614" name="ccstress.tar.gz" size="5344" author="tschatzl" created="Thu, 28 Sep 2023 08:27:49 -0700"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5117455">JDK-8322415</subtask>
                                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32z37:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17354"><![CDATA[b18]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>