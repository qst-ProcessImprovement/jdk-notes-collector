<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:08:26 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8327036] [macosx-aarch64] SIGBUS in MarkActivationClosure::do_code_blob reached from Unsafe_CopySwapMemory0</title>
                <link>https://bugs.openjdk.org/browse/JDK-8327036</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Unsafe_CopySwapMemory0 uses JVM_ENTRY_FROM_LEAF which transitions form native into the vm using ThreadInVMfromNative.&lt;br/&gt;
It is an invariant on Mac OS AARCH64 that a thread must have WXWrite before doing the transition into the vm [1].&lt;br/&gt;
&lt;br/&gt;
In Unsafe_CopySwapMemory0 we don&amp;#39;t switch to WXWrite. Because of this we can get at SIGBUS if a handshake is pending where we modify a nmethod in MarkActivationClosure::do_code_blob&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000000171f24000,0x0000000172127000],  sp=0x0000000172124cd0,  free space=2051k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.dylib+0xfc6c60]  MarkActivationClosure::do_code_blob(CodeBlob*)+0x74&lt;br/&gt;
V  [libjvm.dylib+0x1022a84]  JavaThread::nmethods_do(CodeBlobClosure*)+0x114&lt;br/&gt;
V  [libjvm.dylib+0x75c4f8]  HandshakeOperation::do_handshake(JavaThread*)+0x70&lt;br/&gt;
V  [libjvm.dylib+0x75e054]  HandshakeState::process_by_self(bool)+0x3a8&lt;br/&gt;
V  [libjvm.dylib+0xe0f130]  SafepointMechanism::process(JavaThread*, bool)+0x5c&lt;br/&gt;
V  [libjvm.dylib+0x535758]  ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState)+0x1f8&lt;br/&gt;
V  [libjvm.dylib+0x4334f0]  ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*)+0xb0&lt;br/&gt;
V  [libjvm.dylib+0x106832c]  Unsafe_CopySwapMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long, long)+0xdc&lt;br/&gt;
J 915  jdk.internal.misc.Unsafe.copySwapMemory0(Ljava/lang/Object;JLjava/lang/Object;JJJ)V &lt;a href=&apos;mailto:java.base@17.0.11-internal&apos;&gt;java.base@17.0.11-internal&lt;/a&gt; (0 bytes) @ 0x0000000115f636dc [0x0000000115f63640+0x000000000000009c]&lt;br/&gt;
[...]&lt;br/&gt;
&lt;br/&gt;
While we cannot get the very same crash in jdk21 (nmethod sweeper was removed in jdk20 with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8290025&quot; title=&quot;Remove the Sweeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8290025&quot;&gt;&lt;strike&gt;JDK-8290025&lt;/strike&gt;&lt;/a&gt;) other handshakes that modify the code cache (e.g. DeoptimizeMarkedClosure) will crash too.&lt;br/&gt;
&lt;br/&gt;
Reproduce:&lt;br/&gt;
It&amp;#39;s not easy to reproduce this directly but when running test/jdk/sun/nio/cs/FindDecoderBugs.java with -XX:+AssertWXAtThreadSync on Mac OS AARCH64 a corresponding assertion fails because of the issue.&lt;br/&gt;
&lt;br/&gt;
Note that the issue is fixed with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310644&quot; title=&quot;Make panama memory segment close use async handshakes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310644&quot;&gt;&lt;strike&gt;JDK-8310644&lt;/strike&gt;&lt;/a&gt; in JDK 22 and later as mdoerr pointed out in his comment below.&lt;br/&gt;
JDK 11 is not affected because there&amp;#39;s no backport of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8302736&quot; title=&quot;Major performance regression in Math.log on aarch64&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8302736&quot;&gt;&lt;strike&gt;JDK-8302736&lt;/strike&gt;&lt;/a&gt; to JDK 11 which removes switching to WXWrite from VM_LEAF_BASE used by UNSAFE_LEAF.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/0583f7357480c0500daa82f490b2fcc05f2fb65a/src/hotspot/share/runtime/interfaceSupport.inline.hpp#L253-L259&quot;&gt;https://github.com/openjdk/jdk/blob/0583f7357480c0500daa82f490b2fcc05f2fb65a/src/hotspot/share/runtime/interfaceSupport.inline.hpp#L253-L259&lt;/a&gt;</description>
                <environment></environment>
        <key id="5122810">JDK-8327036</key>
            <summary>[macosx-aarch64] SIGBUS in MarkActivationClosure::do_code_blob reached from Unsafe_CopySwapMemory0</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rrich">Richard Reingruber</assignee>
                                    <reporter username="rrich">Richard Reingruber</reporter>
                        <labels>
                            <label>22-na</label>
                            <label>jdk17u-critical-request</label>
                            <label>jdk17u-critical-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Thu, 29 Feb 2024 02:53:11 -0800</created>
                <updated>Wed, 1 May 2024 10:29:15 -0700</updated>
                            <resolved>Wed, 6 Mar 2024 01:08:00 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>21.0.4</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14669632" author="dukebot" created="Wed, 1 May 2024 10:25:12 -0700"  >Changeset: ad1d3248&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-03-06 09:05:25 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk21u/commit/ad1d32484a8130c9b641cff38c07e8544b3fd271&quot;&gt;https://git.openjdk.org/jdk21u/commit/ad1d32484a8130c9b641cff38c07e8544b3fd271&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14656717" author="roboduke" created="Tue, 12 Mar 2024 03:17:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u/pull/391&quot;&gt;https://git.openjdk.org/jdk17u/pull/391&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-12 10:12:11 +0000</comment>
                            <comment id="14656716" author="goetz" created="Tue, 12 Mar 2024 03:11:44 -0700"  >Critical request [17u]&lt;br/&gt;
&lt;br/&gt;
I think we should bring this to 17.0.11. Why?&lt;br/&gt;
&amp;nbsp;* we now figured that this is a regression in 17.0.9&lt;br/&gt;
&amp;nbsp;* the change is simple and of low risk, similar coding is used in other places&lt;br/&gt;
&amp;nbsp;* the effect is a crash which is a severe error&lt;br/&gt;
&amp;nbsp;* the problem can occur in many scenarios</comment>
                            <comment id="14655744" author="roboduke" created="Fri, 8 Mar 2024 01:24:22 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2269&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2269&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-06 09:17:26 +0000</comment>
                            <comment id="14655072" author="rrich" created="Wed, 6 Mar 2024 01:24:45 -0800"  >Fix request (17u) &lt;br/&gt;
&lt;br/&gt;
17u is affected because test/jdk/sun/nio/cs/FindDecoderBugs.java hits the assertion with -XX:+AssertWXAtThreadSync.&lt;br/&gt;
I would like to do the backport to avoid the crashes with SIGBUS.&lt;br/&gt;
The backport applies cleanly. Because of this, the testing, and the small size of the fix I consider the risk low. &lt;br/&gt;
&lt;br/&gt;
Testing:&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve verified that test/jdk/sun/nio/cs/FindDecoderBugs.java succeeds with -XX:+AssertWXAtThreadSync.&lt;br/&gt;
&lt;br/&gt;
GHA: riscv64 failure is caused by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8326960&quot;&gt;https://bugs.openjdk.org/browse/JDK-8326960&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests (also with ParallelGC).&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le.</comment>
                            <comment id="14655055" author="dukebot" created="Wed, 6 Mar 2024 01:07:59 -0800"  >Changeset: ad1d3248&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-03-06 09:05:25 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/commit/ad1d32484a8130c9b641cff38c07e8544b3fd271&quot;&gt;https://git.openjdk.org/jdk21u-dev/commit/ad1d32484a8130c9b641cff38c07e8544b3fd271&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14654831" author="rrich" created="Tue, 5 Mar 2024 08:37:23 -0800"  >Fix request (21u)&lt;br/&gt;
&lt;br/&gt;
I would like to fix the issue to avoid the crashes with SIGBUS.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310644&quot; title=&quot;Make panama memory segment close use async handshakes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310644&quot;&gt;&lt;strike&gt;JDK-8310644&lt;/strike&gt;&lt;/a&gt; fixed this issue as a side effect in JDK 22. I don&amp;#39;t want to backport &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310644&quot; title=&quot;Make panama memory segment close use async handshakes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310644&quot;&gt;&lt;strike&gt;JDK-8310644&lt;/strike&gt;&lt;/a&gt; though because it is comparatively large.&lt;br/&gt;
&lt;br/&gt;
Testing:&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve verified that test/jdk/sun/nio/cs/FindDecoderBugs.java succeeds with -XX:+AssertWXAtThreadSync.&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests (also with ParallelGC).&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le.&lt;br/&gt;
&lt;br/&gt;
Because of the testing and the small size of the fix I consider the risk low.</comment>
                            <comment id="14653730" author="mdoerr" created="Thu, 29 Feb 2024 23:34:13 -0800"  >Issue is fixed with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310644&quot; title=&quot;Make panama memory segment close use async handshakes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310644&quot;&gt;&lt;strike&gt;JDK-8310644&lt;/strike&gt;&lt;/a&gt; in JDK 22 and later. JDK 21 and older need this fix.</comment>
                            <comment id="14653726" author="roboduke" created="Thu, 29 Feb 2024 23:18:06 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/305&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/305&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-29 14:49:21 +0000</comment>
                            <comment id="14653538" author="mbaesken" created="Thu, 29 Feb 2024 07:17:27 -0800"  >Seems &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8284072&quot;&gt;https://bugs.openjdk.org/browse/JDK-8284072&lt;/a&gt; dealt with similar issues, these ThreadWXEnable - related issues on macOS aarch64 show up causing crashes here and there every year ... </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5123760">JDK-8327777</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5124032">JDK-8328031</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5124033">JDK-8328032</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5124303">JDK-8328252</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5049260">JDK-8266889</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5094211">JDK-8302736</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5123981">JDK-8327990</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5126779">JDK-8330171</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3586b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17304"><![CDATA[b01]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>