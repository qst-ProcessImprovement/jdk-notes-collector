<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:19:27 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8296389] C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors</title>
                <link>https://bugs.openjdk.org/browse/JDK-8296389</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>During fuzzer work of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280126&quot; title=&quot;C2: detect and remove dead irreducible loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280126&quot;&gt;&lt;strike&gt;JDK-8280126&lt;/strike&gt;&lt;/a&gt;, I found the same assert but with irreducible loops. I suspected it would also be possible to trigger the same bug but without irreducible loops, so I went and constructed an R3.java, using various tricks.&lt;br/&gt;
&lt;br/&gt;
To reproduce, use either:&lt;br/&gt;
$ java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:+PrintOptoAssembly -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:CompileCommand=compileonly,R3::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 R3.java&lt;br/&gt;
$ java -Xcomp -XX:CompileCommand=compileonly,R3::test -XX:PerMethodTrapLimit=0 R3.java&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/node.cpp:830), pid=111698, tid=111711&lt;br/&gt;
#  assert(idx &amp;lt; _cnt) failed: oob&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x1095a1e]  Node::del_req(unsigned int)+0x26&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   5472   83    b        R3::test (96 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f3430cdc000,0x00007f3430ddd000],  sp=0x00007f3430dd7f90,  free space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x1095a1e]  Node::del_req(unsigned int)+0x26  (node.cpp:830)&lt;br/&gt;
V  [libjvm.so+0x656230]  PhaseCFG::convert_NeverBranch_to_Goto(Block*)+0x232  (block.cpp:653)&lt;br/&gt;
V  [libjvm.so+0x65669c]  PhaseCFG::remove_empty_blocks()+0x100  (block.cpp:744)&lt;br/&gt;
V  [libjvm.so+0x89bb42]  Compile::Code_Gen()+0x354  (compile.cpp:2978)&lt;br/&gt;
V  [libjvm.so+0x8920fd]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159f  (compile.cpp:863)&lt;br/&gt;
V  [libjvm.so+0x780a29]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x179  (c2compiler.cpp:113)&lt;br/&gt;
V  [libjvm.so+0x8b0c56]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x916  (compileBroker.cpp:2240)&lt;br/&gt;
V  [libjvm.so+0x8af8bf]  CompileBroker::compiler_thread_loop()+0x3ed  (compileBroker.cpp:1916)&lt;br/&gt;
V  [libjvm.so+0x8d0008]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x72  (compilerThread.cpp:58)&lt;br/&gt;
V  [libjvm.so+0xc5df2a]  JavaThread::thread_main_inner()+0x144  (javaThread.cpp:699)&lt;br/&gt;
V  [libjvm.so+0xc5dde2]  JavaThread::run()+0x182  (javaThread.cpp:684)&lt;br/&gt;
V  [libjvm.so+0x132fe8f]  Thread::call_run()+0x195  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x10dd81b]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)&lt;br/&gt;
&lt;br/&gt;
TraceLoopOpts:&lt;br/&gt;
PHASE_PHASEIDEALLOOP1 start&lt;br/&gt;
Counted          Loop: N237/N231  counted [76,0),-1 (-1 iters) &lt;br/&gt;
Parallel IV: 59     Loop: N237/N231  counted [76,0),-1 (-1 iters)  has_sfpt strip_mined&lt;br/&gt;
Counted          Loop: N252/N136  counted [0,4),+1 (-1 iters) &lt;br/&gt;
Loop: N0/N0  has_sfpt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N236/N235 &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Loop: N237/N231  counted [76,0),-1 (-1 iters)  has_sfpt strip_mined&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N251/N250 &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Loop: N252/N136  counted [0,4),+1 (-1 iters)  has_sfpt strip_mined&lt;br/&gt;
Empty with zero trip guard       Loop: N237/N231  counted [76,0),-1 (-1 iters)  has_sfpt strip_mined&lt;br/&gt;
MaxUnroll  4     Loop: N252/N136  counted [0,4),+1 (2147483648 iters)  has_sfpt strip_mined&lt;br/&gt;
Unroll 2( 4)     Loop: N252/N136  counted [0,4),+1 (2147483648 iters)  has_sfpt strip_mined&lt;br/&gt;
PHASE_PHASEIDEALLOOP1 end&lt;br/&gt;
PHASE_PHASEIDEALLOOP2 start&lt;br/&gt;
Loop: N0/N0  has_sfpt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N251/N250  sfpts={ 253 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Loop: N277/N136  counted [0,4),+2 (2147483648 iters)  has_sfpt strip_mined&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N309/N170  sfpts={ 170 }&lt;br/&gt;
MaxUnroll  2     Loop: N277/N136  counted [0,4),+2 (2147483648 iters)  has_sfpt strip_mined&lt;br/&gt;
Unroll 4( 2)     Loop: N277/N136  counted [0,4),+2 (2147483648 iters)  has_sfpt strip_mined&lt;br/&gt;
Peel           Loop: N309/N170  sfpts={ 170 }&lt;br/&gt;
PHASE_PHASEIDEALLOOP2 end&lt;br/&gt;
PHASE_PHASEIDEALLOOP3 start&lt;br/&gt;
Loop: N0/N0  has_sfpt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N309/N170  sfpts={ 170 }&lt;br/&gt;
PHASE_PHASEIDEALLOOP3 end&lt;br/&gt;
Loop: N0/N0  has_sfpt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Loop: N309/N170  sfpts={ 170 }</description>
                <environment></environment>
        <key id="5086811">JDK-8296389</key>
            <summary>C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>c2</label>
                            <label>c2-loopopts</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk20u-fix-SQE-ok-next</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-20</label>
                    </labels>
                <created>Fri, 4 Nov 2022 04:26:48 -0700</created>
                <updated>Thu, 20 Mar 2025 20:22:37 -0700</updated>
                            <resolved>Mon, 12 Dec 2022 04:11:56 -0800</resolved>
                                    <version>17</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14570319" author="roboduke" created="Wed, 29 Mar 2023 03:46:24 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/26&quot;&gt;https://git.openjdk.org/jdk20u/pull/26&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-29 10:38:23 +0000</comment>
                            <comment id="14570315" author="thartmann" created="Wed, 29 Mar 2023 03:38:19 -0700"  >Fix Request (JDK 20u)&lt;br/&gt;
Resolves an assert during C2 compilation. The fix is medium risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.</comment>
                            <comment id="14551306" author="goetz" created="Mon, 16 Jan 2023 00:18:52 -0800"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.7-oracle.&lt;br/&gt;
Follow up for 8294672.&lt;br/&gt;
I had to adapt the code slightly and included a follow up for a build fix.&lt;br/&gt;
Tests pass. SAP nightly testing passed.</comment>
                            <comment id="14550372" author="roboduke" created="Wed, 11 Jan 2023 07:39:53 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1059&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1059&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-11 15:29:29 +0000</comment>
                            <comment id="14544591" author="dukebot" created="Mon, 12 Dec 2022 04:11:56 -0800"  >Changeset: fabda246&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2022-12-12 12:11:02 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/fabda246960cfdfff13c5a87de53d97169248172&quot;&gt;https://git.openjdk.org/jdk/commit/fabda246960cfdfff13c5a87de53d97169248172&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14542235" author="roboduke" created="Fri, 2 Dec 2022 05:55:28 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11481&quot;&gt;https://git.openjdk.org/jdk/pull/11481&lt;/a&gt;&lt;br/&gt;
Date: 2022-12-02 12:48:31 +0000</comment>
                            <comment id="14534873" author="chagedorn" created="Fri, 4 Nov 2022 06:19:44 -0700"  >ILW = C2 assertion failure with obscure code pattern, only with infinite loops and mainly with irreducible loops, use large enough PerMethodTrapLimit value = HLM = P3</comment>
                            <comment id="14534859" author="JIRAUSER19821" created="Fri, 4 Nov 2022 05:21:01 -0700"  >Just ran it with&lt;br/&gt;
openjdk 17.0.4 2022-07-19&lt;br/&gt;
product build&lt;br/&gt;
Reproduces with SIGSEGV, was to be expected, since we modify the blocks and nodes in unintended ways.</comment>
                            <comment id="14534856" author="JIRAUSER19821" created="Fri, 4 Nov 2022 04:56:09 -0700"  >Suggested solution:&lt;br/&gt;
Fix PhaseCFG::convert_NeverBranch_to_Goto.&lt;br/&gt;
On first sight it looks like the code should handle both cases:&lt;br/&gt;
[[ &amp;quot;succ&amp;quot;, &amp;quot;dead&amp;quot; ]]   -&amp;gt; works&lt;br/&gt;
[[ &amp;quot;dead&amp;quot;, &amp;quot;succ&amp;quot; ]]   -&amp;gt; broken&lt;br/&gt;
&lt;br/&gt;
The second case is broken because we do:&lt;br/&gt;
&lt;br/&gt;
Block *succ = b-&amp;gt;_succs[idx];&lt;br/&gt;
...&lt;br/&gt;
b-&amp;gt;_succs.map(0,succ);&lt;br/&gt;
...&lt;br/&gt;
Block* dead = b-&amp;gt;_succs[1 - idx];&lt;br/&gt;
&lt;br/&gt;
This only works if idx == 0. Else, if idx == 1 we overwrite position 0, before we read &amp;quot;dead&amp;quot; from it - and instead read &amp;quot;succ&amp;quot; again. Then the code below thinks it is deleting inputs of &amp;quot;dead&amp;quot;, but in fact deletes inputs of &amp;quot;succ&amp;quot;. Some of the input positions are not available in &amp;quot;succ&amp;quot;, and we throw an assert in Node::del_req.</comment>
                            <comment id="14534854" author="JIRAUSER19821" created="Fri, 4 Nov 2022 04:44:41 -0700"  >Context:&lt;br/&gt;
Normal case: during matching, &amp;quot;live&amp;quot;/&amp;quot;succ&amp;quot; projection is added as output of NeverBranch before the &amp;quot;dead&amp;quot; projection leading to Halt. Thus, the outputs of NeverBranch are normally [[ &amp;quot;succ&amp;quot;, &amp;quot;dead&amp;quot; ]].&lt;br/&gt;
Details: During DFS, usually we go from Halt to NeverBranch. Then via Region/Loop, take backedge, and find the &amp;quot;live&amp;quot;/&amp;quot;succ&amp;quot; edge. We already have its inputs (NeverBranch), thus we can now post-visit the live edge, and attach it to the NeverBranch first. Later, once we have processed the whole infinite loop, we post-visit out of NeverBranch to the &amp;quot;dead&amp;quot; projection edge, which we attach second.&lt;br/&gt;
&lt;br/&gt;
In R3.java:&lt;br/&gt;
Abnormal order: &amp;quot;dead&amp;quot; projection is first attached to NeverBranch, and &amp;quot;live&amp;quot;/&amp;quot;succ&amp;quot; projection is added second.&lt;br/&gt;
Details (see R3.java.6.png):&lt;br/&gt;
In our pathological case, during bottom-up DFS traversal for matching, we go in through the shared 224 Halt, and first visit the 345 NeverBranch of the peeled iteration, and visit all of what is above. But there is no backedge, so we will not find the &amp;quot;live&amp;quot; edge, and we post-visit the &amp;quot;dead&amp;quot; edge first (350 CProj). Then, we take the second branch of the Halt (351 Region -&amp;gt; 222 CProj), and visit the peeled loop. From there, we finally find the &amp;quot;live&amp;quot; projection (346 CProj) of the peeled iterations NeverBranch, and attach it second.&lt;br/&gt;
&lt;br/&gt;
Why is the order of &amp;quot;live&amp;quot;/&amp;quot;succ&amp;quot; Projection vs the &amp;quot;dead&amp;quot; one relevant?&lt;br/&gt;
It predicts in what order we later DFS traverse the nodes for scheduling the nodes into blocks, and also matters the order of successor blocks.&lt;br/&gt;
It seems that the code in PhaseCFG::convert_NeverBranch_to_Goto expects the &amp;quot;succ&amp;quot; projection and block to have idx=0. On first appearance the code looks like it should also handle the inverted case where &amp;quot;succ&amp;quot; has idx=1, but the code has a bug, where we overwrite the _succs array where the &amp;quot;dead&amp;quot; block reference is stored before we read it off.&lt;br/&gt;
&lt;br/&gt;
This is how the nodes are scheduled in the block:&lt;br/&gt;
B6: #	out( B12 B7 ) &amp;lt;- in( N55 N57 )  Freq: 0.9&lt;br/&gt;
&amp;nbsp;17  Region  === 17 54 53  [[ 17 16 42 ]]  !jvms: R3::test @ bci:57 (line 29)&lt;br/&gt;
&amp;nbsp;42  Phi  === 17 43 44  [[ 40 ]]  #int:1..3 !jvms: R3::test @ bci:57 (line 29)&lt;br/&gt;
&amp;nbsp;16  NeverBranch  === 17  [[ 15 27 ]] &lt;br/&gt;
&amp;nbsp;15  CProj  === 16  [[ 52 ]] #1&lt;br/&gt;
&amp;nbsp;27  CProj  === 16  [[ 61 ]] #0 !jvms: R3::test @ bci:65 (line 30)&lt;br/&gt;
&lt;br/&gt;
Why did this bug not trigger before?&lt;br/&gt;
Well, this seems to be quite an obscure code pattern, many things need to play together. We need an infinite-loop, which is peeled. This leads to the shared HaltNode, where the peeled iteration is visited first. However, we also cannot have a HaltNode further down after the peeled loop which would be traversed first.&lt;br/&gt;
To cause the peeling, the infinite loop needs an if with a loop exit.&lt;br/&gt;
Further, we need some of the ifs to collapse at the exactly right loop-opts phase, to trigger this sequence of events.&lt;br/&gt;
It turns out that with irreducible loops this is a bit more common, at least my bytecode fuzzer found an example quite fast.&lt;br/&gt;
&lt;br/&gt;
Note:&lt;br/&gt;
We need the flag: -XX:PerMethodTrapLimit=0&lt;br/&gt;
But probably we could just exhaust the traps with some extra code above the failing code.&lt;br/&gt;
Without traps, we cannot insert predicates at parsing, which would act as fake &amp;quot;loop-exits&amp;quot;, hence we would not add the NeverBranch nodes that trigger the bug.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5090030">JDK-8299026</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5091474">JDK-8300220</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5097847">JDK-8305542</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099646">JDK-8307022</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5066201">JDK-8280126</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5089447">JDK-8298582</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098098">JDK-8305750</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5089433">JDK-8298568</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147079">JDK-8346888</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5090238">JDK-8299214</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="101434" name="R3.java" size="1516" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101436" name="R3.java.1.png" size="83754" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101437" name="R3.java.2.png" size="88400" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101438" name="R3.java.3.png" size="129698" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101439" name="R3.java.4.png" size="58562" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101440" name="R3.java.5.png" size="56466" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101441" name="R3.java.6.png" size="55247" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101444" name="R3.java.7.png" size="73907" author="epeter" created="Fri, 4 Nov 2022 04:40:15 -0700"/>
                            <attachment id="101433" name="hs_err_pid111803.log" size="80044" author="epeter" created="Fri, 4 Nov 2022 04:28:18 -0700"/>
                            <attachment id="101442" name="replay_pid111803.log" size="243110" author="epeter" created="Fri, 4 Nov 2022 04:28:19 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2z4qz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17317"><![CDATA[b02]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>