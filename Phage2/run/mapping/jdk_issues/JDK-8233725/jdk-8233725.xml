<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:42:32 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8233725] ProcessTools.startProcess() has output issues when using an OutputAnalyzer at the same time</title>
                <link>https://bugs.openjdk.org/browse/JDK-8233725</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>If you use ProcessTools.startProcess() and apply an OutputAnalyzer right afterwards as shown below:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p = ProcessTools.startProcess(&amp;quot;java&amp;quot;, pb);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out = new OutputAnalyzer(p);&lt;br/&gt;
&lt;br/&gt;
Some of the output will end up with the OutputAnalyzer, and some automatically included in the .jtr file with the &amp;quot;[java]&amp;quot; prefix. It seems to be randomly divvied up between the two, whereas all the output should appear in both.&lt;br/&gt;
&lt;br/&gt;
Using the Consumer argument has a similar issue:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p = ProcessTools.startProcess(&amp;quot;java&amp;quot;, pb, outputConsumer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out = new OutputAnalyzer(p);&lt;br/&gt;
&lt;br/&gt;
The lines that are directed to the Consumer are the same as the lines you see with the &amp;quot;[java]&amp;quot; prefix. The rest are directed to the OutputAnalyzer. The issue happens with both stdout and stderr.&lt;br/&gt;
&lt;br/&gt;
Please see the attached test case. It runs once with without a consumer and once with. I&amp;#39;m not certain you will always see both test cases fail on all processors since some of it might be timing related. For example, without a consumer I see:&lt;br/&gt;
&lt;br/&gt;
[2019-11-06T00:42:06.891310Z] Gathering output for process 27274&lt;br/&gt;
DEBUG: process started.&lt;br/&gt;
[java] A line on stdout 0&lt;br/&gt;
FAILED: wrong number of lines in OutputAnalyzer output&lt;br/&gt;
DEBUG: OutputAnalyzer output: got 49 lines, expected 50. Output follows:&lt;br/&gt;
A line on stdout 1&lt;br/&gt;
A line on stdout 2&lt;br/&gt;
&amp;lt;...&amp;gt;&lt;br/&gt;
&lt;br/&gt;
So only the first line ended up with the &amp;quot;[java]&amp;quot; prefix. If it had instead ended up in the OutputAnalyzer output, the test would not have detected any failures because it can&amp;#39;t actually see that were no lines of &amp;quot;[java]&amp;quot; output.&lt;br/&gt;
&lt;br/&gt;
The Consumer case which runs second seems to do a much better job of showing this issue, at least when run on my machine:&lt;br/&gt;
&lt;br/&gt;
[2019-11-06T00:42:06.923088Z] Gathering output for process 27297&lt;br/&gt;
DEBUG: process started.&lt;br/&gt;
[java] A line on stdout 0&lt;br/&gt;
[java] A line on stdout 26&lt;br/&gt;
[java] A line on stdout 30&lt;br/&gt;
[java] A line on stdout 33&lt;br/&gt;
[java] A line on stdout 35&lt;br/&gt;
[java] A line on stdout 37&lt;br/&gt;
[java] A line on stdout 39&lt;br/&gt;
[java] A line on stdout 42&lt;br/&gt;
[java] A line on stdout 44&lt;br/&gt;
[java] A line on stdout 47&lt;br/&gt;
[java] A line on stdout 49&lt;br/&gt;
FAILED: wrong number of lines in Consumer output&lt;br/&gt;
DEBUG: Consumer output: got 11 lines, expected 50. Output follow:&lt;br/&gt;
A line on stdout 0&lt;br/&gt;
A line on stdout 26&lt;br/&gt;
A line on stdout 30&lt;br/&gt;
A line on stdout 33&lt;br/&gt;
A line on stdout 35&lt;br/&gt;
A line on stdout 37&lt;br/&gt;
A line on stdout 39&lt;br/&gt;
A line on stdout 42&lt;br/&gt;
A line on stdout 44&lt;br/&gt;
A line on stdout 47&lt;br/&gt;
A line on stdout 49&lt;br/&gt;
DEBUG: done with Consumer output.&lt;br/&gt;
FAILED: wrong number of lines in OutputAnalyzer output&lt;br/&gt;
DEBUG: OutputAnalyzer output: got 39 lines, expected 50. Output follows:&lt;br/&gt;
A line on stdout 1&lt;br/&gt;
A line on stdout 2&lt;br/&gt;
&amp;lt;...&amp;gt;&lt;br/&gt;
A line on stdout 24&lt;br/&gt;
A line on stdout 25&lt;br/&gt;
A line on stdout 27&lt;br/&gt;
A line on stdout 28&lt;br/&gt;
A line on stdout 29&lt;br/&gt;
A line on stdout 31&lt;br/&gt;
A line on stdout 32&lt;br/&gt;
A line on stdout 34&lt;br/&gt;
A line on stdout 36&lt;br/&gt;
A line on stdout 38&lt;br/&gt;
A line on stdout 40&lt;br/&gt;
A line on stdout 41&lt;br/&gt;
A line on stdout 43&lt;br/&gt;
A line on stdout 45&lt;br/&gt;
A line on stdout 46&lt;br/&gt;
A line on stdout 48&lt;br/&gt;
&lt;br/&gt;
So in this case here were 11 lines, scattered from throughout the output, that appeared with the &amp;quot;[java]&amp;quot; prefix and also with the Consumer. The rest were in the OutputAnalyzer.</description>
                <environment></environment>
        <key id="5003837">JDK-8233725</key>
            <summary>ProcessTools.startProcess() has output issues when using an OutputAnalyzer at the same time</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lmesnik">Leonid Mesnik</assignee>
                                    <reporter username="cjplummer">Chris Plummer</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>noreg-self</label>
                    </labels>
                <created>Wed, 6 Nov 2019 10:46:48 -0800</created>
                <updated>Thu, 25 Sep 2025 14:48:50 -0700</updated>
                            <resolved>Wed, 26 Apr 2023 07:56:03 -0700</resolved>
                                    <version>14</version>
                    <version>15</version>
                    <version>16</version>
                    <version>17</version>
                    <version>18</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14672337" author="roboduke" created="Thu, 9 May 2024 09:51:59 -0700"  >[jdk17u-fix-request] Approval Request from Elif Aslan&lt;br/&gt;
&#8220;Clean backport. Fix ProcessTools.startProcess() regression. GHA tested and ran tier2 tests additionally. This backport is required for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325567&quot; title=&quot;jspawnhelper without args fails with segfault&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325567&quot;&gt;&lt;strike&gt;JDK-8325567&lt;/strike&gt;&lt;/a&gt; to be backported to 17 since this bugfix is missing.&amp;quot;</comment>
                            <comment id="14672333" author="roboduke" created="Thu, 9 May 2024 09:36:33 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2456&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2456&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-09 16:32:05 +0000</comment>
                            <comment id="14577039" author="dukebot" created="Wed, 26 Apr 2023 07:56:02 -0700"  >Changeset: 2e340e85&lt;br/&gt;
Author:    Leonid Mesnik &amp;lt;&lt;a href=&apos;mailto:lmesnik@openjdk.org&apos;&gt;lmesnik@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-26 14:53:33 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/2e340e855b760e381793107f2a4d74095bd40199&quot;&gt;https://git.openjdk.org/jdk/commit/2e340e855b760e381793107f2a4d74095bd40199&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14575912" author="roboduke" created="Sun, 23 Apr 2023 15:41:08 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13594&quot;&gt;https://git.openjdk.org/jdk/pull/13594&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-21 21:43:39 +0000</comment>
                            <comment id="14575493" author="lmesnik" created="Thu, 20 Apr 2023 11:38:29 -0700"  >The main problem is that we can&amp;#39;t get stdoud/stderr stream several times. The ProcessTools.startProcess should allow either to register streams or to remember data.</comment>
                            <comment id="14575451" author="roboduke" created="Thu, 20 Apr 2023 09:17:31 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13560&quot;&gt;https://git.openjdk.org/jdk/pull/13560&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-20 16:09:29 +0000</comment>
                            <comment id="14392816" author="cjplummer" created="Mon, 11 Jan 2021 10:26:30 -0800"  >This issue recently turned up as a test bug. See &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8258057&quot; title=&quot;serviceability/attach/RemovingUnixDomainSocketTest.java doesn&amp;#39;t ignore VM warnings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8258057&quot;&gt;&lt;strike&gt;JDK-8258057&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14298546" author="cjplummer" created="Wed, 6 Nov 2019 10:50:56 -0800"  >Just wanted to add that I believe this makes it impossible to use ProcessTools.startProcess() with an OutputAnalyzer in any meaningful way. It also means that there is no way to do something like the following if you use startProcess():&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.stderrShouldBeEmpty();&lt;br/&gt;
&lt;br/&gt;
The issue is that the Consumer gets all of both stdout and stderr, so there is no way to separately see what appears on each stream. If for some reason using an OutputAnalyzer with startProcess() is just not feasible, or won&amp;#39;t be fixed in the near term, perhaps startProcess() should support accepting separate Consumer arguments for stdout and stderr.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5131161">JDK-8333667</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5095625">JDK-8303698</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5099559">JDK-8306946</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5037018">JDK-8258057</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="85433" name="ProcessToolsStartProcessTest.java" size="4730" author="cjplummer" created="Wed, 6 Nov 2019 10:51:24 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2l4yb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="225"><![CDATA[test]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>