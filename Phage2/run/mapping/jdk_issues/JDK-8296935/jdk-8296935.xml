<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:23:18 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8296935] Arrays.asList() can return a List that throws undocumented ArrayStoreException</title>
                <link>https://bugs.openjdk.org/browse/JDK-8296935</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
This issue also occurs on JDK 8, 11, 17 and 19.&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
The javadoc for java.util.List.set(E) indicates that the method will throw a ClassCastException if the class of the specified element prevents it from being added to this list, but Lists returned by Arrays.asList(E...) throw an ArrayStoreException when trying to set an element with a wrong type, which is undocumented.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
Compile and run the following code.&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
Throws ClassCastException&lt;br/&gt;
ACTUAL -&lt;br/&gt;
Throws ArrayStoreException&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
public class Main {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@SuppressWarnings({&amp;quot;rawtypes&amp;quot;, &amp;quot;unchecked&amp;quot;})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List list = Arrays.asList(new String[1]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.set(0, 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5087297">JDK-8296935</key>
            <summary>Arrays.asList() can return a List that throws undocumented ArrayStoreException</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="smarks">Stuart Marks</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>additional-information-received</label>
                            <label>dcsaw</label>
                            <label>noreg-doc</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Thu, 10 Nov 2022 05:42:32 -0800</created>
                <updated>Thu, 4 May 2023 03:29:31 -0700</updated>
                            <resolved>Fri, 28 Apr 2023 12:46:48 -0700</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>18</version>
                    <version>19</version>
                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14577750" author="dukebot" created="Fri, 28 Apr 2023 12:46:47 -0700"  >Changeset: da9efee1&lt;br/&gt;
Author:    Stuart Marks &amp;lt;&lt;a href=&apos;mailto:smarks@openjdk.org&apos;&gt;smarks@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-28 19:45:29 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/da9efee1c25f76f80fee9065680e7d75d03c7178&quot;&gt;https://git.openjdk.org/jdk/commit/da9efee1c25f76f80fee9065680e7d75d03c7178&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14577483" author="roboduke" created="Thu, 27 Apr 2023 11:43:49 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13698&quot;&gt;https://git.openjdk.org/jdk/pull/13698&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-27 18:36:53 +0000</comment>
                            <comment id="14577481" author="smarks" created="Thu, 27 Apr 2023 11:33:57 -0700"  >Instead of having a big explanation in an API Note, I now think it&amp;#39;s better to have a brief normative statement in the specification that describes the possibility of ArrayStoreException being thrown.</comment>
                            <comment id="14555728" author="smarks" created="Mon, 30 Jan 2023 13:45:04 -0800"  >I&amp;#39;d recommend the following text be added to the @apiNote that&amp;#39;s currently part of the Arrays.asList specification. I&amp;#39;m recommending this be part of the @apiNote because this phenomenon arises because of the interaction between the generics in the API and the covariance of arrays in the language.&lt;br/&gt;
&lt;br/&gt;
-----&lt;br/&gt;
&lt;br/&gt;
It is possible for the type parameter T of the returned list to differ from the array&amp;#39;s component type. This can occur, for example, if the array argument type has been upcast from its component type:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String[] strings = ... &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;lt;Object&amp;gt; objects = Arrays.asList((Object[]) strings);&lt;br/&gt;
&lt;br/&gt;
Writing an element into the returned list may result in an ArrayStoreException being thrown if the element is incompatible with the underlying array&amp;#39;s component type.&lt;br/&gt;
&lt;br/&gt;
-----&lt;br/&gt;
</comment>
                            <comment id="14554109" author="smarks" created="Tue, 24 Jan 2023 09:39:32 -0800"  >Note that the interface declaration is Collection&amp;lt;E&amp;gt; and the toArray() declaration is&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;T&amp;gt; T[] toArray(T[] a)&lt;br/&gt;
&lt;br/&gt;
which means that there is no type constraint on T relative to E. Thus it&amp;#39;s possible for the caller to pass in an array of any component type unrelated to E, and suffer ArrayStoreException as a result. This can happen with any collection, and is a different situation that what occurs with Arrays.asList. I don&amp;#39;t think it&amp;#39;s necessary or appropriate to add ASE to all of these methods because of this particular phenomenon that can occur with Arrays.asList.</comment>
                            <comment id="14553938" author="forax" created="Tue, 24 Jan 2023 00:29:05 -0800"  >And given that Collection.toArray(T[]) already document ArrayStoreException, i believe all those methods should document it as well.&lt;br/&gt;
&lt;br/&gt;
And when specialized generics will land, there will get more CCE and ASE because the underlying arrays will be specialized while casting an ArrayList&amp;lt;Complex&amp;gt; to an ArrayList&amp;lt;?&amp;gt; to an ArrayList&amp;lt;Object&amp;gt; will still be legal (with an unsafe warning).&lt;br/&gt;
</comment>
                            <comment id="14553932" author="smarks" created="Mon, 23 Jan 2023 23:56:31 -0800"  >Methods that can write to a List returned by Arrays.asList that can possibly throw ArrayStoreException:&lt;br/&gt;
&lt;br/&gt;
List.set&lt;br/&gt;
List.replaceAll&lt;br/&gt;
ListIterator.set&lt;br/&gt;
Collections.copy&lt;br/&gt;
Collections.fill&lt;br/&gt;
Collections.replaceAll&lt;br/&gt;
</comment>
                            <comment id="14553926" author="smarks" created="Mon, 23 Jan 2023 23:37:28 -0800"  >The point about ConcurrentModificationException is that it&amp;#39;s not documented on every possible method where it can occur. Mostly it was an argument against modifying the specs of methods on the List interface, as suggested by the original submitter, and which was also done in an earlier version version of the PR.&lt;br/&gt;
&lt;br/&gt;
Adding something to the spec of Arrays.asList() similar to what&amp;#39;s in the PR right now seems more sensible. I&amp;#39;m still pondering whether it should be normative or informative (@apiNote is informative) and exactly what it should say.&lt;br/&gt;
</comment>
                            <comment id="14553912" author="dholmes" created="Mon, 23 Jan 2023 22:33:16 -0800"  >The ClassCastException is only for elements of unsuitable type - for which the ArrayStoreException is incorrectly allowed to propagate. Not sure how things like ConcurrentModificatonException have any bearing on this specific issue. The minimalist apiNote currently in the PR seems quite adequate to me (naturally :) ) - it acknowledges the discrepancy in behaviour whilst not opening up a can of worms.</comment>
                            <comment id="14553662" author="smarks" created="Mon, 23 Jan 2023 14:22:47 -0800"  >[~dholmes] I think it should be documented somehow, but I&amp;#39;m not exactly sure how at the moment. I believe the set of runtime exceptions that can be thrown in response to some operation is open-ended, and I don&amp;#39;t believe it&amp;#39;s reasonable to require or expect that every implementation shoehorn all possible exceptions into ClassCastException. For example, operations on a sublist can throw ConcurrentModificationException if the backing list has been modified independently of the sublist. I can imagine other implementations might throw other runtime exceptions under other circumstances. For example, Apache Commons Collections&amp;#39; PredicatedList will throw IllegalArgumentException if an element doesn&amp;#39;t match the predicate that enforces constraints on the list&amp;#39;s contents.</comment>
                            <comment id="14553379" author="dholmes" created="Sun, 22 Jan 2023 23:03:19 -0800"  >[~smarks] are you envisaging an implNote to document this? It is a pity the mismatch between thrown and specified exceptions was never realized (test gap) but I agree the horse has bolted here and changing the behaviour at this stage would seem counter-productive. I don&amp;#39;t think List needs to mention ASE as any List implementation using an array as backing store should either ensure ASE is not possible or else convert it to ClassCastException as per the spec. We are really acknowledging here that asList returns a List implementation that does not strictly conform to the List specification.</comment>
                            <comment id="14553369" author="smarks" created="Sun, 22 Jan 2023 22:20:29 -0800"  >The main problem occurs only with Arrays.asList, as the backing array is provided by the caller. For reasons described above, its component type can differ from the List&amp;#39;s static type. If this occurs, it can result in an &amp;quot;unexpected&amp;quot; ArrayStoreException. ArrayList doesn&amp;#39;t have this problem, since ArrayList manages its own array, and it always has a component type of Object, so ArrayStoreException should never occur.&lt;br/&gt;
&lt;br/&gt;
Yes, a behavior change would require a CSR. However, I&amp;#39;m opposed to changing the behavior at all here. This behavior has existed since 2004 (in Java SE 5.0 and the introduction of generics to collections). Actually it probably existed going all the way back to JDK 1.2 (1998) but it was less apparent because the resulting List had no type parameter that could disagree with the array&amp;#39;s component type.&lt;br/&gt;
&lt;br/&gt;
My inclination is to document this. I don&amp;#39;t think it makes sense to go through every List API and add a possible ArrayStoreException, since this problem only occurs with a List obtained via Arrays.asList. Probably a brief explanation on Arrays.asList is all that&amp;#39;s warranted. Also, possibly mention ArrayStoreException in the List class specification, where it discusses ineligible elements.&lt;br/&gt;
&lt;br/&gt;
Of course, any such spec change would also require a CSR.</comment>
                            <comment id="14553348" author="dholmes" created="Sun, 22 Jan 2023 20:26:20 -0800"  >Does ArrayList not have the same problem?&lt;br/&gt;
&lt;br/&gt;
BTW any change in behaviour here would require a CSR request.</comment>
                            <comment id="14553345" author="roboduke" created="Sun, 22 Jan 2023 19:06:52 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12135&quot;&gt;https://git.openjdk.org/jdk/pull/12135&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-23 02:35:19 +0000</comment>
                            <comment id="14537463" author="pnarayanaswa" created="Mon, 14 Nov 2022 20:13:17 -0800"  >Additional Information from the submitter:&lt;br/&gt;
===============================&lt;br/&gt;
Thanks for your comment, but I do think it is worth documenting the behavior or even change the behavior to throw a ClassCastException.&lt;br/&gt;
&lt;br/&gt;
There are other facilities in the Java Collection Framework that provides runtime type checking, such as EnumSet, Collections.checked{Collection, List, Map, Set, ...}, etc. When a wrong type element is inserted, these collections will throw a ClassCastException (as documented), but it surely compiles by using raw types or unchecked cast.&lt;br/&gt;
&lt;br/&gt;
Lists returned by Arrays.asList also (de facto) provides runtime type checking, but it throws an unexpected exception (which I think it&amp;#39;s a bug, not a feature).  It&amp;#39;s a List, not an array, clients that deals with a List are not expected to handle type-safe failure by catching ClassCastException.  All methods in the Arrays class deal with arrays, so clients are expected to catch ArrayStoreException for type-safe failure.&lt;br/&gt;
&lt;br/&gt;
P.S. Maybe I&amp;#39;m too late since Arrays.asList was introduced since Java 1.2. &lt;br/&gt;
</comment>
                            <comment id="14537221" author="smarks" created="Mon, 14 Nov 2022 15:04:35 -0800"  >Because arrays are covariant, it&amp;#39;s possible for an array store that is statically typesafe to throw an ArrayStoreException (ASE) at runtime. Consider:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object[] a = new String[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a[0] = 1; // compiles without error or warning, throws ASE at runtime&lt;br/&gt;
&lt;br/&gt;
Indirecting the array store through Arrays.asList() makes the problem a little worse, as the array variable&amp;#39;s static type is propagated into the List&amp;#39;s type argument -- the resulting List isn&amp;#39;t &amp;quot;really&amp;quot; a List&amp;lt;Object&amp;gt;. Of course, the underlying fundamentals are the same.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;lt;Object&amp;gt; list = Arrays.asList(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.set(0, 0); // compiles without error or warning, throws ASE at runtime&lt;br/&gt;
&lt;br/&gt;
The question is whether it&amp;#39;s worth documenting things like this. The Collection.toArray(T[]) method documents ArrayStoreException. In the java.util.Arrays class there are several methods that document ArrayStoreException:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.copyOf(U[], int, Class&amp;lt;? extends T[]&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.copyOf(U[], int, int, Class&amp;lt;? extends T[]&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.fill(Object[], Object)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.fill(Object[], int, int, Object)&lt;br/&gt;
&lt;br/&gt;
However, there are also methods in java.util.Arrays that don&amp;#39;t document ASE where it could be thrown immediately or in the future. These are generic methods where the type is taken from the array variable&amp;#39;s static type that write or allow future writing to the array, or non-generic methods that take Object[] that write or allow future writing to the array.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.asList() // as demonstrated here&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.copyOf(T[], int)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.copyOfRange(T[], int, int)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.parallelPrefix(T[], BinaryOperator&amp;lt;T&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.parallelPrefix(T[], int, int, BinaryOperator&amp;lt;T&amp;gt;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.setAll(T[], IntFunction&amp;lt;? extends T&amp;gt;)&lt;br/&gt;
&lt;br/&gt;
All of these except Arrays.asList() operate only on arrays. It should already be&lt;br/&gt;
&amp;quot;well known&amp;quot; that upcasting an array and then writing into it might result in an&lt;br/&gt;
ArrayStoreException being thrown. Using the various array manipulation APIs&lt;br/&gt;
on the Arrays class doesn&amp;#39;t affect this. For completeness, though, it might make&lt;br/&gt;
sense to add ArrayStoreException to the Arrays utility methods that don&amp;#39;t already&lt;br/&gt;
document it.&lt;br/&gt;
&lt;br/&gt;
Arrays.asList() is a special case though. The static type of the array is carried over&lt;br/&gt;
to the List type parameter, and thereafter no array is in evidence. Therefore it might&lt;br/&gt;
be surprising that storing into such a List results in an ArrayStoreException.</comment>
                            <comment id="14536868" author="tongwan" created="Mon, 14 Nov 2022 03:58:43 -0800"  >The observations on Windows 10:&lt;br/&gt;
JDK 8: Failed, ArrayStoreException thrown&lt;br/&gt;
JDK 11: Failed.&lt;br/&gt;
JDK 17: Failed.&lt;br/&gt;
JDK 18: Failed.&lt;br/&gt;
JDK 19: Failed.&lt;br/&gt;
JDK 20ea+23: Failed.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5099699">JDK-8307074</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="101580" name="Main.java" size="257" author="tongwan" created="Mon, 14 Nov 2022 03:57:30 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2z7qz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="669"><![CDATA[java.util:collections]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>