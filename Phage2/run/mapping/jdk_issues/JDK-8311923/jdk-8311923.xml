<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:39:07 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8311923] TestIRMatching.java fails on RISC-V</title>
                <link>https://bugs.openjdk.org/browse/JDK-8311923</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>&lt;br/&gt;
Hi, we are experiencing test case failure in test test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java:&lt;br/&gt;
```&lt;br/&gt;
One or more @IR rules failed:&lt;br/&gt;
&lt;br/&gt;
Failed IR Rules (1) of Methods (1)&lt;br/&gt;
----------------------------------&lt;br/&gt;
1) Method &amp;quot;public java.lang.Object[] ir_framework.tests.CheckCastArray.arrayCopy(java.lang.Object[],java.lang.Class)&amp;quot; - [Failed IR rules: 1]:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;* @IR rule 1: &amp;quot;@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={}, failOn={&amp;quot;_#CHECKCAST_ARRAYCOPY#_&amp;quot;}, applyIfAnd={}, applyIfOr={}, applyIfNot={})&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Phase &amp;quot;PrintOptoAssembly&amp;quot;:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- failOn: Graph contains forbidden nodes:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Constraint 1: &amp;quot;(.*((?i:call_leaf_nofp,runtime)|CALL,\\s?runtime leaf nofp|BCTRL.*.leaf call).*checkcast_arraycopy.*)&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Matched forbidden node:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* 15a +   CALL, runtime leaf nofp 0x0000003f7fbd9600	#@CallLeafNoFPDirect checkcast_arraycopy&lt;br/&gt;
&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; Check stdout for compilation output of the failed methods&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
After troubleshooting, the problem is related to the definition of the matching rules for the CHECKCAST_ARRAY, CHECKCAST_ARRAY_OF fields in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java:&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final String CHECKCAST_ARRAY = PREFIX + &amp;quot;CHECKCAST_ARRAY&amp;quot; + POSTFIX;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String regex = &amp;quot;(((?i:cmp|CLFI|CLR).*precise \\[.*:|.*(?i:mov|or).*precise \\[.*:.*\\R.*(cmp|CMP|CLR))&amp;quot; + END;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;optoOnly(CHECKCAST_ARRAY, regex);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final String CHECKCAST_ARRAY_OF = COMPOSITE_PREFIX + &amp;quot;CHECKCAST_ARRAY_OF&amp;quot; + POSTFIX;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String regex = &amp;quot;(((?i:cmp|CLFI|CLR).*precise \\[.*&amp;quot; + IS_REPLACED + &amp;quot;:|.*(?i:mov|or).*precise \\[.*&amp;quot; + IS_REPLACED + &amp;quot;:.*\\R.*(cmp|CMP|CLR))&amp;quot; + END;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;optoOnly(CHECKCAST_ARRAY_OF, regex);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
This rule is used to match the Opto compilation log of the `array()/arrayCopy()` method of the subclass CheckCastArray in test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java. If the match does not work, the above test fails.&lt;br/&gt;
&lt;br/&gt;
The `array()` part of the Opto log for CheckCastArray on the aarch64 platform is as follows:&lt;br/&gt;
```&lt;br/&gt;
06c     B2: #	out( B5 B3 ) &amp;amp;lt;- in( B1 )  Freq: 0.999999&lt;br/&gt;
06c +   mov  R12, narrowklass: precise [ir_framework/tests/MyClass: 0x0000ffff58420808 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr&lt;br/&gt;
074 +   cmp  R10, R12	 // compressed ptr&lt;br/&gt;
078     bne  B5	# unsigned  P=0.100000 C=-1.000000&lt;br/&gt;
```&lt;br/&gt;
The `array()` part of the Opto log for CheckCastArray on the riscv platform is as follows:&lt;br/&gt;
```&lt;br/&gt;
054     B2: #	out( B5 B3 ) &amp;amp;lt;- in( B1 )  Freq: 0.999999&lt;br/&gt;
054 +   mv  R29, narrowklass: precise [ir_framework/tests/MyClass: 0x0000003f34437df8 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr, #@loadConNKlass&lt;br/&gt;
062 +   bne  R7, R29, B5	#@cmpN_branch  P=0.100000 C=-1.000000&lt;br/&gt;
```&lt;br/&gt;
From the above Opto log, we can see that the match rule of CHECKCAST_ARRAY in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java can be matched with aarch64. However, on the riscv platform, since the mv instruction is generated, it does not correspond to the matching rule, so the test case fails. To solve this problem, we modified the match rules defined by CHECKCAST_ARRAY, CHECKCAST_ARRAY_OF in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java to include the mv directive in the match rules.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Same problem with ALLOC_ARRAY, ALLOC_ARRAY_OF in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final String ALLOC_ARRAY = PREFIX + &amp;quot;ALLOC_ARRAY&amp;quot; + POSTFIX;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String optoRegex = &amp;quot;(.*precise \\[.*\\R((.*(?i:mov|xor|nop|spill).*|\\s*|.*(LGHI|LI).*)\\R)*.*(?i:call,static).*wrapper for: _new_array_Java&amp;quot; + END;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocNodes(ALLOC_ARRAY, &amp;quot;AllocateArray&amp;quot;, optoRegex);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final String ALLOC_ARRAY_OF = COMPOSITE_PREFIX + &amp;quot;ALLOC_ARRAY_OF&amp;quot; + POSTFIX;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String regex = &amp;quot;(.*precise \\[.*&amp;quot; + IS_REPLACED + &amp;quot;:.*\\R((.*(?i:mov|xorl|nop|spill).*|\\s*|.*(LGHI|LI).*)\\R)*.*(?i:call,static).*wrapper for: _new_array_Java&amp;quot; + END;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;optoOnly(ALLOC_ARRAY_OF, regex);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
This rule is used to match the compilation log of the `allocArray()` method of the subclass AllocArray in test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java, and if it doesn&amp;#39;t match it also fails. test fails.&lt;br/&gt;
The `allocArray()` part of the Opto log for AllocArray on the aarch64 platform is as follows:&lt;br/&gt;
```&lt;br/&gt;
1a8     B14: #	out( B17 B15 ) &amp;amp;lt;- in( B1 )  Freq: 0.000100017&lt;br/&gt;
1a8 +   mov  R1, precise [ir_framework/tests/MyClass: 0x0000ffff244beb58 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr&lt;br/&gt;
	&lt;br/&gt;
1b4     call,static 0x0000ffff6fb9c540 	// ==&amp;amp;gt;  wrapper for: _new_array_Java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# ir_framework.tests.AllocArray::allocArray @ bci:2 (line 930) L[0]=_ STK[0]=R29&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# OopMap {rfp=Oop off=440/0x1b8}&lt;br/&gt;
```&lt;br/&gt;
The `allocArray()` part of the Opto log for AllocArray on the riscv platform is as follows:&lt;br/&gt;
```&lt;br/&gt;
16a     B14: #	out( B17 B15 ) &amp;amp;lt;- in( B1 )  Freq: 0.000100017&lt;br/&gt;
16a +   mv  R11, precise [ir_framework/tests/MyClass: 0x00007fff4c34c018 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr, #@loadConP&lt;br/&gt;
182 +   li R12, #2	# int, #@loadConI&lt;br/&gt;
184     CALL,static 0x00007fff9bb74840	#@CallStaticJavaDirect wrapper for: _new_array_Java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# ir_framework.tests.AllocArray::allocArray @ bci:2 (line 930) L[0]=_ STK[0]=R8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# OopMap {fp=Oop off=392/0x188}&lt;br/&gt;
```&lt;br/&gt;
As we can see in the above logs, the aarch64 log matches the empty line under precise, which also matches the ALLOC_ARRAY_OF rule in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java, but in the riscv log. precise is followed by the li, which doesn&amp;#39;t match the rule and therefore also causes the test case to fail. To solve this problem, we firstly modified the loadConI, loadConL nodes in riscv.ad, and changed the log message of li into mv, and secondly, we modified the ALLOC_ARRAY and ALLOC_ARRAY_OF match rule in test/hotspot/jtreg/compiler/lib/ir_framework/IRNode.java, and added the mv directive to the match rule.</description>
                <environment></environment>
        <key id="5105296">JDK-8311923</key>
            <summary>TestIRMatching.java fails on RISC-V</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gcao">Gui Cao</assignee>
                                    <reporter username="gcao">Gui Cao</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                            <label>oracle-triage-22</label>
                            <label>oraclejdk-na</label>
                    </labels>
                <created>Wed, 12 Jul 2023 01:21:21 -0700</created>
                <updated>Tue, 1 Aug 2023 19:01:26 -0700</updated>
                            <resolved>Wed, 19 Jul 2023 06:15:28 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14599500" author="JIRAUSER20521" created="Wed, 26 Jul 2023 19:27:33 -0700"  >Fix Request (17u):&lt;br/&gt;
Hi, I would like to backport this to jdk17u to make TestIRMatching.java test work on Linux RISC-V platform, `test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java` passed with fastdebug build using qemu system and unmatched board. Backport PR has been reviewed and approved by Paul Hohensee and Fei Yang</comment>
                            <comment id="14597774" author="roboduke" created="Fri, 21 Jul 2023 00:33:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1611&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1611&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-21 07:26:55 +0000</comment>
                            <comment id="14597276" author="JIRAUSER20521" created="Wed, 19 Jul 2023 07:27:46 -0700"  >Fix Request (21u):&lt;br/&gt;
Hi, I would like to backport this to jdk21u to make TestIRMatching.java test work on Linux RISC-V platform, `test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java` passed with fastdebug build using qemu system and unmatched board.</comment>
                            <comment id="14597266" author="roboduke" created="Wed, 19 Jul 2023 06:29:46 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/12&quot;&gt;https://git.openjdk.org/jdk21u/pull/12&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-19 13:22:26 +0000</comment>
                            <comment id="14597264" author="dukebot" created="Wed, 19 Jul 2023 06:15:27 -0700"  >Changeset: e7adbdb1&lt;br/&gt;
Author:    Gui Cao &amp;lt;&lt;a href=&apos;mailto:gcao@openjdk.org&apos;&gt;gcao@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Fei Yang &amp;lt;&lt;a href=&apos;mailto:fyang@openjdk.org&apos;&gt;fyang@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-19 13:14:03 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e7adbdb1f1506b82392907f7e4a5c8882d3198eb&quot;&gt;https://git.openjdk.org/jdk/commit/e7adbdb1f1506b82392907f7e4a5c8882d3198eb&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14595326" author="chagedorn" created="Wed, 12 Jul 2023 06:54:50 -0700"  >ILW = IR framework internal test failure due to wrong IR node default regex, only single test and on riscv, no workaround = MLH = P4</comment>
                            <comment id="14595240" author="roboduke" created="Wed, 12 Jul 2023 01:44:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14848&quot;&gt;https://git.openjdk.org/jdk/pull/14848&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-12 08:39:11 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105932">JDK-8312465</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107194">JDK-8313577</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="20300"><![CDATA[riscv]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i329m3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>