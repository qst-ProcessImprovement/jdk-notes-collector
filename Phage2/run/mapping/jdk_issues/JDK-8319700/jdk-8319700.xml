<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:40:17 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8319700] [AArch64] C2 compilation fails with &quot;Field too big for insn&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8319700</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Test name(s): applications/runthese/RunThese8H.java &lt;br/&gt;
Product(s) tested: JDK 21.0.2 b04 (issue seen in 21.0.1 also)&lt;br/&gt;
OS/architecture: Linux-aarch64 &lt;br/&gt;
Reproducible: Highly Intermittent&lt;br/&gt;
VM flag: -XX:+UseZGC -XX:+ZGenerational&lt;br/&gt;
&lt;br/&gt;
Excerpts from Log: &lt;br/&gt;
&lt;br/&gt;
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn at 0x0000ffff8c4d0eb4&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0.2+4) (fastdebug build 21.0.2+4-LTS-43)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21.0.2+4-LTS-43, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x11b56a8]  Instruction_aarch64::spatch(unsigned char*, int, int, long) [clone .part.0]+0x38&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffff9c2fb4f0):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=2550844, stack(0x0000fffb23c03000,0x0000fffb23e01000) (2040K)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:28479996 4899959       4       com.sun.tck.lib.tgf.TransformingIterator::shift (62 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffb23c03000,0x0000fffb23e01000],  sp=0x0000fffb23dfc6f0,  free space=2021k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x11b56a8]  Instruction_aarch64::spatch(unsigned char*, int, int, long) [clone .part.0]+0x38  (assembler_aarch64.hpp:231)&lt;br/&gt;
V  [libjvm.so+0x11b6cac]  MacroAssembler::pd_patch_instruction_size(unsigned char*, unsigned char*)+0x46c  (macroAssembler_aarch64.cpp:235)&lt;br/&gt;
V  [libjvm.so+0x5d8418]  Label::patch_instructions(MacroAssembler*)+0xf8  (macroAssembler_aarch64.hpp:631)&lt;br/&gt;
V  [libjvm.so+0x17c7f10]  ZLoadBarrierStubC2Aarch64::emit_code(MacroAssembler&amp;amp;)+0x9c  (macroAssembler_aarch64.hpp:150)&lt;br/&gt;
V  [libjvm.so+0x17d01fc]  ZBarrierSetC2::emit_stubs(CodeBuffer&amp;amp;) const+0xd8  (zBarrierSetC2.cpp:341)&lt;br/&gt;
V  [libjvm.so+0x1385cbc]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x1c0c  (output.cpp:1755)&lt;br/&gt;
V  [libjvm.so+0x9083b8]  Compile::Code_Gen()+0x3c8  (compile.cpp:2971)&lt;br/&gt;
V  [libjvm.so+0x90c870]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15b0  (compile.cpp:875)&lt;br/&gt;
V  [libjvm.so+0x762a58]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x328  (c2compiler.cpp:118)&lt;br/&gt;
V  [libjvm.so+0x918904]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x974  (compileBroker.cpp:2265)&lt;br/&gt;
V  [libjvm.so+0x919424]  CompileBroker::compiler_thread_loop()+0x590  (compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0xdabbf0]  JavaThread::thread_main_inner()+0xd0  (javaThread.cpp:719)&lt;br/&gt;
V  [libjvm.so+0x16050a4]  Thread::call_run()+0xb0  (thread.cpp:217)&lt;br/&gt;
V  [libjvm.so+0x1360718]  thread_native_entry(Thread*)+0x138  (os_linux.cpp:783)&lt;br/&gt;
C  [libpthread.so.0+0x7928]  start_thread+0x188</description>
                <environment></environment>
        <key id="5114295">JDK-8319700</key>
            <summary>[AArch64] C2 compilation fails with &quot;Field too big for insn&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="aboldtch">Axel Boldt-Christmas</assignee>
                                    <reporter username="rsunderbabu">Ramkumar Sunderbabu</reporter>
                        <labels>
                            <label>atr</label>
                            <label>c2</label>
                            <label>genzgc</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>oracle-triage-22</label>
                            <label>sqebug</label>
                            <label>tier8</label>
                    </labels>
                <created>Wed, 8 Nov 2023 00:52:20 -0800</created>
                <updated>Thu, 25 Jan 2024 22:23:58 -0800</updated>
                            <resolved>Thu, 23 Nov 2023 04:44:54 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14628777" author="thartmann" created="Thu, 23 Nov 2023 23:28:03 -0800"  >I don&amp;#39;t think &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8320682&quot; title=&quot;[AArch64] C1 compilation fails with &amp;quot;Field too big for insn&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8320682&quot;&gt;&lt;strike&gt;JDK-8320682&lt;/strike&gt;&lt;/a&gt; is related because it happens during C1 compilation and with G1. This fix is ZGC specific.</comment>
                            <comment id="14628726" author="dholmes" created="Thu, 23 Nov 2023 18:49:22 -0800"  >This fix appears insufficient as we still see the crash in tier 6</comment>
                            <comment id="14628655" author="roboduke" created="Thu, 23 Nov 2023 04:53:19 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/398&quot;&gt;https://git.openjdk.org/jdk21u/pull/398&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-23 12:46:47 +0000</comment>
                            <comment id="14628654" author="roboduke" created="Thu, 23 Nov 2023 04:52:08 -0800"  >[jdk21u-fix-request] Approval Request from Axel Boldt-Christmas&lt;br/&gt;
Bugs needs fixing in 21 as well.</comment>
                            <comment id="14628653" author="dukebot" created="Thu, 23 Nov 2023 04:44:53 -0800"  >Changeset: 3787ff8d&lt;br/&gt;
Author:    Axel Boldt-Christmas &amp;lt;&lt;a href=&apos;mailto:aboldtch@openjdk.org&apos;&gt;aboldtch@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-23 12:41:51 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/3787ff8d1d8dbcaaebb9616c5bc543e2fe21a90c&quot;&gt;https://git.openjdk.org/jdk/commit/3787ff8d1d8dbcaaebb9616c5bc543e2fe21a90c&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14628374" author="roboduke" created="Wed, 22 Nov 2023 02:50:11 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16780&quot;&gt;https://git.openjdk.org/jdk/pull/16780&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-22 10:44:12 +0000</comment>
                            <comment id="14625663" author="smonteith" created="Mon, 13 Nov 2023 02:57:41 -0800"  >I see lots of what looks like junk trampolines:&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffffa5283638:	b	0xffffa5283644&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa528363c:	b	0xffffa5283644&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283640:	b	0xffffa5283644&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283644:	mov	x1, x0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283648:	b	0xffffa5278f04&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa528364c:	b	0xffffa5283658&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283650:	b	0xffffa5283658&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283654:	b	0xffffa5283658&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283658:	mov	x1, x0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa528365c:	b	0xffffa5278f04&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283660:	b	0xffffa5283700&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283664:	b	0xffffa5283700&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283668:	b	0xffffa5283700&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa528366c:	b	0xffffa5283700&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:           :     :  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffffa52836f8:	b	0xffffa5283700&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa52836fc:	b	0xffffa5283700&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283700:	mov	x1, x0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283704:	b	0xffffa5278f04&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0x0000ffffa5283708:	b	0xffffa52837a8&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
There aren&amp;#39;t any branchs to these trampolines though - there are 100s of bytes which I suspect is what might be throwing off the calculations.&lt;br/&gt;
</comment>
                            <comment id="14625646" author="eliu" created="Mon, 13 Nov 2023 00:27:51 -0800"  >ZLoadBarrierStubC2Aarch64 would generate code directly if it does not interfere with emission of the next trampoline:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1356&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1356&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I guess, maybe some sutbs do not follow this rule. E.g., &lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad#L64&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad#L64&lt;/a&gt; &lt;br/&gt;
This generates ZLoadBarrierStubC2, but not ZLoadBarrierStubC2AArch64. Therefore, following trampoline may be interfered.</comment>
                            <comment id="14625514" author="thartmann" created="Fri, 10 Nov 2023 05:27:13 -0800"  >ILW = Patching of tbnz fails because destination is too far away, intermittent on AArch64 with Generational ZGC, use different GC or disable compilation of affected method = HMM = P2</comment>
                            <comment id="14625172" author="smonteith" created="Thu, 9 Nov 2023 02:33:02 -0800"  >I&amp;#39;ve found this problem to be quite reproducible with the JTREG testcase:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jdk/jdk/incubator/vector/VectorMaxConversionTests.java#ZGenerational&lt;br/&gt;
&lt;br/&gt;
Enabling &amp;quot;-esa -ea&amp;quot; made it much more reproducible.&lt;br/&gt;
</comment>
                            <comment id="14624946" author="thartmann" created="Wed, 8 Nov 2023 07:42:22 -0800"  >I had a quick look and it seems that we are patching a tbnz but the value we want to patch in is too large:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0xffffe02172b4:	cmp	w12, w11&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0xffffe02172b8:	b.ne	0xffffe021cbe4  // b.any&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0xffffe02172bc:	ldr	x11, [x29, #16]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0xffffe02172c0:	tbnz	w11, #0, 0xffffe02172c0            &amp;lt;-----&lt;br/&gt;
&lt;br/&gt;
The value is 8247.&lt;br/&gt;
&lt;br/&gt;
The tbnz is from the load barrier:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad#L76&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/z_aarch64.ad#L76&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The assumption that the stub-&amp;gt;entry() label is within 32K does not hold:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.hpp#L213&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.hpp#L213&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The patching happens here in ZLoadBarrierStubC2Aarch64::emit_code:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1352&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1352&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
AbstractAssembler::bind -&amp;gt; MacroAssembler::pd_patch_instruction -&amp;gt; ... -&amp;gt; Patcher::testAndBranch -&amp;gt; Instruction_aarch64::spatch(insn_addr, 18, 5, offset)&lt;br/&gt;
&lt;br/&gt;
msb = 18&lt;br/&gt;
lsb = 5&lt;br/&gt;
nbits = 14&lt;br/&gt;
&lt;br/&gt;
Looks correct according to &lt;a href=&quot;https://developer.arm.com/documentation/ddi0602/2023-09/Base-Instructions/TBNZ--Test-bit-and-Branch-if-Nonzero-&quot;&gt;https://developer.arm.com/documentation/ddi0602/2023-09/Base-Instructions/TBNZ--Test-bit-and-Branch-if-Nonzero-&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
It says: &amp;quot;Is the program label to be conditionally branched to. Its offset from the address of this instruction, in the range +/-32KB, is encoded as &amp;quot;imm14&amp;quot; times 4.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
The maximum value of signed imm14 is (1 &amp;lt;&amp;lt; 13) - 1 = 8191 &lt;br/&gt;
&lt;br/&gt;
But for val = 8247, chk = val &amp;gt;&amp;gt; (nbits - 1) = 8247 &amp;gt;&amp;gt; (14 - 1) = 1&lt;br/&gt;
&lt;br/&gt;
Patch::testAndBranch already divided the offset by 4, so the original offset was 8247&amp;lt;&amp;lt;2 = 32988 which is greater than 32k:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp#L284&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp#L284&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
This should have been detected by aarch64_test_and_branch_reachable:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1281&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1281&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The computation in ZLoadBarrierStubC2Aarch64::ZLoadBarrierStubC2Aarch64 must be wrong but I can&amp;#39;t see how yet:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1293&quot;&gt;https://github.com/openjdk/jdk/blob/d20034b09c99026e7dc2213f7d88ebdc85e5b1e7/src/hotspot/cpu/aarch64/gc/z/zBarrierSetAssembler_aarch64.cpp#L1293&lt;/a&gt;</comment>
                            <comment id="14624893" author="thartmann" created="Wed, 8 Nov 2023 04:56:49 -0800"  >ILW = Guarantee failure during C2 compilation, with stress test and generational ZGC, disable generational ZGC = HLM = P3</comment>
                            <comment id="14624817" author="rsunderbabu" created="Wed, 8 Nov 2023 02:43:21 -0800"  >ILW = C2 assertion on AArch64, observed only with reported test, Not sure = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5115457">JDK-8320742</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5099682">JDK-8307058</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5115383">JDK-8320682</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="107155" name="hs_err_pid2550803.log" size="1826249" author="thartmann" created="Wed, 8 Nov 2023 04:19:00 -0800"/>
                            <attachment id="107156" name="replay_pid2550803.log" size="9838964" author="thartmann" created="Wed, 8 Nov 2023 04:19:02 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33sln:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>