<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:15:15 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8295486] Inconsistent constant field values observed during compilation</title>
                <link>https://bugs.openjdk.org/browse/JDK-8295486</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK20 CI:&lt;br/&gt;
&lt;br/&gt;
serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(6/331)----------&lt;br/&gt;
command: main -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest&lt;br/&gt;
reason: User specified action: run main/othervm/native -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest &lt;br/&gt;
started: Tue Oct 18 04:57:40 UTC 2022&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
finished: Tue Oct 18 04:58:43 UTC 2022&lt;br/&gt;
elapsed time (seconds): 63.775&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(21/1329)*----------&lt;br/&gt;
# To suppress the following error report, specify this argument&lt;br/&gt;
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\phaseX.cpp:1751&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (c:\\sb\\prod\\1665986525\\workspace\\open\\src\\hotspot\\share\\opto\\phaseX.cpp:1751), pid=27764, tid=6024&lt;br/&gt;
#  assert(t-&amp;gt;meet(t0) == t-&amp;gt;remove_speculative()) failed: Not monotonic&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (20.0+20) (fastdebug build 20-ea+20-1411)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+20-1411, compiled mode, sharing, compressed class ptrs, g1 gc, windows-amd64)&lt;br/&gt;
# Core dump will be written. Default location: C:\\sb\\prod\\1666068570\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\2\\hs_err_pid27764.mdmp&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# C:\\sb\\prod\\1666068570\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\2\\hs_err_pid27764.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# C:\\sb\\prod\\1666068570\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\2\\replay_pid27764.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(48/6421)*----------&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x000002685b675090):  JavaThread &amp;quot;C2 CompilerThread2&amp;quot; daemon [_thread_in_native, id=6024, stack(0x000000e8ec100000,0x000000e8ec200000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  57269 15000    b        java.lang.invoke.StringConcatFactory::newArray (35 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000e8ec100000,0x000000e8ec200000]&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [jvm.dll+0xc08351]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)&lt;br/&gt;
V  [jvm.dll+0xe6ac0e]  VMError::report+0x10be  (vmError.cpp:841)&lt;br/&gt;
V  [jvm.dll+0xe6c704]  VMError::report_and_die+0x644  (vmError.cpp:1700)&lt;br/&gt;
V  [jvm.dll+0xe6ce44]  VMError::report_and_die+0x64  (vmError.cpp:1481)&lt;br/&gt;
V  [jvm.dll+0x57c6e7]  report_vm_error+0xb7  (debug.cpp:285)&lt;br/&gt;
V  [jvm.dll+0xc453f9]  PhaseCCP::analyze+0x569  (phaseX.cpp:1795)&lt;br/&gt;
V  [jvm.dll+0xc42d6f]  PhaseCCP::PhaseCCP+0x10f  (phaseX.cpp:1738)&lt;br/&gt;
V  [jvm.dll+0x511a71]  Compile::Optimize+0xc51  (compile.cpp:2396)&lt;br/&gt;
V  [jvm.dll+0x50ed3d]  Compile::Compile+0x148d  (compile.cpp:832)&lt;br/&gt;
V  [jvm.dll+0x4355d5]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)&lt;br/&gt;
V  [jvm.dll+0x528af4]  CompileBroker::invoke_compiler_on_method+0x884  (compileBroker.cpp:2243)&lt;br/&gt;
V  [jvm.dll+0x5262ed]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)&lt;br/&gt;
V  [jvm.dll+0x7f2bd2]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:700)&lt;br/&gt;
V  [jvm.dll+0xde5867]  Thread::call_run+0x257  (thread.cpp:229)&lt;br/&gt;
V  [jvm.dll+0xc06c68]  thread_native_entry+0xb8  (os_windows.cpp:547)&lt;br/&gt;
C  [ucrtbase.dll+0x2268a]&lt;br/&gt;
C  [KERNEL32.DLL+0x17974]&lt;br/&gt;
C  [ntdll.dll+0x5a0b1]&lt;br/&gt;
&lt;br/&gt;
The failing assertion is similar to one that was fixed in jdk-20+20-1404,&lt;br/&gt;
but this failure happened in jdk-20+20-1411-tier7:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8293531&quot; title=&quot;C2: some vectorapi tests fail assert &amp;quot;Not monotonic&amp;quot; with flag -XX:TypeProfileLevel=222&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8293531&quot;&gt;&lt;strike&gt;JDK-8293531&lt;/strike&gt;&lt;/a&gt; C2: some vectorapi tests fail assert &amp;quot;Not monotonic&amp;quot; with flag -XX:TypeProfileLevel=222</description>
                <environment></environment>
        <key id="5085527">JDK-8295486</key>
            <summary>Inconsistent constant field values observed during compilation</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thartmann">Tobias Hartmann</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>c2</label>
                            <label>intermittent</label>
                            <label>intermittent-low-frequency</label>
                            <label>oracle-triage-20</label>
                            <label>regression</label>
                            <label>tier4</label>
                            <label>tier6</label>
                            <label>tier7</label>
                            <label>tier8</label>
                    </labels>
                <created>Tue, 18 Oct 2022 07:03:29 -0700</created>
                <updated>Thu, 8 Feb 2024 01:37:19 -0800</updated>
                            <resolved>Wed, 1 Feb 2023 03:19:15 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14556506" author="dukebot" created="Wed, 1 Feb 2023 03:19:14 -0800"  >Changeset: cae577a7&lt;br/&gt;
Author:    Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-01 11:15:35 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/cae577a7102e97278f3f6880e529a68c1f7b71ab&quot;&gt;https://git.openjdk.org/jdk/commit/cae577a7102e97278f3f6880e529a68c1f7b71ab&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14548953" author="roboduke" created="Thu, 5 Jan 2023 05:33:49 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11861&quot;&gt;https://git.openjdk.org/jdk/pull/11861&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-05 13:26:11 +0000</comment>
                            <comment id="14540016" author="thartmann" created="Wed, 23 Nov 2022 11:44:30 -0800"  >Ah, you are right. That&amp;#39;s probably the way to go then. Let me try mixing some null values in my test :)</comment>
                            <comment id="14540014" author="vlivanov" created="Wed, 23 Nov 2022 11:42:00 -0800"  >No, NULL value of a @Stable field signals that the field is not yet initialized.</comment>
                            <comment id="14540011" author="thartmann" created="Wed, 23 Nov 2022 11:32:56 -0800"  >But even a null field value will be constant folded, right? So we would need to delay initialization of the field holder which is kind of tricky for a static field when we still want the load to be compiled.</comment>
                            <comment id="14540010" author="vlivanov" created="Wed, 23 Nov 2022 11:28:39 -0800"  >The only way to keep the load IMO is to delay the field initialization.  </comment>
                            <comment id="14540009" author="thartmann" created="Wed, 23 Nov 2022 11:22:10 -0800"  >Right, I&amp;#39;m currently just struggling with coming up with a test that delays constant folding the load up until CCP, because only there we would invoke LoadNode::Value multiple times.</comment>
                            <comment id="14540008" author="vlivanov" created="Wed, 23 Nov 2022 11:19:20 -0800"  >Yes, results of multiple initialization stores may be observed during compilation unless CI caches observed value. </comment>
                            <comment id="14540003" author="thartmann" created="Wed, 23 Nov 2022 11:00:39 -0800"  >Thanks, Vladimir. In the meantime, I noticed as well that LoadNode::Value -&amp;gt; Type::make_constant_from_field loads the field value again on each invocation and I&amp;#39;m currently trying to write a test reproducing the failing scenario. There are at least two non-null field values involved though, as the logging I posted in a previous comment shows. I.e., the field value is already non-null at the start of PhaseCCP and is then updated to a different non-null value during CCP. Probably just because of a concurrent initialization of the stable field by multiple threads. Similar to what I described in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288970&quot; title=&quot;G1 does not keep weak nmethod oops alive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288970&quot;&gt;&lt;strike&gt;JDK-8288970&lt;/strike&gt;&lt;/a&gt; (see also Test.java I attached there).</comment>
                            <comment id="14539994" author="vlivanov" created="Wed, 23 Nov 2022 10:20:08 -0800"  >&amp;gt; It looks like as if the load is constant folded to a DirectMethodHandle but the field value is update during CCP, leading to inconsistent types. I&amp;#39;m not sure yet how that can happen because the constant field value should be cached during compilation.&lt;br/&gt;
&lt;br/&gt;
I believe the problematic scenario is the following:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- the first time a NULL is observed and the load stays intact;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- meanwhile, Java code initializes the field with non-NULL value;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- the second time an attempt is made, JIT observes a non-default value and turns the load into a constant.&lt;br/&gt;
&lt;br/&gt;
The immediate problem is that CI doesn&amp;#39;t cache observed element values and reads the field/array element on every request (see Type::make_constant_from_field()/ciInstance::field_value() and Type::make_constant_from_array_element()/ciArray::element_value()). </comment>
                            <comment id="14538734" author="thartmann" created="Fri, 18 Nov 2022 03:47:45 -0800"  >The type belongs to a load from the @Stable field OBJECT_STRINGIFIER from the StringConcatFactory:&lt;br/&gt;
2662  LoadN  === 2521 768 1643  [[ 2525 ]]  @java/lang/Class java.lang.Class {0x00000000d04ee3e0} - klass: public final synchronized &amp;#39;java/lang/Class&amp;#39; [...] 0 (0x0000000000000000):Constant:exact+176 * [narrow], name=OBJECT_STRINGIFIER, idx=14; (does not depend only on test, pinned)  Type:narrowoop: java/lang/invoke/MethodHandle:BotPTR * !jvms: java.lang.invoke.StringConcatFactory::floatStringifier @ bci:16 (line 905) java.lang.invoke.StringConcatFactory::generateMHInlineCopy @ bci:275 (line 508)&lt;br/&gt;
&lt;br/&gt;
It looks like as if the load is constant folded to a DirectMethodHandle but the field value is update during CCP, leading to inconsistent types. I&amp;#39;m not sure yet how that can happen because the constant field value should be cached during compilation.</comment>
                            <comment id="14538724" author="thartmann" created="Fri, 18 Nov 2022 02:19:11 -0800"  >I verified that the assert also triggers without &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8293531&quot; title=&quot;C2: some vectorapi tests fail assert &amp;quot;Not monotonic&amp;quot; with flag -XX:TypeProfileLevel=222&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8293531&quot;&gt;&lt;strike&gt;JDK-8293531&lt;/strike&gt;&lt;/a&gt;, so this is unrelated.</comment>
                            <comment id="14538696" author="thartmann" created="Fri, 18 Nov 2022 00:25:55 -0800"  >Output with -XX:+Verbose suggest that the actual issue is that t = type(n) and t0 = n-&amp;gt;Value() point to different DirectMethodHandles:&lt;br/&gt;
&lt;br/&gt;
t:&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle java.lang.invoke.DirectMethodHandle {0x00000000db71ee08} - klass: synchronized &amp;#39;java/lang/invoke/DirectMethodHandle&amp;#39; - ---- fields (total size 5 words): - private &amp;#39;customizationCount&amp;#39; &amp;#39;B&amp;#39; @12  0 (0x00) - private volatile &amp;#39;updateInProgress&amp;#39; &amp;#39;Z&amp;#39; @13  false (0x00) - private final &amp;#39;type&amp;#39; &amp;#39;Ljava/lang/invoke/MethodType;&amp;#39; @16  a &amp;#39;java/lang/invoke/MethodType&amp;#39;{0x00000000db795c10} = (Ljava/lang/Object;)Ljava/lang/String; (0xdb795c10) - final &amp;#39;form&amp;#39; &amp;#39;Ljava/lang/invoke/LambdaForm;&amp;#39; @20  a &amp;#39;java/lang/invoke/LambdaForm&amp;#39;{0x00000000d037ed88} =&amp;gt; a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000d037ee90} = {method} {0x00007f67d4316af0} &amp;#39;invokeStatic&amp;#39; &amp;#39;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&amp;#39; in final synchronized &amp;#39;java/lang/invoke/DirectMethodHandle$Holder&amp;#39; (0xd037ed88) - private &amp;#39;asTypeCache&amp;#39; &amp;#39;Ljava/lang/invoke/MethodHandle;&amp;#39; @24  NULL (0x00000000) - private &amp;#39;asTypeSoftCache&amp;#39; &amp;#39;Ljava/lang/ref/SoftReference;&amp;#39; @28  NULL (0x00000000) - final &amp;#39;crackable&amp;#39; &amp;#39;Z&amp;#39; @14  true (0x01) - final &amp;#39;member&amp;#39; &amp;#39;Ljava/lang/invoke/MemberName;&amp;#39; @32  a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000db71ed78} = {method} {0x00007f67d420e6b0} &amp;#39;stringOf&amp;#39; &amp;#39;(Ljava/lang/Object;)Ljava/lang/String;&amp;#39; in final synchronized &amp;#39;java/lang/StringConcatHelper&amp;#39; (0xdb71ed78):Constant:exact *&lt;br/&gt;
&lt;br/&gt;
t0:&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle java.lang.invoke.DirectMethodHandle {0x00000000db9ad3d0} - klass: synchronized &amp;#39;java/lang/invoke/DirectMethodHandle&amp;#39; - ---- fields (total size 5 words): - private &amp;#39;customizationCount&amp;#39; &amp;#39;B&amp;#39; @12  0 (0x00) - private volatile &amp;#39;updateInProgress&amp;#39; &amp;#39;Z&amp;#39; @13  false (0x00) - private final &amp;#39;type&amp;#39; &amp;#39;Ljava/lang/invoke/MethodType;&amp;#39; @16  a &amp;#39;java/lang/invoke/MethodType&amp;#39;{0x00000000db795c10} = (Ljava/lang/Object;)Ljava/lang/String; (0xdb795c10) - final &amp;#39;form&amp;#39; &amp;#39;Ljava/lang/invoke/LambdaForm;&amp;#39; @20  a &amp;#39;java/lang/invoke/LambdaForm&amp;#39;{0x00000000d037ed88} =&amp;gt; a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000d037ee90} = {method} {0x00007f67d4316af0} &amp;#39;invokeStatic&amp;#39; &amp;#39;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&amp;#39; in final synchronized &amp;#39;java/lang/invoke/DirectMethodHandle$Holder&amp;#39; (0xd037ed88) - private &amp;#39;asTypeCache&amp;#39; &amp;#39;Ljava/lang/invoke/MethodHandle;&amp;#39; @24  NULL (0x00000000) - private &amp;#39;asTypeSoftCache&amp;#39; &amp;#39;Ljava/lang/ref/SoftReference;&amp;#39; @28  NULL (0x00000000) - final &amp;#39;crackable&amp;#39; &amp;#39;Z&amp;#39; @14  true (0x01) - final &amp;#39;member&amp;#39; &amp;#39;Ljava/lang/invoke/MemberName;&amp;#39; @32  a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000db9ad2a8} = {method} {0x00007f67d420e6b0} &amp;#39;stringOf&amp;#39; &amp;#39;(Ljava/lang/Object;)Ljava/lang/String;&amp;#39; in final synchronized &amp;#39;java/lang/StringConcatHelper&amp;#39; (0xdb9ad2a8):Constant:exact *&lt;br/&gt;
&lt;br/&gt;
t-&amp;gt;meet(t0):&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle:NotNull:exact *&lt;br/&gt;
&lt;br/&gt;
t-&amp;gt;remove_speculative():&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle java.lang.invoke.DirectMethodHandle {0x00000000db71ee08} - klass: synchronized &amp;#39;java/lang/invoke/DirectMethodHandle&amp;#39; - ---- fields (total size 5 words): - private &amp;#39;customizationCount&amp;#39; &amp;#39;B&amp;#39; @12  0 (0x00) - private volatile &amp;#39;updateInProgress&amp;#39; &amp;#39;Z&amp;#39; @13  false (0x00) - private final &amp;#39;type&amp;#39; &amp;#39;Ljava/lang/invoke/MethodType;&amp;#39; @16  a &amp;#39;java/lang/invoke/MethodType&amp;#39;{0x00000000db795c10} = (Ljava/lang/Object;)Ljava/lang/String; (0xdb795c10) - final &amp;#39;form&amp;#39; &amp;#39;Ljava/lang/invoke/LambdaForm;&amp;#39; @20  a &amp;#39;java/lang/invoke/LambdaForm&amp;#39;{0x00000000d037ed88} =&amp;gt; a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000d037ee90} = {method} {0x00007f67d4316af0} &amp;#39;invokeStatic&amp;#39; &amp;#39;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&amp;#39; in final synchronized &amp;#39;java/lang/invoke/DirectMethodHandle$Holder&amp;#39; (0xd037ed88) - private &amp;#39;asTypeCache&amp;#39; &amp;#39;Ljava/lang/invoke/MethodHandle;&amp;#39; @24  NULL (0x00000000) - private &amp;#39;asTypeSoftCache&amp;#39; &amp;#39;Ljava/lang/ref/SoftReference;&amp;#39; @28  NULL (0x00000000) - final &amp;#39;crackable&amp;#39; &amp;#39;Z&amp;#39; @14  true (0x01) - final &amp;#39;member&amp;#39; &amp;#39;Ljava/lang/invoke/MemberName;&amp;#39; @32  a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000db71ed78} = {method} {0x00007f67d420e6b0} &amp;#39;stringOf&amp;#39; &amp;#39;(Ljava/lang/Object;)Ljava/lang/String;&amp;#39; in final synchronized &amp;#39;java/lang/StringConcatHelper&amp;#39; (0xdb71ed78):Constant:exact *</comment>
                            <comment id="14538668" author="thartmann" created="Thu, 17 Nov 2022 22:27:09 -0800"  >This is extremely intermittent but I managed to reproduce with additional logging enabled:&lt;br/&gt;
t:&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle:exact *&lt;br/&gt;
t0:&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle:exact *&lt;br/&gt;
t-&amp;gt;meet(t0):&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle:NotNull:exact *&lt;br/&gt;
t-&amp;gt;remove_speculative():&lt;br/&gt;
narrowoop: java/lang/invoke/DirectMethodHandle:exact *&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not sure how this can happen.</comment>
                            <comment id="14538426" author="chagedorn" created="Thu, 17 Nov 2022 03:58:50 -0800"  >Updated ILW = &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8293531&quot; title=&quot;C2: some vectorapi tests fail assert &amp;quot;Not monotonic&amp;quot; with flag -XX:TypeProfileLevel=222&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8293531&quot;&gt;&lt;strike&gt;JDK-8293531&lt;/strike&gt;&lt;/a&gt; only made the failing assert stronger so it is a debug VM only issue for the reported cases; seen couple of times but still intermittent and not locally reproducible, yet (tried with various replay files); disable compilation of affected method = MMM = P3</comment>
                            <comment id="14533116" author="dcubed" created="Fri, 28 Oct 2022 08:31:13 -0700"  >[~jbhateja] - I&amp;#39;ve attached the hs_err_pid and replay files for five sightings:&lt;br/&gt;
&lt;br/&gt;
Test runtime/clinit/ClassInitBarrier.java:&lt;br/&gt;
test-support_jtreg_open_test_hotspot_jtreg_hotspot_runtime_runtime_clinit_ClassInitBarrier_hs_err_pid4096539.log&lt;br/&gt;
test-support_jtreg_open_test_hotspot_jtreg_hotspot_runtime_runtime_clinit_ClassInitBarrier_replay_pid4096539.log&lt;br/&gt;
&lt;br/&gt;
Test serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java:&lt;br/&gt;
test-support_jtreg_open_test_hotspot_jtreg_hotspot_serviceability_serviceability_jvmti_DynamicCodeGenerated_DynamicCodeGeneratedTest_hs_err_pid27764.log&lt;br/&gt;
test-support_jtreg_open_test_hotspot_jtreg_hotspot_serviceability_serviceability_jvmti_DynamicCodeGenerated_DynamicCodeGeneratedTest_replay_pid27764.log&lt;br/&gt;
&lt;br/&gt;
Test java/util/Collections/EmptyNavigableMap.java:&lt;br/&gt;
test-support_jtreg_open_test_jdk_jdk_util_java_util_Collections_EmptyNavigableMap_hs_err_pid44102.log&lt;br/&gt;
test-support_jtreg_open_test_jdk_jdk_util_java_util_Collections_EmptyNavigableMap_replay_pid44102.log&lt;br/&gt;
&lt;br/&gt;
Test sun/util/calendar/CalendarSystemDeadLockTest.java (2 sightings):&lt;br/&gt;
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_hs_err_pid16780.log&lt;br/&gt;
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_hs_err_pid38424.log&lt;br/&gt;
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_replay_pid16780.log&lt;br/&gt;
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_replay_pid38424.log</comment>
                            <comment id="14532987" author="jbhateja" created="Thu, 27 Oct 2022 23:18:39 -0700"  >Hi [~dcubed], Please upload the relevant replay and hs_err files. I am not able to reproduce the failures with -XX:-TieredCompilation -Xbatch -XX:TypeProfileLevel=222 options.</comment>
                            <comment id="14531586" author="dcubed" created="Fri, 21 Oct 2022 05:55:19 -0700"  >Here&amp;#39;s a log file snippet for the jdk-20+21-1485-tier4 sighting:&lt;br/&gt;
&lt;br/&gt;
runtime/clinit/ClassInitBarrier.java&lt;br/&gt;
&lt;br/&gt;
java.base/java.lang.Thread.run(Thread.java:1591)&lt;br/&gt;
Phase: IN_PROGRESS&lt;br/&gt;
Non-blocking actions: 68 / 68&lt;br/&gt;
Blocking actions:     0 / 14&lt;br/&gt;
# To suppress the following error report, specify this argument&lt;br/&gt;
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1751&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48915/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6fabba54-5717-4210-8645-008c514d3801/runs/075776c2-60f8-4694-8e16-34141524c9a8/workspace/open/src/hotspot/share/opto/phaseX.cpp:1751), pid=4096539, tid=4096834&lt;br/&gt;
#  assert(t-&amp;gt;meet(t0) == t-&amp;gt;remove_speculative()) failed: Not monotonic&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (20.0+21) (fastdebug build 20-ea+21-1485)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+21-1485, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x154c554]  PhaseCCP::analyze()+0x254&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c4633add-ae09-4266-96a8-9d401965a0d3/runs/d6b1e4d5-7858-4bdb-b77f-27dfb59f5de2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/3/core.4096539)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c4633add-ae09-4266-96a8-9d401965a0d3/runs/d6b1e4d5-7858-4bdb-b77f-27dfb59f5de2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/3/hs_err_pid4096539.log&lt;br/&gt;
Thread Thread[#33,Thread-4,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#50,Thread-21,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#35,Thread-6,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#52,Thread-23,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#53,Thread-24,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#34,Thread-5,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#55,Thread-26,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#51,Thread-22,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#41,Thread-12,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#61,Thread-32,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#32,Thread-3,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#31,Thread-2,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
Thread Thread[#54,Thread-25,5,MainThreadGroup]: Finished successfully&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c4633add-ae09-4266-96a8-9d401965a0d3/runs/d6b1e4d5-7858-4bdb-b77f-27dfb59f5de2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/3/replay_pid4096539.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(49/7336)*----------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000fffd0c2bb5c0):  JavaThread &amp;quot;C2 CompilerThread3&amp;quot; daemon [_thread_in_native, id=4096834, stack(0x0000fffcd6000000,0x0000fffcd6200000)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  17939 3195    b        java.lang.invoke.StringConcatFactory::newArrayWithSuffix (61 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffcd6000000,0x0000fffcd6200000],  sp=0x0000fffcd61fabc0,  free space=2026k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x154c554]  PhaseCCP::analyze()+0x254  (phaseX.cpp:1751)&lt;br/&gt;
V  [libjvm.so+0x98be04]  Compile::Optimize()+0x500  (compile.cpp:2393)&lt;br/&gt;
V  [libjvm.so+0x98dc18]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xfe8  (compile.cpp:831)&lt;br/&gt;
V  [libjvm.so+0x7b3d08]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1c4  (c2compiler.cpp:113)&lt;br/&gt;
V  [libjvm.so+0x99a554]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa34  (compileBroker.cpp:2237)&lt;br/&gt;
V  [libjvm.so+0x99adbc]  CompileBroker::compiler_thread_loop()+0x3b8  (compileBroker.cpp:1916)&lt;br/&gt;
V  [libjvm.so+0xeb0de0]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)&lt;br/&gt;
V  [libjvm.so+0x17b3078]  Thread::call_run()+0xf8  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x14c73d4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)&lt;br/&gt;
C  [libpthread.so.0+0x7908]  start_thread+0x188</comment>
                            <comment id="14530638" author="chagedorn" created="Tue, 18 Oct 2022 08:48:19 -0700"  >Hi [~jbhateja], can you take a look at that one?</comment>
                            <comment id="14530637" author="chagedorn" created="Tue, 18 Oct 2022 08:47:41 -0700"  >ILW = Newly changed assertion fails, single test and intermittent, use -XX:+UseCompressedOoops or disable compilation of affected method = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4692203">JDK-8024042</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5084451">JDK-8294616</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="101245" name="for_jatin.zip" size="269358" author="dcubed" created="Fri, 28 Oct 2022 08:26:42 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yxer:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>