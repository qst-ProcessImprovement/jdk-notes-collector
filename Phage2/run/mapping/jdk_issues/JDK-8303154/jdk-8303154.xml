<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:11:51 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303154] Investigate and improve instruction cache flushing during compilation</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303154</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>It was noticed that we flush the instruction cache three times for a single C1 compilation:&lt;br/&gt;
&lt;br/&gt;
(1) Flushing of the temporary code buffer:&lt;br/&gt;
AbstractICache::invalidate_range&lt;br/&gt;
AbstractAssembler::flush&lt;br/&gt;
Compilation::emit_code_epilog&lt;br/&gt;
Compilation::emit_code_body&lt;br/&gt;
Compilation::compile_java_method&lt;br/&gt;
Compilation::compile_method&lt;br/&gt;
&lt;br/&gt;
Why is that even required? We don&amp;#39;t execute code in the buffer but copy it to the code cache first.&lt;br/&gt;
&lt;br/&gt;
(2) When copying from the temporary buffer into the code cache:&lt;br/&gt;
AbstractICache::invalidate_range&lt;br/&gt;
CodeBuffer::copy_code_to&lt;br/&gt;
CodeBuffer::copy_code_and_locs_to&lt;br/&gt;
nmethod::nmethod&lt;br/&gt;
nmethod::new_nmethod&lt;br/&gt;
ciEnv::register_method&lt;br/&gt;
Compilation::install_code&lt;br/&gt;
Compilation::compile_method&lt;br/&gt;
&lt;br/&gt;
(3) And again when committing the code in the code cache:&lt;br/&gt;
AbstractICache::invalidate_range&lt;br/&gt;
CodeCache::commit&lt;br/&gt;
nmethod::nmethod&lt;br/&gt;
nmethod::new_nmethod&lt;br/&gt;
ciEnv::register_method&lt;br/&gt;
Compilation::install_code&lt;br/&gt;
Compilation::compile_method&lt;br/&gt;
&lt;br/&gt;
C2 seems to omit (1) but does (2) and (3) as well.&lt;br/&gt;
&lt;br/&gt;
From [~kvn]:&lt;br/&gt;
&amp;quot;C2 does not flush his temp buffer. But it does the same 2 flushes during code installation. We need to investigate that&amp;quot;&lt;br/&gt;
&amp;quot;CodeBuffer::copy_code_to() is used also for runtime stubs and other codes generation.&lt;br/&gt;
CodeCache::commit() is used for adapters too. But adapters uses RuntimeBlob which calls copy_code_to().&lt;br/&gt;
It seems we can try to skip flashing in CodeCache::commit() in such case.&lt;br/&gt;
It could be some historical conflicting changes.&lt;br/&gt;
We need RFE and track all paths to AbstractICache::invalidate_range() when we publish code to CodeCache.&amp;quot;</description>
                <environment></environment>
        <key id="5094947">JDK-8303154</key>
            <summary>Investigate and improve instruction cache flushing during compilation</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dfenacci">Damon Fenacci</assignee>
                                    <reporter username="thartmann">Tobias Hartmann</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>oracle-interest</label>
                            <label>performance</label>
                    </labels>
                <created>Fri, 24 Feb 2023 01:42:40 -0800</created>
                <updated>Tue, 11 Jul 2023 23:34:42 -0700</updated>
                            <resolved>Thu, 16 Mar 2023 01:31:45 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14594674" author="roboduke" created="Sun, 9 Jul 2023 23:36:32 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1559&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1559&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-10 06:30:20 +0000</comment>
                            <comment id="14594672" author="goetz" created="Sun, 9 Jul 2023 23:28:08 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.9-oracle.&lt;br/&gt;
Medium risk, simple change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14567372" author="dukebot" created="Thu, 16 Mar 2023 01:31:44 -0700"  >Changeset: b7945bc9&lt;br/&gt;
Author:    Damon Fenacci &amp;lt;&lt;a href=&apos;mailto:damon.fenacci@oracle.com&apos;&gt;damon.fenacci@oracle.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-16 08:28:55 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/b7945bc9e5db5761f17a9e56246424fbcab21627&quot;&gt;https://git.openjdk.org/jdk/commit/b7945bc9e5db5761f17a9e56246424fbcab21627&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14565779" author="roboduke" created="Fri, 10 Mar 2023 02:12:15 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12877&quot;&gt;https://git.openjdk.org/jdk/pull/12877&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-06 08:37:50 +0000</comment>
                            <comment id="14562855" author="pbk" created="Fri, 24 Feb 2023 17:27:17 -0800"  >In addition to multiple flushes for a single compilation unit, I also see multiple flushes for multiple compilations to the same base address (but presumably, different offsets).  For example, I see&lt;br/&gt;
&lt;br/&gt;
Thread 2 &amp;quot;java&amp;quot; hit Breakpoint 3, 0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
__aarch64_sync_cache_range:  base: 0xd9102880  end: 0xd9106498  delta: 15384&lt;br/&gt;
#0  0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
#1  0x0000fffff773b1cc in StubCodeMark::~StubCodeMark() ()&lt;br/&gt;
#2  0x0000fffff775e340 in StubGenerator::generate_bigIntegerRightShift() ()&lt;br/&gt;
#3  0x0000fffff776dcf4 in StubGenerator::generate_all() ()&lt;br/&gt;
#4  0x0000fffff773da00 in StubGenerator_generate(...) ()&lt;br/&gt;
#5  0x0000fffff776e218 in StubRoutines::initialize2() [clone .part.30] ()&lt;br/&gt;
#6  0x0000fffff71b78b0 in init_globals() () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#7  0x0000fffff77da370 in Threads::create_vm(...) ()&lt;br/&gt;
#8  0x0000fffff7270d5c in JNI_CreateJavaVM () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#9  0x0000fffff7f139e4 in JavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#10 0x0000fffff7f1784c in ThreadJavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#11 0x0000fffff7ed78f8 in start_thread () from /lib64/libpthread.so.0&lt;br/&gt;
#12 0x0000fffff7df21fc in thread_start () from /lib64/libc.so.6&lt;br/&gt;
&lt;br/&gt;
Thread 2 &amp;quot;java&amp;quot; hit Breakpoint 3, 0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
__aarch64_sync_cache_range:  base: 0xd9102880  end: 0xd9106590  delta: 15632&lt;br/&gt;
#0  0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
#1  0x0000fffff773b1cc in StubCodeMark::~StubCodeMark() ()&lt;br/&gt;
#2  0x0000fffff775ee7c in StubGenerator::generate_bigIntegerLeftShift() ()&lt;br/&gt;
#3  0x0000fffff776dd08 in StubGenerator::generate_all() ()&lt;br/&gt;
#4  0x0000fffff773da00 in StubGenerator_generate(...) ()&lt;br/&gt;
#5  0x0000fffff776e218 in StubRoutines::initialize2() [clone .part.30] ()&lt;br/&gt;
#6  0x0000fffff71b78b0 in init_globals() () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#7  0x0000fffff77da370 in Threads::create_vm(...) ()&lt;br/&gt;
#8  0x0000fffff7270d5c in JNI_CreateJavaVM () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#9  0x0000fffff7f139e4 in JavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#10 0x0000fffff7f1784c in ThreadJavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#11 0x0000fffff7ed78f8 in start_thread () from /lib64/libpthread.so.0&lt;br/&gt;
#12 0x0000fffff7df21fc in thread_start () from /lib64/libc.so.6&lt;br/&gt;
&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
Thread 2 &amp;quot;java&amp;quot; hit Breakpoint 3, 0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
__aarch64_sync_cache_range:  base: 0xd9102880  end: 0xd91093cc  delta: 27468&lt;br/&gt;
#0  0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
#1  0x0000fffff773b1cc in StubCodeMark::~StubCodeMark() ()&lt;br/&gt;
#2  0x0000fffff7756274 in StubGenerator::generate_sha256_implCompress(...) ()&lt;br/&gt;
#3  0x0000fffff776de9c in StubGenerator::generate_all() ()&lt;br/&gt;
#4  0x0000fffff773da00 in StubGenerator_generate(...) ()&lt;br/&gt;
#5  0x0000fffff776e218 in StubRoutines::initialize2() [clone .part.30] ()&lt;br/&gt;
#6  0x0000fffff71b78b0 in init_globals() () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#7  0x0000fffff77da370 in Threads::create_vm(...) ()&lt;br/&gt;
#8  0x0000fffff7270d5c in JNI_CreateJavaVM () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#9  0x0000fffff7f139e4 in JavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#10 0x0000fffff7f1784c in ThreadJavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#11 0x0000fffff7ed78f8 in start_thread () from /lib64/libpthread.so.0&lt;br/&gt;
#12 0x0000fffff7df21fc in thread_start () from /lib64/libc.so.6&lt;br/&gt;
&lt;br/&gt;
Thread 2 &amp;quot;java&amp;quot; hit Breakpoint 3, 0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
__aarch64_sync_cache_range:  base: 0xd9102880  end: 0xd91095a8  delta: 27944&lt;br/&gt;
#0  0x0000fffff6736f6c in __aarch64_sync_cache_range () from /lib64/libgcc_s.so.1&lt;br/&gt;
#1  0x0000fffff773b1cc in StubCodeMark::~StubCodeMark() ()&lt;br/&gt;
#2  0x0000fffff775d60c in StubGenerator::generate_updateBytesAdler32() ()&lt;br/&gt;
#3  0x0000fffff776ddd0 in StubGenerator::generate_all() ()&lt;br/&gt;
#4  0x0000fffff773da00 in StubGenerator_generate(...) ()&lt;br/&gt;
#5  0x0000fffff776e218 in StubRoutines::initialize2() [clone .part.30] ()&lt;br/&gt;
#6  0x0000fffff71b78b0 in init_globals() () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#7  0x0000fffff77da370 in Threads::create_vm(...) ()&lt;br/&gt;
#8  0x0000fffff7270d5c in JNI_CreateJavaVM () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/lib/server/libjvm.so&lt;br/&gt;
#9  0x0000fffff7f139e4 in JavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#10 0x0000fffff7f1784c in ThreadJavaMain () from /usr/lib/jvm/java-17-openjdk-17.0.4.1.1-2.el8_6.aarch64/bin/../lib/libjli.so&lt;br/&gt;
#11 0x0000fffff7ed78f8 in start_thread () from /lib64/libpthread.so.0&lt;br/&gt;
#12 0x0000fffff7df21fc in thread_start () from /lib64/libc.so.6&lt;br/&gt;
&lt;br/&gt;
0xd9102880 to 0xd91095a8 is 400+ cache lines, many of which get flushed dozens of times.  All those flushes happen during JNI_CreateJavaVM, but some people might care about JVM startup time.&lt;br/&gt;
</comment>
                            <comment id="14562854" author="pbk" created="Fri, 24 Feb 2023 17:09:59 -0800"  >I found it useful to run under gdb and use&lt;br/&gt;
&lt;br/&gt;
(gdb) break __aarch64_sync_cache_range&lt;br/&gt;
Breakpoint 3 at 0xfffff6736f6c&lt;br/&gt;
(gdb) commands&lt;br/&gt;
Type commands for breakpoint(s) 3, one per line.&lt;br/&gt;
End with a line saying just &amp;quot;end&amp;quot;.&lt;br/&gt;
&amp;gt;printf &amp;quot;__aarch64_sync_cache_range:  base: 0x%x  end: 0x%x  delta: %d\n&amp;quot;, $x0, $x1, ($x1 - $x0)&lt;br/&gt;
&amp;gt;where&lt;br/&gt;
&amp;gt;continue&lt;br/&gt;
&amp;gt;end&lt;br/&gt;
(gdb) run&lt;br/&gt;
Starting program: /usr/bin/java -XX:+PrintCompilation HelloWorld&lt;br/&gt;
&lt;br/&gt;
to get a log of all the base and end values, and thread stacks for all the call sites.&lt;br/&gt;
</comment>
                            <comment id="14562806" author="kvn" created="Fri, 24 Feb 2023 13:01:09 -0800"  >We also need to look on buffer flush when adapters are generated (before their installation in CodeCache). This is most numerous case.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5105288">JDK-8311915</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103743">JDK-8310514</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5095964">JDK-8303971</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30inn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17352"><![CDATA[b15]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>