<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:44:23 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8255119] Monitor::wait takes signed integer as timeout</title>
                <link>https://bugs.openjdk.org/browse/JDK-8255119</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>In `mutex.cpp`, `Monitor::wait(int64_t timeout, ...)` takes a signed integer as timeout, and asserts it must be positive , `assert(timeout &amp;gt;= 0, &amp;quot;negative timeout&amp;quot;);`. Changing it to `uint64_t` could forbid invalid values.&lt;br/&gt;
&lt;br/&gt;
A contrived example to trigger the assertion above using the `fastdebug` build: `java -XX:+UseZGC -Xms1g -XX:SoftMaxHeapSize=2g -Xmx4g -XX:ZUncommitDelay=9223372036854775 --version`.</description>
                <environment></environment>
        <key id="5032774">JDK-8255119</key>
            <summary>Monitor::wait takes signed integer as timeout</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="ayang">Albert Yang</reporter>
                        <labels>
                            <label>noreg-cleanup</label>
                            <label>sync</label>
                    </labels>
                <created>Wed, 21 Oct 2020 03:14:59 -0700</created>
                <updated>Tue, 17 Jan 2023 12:04:00 -0800</updated>
                            <resolved>Tue, 10 Jan 2023 04:53:37 -0800</resolved>
                                    <version>16</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14549903" author="dukebot" created="Tue, 10 Jan 2023 04:53:35 -0800"  >Changeset: a6386634&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-10 00:45:43 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a63866341ee8d169bdf88cf56f5d72168263fa81&quot;&gt;https://git.openjdk.org/jdk/commit/a63866341ee8d169bdf88cf56f5d72168263fa81&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14549565" author="roboduke" created="Mon, 9 Jan 2023 06:28:13 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11898&quot;&gt;https://git.openjdk.org/jdk/pull/11898&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-09 07:52:31 +0000</comment>
                            <comment id="14549462" author="dholmes" created="Sun, 8 Jan 2023 17:49:31 -0800"  >[~ayang] this has been assigned to me now. To answer your long unanswered question - yes, this issue will deal only with Monitor API, anything else should have its own bug/RFE filed if needed.</comment>
                            <comment id="14377087" author="ayang" created="Wed, 28 Oct 2020 03:01:33 -0700"  >&amp;gt; after reading the comments we believe this should be addressed as 3 separate RFEs&lt;br/&gt;
&lt;br/&gt;
Just to make sure I understand it correctly; this ticket will track the change from `Monitor::wait(int64_t timeout, ...)` to `Monitor::wait(uint64_t timeout, ...)` and other relevant changes along its call hierarchy. Two new tickets should be created to address the missing range-check in ZGC and Shenandoah.</comment>
                            <comment id="14376906" author="mseledtsov" created="Tue, 27 Oct 2020 11:26:22 -0700"  >RT Triage: after reading the comments we believe this should be addressed as 3 separate RFEs. Please file new issues for: ZGC and Shenandoah.</comment>
                            <comment id="14376563" author="ayang" created="Mon, 26 Oct 2020 00:50:00 -0700"  >&amp;gt;  Given we don&amp;#39;t need the additional range that an unsigned type gives you, this error checking seems beneficial.&lt;br/&gt;
In certain cases, this assert does catch some overflows, but it&amp;#39;s mostly accidental and doesn&amp;#39;t reflect the actual meaningful and valid range of a parameter. A proper solution is to enforce range checking for user-provided args, so when an invalid value is used, the program will stop at a well define place with clear error msgs, instead of failing at a seemingly random place with esoteric msgs.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Why would the allowed magnitude of the timeout be dependent on whether you are running 32-bit or 64-bit?&lt;br/&gt;
I only focused on the signedness; IMO, the `sizeof(type)` is of minor importance if proper range check is there.</comment>
                            <comment id="14376211" author="dholmes" created="Thu, 22 Oct 2020 21:32:26 -0700"  >As I stated, by using a signed value and having the assertion you can catch when callers have bugs in their timeout calculation code that causes overflow. Given we don&amp;#39;t need the additional range that an unsigned type gives you, this error checking seems beneficial.&lt;br/&gt;
&lt;br/&gt;
&amp;gt;&amp;gt; we have a RFE to get rid of the use of jlong in these internal API&lt;br/&gt;
&amp;gt; Could you post the link? I can&amp;#39;t find it in JBS or via google. &lt;br/&gt;
&lt;br/&gt;
Sorry I meant that in a general sense, not there is a specific JBS issue - though I thought I had filed something as a follow up last time changes to the Platform* code was made.&lt;br/&gt;
&lt;br/&gt;
&amp;gt;&amp;gt; ShenandoahPacer::wait users a size_t - which seems completely wrong for a timeout value.&lt;br/&gt;
&amp;gt; Well, I don&amp;#39;t see anything wrong; uint32_t, uint64_t, and size_t are all fine. &lt;br/&gt;
&lt;br/&gt;
Why would the allowed magnitude of the timeout be dependent on whether you are running 32-bit or 64-bit? The only reason to use size_t is to have a type the follows pointer sizes.&lt;br/&gt;
</comment>
                            <comment id="14376030" author="ayang" created="Thu, 22 Oct 2020 03:10:09 -0700"  >&amp;gt; that were all designed in a similar, consistent, way&lt;br/&gt;
Since negative timeout is always wrong, I believe the most consistent way is to assert it is positive on crossing signed-&amp;gt;unsigned boundary and always use unsigned within VM. This way, there&amp;#39;s no need to place `assert(timeout &amp;gt;= 0, &amp;quot;&amp;quot;)` throughout the call graph.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; we have a RFE to get rid of the use of jlong in these internal API&lt;br/&gt;
Could you post the link? I can&amp;#39;t find it in JBS or via google.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; ZUncommitDelay is a time in seconds, so without a range check a large value could overflow the conversion to a millisecond timeout value anyway.&lt;br/&gt;
I agree it&amp;#39;s missing the range check.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; ShenandoahPacer::wait users a size_t - which seems completely wrong for a timeout value.&lt;br/&gt;
Well, I don&amp;#39;t see anything wrong; uint32_t, uint64_t, and size_t are all fine.</comment>
                            <comment id="14375956" author="dholmes" created="Wed, 21 Oct 2020 19:27:36 -0700"  >My point is simply that we have similar API&amp;#39;s in the VM - some supporting Java constructs, others that are VM internal - that were all designed in a similar, consistent, way (PlatformMonitor, PlatformParker, PlatformEvent). Sure we could change that for the purely VM-internal uses (we have a RFE to get rid of the use of jlong in these internal API&amp;#39;s anyway). There may be some flow-on impact to the timeout calculation code due to a mix of signed and unsigned.&lt;br/&gt;
&lt;br/&gt;
ZUncommitDelay is a time in seconds, so without a range check a large value could overflow the conversion to a millisecond timeout value anyway. By using a signed value for the timeout the assertion is able to detect this. By using an unsigned value we can&amp;#39;t have any kind of validity assertion and it is up to the caller to ensure a correct timeout calculation with no overflow.&lt;br/&gt;
&lt;br/&gt;
ShenandoahPacer::wait users a size_t - which seems completely wrong for a timeout value.</comment>
                            <comment id="14375736" author="ayang" created="Wed, 21 Oct 2020 06:27:41 -0700"  >&amp;gt; Signed values for timeouts are used &amp;quot;everywhere&amp;quot; from Java code through to VM API&amp;#39;s.&lt;br/&gt;
Java code and `mutex.cpp` are not directly related, whatever choice made in one domain shouldn&amp;#39;t influence the other. Could you point me to an example of such VM API? &lt;br/&gt;
&lt;br/&gt;
My motivation for using unsignedd type is that there are no valid semantics for negative timeouts; hence, the existing assertions.&lt;br/&gt;
&lt;br/&gt;
Checking the call graph of `*Monitor::wait`, I can see most callers use the default arg `timeout=0`, and `ShenandoahPacer::wait` and `ZConditionLock::wait` are two exceptions using unsigned integer.</comment>
                            <comment id="14375705" author="dholmes" created="Wed, 21 Oct 2020 03:48:23 -0700"  >Signed values for timeouts are used &amp;quot;everywhere&amp;quot; from Java code through to VM API&amp;#39;s.&lt;br/&gt;
&lt;br/&gt;
-XX:ZUncommitDelay should have a range check on allowed values if it is to be used for a Monitor timeout.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5080645">JDK-8291593</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2q00r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>