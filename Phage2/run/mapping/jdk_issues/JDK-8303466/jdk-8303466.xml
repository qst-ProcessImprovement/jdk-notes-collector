<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:20:49 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8303466] C2: failed: malformed control flow. Limit type made precise with MaxL/MinL</title>
                <link>https://bugs.openjdk.org/browse/JDK-8303466</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Attached Test.java triggers compilation bailout.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/8f195ff236000d9c019f8beb2b13355083e211b5/src/hotspot/share/opto/compile.cpp#L3992&quot;&gt;https://github.com/openjdk/jdk/blob/8f195ff236000d9c019f8beb2b13355083e211b5/src/hotspot/share/opto/compile.cpp#L3992&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I set an assert at that position, and debugged it quickly. The issue seems to be that there is an IfNode with only one Proj output. This is obviously a BUG. Going futher back, it seems the second projection was removed during dead code removal.&lt;br/&gt;
&lt;br/&gt;
Run with&lt;br/&gt;
./java -XX:CompileCommand=compileonly,Test::test -XX:MaxVectorSize=64 -Xcomp -XX:CompileCommand=dontinline,Test::* -XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0 -XX:+PrintCompilation -XX:CompileCommand=quiet Test.java&lt;br/&gt;
&lt;br/&gt;
In the PrintCompilation log, one can find this:&lt;br/&gt;
&lt;br/&gt;
made not compilable on level 3  Test::run (11 bytes)   excluded by CompileCommand&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;4123   84    b  3       Test::test (32 bytes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;4124   85    b  4       Test::test (32 bytes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;4163   85    b  4       Test::test (32 bytes)   COMPILE SKIPPED: malformed control flow (retry at different tier)&lt;br/&gt;
&lt;br/&gt;
I found this bug during my work of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298935&quot; title=&quot;fix independence bug in create_pack logic in SuperWord::find_adjacent_refs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8298935&quot;&gt;&lt;strike&gt;JDK-8298935&lt;/strike&gt;&lt;/a&gt;. The IR framework complained that one of my test functions is &amp;quot;not compilable (anymore) at level C2&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
We should probably add&lt;br/&gt;
assert(false, &amp;quot;reason&amp;quot;)&lt;br/&gt;
to as many bailout locations as possible, so that we can detect bugs in debug mode, rather than just ignoring broken graphs.</description>
                <environment></environment>
        <key id="5095320">JDK-8303466</key>
            <summary>C2: failed: malformed control flow. Limit type made precise with MaxL/MinL</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>c2</label>
                            <label>javafuzzer</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk8u-fix-request</label>
                            <label>jdk8u-fix-yes</label>
                            <label>oracle-triage-21</label>
                            <label>performance</label>
                            <label>tier5</label>
                            <label>tier6</label>
                            <label>tier8</label>
                    </labels>
                <created>Wed, 1 Mar 2023 07:26:33 -0800</created>
                <updated>Thu, 26 Jun 2025 14:22:00 -0700</updated>
                            <resolved>Tue, 25 Apr 2023 22:44:46 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14685853" author="roboduke" created="Sat, 29 Jun 2024 09:51:29 -0700"  >[jdk8u-fix-request] Approval Request from Martin Balao Alonso&lt;br/&gt;
jdk8u is affected by this bug and would benefit from its fix. The patch does not apply cleanly but has been reviewed.</comment>
                            <comment id="14685759" author="roboduke" created="Fri, 28 Jun 2024 09:34:01 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk8u-dev/pull/529&quot;&gt;https://git.openjdk.org/jdk8u-dev/pull/529&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-27 21:21:10 +0000</comment>
                            <comment id="14685132" author="roboduke" created="Wed, 26 Jun 2024 08:55:08 -0700"  >[jdk11u-fix-request] Approval Request from Martin Balao Alonso&lt;br/&gt;
jdk11u is affected by this bug and would benefit from its fix. The patch does not apply cleanly but has been reviewed.</comment>
                            <comment id="14684646" author="roboduke" created="Tue, 25 Jun 2024 08:29:55 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2814&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2814&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-25 15:21:50 +0000</comment>
                            <comment id="14684643" author="roboduke" created="Tue, 25 Jun 2024 08:17:27 -0700"  >[jdk17u-fix-request] Approval Request from Martin Balao Alonso&lt;br/&gt;
jdk17u is affected by this bug and would benefit from its fix. The patch does not apply cleanly but has been reviewed.</comment>
                            <comment id="14684389" author="roboduke" created="Mon, 24 Jun 2024 21:52:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2635&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2635&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-25 04:46:52 +0000</comment>
                            <comment id="14609108" author="chagedorn" created="Wed, 6 Sep 2023 01:56:13 -0700"  >This matches more or less the number of sightings with JSR166TestCase.java in our CI. Looks like this is the only (known) test that triggers the assert in this specific way with late inlining.</comment>
                            <comment id="14609085" author="mbaesken" created="Wed, 6 Sep 2023 00:40:28 -0700"  >Hi [~chagedorn] we see this assertion rather often in our nightly tests; ~ 5-10 times per month. The java/util/concurrent/tck/JSR166TestCase.java test seems to be good at triggering this assert. But correct it is intermittent.</comment>
                            <comment id="14609079" author="chagedorn" created="Wed, 6 Sep 2023 00:24:19 -0700"  >Hi [~mbaesken], I think this is &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8312980&quot; title=&quot;C2: &amp;quot;malformed control flow&amp;quot; created during incremental inlining&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8312980&quot;&gt;&lt;strike&gt;JDK-8312980&lt;/strike&gt;&lt;/a&gt; where incremental inlining is causing the graph to become malformed. It is highly intermittent due to requiring a specific profile in order to inline some methods late to trigger the assert.</comment>
                            <comment id="14609075" author="mbaesken" created="Tue, 5 Sep 2023 23:55:49 -0700"  >today we saw another assert this time on linuxx86_64 (fastdebug); triggered by test java/util/concurrent/tck/JSR166TestCase.java&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/openjdk/linuxx86_64/jdk/src/hotspot/share/opto/compile.cpp:4013), pid=1735295, tid=1770794&lt;br/&gt;
#  assert(false) failed: malformed control flow&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  75855 6145       4       java.util.stream.ForEachOps$ForEachTask::compute (183 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f91a98fa000,0x00007f91a99fa000],  sp=0x00007f91a99f5290,  free space=1004k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xa163a1]  Compile::final_graph_reshaping()+0x11f1  (compile.cpp:4013)&lt;br/&gt;
V  [libjvm.so+0xa177be]  Compile::Optimize()+0x136e  (compile.cpp:2466)&lt;br/&gt;
V  [libjvm.so+0xa19530]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b70  (compile.cpp:854)&lt;br/&gt;
V  [libjvm.so+0x86f71b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x13b  (c2compiler.cpp:119)&lt;br/&gt;
V  [libjvm.so+0xa25bb0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb10  (compileBroker.cpp:2283)&lt;br/&gt;
V  [libjvm.so+0xa26a68]  CompileBroker::compiler_thread_loop()+0x618  (compileBroker.cpp:1944)&lt;br/&gt;
V  [libjvm.so+0xeef15e]  JavaThread::thread_main_inner()+0xee  (javaThread.cpp:720)&lt;br/&gt;
V  [libjvm.so+0x18fae8a]  Thread::call_run()+0xba  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x14e2fda]  thread_native_entry(Thread*)+0x12a  (os_linux.cpp:785)&lt;br/&gt;
Registers:&lt;br/&gt;
RAX=0x00007f9223b10000, RBX=0x00007f922360a7a4, RCX=0x00007f9222fbec18, RDX=0x00007f9222fa8022&lt;br/&gt;
RSP=0x00007f91a99f5290, RBP=0x00007f91a99f5490, RSI=0x0000000000000fad, RDI=0x00007f9223062808&lt;br/&gt;
R8 =0x0000000000000000, R9 =0x0000000000000000, R10=0x0000000000000001, R11=0x0000000000000293&lt;br/&gt;
R12=0x00007f91a99f78d0, R13=0x0000000000000002, R14=0x00007f9180633b98, R15=0x00007f91a99f52f0&lt;br/&gt;
RIP=0x00007f9221e163a1, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRAPNO=0x000000000000000e&lt;br/&gt;
&lt;br/&gt;
Should I maybe open a new JBS issue for this ?</comment>
                            <comment id="14578167" author="JIRAUSER19821" created="Mon, 1 May 2023 23:25:51 -0700"  >[~dcubed]&lt;br/&gt;
Good to hear it reduced the frequency.&lt;br/&gt;
&lt;br/&gt;
The &amp;quot;malformed control flow&amp;quot; has so far triggered 3 bugs:&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303466&quot; title=&quot;C2: failed: malformed control flow. Limit type made precise with MaxL/MinL&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303466&quot;&gt;&lt;strike&gt;JDK-8303466&lt;/strike&gt;&lt;/a&gt; (this here), &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8306997&quot; title=&quot;C2: &amp;quot;malformed control flow&amp;quot; assert due to missing safepoint on backedge with a switch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8306997&quot;&gt;&lt;strike&gt;JDK-8306997&lt;/strike&gt;&lt;/a&gt;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288981&quot; title=&quot;[Umbrella] C2: Fix issues with Skeleton/Assertion Predicates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288981&quot;&gt;&lt;strike&gt;JDK-8288981&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14577755" author="dcubed" created="Fri, 28 Apr 2023 13:09:44 -0700"  >[~epeter]&lt;br/&gt;
&lt;br/&gt;
&amp;gt; But the assert will still trigger with the fuzzer occasionally. &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; The assert will now still fail with the fuzzer occasionally because of the `assertion / skeleton&lt;br/&gt;
&amp;gt; predicate` bug that [~chagedorn] is already working on for a while. But I hope this fix will&lt;br/&gt;
&amp;gt; drastically reduce the rate of fuzzer failures with this assert.&lt;br/&gt;
&lt;br/&gt;
Definitely an improvement on frequency. Here&amp;#39;s the bug that I filed for the first sighting&lt;br/&gt;
since your fix went in:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8307131&quot; title=&quot;C2: assert(false) failed: malformed control flow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8307131&quot;&gt;&lt;strike&gt;JDK-8307131&lt;/strike&gt;&lt;/a&gt; C2: assert(false) failed: malformed control flow</comment>
                            <comment id="14577753" author="dcubed" created="Fri, 28 Apr 2023 13:04:12 -0700"  >This fix is integrated in jdk-21+20-1660.</comment>
                            <comment id="14576881" author="dukebot" created="Tue, 25 Apr 2023 22:44:45 -0700"  >Changeset: cc894d84&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-26 05:42:26 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/cc894d849aa5f730d5a806acfc7a237cf5170af1&quot;&gt;https://git.openjdk.org/jdk/commit/cc894d849aa5f730d5a806acfc7a237cf5170af1&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14576880" author="JIRAUSER19821" created="Tue, 25 Apr 2023 22:42:42 -0700"  >I now integrated the fix.&lt;br/&gt;
&lt;br/&gt;
But the assert will still trigger with the fuzzer occasionally.&lt;br/&gt;
&lt;br/&gt;
The assert will now still fail with the fuzzer occasionally because of the `assertion / skeleton predicate` bug that [~chagedorn] is already working on for a while. But I hope this fix will drastically reduce the rate of fuzzer failures with this assert.</comment>
                            <comment id="14575025" author="mbaesken" created="Wed, 19 Apr 2023 04:20:39 -0700"  >java/util/concurrent/tck/JSR166TestCase.java   jtreg test  (in curent jdk head)&lt;br/&gt;
triggered a similar looking issue on Windows 64bit, see below :&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (d:\openjdk\jdk-dev\src\hotspot\share\opto\compile.cpp:4003), pid=59848, tid=77048&lt;br/&gt;
#  assert(false) failed: malformed control flow&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.jdk-dev)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.jdk-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;. . .&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Current thread (0x000001a367335650):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=77048, stack(0x0000009d2ed00000,0x0000009d2ee00000)]&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:  47387 6171       4       java.util.stream.ForEachOps$ForEachTask::compute (183 bytes)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Stack: [0x0000009d2ed00000,0x0000009d2ee00000]&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [jvm.dll+0xbdd4f1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)&lt;br/&gt;
V  [jvm.dll+0xeee2ec]  VMError::report+0x100c  (vmError.cpp:815)&lt;br/&gt;
V  [jvm.dll+0xeeff35]  VMError::report_and_die+0x645  (vmError.cpp:1588)&lt;br/&gt;
V  [jvm.dll+0xef0644]  VMError::report_and_die+0x64  (vmError.cpp:1353)&lt;br/&gt;
V  [jvm.dll+0x53545b]  report_vm_error+0x5b  (debug.cpp:191)&lt;br/&gt;
V  [jvm.dll+0x4cdb71]  Compile::final_graph_reshaping+0xcf1  (compile.cpp:4003)&lt;br/&gt;
V  [jvm.dll+0x4c8ad8]  Compile::Optimize+0x1328  (compile.cpp:2450)&lt;br/&gt;
V  [jvm.dll+0x4c5828]  Compile::Compile+0x1458  (compile.cpp:841)&lt;br/&gt;
V  [jvm.dll+0x3e474a]  C2Compiler::compile_method+0x11a  (c2compiler.cpp:121)&lt;br/&gt;
V  [jvm.dll+0x4e0733]  CompileBroker::invoke_compiler_on_method+0x883  (compileBroker.cpp:2268)&lt;br/&gt;
V  [jvm.dll+0x4ddeaf]  CompileBroker::compiler_thread_loop+0x36f  (compileBroker.cpp:1945)&lt;br/&gt;
V  [jvm.dll+0x7b12b4]  JavaThread::thread_main_inner+0x224  (javaThread.cpp:718)&lt;br/&gt;
V  [jvm.dll+0xe66496]  Thread::call_run+0x1c6  (thread.cpp:229)&lt;br/&gt;
V  [jvm.dll+0xbdbe10]  os::win32::thread_native_entry+0xa0  (os_windows.cpp:551)&lt;br/&gt;
C  [ucrtbase.dll+0x2268a]&lt;br/&gt;
C  [KERNEL32.DLL+0x17ab4]&lt;br/&gt;
C  [ntdll.dll+0x5a351]&lt;br/&gt;
</comment>
                            <comment id="14571949" author="roboduke" created="Wed, 5 Apr 2023 04:01:36 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13269&quot;&gt;https://git.openjdk.org/jdk/pull/13269&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-31 12:44:17 +0000</comment>
                            <comment id="14571937" author="JIRAUSER19821" created="Wed, 5 Apr 2023 02:54:45 -0700"  >I now have a fix for some of these failures.&lt;br/&gt;
&lt;br/&gt;
However: some of the asserts seem to be related to missing skeleton/assertion predicates &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288981&quot; title=&quot;[Umbrella] C2: Fix issues with Skeleton/Assertion Predicates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8288981&quot;&gt;&lt;strike&gt;JDK-8288981&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
Let&amp;#39;s see how noisy this assert is after this change is integrated.</comment>
                            <comment id="14571034" author="JIRAUSER19821" created="Fri, 31 Mar 2023 09:37:39 -0700"  >Update:&lt;br/&gt;
I suspect this is multiple bugs. I am probably close to fixing one of them.&lt;br/&gt;
But until we fixed everything it may take a bit.</comment>
                            <comment id="14570972" author="JIRAUSER19821" created="Fri, 31 Mar 2023 05:46:14 -0700"  >Draft PR:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/13269&quot;&gt;https://github.com/openjdk/jdk/pull/13269&lt;/a&gt;</comment>
                            <comment id="14570067" author="thartmann" created="Tue, 28 Mar 2023 06:45:31 -0700"  >Raising priority because this now triggers an assert.</comment>
                            <comment id="14569607" author="chagedorn" created="Mon, 27 Mar 2023 04:39:25 -0700"  >I&amp;#39;ve attached a reduced Java Fuzzer case which triggers with AVX 512:&lt;br/&gt;
&lt;br/&gt;
$ java -XX:UseAVX=3 -Xcomp -XX:CompileOnly=Test Test5.java</comment>
                            <comment id="14569331" author="JIRAUSER19821" created="Fri, 24 Mar 2023 04:28:49 -0700"  >Thanks [~chagedorn] for reducing it. I cleaned it up by hand (removed infinite loop, etc), and now it is quite simple.&lt;br/&gt;
&lt;br/&gt;
./java -Xcomp -XX:CompileOnly=Test4 -XX:CompileCommand=printcompilation,Test4::* -XX:+TraceLoopOpts Test4.java</comment>
                            <comment id="14569308" author="JIRAUSER19821" created="Fri, 24 Mar 2023 03:13:08 -0700"  >I found a fuzzer test already. Let&amp;#39;s see if we can reduce it.&lt;br/&gt;
&lt;br/&gt;
./javac FuzzerUtils.java&lt;br/&gt;
./javac Test3.java&lt;br/&gt;
./java -Xcomp -XX:CompileOnly=Test3 Test3.java</comment>
                            <comment id="14569056" author="JIRAUSER19821" created="Thu, 23 Mar 2023 03:36:12 -0700"  >Update: since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303951&quot; title=&quot;Add asserts before record_method_not_compilable where possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303951&quot;&gt;&lt;strike&gt;JDK-8303951&lt;/strike&gt;&lt;/a&gt;, this now triggers an assert:&lt;br/&gt;
&lt;br/&gt;
dist dump&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0  2250  If  === 198 2249  [[ 267 ]] P=0.500000, C=-1.000000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1   267  IfFalse  === 2250  [[ 316 ]] #0&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/home/emanuel/Documents/fork3-jdk/open/src/hotspot/share/opto/compile.cpp:4003), pid=439330, tid=439343&lt;br/&gt;
#  assert(false) failed: malformed control flow</comment>
                            <comment id="14565660" author="JIRAUSER19821" created="Thu, 9 Mar 2023 13:24:13 -0800"  >Yes, that makes sense. I see a CastII node that eventually becomes TOP, because of an impossible range (input_type and _type have no overlap). That CastII was Ideal-ed and cloned many times, but its origin is in the new CastII added in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8286625&quot; title=&quot;C2 fails with assert(!n-&amp;gt;is_Store() &amp;amp;&amp;amp; !n-&amp;gt;is_LoadStore()) failed: no node with a side effect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8286625&quot;&gt;&lt;strike&gt;JDK-8286625&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
Maybe we are preserving the type on one path more than another, and that leads to things collapsing Yes, it looks like the zero-trip-count of post-loop does not collapse, but the values going into post-loop do collapse. Need more investigation.</comment>
                            <comment id="14564135" author="thartmann" created="Thu, 2 Mar 2023 07:44:43 -0800"  >Build search says that this was introduced/triggered by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8286625&quot; title=&quot;C2 fails with assert(!n-&amp;gt;is_Store() &amp;amp;&amp;amp; !n-&amp;gt;is_LoadStore()) failed: no node with a side effect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8286625&quot;&gt;&lt;strike&gt;JDK-8286625&lt;/strike&gt;&lt;/a&gt; in JDK 19. But that fix was also backported to JDK 17.0.5, where the issue does not reproduce.</comment>
                            <comment id="14563856" author="thartmann" created="Wed, 1 Mar 2023 07:47:03 -0800"  >ILW = Bailout from C2 compilation (harmless but affects performance), with single test on AVX-512, -XX:-UseSuperWord or limit MaxVectorSize = MLM = P4</comment>
                            <comment id="14563854" author="JIRAUSER19821" created="Wed, 1 Mar 2023 07:46:30 -0800"  >I&amp;#39;ll try to make this a WhiteBox test, so that we can run build-search and find the breaking change.&lt;br/&gt;
&lt;br/&gt;
Update:&lt;br/&gt;
I created a WhiteBox test that checks for compilation.&lt;br/&gt;
Test2.java&lt;br/&gt;
&lt;br/&gt;
~/Documents/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork6-jdk/build/linux-x64-debug/jdk/ -javaoptions:&amp;quot;&amp;quot; -J-Djavatest.maxOutputSize=1000000 /home/emanuel/Documents/fork6-jdk/open/test/hotspot/jtreg/compiler/loopopts/superword/Test2.java</comment>
                            <comment id="14563852" author="JIRAUSER19821" created="Wed, 1 Mar 2023 07:43:02 -0800"  >Both my local laptop and the windows-x64 machine on our testing system have avx512</comment>
                            <comment id="14563850" author="thartmann" created="Wed, 1 Mar 2023 07:41:33 -0800"  >This requires AVX-512, I could reproduce on a non-AVX-512 machine with Intel&amp;#39;s SDE.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5132973">JDK-8335264</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5132974">JDK-8335265</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133209">JDK-8335472</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134410">JDK-8336519</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134418">JDK-8336527</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134466">JDK-8336575</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5162905">JDK-8360733</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5162940">JDK-8360765</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5074760">JDK-8286625</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5089917">JDK-8298935</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5143566">JDK-8343944</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133297">JDK-8335552</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101418">JDK-8308504</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5095942">JDK-8303951</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5099768">JDK-8307131</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5136129">JDK-8339303</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103115" name="FuzzerUtils.java" size="13240" author="epeter" created="Fri, 24 Mar 2023 03:13:50 -0700"/>
                            <attachment id="102850" name="Test.java" size="692" author="epeter" created="Wed, 1 Mar 2023 07:27:02 -0800"/>
                            <attachment id="102851" name="Test2.java" size="1744" author="epeter" created="Wed, 1 Mar 2023 08:23:43 -0800"/>
                            <attachment id="103117" name="Test3.java" size="7708" author="epeter" created="Fri, 24 Mar 2023 03:17:08 -0700"/>
                            <attachment id="103119" name="Test4.java" size="502" author="epeter" created="Fri, 24 Mar 2023 04:28:47 -0700"/>
                            <attachment id="103133" name="Test5.java" size="256" author="chagedorn" created="Mon, 27 Mar 2023 04:38:34 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30kyj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>