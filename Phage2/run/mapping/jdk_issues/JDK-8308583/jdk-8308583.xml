<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 19:38:55 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8308583] SIGSEGV in GraphKit::gen_checkcast</title>
                <link>https://bugs.openjdk.org/browse/JDK-8308583</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>While testing a recent snapshot of JDK21 with Graal native image we started seeing a repeatable crash with a null pointer in GraphKit::gen_instanceof. &lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f0fffeee7ac, pid=7111, tid=7120&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment Oracle GraalVM 21-dev+19.1 (21.0+19) (build 21+19-jvmci-23.1-b02)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM Oracle GraalVM 21-dev+19.1 (21+19-jvmci-23.1-b02, mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, parallel gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x8457ac]  GraphKit::gen_instanceof(Node*, Node*, bool)+0x2ec&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2: 198273 50775       4       com.oracle.svm.core.StaticFieldsSupport$StaticFieldBaseNode::lower (83 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f0f8860a000,0x00007f0f8870b000],  sp=0x00007f0f88707580,  free space=1013k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x8457ac]  GraphKit::gen_instanceof(Node*, Node*, bool)+0x2ec&lt;br/&gt;
V  [libjvm.so+0xce25fd]  Parse::do_instanceof()+0x1bd&lt;br/&gt;
V  [libjvm.so+0xccf0b0]  Parse::do_one_block()+0x210&lt;br/&gt;
V  [libjvm.so+0xccf4b5]  Parse::do_all_blocks()+0xe5&lt;br/&gt;
V  [libjvm.so+0xcd1c05]  Parse::Parse(JVMState*, ciMethod*, float)+0x725&lt;br/&gt;
V  [libjvm.so+0x54e18b]  ParseGenerator::generate(JVMState*)+0x8b&lt;br/&gt;
V  [libjvm.so+0x54faf9]  PredictedCallGenerator::generate(JVMState*)+0x2f9&lt;br/&gt;
V  [libjvm.so+0x54faf9]  PredictedCallGenerator::generate(JVMState*)+0x2f9&lt;br/&gt;
V  [libjvm.so+0x7074d8]  Parse::do_call()+0x1f8&lt;br/&gt;
V  [libjvm.so+0xccf0b0]  Parse::do_one_block()+0x210&lt;br/&gt;
V  [libjvm.so+0xccf4b5]  Parse::do_all_blocks()+0xe5&lt;br/&gt;
V  [libjvm.so+0xcd1c05]  Parse::Parse(JVMState*, ciMethod*, float)+0x725&lt;br/&gt;
V  [libjvm.so+0x54e18b]  ParseGenerator::generate(JVMState*)+0x8b&lt;br/&gt;
V  [libjvm.so+0x61e8e5]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xd95&lt;br/&gt;
V  [libjvm.so+0x54d2a0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x120&lt;br/&gt;
V  [libjvm.so+0x625c37]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa87&lt;br/&gt;
V  [libjvm.so+0x626b48]  CompileBroker::compiler_thread_loop()+0x6a8&lt;br/&gt;
V  [libjvm.so+0x8d47e8]  JavaThread::thread_main_inner() [clone .part.0]+0xb8&lt;br/&gt;
V  [libjvm.so+0xe77646]  Thread::call_run()+0xa6&lt;br/&gt;
V  [libjvm.so+0xc9fd88]  thread_native_entry(Thread*)+0xd8&lt;br/&gt;
&lt;br/&gt;
The problem is that top of stack is top which leads to a crash when trying to emit the checkcast.  It appears the top is injected by a previous instanceof that uses maybe_cast_profiled_receiver and replace_in_map.  The top is produced at &lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L2890&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L2890&lt;/a&gt;.  It&amp;#39;s unclear to me whether this code is never supposed to produce top because the callers guard against it or if the returned top value is somehow supposed to be handled.&lt;br/&gt;
&lt;br/&gt;
Since this is occurring in the context of Graal and labsjdk I can&amp;#39;t give you something which will reproduce against master.  I&amp;#39;ve added some debug code to type_check_receiver to dump the involved values in GraphKit::type_check_receiver:&lt;br/&gt;
&lt;br/&gt;
rreceiver_type=bottom[int:&amp;gt;=0] (java/lang/Cloneable,java/io/Serializable):NotNull *&lt;br/&gt;
recvx_type=org/graalvm/compiler/word/HostedWord (org/graalvm/word/WordBase,org/graalvm/word/ComparableWord,org/graalvm/word/UnsignedWord,org/graalvm/word/PointerBase,org/graalvm/word/SignedWord,org/graalvm/word/Pointer):exact *&lt;br/&gt;
&amp;nbsp;1859  Phi  === 1074 1835 1047  [[ 255 1867 1885 1898 1906 1908 1912 1923 1908 1928 1928 1937 ]]  #bottom[int:&amp;gt;=0] (java/lang/Cloneable,java/io/Serializable):NotNull *&lt;br/&gt;
&amp;nbsp;1929  LoadNKlass  === _ 7 1928  [[ 1930 ]]  @bottom[int:&amp;gt;=0] (java/lang/Cloneable,java/io/Serializable):NotNull+8 * [narrowklass], idx=4; #narrowklass: java/lang/Object: 0x00007fe6cb015bf8 *&lt;br/&gt;
&amp;nbsp;1931  ConP  === 0  [[ 1932 ]]  #precise org/graalvm/compiler/word/HostedWord: 0x00007fe6eaa8a680 (org/graalvm/word/WordBase,org/graalvm/word/ComparableWord,org/graalvm/word/UnsignedWord,org/graalvm/word/PointerBase,org/graalvm/word/SignedWord,org/graalvm/word/Pointer):Constant:exact *  Klass:precise org/graalvm/compiler/word/HostedWord: 0x00007fe6eaa8a680 (org/graalvm/word/WordBase,org/graalvm/word/ComparableWord,org/graalvm/word/UnsignedWord,org/graalvm/word/PointerBase,org/graalvm/word/SignedWord,org/graalvm/word/Pointer):Constant:exact *&lt;br/&gt;
&amp;nbsp;1930  DecodeNKlass  === _ 1929  [[ 1932 ]]  #java/lang/Object: 0x00007fe6cb015bf8 *  Klass:java/lang/Object: 0x00007fe6cb015bf8 *&lt;br/&gt;
&amp;nbsp;1932  CmpP  === _ 1930 1931  [[ 1933 ]]&lt;br/&gt;
&amp;nbsp;1933  Bool  === _ 1932  [[ 1934 ]] [eq]&lt;br/&gt;
&lt;br/&gt;
The reason the cmp doesn&amp;#39;t fold is because while the receiver has a precise type, the DecodeNKlass has been erased to object.  The type folding in the CheckCastPPNode is working with the visible types so it&amp;#39;s able see that the types are disjoint.  How exactly is this code protected from this kind of problem?&lt;br/&gt;
&lt;br/&gt;
This is occurring in the context of labsjdk which is currently based on jdk21+19 but I don&amp;#39;t see any C2 fixes which might address this problem.  I did try out 8303512 but that didn&amp;#39;t help.&lt;br/&gt;
&lt;br/&gt;
I can provide instructions setting up a Graal build to reproduce this but can also test out any fixes. I added a guarantee that this code never produces a top return value and I&amp;#39;m currently running a mach5 gate with it but haven&amp;#39;t seen any failures yet.</description>
                <environment></environment>
        <key id="5101500">JDK-8308583</key>
            <summary>SIGSEGV in GraphKit::gen_checkcast</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://bugs.openjdk.org/images/jbsImages/p1.png">P1</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="roland">Roland Westrelin</assignee>
                                    <reporter username="never">Tom Rodriguez</reporter>
                        <labels>
                            <label>c2</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-21</label>
                            <label>regression</label>
                    </labels>
                <created>Mon, 22 May 2023 10:27:28 -0700</created>
                <updated>Tue, 11 Jul 2023 05:12:44 -0700</updated>
                            <resolved>Fri, 26 May 2023 00:05:30 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14584795" author="dukebot" created="Fri, 26 May 2023 00:05:29 -0700"  >Changeset: 199b1bf5&lt;br/&gt;
Author:    Roland Westrelin &amp;lt;&lt;a href=&apos;mailto:roland@openjdk.org&apos;&gt;roland@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-26 07:03:35 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c&quot;&gt;https://git.openjdk.org/jdk/commit/199b1bf5009120efd1fd37a1ddabc0c6fb84f62c&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14584512" author="thartmann" created="Thu, 25 May 2023 06:32:26 -0700"  >Great, thanks for confirming and thanks to Roland for the quick fix.</comment>
                            <comment id="14584510" author="dnsimon" created="Thu, 25 May 2023 06:27:22 -0700"  >I can confirm that it appears to resolve the SIGSEGV crashes. I tested both product and fastdebug builds.&lt;br/&gt;
Thanks for the quick fix [~roland]!&lt;br/&gt;
</comment>
                            <comment id="14584326" author="thartmann" created="Thu, 25 May 2023 00:05:50 -0700"  >[~dnsimon], [~never] could you verify that Roland&amp;#39;s fix also resolves the SIGSEGV crashes that you were observing? Thanks.</comment>
                            <comment id="14584320" author="roboduke" created="Wed, 24 May 2023 23:47:41 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14123&quot;&gt;https://git.openjdk.org/jdk/pull/14123&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-24 12:31:37 +0000</comment>
                            <comment id="14584017" author="thartmann" created="Wed, 24 May 2023 00:59:42 -0700"  >This seems to be a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297933&quot; title=&quot;[REDO] Compiler should only use verified interface types for optimization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297933&quot;&gt;&lt;strike&gt;JDK-8297933&lt;/strike&gt;&lt;/a&gt; in JDK 21. I verified that with Tom&amp;#39;s reproducer and build-search with -XX:+AbortVMOnCompilationFailure because we assert only after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303951&quot; title=&quot;Add asserts before record_method_not_compilable where possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303951&quot;&gt;&lt;strike&gt;JDK-8303951&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14583998" author="JIRAUSER19821" created="Tue, 23 May 2023 23:49:59 -0700"  >[~never] Thanks for the reproducer! I&amp;#39;ll look into it.&lt;br/&gt;
&lt;br/&gt;
We can restrict compilation to &amp;quot;cc::test&amp;quot;:&lt;br/&gt;
./java -Xbatch -XX:-TieredCompilation -XX:CompileCommand=printcompilation,cc::* -XX:CompileCommand=compileonly,cc::test cc.java</comment>
                            <comment id="14583994" author="thartmann" created="Tue, 23 May 2023 23:39:14 -0700"  >Thanks for the reproducer, Tom. Looks similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308504&quot; title=&quot;C2: &amp;quot;malformed control flow&amp;quot; after JDK-8303466&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308504&quot;&gt;&lt;strike&gt;JDK-8308504&lt;/strike&gt;&lt;/a&gt; / &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308392&quot; title=&quot;[Umbrella] C2: assert(false) failed: malformed control flow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308392&quot;&gt;JDK-8308392&lt;/a&gt;. We&amp;#39;ll investigate this asap.</comment>
                            <comment id="14583971" author="never" created="Tue, 23 May 2023 21:35:58 -0700"  >I&amp;#39;ve attached a test case cc.java which creates similar conditions.  It doesn&amp;#39;t SEGV, I think because the control flow and hierarchy is slightly different, but it does cause type_check_receiver to replace the object with top.  In fastdebug it dies with malformed control flow:&lt;br/&gt;
&lt;br/&gt;
$ ~/Downloads/jdk-21/fastdebug/bin/java -showversion cc&lt;br/&gt;
java version &amp;quot;21-ea&amp;quot; 2023-09-19 LTS&lt;br/&gt;
Java(TM) SE Runtime Environment (fastdebug build 21-ea+23-LTS-1988)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 21-ea+23-LTS-1988, mixed mode, sharing)&lt;br/&gt;
dist dump&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0  141  If  === 133 140  [[ 143 ]] P=1.000000, C=-1.000000 !jvms: cc$SubSnippetReflection::forObject @ bci:1 (line 29) cc::test @ bci:14 (line 64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1  143  IfFalse  === 141  [[ 148 ]] #0 !jvms: cc$SubSnippetReflection::forObject @ bci:1 (line 29) cc::test @ bci:14 (line 64)&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S102723/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/52417fc5-ae11-4950-9454-86253738dc5f/runs/b868ccc5-005a-40ca-8ded-eac7b2aafcf5/workspace/open/src/hotspot/share/opto/compile.cpp:4003), pid=53021, tid=23555&lt;br/&gt;
#  assert(false) failed: malformed control flow&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0+23) (fastdebug build 21-ea+23-LTS-1988)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+23-LTS-1988, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /Users/tkrodrig/hs_err_pid53021.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /Users/tkrodrig/replay_pid53021.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
[1]    53021 abort      ~/Downloads/jdk-21/fastdebug/bin/java -showversion cc&lt;br/&gt;
&lt;br/&gt;
It fails on current master as well.  The callers of type_check_receiver should probably be using static_subtype_check to guard calls to this method.</comment>
                            <comment id="14583777" author="never" created="Tue, 23 May 2023 08:07:29 -0700"  >I did try out the replay file but it died trying to initialize JVMCI so I&amp;#39;m not sure if replay needs to do something special to work with JVMCI.&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s always possible for a gvn.transform of CheckCastPPNode to produce top if the types are unrelated so whose responsibility is it to avoid it in this call chain?  type_check_receiver could simply avoid returning top:&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp&lt;br/&gt;
index 58c4191f7ff..18163f991bc 100644&lt;br/&gt;
--- a/src/hotspot/share/opto/graphKit.cpp&lt;br/&gt;
+++ b/src/hotspot/share/opto/graphKit.cpp&lt;br/&gt;
@@ -2886,8 +2886,10 @@ Node* GraphKit::type_check_receiver(Node* receiver, ciKlass* klass,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!receiver_type-&amp;gt;higher_equal(recvx_type)) { // ignore redundant casts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Subsume downstream occurrences of receiver with a cast to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// recv_xtype, since now we know what the type will be.&lt;br/&gt;
-      Node* cast = new CheckCastPPNode(control(), receiver, recvx_type);&lt;br/&gt;
-      (*casted_receiver) = _gvn.transform(cast);&lt;br/&gt;
+      Node* cast = _gvn.transform(new CheckCastPPNode(control(), receiver, recvx_type));&lt;br/&gt;
+      if (!cast-&amp;gt;is_top()) {&lt;br/&gt;
+        (*casted_receiver) = cast;&lt;br/&gt;
+      }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// (User must make the replace_in_map call.)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
</comment>
                            <comment id="14583763" author="dnsimon" created="Tue, 23 May 2023 07:49:50 -0700"  >We are seeing replay logs being generated for these crashes but our CI is not currently preserving these logs. We will resolved this (GR-45830) and hopefully have some replay logs soon.&lt;br/&gt;
I&amp;#39;m also not sure if this crash happens (or can happen) when generating libgraal. I&amp;#39;ll discuss more with Tom.&lt;br/&gt;
</comment>
                            <comment id="14583736" author="thartmann" created="Tue, 23 May 2023 07:24:52 -0700"  >We need a reproducer (either a Graal build setup or a working compilation replay file) to investigate. Please also add the hs_err file.</comment>
                            <comment id="14583536" author="chagedorn" created="Mon, 22 May 2023 23:43:35 -0700"  >Hi [~never], have you tried to reproduce it with a replay file? That might be easier to investigate if Graal is not set up.</comment>
                            <comment id="14583532" author="chagedorn" created="Mon, 22 May 2023 23:40:54 -0700"  >ILW = Crash during C2 parsing, only seen with Graal so far, disable compilation of affected methods = HLM = P3</comment>
                            <comment id="14583422" author="never" created="Mon, 22 May 2023 10:38:05 -0700"  >For reference, this is my modified version of type_check_receiver:&lt;br/&gt;
&lt;br/&gt;
// Profile-driven exact type check:&lt;br/&gt;
Node* GraphKit::type_check_receiver(Node* receiver, ciKlass* klass,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;float prob,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node* *casted_receiver) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!klass-&amp;gt;is_interface(), &amp;quot;no exact type check on interfaces&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const TypeKlassPtr* tklass = TypeKlassPtr::make(klass, Type::trust_interfaces);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node* recv_klass = load_object_klass(receiver);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node* want_klass = makecon(tklass);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node* cmp = _gvn.transform(new CmpPNode(recv_klass, want_klass));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node* bol = _gvn.transform(new BoolNode(cmp, BoolTest::eq));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;IfNode* iff = create_and_xform_if(control(), bol, prob, COUNT_UNKNOWN);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;set_control( _gvn.transform(new IfTrueNode (iff)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node* fail = _gvn.transform(new IfFalseNode(iff));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!stopped()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const TypeOopPtr* receiver_type = _gvn.type(receiver)-&amp;gt;isa_oopptr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const TypeOopPtr* recvx_type = tklass-&amp;gt;as_instance_type();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(recvx_type-&amp;gt;klass_is_exact(), &amp;quot;&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!receiver_type-&amp;gt;higher_equal(recvx_type)) { // ignore redundant casts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Subsume downstream occurrences of receiver with a cast to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// recv_xtype, since now we know what the type will be.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node* cast = new CheckCastPPNode(control(), receiver, recvx_type);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(*casted_receiver) = _gvn.transform(cast);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((*casted_receiver)-&amp;gt;is_top()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tty-&amp;gt;print(&amp;quot;receiver_type=&amp;quot;); receiver_type-&amp;gt;dump(); tty-&amp;gt;cr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tty-&amp;gt;print(&amp;quot;recvx_type=&amp;quot;); recvx_type-&amp;gt;dump(); tty-&amp;gt;cr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;receiver-&amp;gt;dump();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bol-&amp;gt;dump(4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;guarantee(!(*casted_receiver)-&amp;gt;is_top(), &amp;quot;top&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// (User must make the replace_in_map call.)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return fail;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
It seems to me this code should be performing the higher_equal part of the logic first and then using the result of that to determine whether to emit any code.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5088685">JDK-8297933</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103958" name="cc.java" size="1751" author="never" created="Tue, 23 May 2023 21:34:22 -0700"/>
                            <attachment id="103945" name="hs_err_pid7111.log" size="162228" author="dnsimon" created="Tue, 23 May 2023 07:34:12 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31m7f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17411"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>