<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:31:22 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8314515] java/util/concurrent/SynchronousQueue/Fairness.java failed with &quot;Error: fair=false i=8 j=0&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8314515</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK22 CI:&lt;br/&gt;
&lt;br/&gt;
java/util/concurrent/SynchronousQueue/Fairness.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(7/220)----------&lt;br/&gt;
command: main Fairness&lt;br/&gt;
reason: Assumed action based on file name: run main Fairness &lt;br/&gt;
started: Wed Aug 16 19:43:08 UTC 2023&lt;br/&gt;
Mode: agentvm&lt;br/&gt;
Agent id: 50&lt;br/&gt;
finished: Wed Aug 16 19:43:55 UTC 2023&lt;br/&gt;
elapsed time (seconds): 47.581&lt;br/&gt;
----------configuration:(12/1456)----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
----------System.err:(12/533)----------&lt;br/&gt;
java.lang.Error: fair=false i=8 j=0&lt;br/&gt;
&lt;br/&gt;
	at Fairness.testFairness(Fairness.java:64)&lt;br/&gt;
	at Fairness.main(Fairness.java:71)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1570)&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: java.lang.Error&lt;br/&gt;
JavaTest Message: shutting down test&lt;br/&gt;
&lt;br/&gt;
result: Failed. Execution failed: `main&amp;#39; threw exception: java.lang.Error: fair=false i=8 j=0&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
This failure mode reminds me of:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300663&quot; title=&quot;java/util/concurrent/SynchronousQueue/Fairness.java failed with &amp;quot;Error: fair=true i=0 j=1&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300663&quot;&gt;&lt;strike&gt;JDK-8300663&lt;/strike&gt;&lt;/a&gt; java/util/concurrent/SynchronousQueue/Fairness.java failed with &amp;quot;Error: fair=true i=0 j=1&amp;quot;&lt;br/&gt;
&lt;br/&gt;
which was fixed in jdk-22+8 on 2023.07.22.</description>
                <environment></environment>
        <key id="5108306">JDK-8314515</key>
            <summary>java/util/concurrent/SynchronousQueue/Fairness.java failed with &quot;Error: fair=false i=8 j=0&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="martin">Martin Buchholz</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                            <label>sust-test-stabilization</label>
                            <label>tier1</label>
                            <label>tier8</label>
                            <label>ursqe-triaged</label>
                    </labels>
                <created>Thu, 17 Aug 2023 07:14:50 -0700</created>
                <updated>Sun, 22 Sep 2024 08:49:22 -0700</updated>
                            <resolved>Thu, 11 Jan 2024 00:18:23 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14682699" author="roboduke" created="Tue, 18 Jun 2024 11:14:13 -0700"  >[jdk21u-fix-request] Approval Request from Elif Aslan&lt;br/&gt;
&#8220;Clean backport of fixing java/util/concurrent/SynchronousQueue/Fairness.java . Low risk. GHA tested&#8221;</comment>
                            <comment id="14682693" author="roboduke" created="Tue, 18 Jun 2024 11:07:13 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/745&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/745&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-18 18:01:01 +0000</comment>
                            <comment id="14640134" author="JIRAUSER20508" created="Mon, 15 Jan 2024 03:22:41 -0800"  >[~dholmes] I would hope so, since it would reduce noise. But I want to first make sure that the fix is watertight first.</comment>
                            <comment id="14640077" author="dholmes" created="Sun, 14 Jan 2024 23:06:43 -0800"  >Are we backporting this to 22?</comment>
                            <comment id="14639799" author="shade" created="Fri, 12 Jan 2024 04:27:04 -0800"  >Not sure which JDKs this affects, but adding at least JDK 21 to match similarly looking &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300663&quot; title=&quot;java/util/concurrent/SynchronousQueue/Fairness.java failed with &amp;quot;Error: fair=true i=0 j=1&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300663&quot;&gt;&lt;strike&gt;JDK-8300663&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14639663" author="dcubed" created="Thu, 11 Jan 2024 15:56:49 -0800"  >[~vklang] - Will do!</comment>
                            <comment id="14639502" author="JIRAUSER20508" created="Thu, 11 Jan 2024 07:09:29 -0800"  >[~dcubed] Keep your fingers crossed! :)</comment>
                            <comment id="14639495" author="dcubed" created="Thu, 11 Jan 2024 06:35:11 -0800"  >The fix for this bug is integrated in jdk-23+5-299.</comment>
                            <comment id="14639446" author="JIRAUSER20508" created="Thu, 11 Jan 2024 04:13:22 -0800"  >If the current theory around the cause of this issue was correct, then this should now be resolved. Given the problem of repeatability of this issue, it remains to be proven.&lt;br/&gt;
&lt;br/&gt;
Worth noting is that the fix was aimed at the test, and not the implementation, of the feature tested.</comment>
                            <comment id="14639402" author="dukebot" created="Thu, 11 Jan 2024 00:18:22 -0800"  >Changeset: 35e96627&lt;br/&gt;
Author:    Viktor Klang &amp;lt;&lt;a href=&apos;mailto:vklang@openjdk.org&apos;&gt;vklang@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-11 08:16:28 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/35e9662767cc0a1dea9b5afa2a6d61a85297253c&quot;&gt;https://git.openjdk.org/jdk/commit/35e9662767cc0a1dea9b5afa2a6d61a85297253c&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14639248" author="JIRAUSER20508" created="Wed, 10 Jan 2024 12:05:41 -0800"  >Given that this test only seems to fail with an expected difference of 1 (in the fair=false case it tests inverse order of elements to fair=true) I am hopeful that &lt;a href=&quot;https://github.com/openjdk/jdk/pull/17082&quot;&gt;https://github.com/openjdk/jdk/pull/17082&lt;/a&gt; might be able to close any potential window of opportunity where thread status is updated before parking is in effect.</comment>
                            <comment id="14639214" author="dcubed" created="Wed, 10 Jan 2024 11:01:50 -0800"  >Here&amp;#39;s a log file snippet from the jdk-23+5-288-tier1 sighting:&lt;br/&gt;
&lt;br/&gt;
java/util/concurrent/SynchronousQueue/Fairness.java&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(7/217)----------&lt;br/&gt;
command: main Fairness&lt;br/&gt;
reason: Assumed action based on file name: run main Fairness &lt;br/&gt;
started: Wed Jan 10 18:32:17 GMT 2024&lt;br/&gt;
Mode: agentvm&lt;br/&gt;
Agent id: 6&lt;br/&gt;
finished: Wed Jan 10 18:32:17 GMT 2024&lt;br/&gt;
elapsed time (seconds): 0.01&lt;br/&gt;
----------configuration:(12/1559)----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
----------System.err:(12/532)----------&lt;br/&gt;
java.lang.Error: fair=true i=1 j=2&lt;br/&gt;
&lt;br/&gt;
	at Fairness.testFairness(Fairness.java:64)&lt;br/&gt;
	at Fairness.main(Fairness.java:73)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1575)&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: java.lang.Error&lt;br/&gt;
JavaTest Message: shutting down test&lt;br/&gt;
&lt;br/&gt;
result: Failed. Execution failed: `main&amp;#39; threw exception: java.lang.Error: fair=true i=1 j=2</comment>
                            <comment id="14637743" author="roboduke" created="Fri, 5 Jan 2024 06:53:40 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17082&quot;&gt;https://git.openjdk.org/jdk/pull/17082&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-12 15:13:01 +0000</comment>
                            <comment id="14637488" author="dcubed" created="Thu, 4 Jan 2024 08:59:29 -0800"  >Here&amp;#39;s a log file snippet from the jdk-23+4-170-tier8 sighting:&lt;br/&gt;
&lt;br/&gt;
java/util/concurrent/SynchronousQueue/Fairness.java&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(7/228)----------&lt;br/&gt;
command: main Fairness&lt;br/&gt;
reason: Assumed action based on file name: run main Fairness &lt;br/&gt;
started: Thu Jan 04 06:10:52 UTC 2024&lt;br/&gt;
Mode: agentvm&lt;br/&gt;
Agent id: 131&lt;br/&gt;
finished: Thu Jan 04 06:11:48 UTC 2024&lt;br/&gt;
elapsed time (seconds): 56.629&lt;br/&gt;
----------configuration:(12/1167)*----------&lt;br/&gt;
Boot Layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class path: C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jtreg.jar &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\junit-platform-console-standalone-1.9.2.jar &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\testng-7.3.0.jar &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\jcommander-1.82.jar &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.3.1\\1\\bundles\\jtreg-7.3.1+1.zip\\jtreg\\lib\\guice-5.1.0.jar &lt;br/&gt;
&amp;nbsp;&amp;nbsp;patch:      java.base C:\\sb\\prod\\1704345123\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\patches\\java.base&lt;br/&gt;
&lt;br/&gt;
Test Layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class path: C:\\sb\\prod\\1704345123\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\classes\\3\\java\\util\\concurrent\\SynchronousQueue\\Fairness.d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-23+4-170\\src.full\\open\\test\\jdk\\java\\util\\concurrent\\SynchronousQueue&lt;br/&gt;
&lt;br/&gt;
----------rerun:(35/4950)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
----------System.err:(12/545)----------&lt;br/&gt;
java.lang.Error: fair=false i=8 j=0&lt;br/&gt;
&lt;br/&gt;
	at Fairness.testFairness(Fairness.java:64)&lt;br/&gt;
	at Fairness.main(Fairness.java:71)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1570)&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: java.lang.Error&lt;br/&gt;
JavaTest Message: shutting down test&lt;br/&gt;
&lt;br/&gt;
result: Failed. Execution failed: `main&amp;#39; threw exception: java.lang.Error: fair=false i=8 j=0</comment>
                            <comment id="14606137" author="JIRAUSER20508" created="Wed, 23 Aug 2023 06:58:57 -0700"  >[~martin] I think that&amp;#39;s a fair point. Currently we only test for platform threads (arguably it should also be tested with VTs?), and also given spinwait-backoff-park-loops it is difficult to test under all conditions since there&amp;#39;s no way of determining the fairness aspect in this case besides statistically (since you&amp;#39;d need to formally define a total order AND have a bullet-proof way of telling whether a thread is considered blocked).&lt;br/&gt;
&lt;br/&gt;
All of the above of course is only as good as my (current) understanding, so I stand corrected if not.</comment>
                            <comment id="14605989" author="martin" created="Tue, 22 Aug 2023 22:56:05 -0700"  >This test was flake-free for many years.  The fact that has changed demands an explanation.  OTOH I can&amp;#39;t get it to fail myself, despite experimenting with 1000x repeat loops.&lt;br/&gt;
&lt;br/&gt;
The FIFO order of fair queues is in the spec and we shouldn&amp;#39;t just stop testing that.&lt;br/&gt;
(In fact, we should add missing tests for the dual case of multiple consumer threads queued up.)&lt;br/&gt;
A last resort would be to weaken the test so that FIFO/LIFO is observed &amp;quot;most&amp;quot; of the time.&lt;br/&gt;
&lt;br/&gt;
Other synchronizers have inspection methods like getQueuedThreads.  We could add such methods here as well, if only private ones for use by tests.  Such a method could be implemented by traversing the linked list in SynchronousQueue&amp;#39;s Transferer.</comment>
                            <comment id="14605326" author="JIRAUSER20508" created="Mon, 21 Aug 2023 06:30:05 -0700"  >Personally, I think that we either need a new test design to supersede this test, or delete it. My rationale is that I don&amp;#39;t seem to be able to convince myself that the current test is robust enough to more than stochastically prove correctness, which means that we&amp;#39;ll have to accept spurious failures, which means that we don&amp;#39;t necessarily know if it is failing because it sometimes does, or because the implementation has a bug.</comment>
                            <comment id="14605295" author="dl" created="Mon, 21 Aug 2023 04:39:02 -0700"  >The fix being discussed in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300663&quot; title=&quot;java/util/concurrent/SynchronousQueue/Fairness.java failed with &amp;quot;Error: fair=true i=0 j=1&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300663&quot;&gt;&lt;strike&gt;JDK-8300663&lt;/strike&gt;&lt;/a&gt; has not yet been applied, so this is likely another symptom of the same issue.&lt;br/&gt;
&lt;br/&gt;
But I&amp;#39;m now leaning toward just deleting this test, as almost suggested by Martin. Unlike other queues, we can&amp;#39;t usefully test per-producer fifo/lifo here. And checking fifo/lifo across threads requires the use of mechanics to check that threads are blocked in a specific way (here, on put()) that are at best fragile, depend on unspecified JVM properties, and unrepresentative of any actual usage.&lt;br/&gt;
&lt;br/&gt;
So, any objections to deleting the test?&lt;br/&gt;
</comment>
                            <comment id="14605171" author="martin" created="Sun, 20 Aug 2023 16:12:27 -0700"  >There&amp;#39;s a good chance that there&amp;#39;s an actual bug in SynchronousQueue&amp;#39;s  recent implementation changes that is being exposed by the rare test failures.  &lt;br/&gt;
&lt;br/&gt;
Perhaps a spurious wakeup from park is causing rare queue reorderings?  &lt;br/&gt;
&lt;br/&gt;
Perthaps checking Thread.State is insufficient to detect quiescence in q.put?&lt;br/&gt;
&lt;br/&gt;
The concept of ordering of producer threads in SynchronousQueue is in any case fuzzy, since there&amp;#39;s no obvious way to tell whether one call to q.put should be ordered before another.  There&amp;#39;s no happens-before relationship, since neither thread has returned from q.put.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m slightly surprised (or have I forgotten?) that LinkedTransferQueue&amp;#39;s implementation is extended in SynchromousQueue to allow LIFO removal.</comment>
                            <comment id="14604835" author="roboduke" created="Thu, 17 Aug 2023 15:43:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15337&quot;&gt;https://git.openjdk.org/jdk/pull/15337&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-17 22:35:39 +0000</comment>
                            <comment id="14604824" author="martin" created="Thu, 17 Aug 2023 14:35:49 -0700"  >As usual, I can&amp;#39;t reproduce this, but I&amp;#39;ll try to fix it anyways by applying the traditional martinizing.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5132359">JDK-8334705</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5139591">JDK-8340582</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5091963">JDK-8300663</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32s2r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="215"><![CDATA[java.util.concurrent]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>