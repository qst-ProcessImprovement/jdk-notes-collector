<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:46:31 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8325469] Freeze/Thaw code can crash in the presence of OSR frames</title>
                <link>https://bugs.openjdk.org/browse/JDK-8325469</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Sergey Kuksenko has a benchmark that is throws in Continuation.pinnedReason with an unknown pinned reason. When we run with a debug build then it triggers an assert in ThawBase::copy_from_chunk very quickly.&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/ws/jdk/open/src/hotspot/share/oops/stackChunkOop.inline.hpp:356), pid=2099017, tid=2099046&lt;br/&gt;
#  Error: assert(from + size &amp;lt;= end_address()) failed&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-02-08-0740139.albatem...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-02-08-0740139.ab..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xa4cab2]  ThawBase::copy_from_chunk(long*, long*, int)+0x2a2&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h&amp;quot; (or dumping to /tmp/core.2099017)&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#</description>
                <environment></environment>
        <key id="5120996">JDK-8325469</key>
            <summary>Freeze/Thaw code can crash in the presence of OSR frames</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pchilanomate">Patricio Chilano Mateo</assignee>
                                    <reporter username="alanb">Alan Bateman</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                    </labels>
                <created>Thu, 8 Feb 2024 00:18:42 -0800</created>
                <updated>Wed, 25 Sep 2024 04:24:53 -0700</updated>
                            <resolved>Wed, 17 Apr 2024 09:20:26 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14679853" author="roboduke" created="Fri, 7 Jun 2024 08:51:14 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Unclean backport to fix Loom bug in presence of OSR frames. The core of the patch moves num_stack_slots calculation to nmethod, instead of having it in Method; this fixes the OSR discrepancy. Patch does not apply cleanly, requires simple adjustments. All tests pass; new regression test is sensitive to this bug. Risk is low-medium: touches stack computation code, but looks to only affect Virtual Thread paths. Patch was in mainline for 7 weeks without new bugtail.</comment>
                            <comment id="14679569" author="roboduke" created="Thu, 6 Jun 2024 10:17:29 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/675&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/675&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-06 17:11:09 +0000</comment>
                            <comment id="14666048" author="dukebot" created="Wed, 17 Apr 2024 09:20:25 -0700"  >Changeset: fd331ff1&lt;br/&gt;
Author:    Patricio Chilano Mateo &amp;lt;&lt;a href=&apos;mailto:pchilanomate@openjdk.org&apos;&gt;pchilanomate@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-04-17 16:18:55 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/fd331ff17330329a656181cb58714f1bd1623fcb&quot;&gt;https://git.openjdk.org/jdk/commit/fd331ff17330329a656181cb58714f1bd1623fcb&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14663005" author="roboduke" created="Thu, 4 Apr 2024 14:09:26 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18637&quot;&gt;https://git.openjdk.org/jdk/pull/18637&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-04 19:52:18 +0000</comment>
                            <comment id="14662888" author="pchilanomate" created="Thu, 4 Apr 2024 06:44:08 -0700"  >I tested a couple of different solutions, but I think the most straightforward one is to move num_stack_arg_slots() to the nmethod class since logically it belongs there: &lt;a href=&quot;https://github.com/pchilano/jdk/commit/b24e4af4dadc59c8743cd2f7991146e225116a07&quot;&gt;https://github.com/pchilano/jdk/commit/b24e4af4dadc59c8743cd2f7991146e225116a07&lt;/a&gt;</comment>
                            <comment id="14662885" author="pchilanomate" created="Thu, 4 Apr 2024 06:39:33 -0700"  >The crash happens because the layout of OSR frames for methods where num_stack_arg_slots() &amp;gt; 0 doesn&amp;#39;t always match what is expected in the freeze/thaw code.&lt;br/&gt;
&lt;br/&gt;
Freeze/thaw code assumes that a compiled frame for a method where num_stack_arg_slots() &amp;gt; 0 will have the arguments setup in the stack above the metadata at the bottom of the frame. But when converting an interpreter frame to a compiled frame during OSR we don&amp;#39;t explicitly leave room for the stack arguments. This is because the compiled code will not try to access them. All parameters needed will be read from the &amp;quot;buf&amp;quot; array and stored&amp;#xA0;inside the frame before calling OSR_migration_end(). &lt;br/&gt;
&lt;br/&gt;
If the OSR frame has a caller in the stack then there is no issue on freezing/thawing. If the caller is compiled then the argument area will be already there since it is set up by the caller. If the caller is interpreted, although we won&amp;#39;t have the arguments set up like the compiled caller case, we still have all the parameters that the interpreter caller pushed, which will take more space than the expected argument size and that is all that matters. So if we call freeze, we will take the slow path, since there is at least one interpreter frame in the stack, and when we copy the OSR frame to the heap we will copy the arguments reading above the frame as if the arguments where there. The values won&amp;#39;t be the same as when the caller is a compiled frame, but it doesn&amp;#39;t matter because they are not used. As long as there is always enough room above the OSR frame to read from it&amp;#39;s okay.&lt;br/&gt;
&lt;br/&gt;
The problem happens when the OSR frame is the bottom-most frame in the stack. There are 3 cases to consider: freeze_fast/thaw_fast, freeze_fast/thaw_slow, freeze_slow/thaw_slow.&lt;br/&gt;
freeze_fast/thaw_fast: The issue in this case is if the OSR frame has a size of &amp;gt; 500 words, which is the threshold we use to decide whether we copy everything from the stackChunk on thaw or we copy one frame at a time. If we thaw the frame individually we will try to read past the bottom of the stackChunk while attempting to copy the arguments.&lt;br/&gt;
freeze_fast/thaw_slow: In this case we can either read past the bottom of the stackChunk as before(this is the reported crash) or try to write below the allocated space in the stack.&lt;br/&gt;
freeze_slow/thaw_slow: This case only uncovered an invalid assert that is triggered if the size of the OSR frame plus all the other frames we freeze takes less space than the size of locals minus parameters of the interpreter frame that was OSR. This happens because when we thaw, the sp of the stackChunk is set to the sp of the caller of the recently thawed frame. For an interpreter frame the caller sp will be pointing to fp + 2. But when we call freeze, we copy to the heap starting from the top frame&amp;#39;s unextended sp. It could be that all frames we freeze can be stored between the top frame&amp;#39;s unextended sp and its sp, i.e the stackChunk sp.&lt;br/&gt;
There is also a theoretical issue where if the arguments of the OSR frame are too many we might read past the bottom of the carrier&amp;#39;s stack. But parameters cannot be more than 255, per Java specs, and even using doubles doesn&amp;#39;t reach the bottom of the stack in practice.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5131669">JDK-8334101</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5139896">JDK-8340862</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                                        </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5126182">JDK-8329665</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34wzf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17414"><![CDATA[b19]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>