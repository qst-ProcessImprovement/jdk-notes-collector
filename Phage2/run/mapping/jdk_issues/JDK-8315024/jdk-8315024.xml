<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:31:40 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8315024] Vector API FP reduction tests should not test for exact equality</title>
                <link>https://bugs.openjdk.org/browse/JDK-8315024</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Certain floating point reduction operations in the Vector API are allowed to introduce rounding errors, see &lt;a href=&quot;https://docs.oracle.com/en/java/javase/20/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#fp_assoc&quot;&gt;https://docs.oracle.com/en/java/javase/20/docs/api/jdk.incubator.vector/jdk/incubator/vector/VectorOperators.html#fp_assoc&lt;/a&gt; : &amp;quot;Certain associative operations that apply to floating point vectors are not truly associative on the floating point lane values. Specifically, ADD and MUL used with cross-lane reduction operations, such as FloatVector.reduceLanes(Associative). The result of such an operation is a function both of the input values (vector and mask) as well as the order of the scalar operations applied to combine lane values. In such cases the order is intentionally not defined. This allows the JVM to generate optimal machine code for the underlying platform at runtime. If the platform supports a vector instruction to add or multiply all values in the vector, or if there is some other efficient machine code sequence, then the JVM has the option of generating this machine code. Otherwise, the default implementation is applied, which adds vector elements sequentially from beginning to end. For this reason, the result of such an operation may vary for the same input values.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
The jtreg tests for these operations do not take this into account, and they test for exact equality of the results with the Java reference implementation. The current version of C2 generates code that matches the results of the Java reference implementation. Future versions of C2, or alternative compilers, can generate more efficient machine code sequences that do not match this reference value exactly.&lt;br/&gt;
&lt;br/&gt;
The tests in test/jdk/jdk/incubator/vector should be changed to allow the result of floating point reductions with ADD or MUL to differ from the reference value by some small relative error, such as 0.1%.</description>
                <environment></environment>
        <key id="5108873">JDK-8315024</key>
            <summary>Vector API FP reduction tests should not test for exact equality</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://bugs.openjdk.org/images/jbsImages/p5.png">P5</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gbarany">Gerg&#246; Barany</assignee>
                                    <reporter username="gbarany">Gerg&#246; Barany</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                            <label>oracle-triage-22</label>
                            <label>vectorapi</label>
                    </labels>
                <created>Fri, 25 Aug 2023 04:48:21 -0700</created>
                <updated>Wed, 9 Oct 2024 23:34:51 -0700</updated>
                            <resolved>Tue, 24 Oct 2023 02:01:01 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14699920" author="roboduke" created="Wed, 21 Aug 2024 17:07:54 -0700"  >[jdk17u-fix-request] Approval Request from Amos&lt;br/&gt;
&amp;quot;Backporting for parity with 17.0.13-oracle. No risk, test fix. Un-Clean backport. Test passes and SAP nightlies pass on 2024-08-17&#8221;</comment>
                            <comment id="14695197" author="roboduke" created="Thu, 1 Aug 2024 10:16:52 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2768&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2768&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-01 17:10:40 +0000</comment>
                            <comment id="14683486" author="roboduke" created="Thu, 20 Jun 2024 14:51:11 -0700"  >[jdk21u-fix-request] Approval Request from Amos&lt;br/&gt;
&amp;quot;Backporting for parity with 21.0.5-oracle. No risk, test fix. Clean backport. Test passes and SAP nightlies pass on 2024-06-21&#8221;</comment>
                            <comment id="14682776" author="roboduke" created="Tue, 18 Jun 2024 19:40:02 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/750&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/750&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-19 02:35:32 +0000</comment>
                            <comment id="14620524" author="dukebot" created="Tue, 24 Oct 2023 02:01:00 -0700"  >Changeset: e6f23a90&lt;br/&gt;
Author:    Gerg&amp;#xF6; Barany &amp;lt;&lt;a href=&apos;mailto:gbarany@openjdk.org&apos;&gt;gbarany@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-24 08:58:15 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e6f23a90d4a53339a3c9c2b76fc5d317940e4472&quot;&gt;https://git.openjdk.org/jdk/commit/e6f23a90d4a53339a3c9c2b76fc5d317940e4472&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14615436" author="roboduke" created="Tue, 3 Oct 2023 00:59:08 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16024&quot;&gt;https://git.openjdk.org/jdk/pull/16024&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-03 07:53:05 +0000</comment>
                            <comment id="14614970" author="gbarany" created="Fri, 29 Sep 2023 06:44:06 -0700"  >Oracle GraalVM for JDK 21 was released last week with Vector API intrinsics. It&amp;#39;s failing some of these reduction tests, e.g.:&lt;br/&gt;
&lt;br/&gt;
test FloatMaxVectorTests.MULReduceFloatMaxVectorTests(float[i * 5]): failure&lt;br/&gt;
java.lang.AssertionError: at index #16 expected [9.594938E32] but found [9.59494E32]&lt;br/&gt;
...&lt;br/&gt;
test FloatMaxVectorTests.MULReduceFloatMaxVectorTests(float[i + 1]): failure&lt;br/&gt;
java.lang.AssertionError: at index #0 expected [2.0922788E13] but found [2.092279E13]&lt;br/&gt;
&lt;br/&gt;
These failures are only in the MULReduce tests. As [~epeter] noted, the inputs are not interesting enough to cause rounding errors in the ADDReduce cases.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll put up a PR that extends these tests a bit and allows some relative error in the comparison for ADD and MUL reductions.</comment>
                            <comment id="14607301" author="JIRAUSER19821" created="Tue, 29 Aug 2023 02:56:26 -0700"  >[~gbarany] Do the tests even provoke rounding which could be potentially problematic?&lt;br/&gt;
From a quick glance at the array fill methods it looks like we are basically converting integer values to double/float.&lt;br/&gt;
I think we may first have to make the array values more &amp;quot;interesting&amp;quot; (fill the mantissa with information).&lt;br/&gt;
That leads to rounding, and potentially different rounding if the order of reduction changes.&lt;br/&gt;
&lt;br/&gt;
What do you think?&lt;br/&gt;
&lt;br/&gt;
Example:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/test/jdk/jdk/incubator/vector/Double64VectorTests.java&quot;&gt;https://github.com/openjdk/jdk/blob/master/test/jdk/jdk/incubator/vector/Double64VectorTests.java&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static final List&amp;lt;IntFunction&amp;lt;double[]&amp;gt;&amp;gt; DOUBLE_COMPARE_GENERATORS = List.of(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withToString(&amp;quot;double[i]&amp;quot;, (int s) -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return fill(s * BUFFER_REPS,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i -&amp;gt; (double)i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withToString(&amp;quot;double[i - length / 2]&amp;quot;, (int s) -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return fill(s * BUFFER_REPS,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i -&amp;gt; (double)(i - (s * BUFFER_REPS / 2)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withToString(&amp;quot;double[i + 1]&amp;quot;, (int s) -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return fill(s * BUFFER_REPS,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i -&amp;gt; (double)(i + 1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withToString(&amp;quot;double[i - 2]&amp;quot;, (int s) -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return fill(s * BUFFER_REPS,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i -&amp;gt; (double)(i - 2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withToString(&amp;quot;double[zigZag(i)]&amp;quot;, (int s) -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return fill(s * BUFFER_REPS,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i -&amp;gt; i%3 == 0 ? (double)i : (i%3 == 1 ? (double)(i + 1) : (double)(i - 2)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withToString(&amp;quot;double[cornerCaseValue(i)]&amp;quot;, (int s) -&amp;gt; {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return fill(s * BUFFER_REPS,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i -&amp;gt; cornerCaseValue(i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;})&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);</comment>
                            <comment id="14607300" author="chagedorn" created="Tue, 29 Aug 2023 02:54:29 -0700"  >Sounds good.</comment>
                            <comment id="14607298" author="gbarany" created="Tue, 29 Aug 2023 02:49:39 -0700"  >OK, thanks for the input. I&amp;#39;ll hold off work on this until a concrete need arises.</comment>
                            <comment id="14607293" author="chagedorn" created="Tue, 29 Aug 2023 02:25:51 -0700"  >ILW = Potential test failures in the future due to too strong checks which are allowed to be broken, some vector API tests but currently not being observed, no workaround = LLH = P5</comment>
                            <comment id="14607291" author="chagedorn" created="Tue, 29 Aug 2023 02:23:35 -0700"  >That&amp;#39;s great! Then I suggest to wait with updating these tests until &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8309647&quot; title=&quot;[Vector API] Move Reduction outside loop when possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8309647&quot;&gt;JDK-8309647&lt;/a&gt; is ready. [~gbarany] You could sync with [~epeter] about that. </comment>
                            <comment id="14607287" author="JIRAUSER19821" created="Tue, 29 Aug 2023 02:13:54 -0700"  >FYI, I have a task open that may require us to change the tests: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8309647&quot; title=&quot;[Vector API] Move Reduction outside loop when possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8309647&quot;&gt;JDK-8309647&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
But I do not plan to work on this anytime soon.</comment>
                            <comment id="14607285" author="chagedorn" created="Tue, 29 Aug 2023 02:10:12 -0700"  >Hi [~gbarany], IIUC, there is currently no such test failing in this way. But in theory, you are right that these tests could potentially fail if C2 or another compiler decides to give up the ordering. However, for the time being, neither C1 nor C2 will apply re-orderings. In C2, there is currently no way to differentiate between reduction nodes created by the Vector API and Superword (where the same ordering is a requirement). One could think about specially marking reduction IR nodes or creating separate IR nodes if they originate from the Vector API to optimize them further by giving up the ordering. But until we have that, I think we should keep the stronger equality asserts in these tests (given that we are not seeing these tests failing with other compilers - then of course we could come back to that earlier).</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5130235">JDK-8332867</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5130913">JDK-8333451</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5132456">JDK-8334789</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5137522">JDK-8339014</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5102726">JDK-8309647</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32vkr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>