<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:39:31 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8205592] BigDecimal.doubleValue() is depressingly slow</title>
                <link>https://bugs.openjdk.org/browse/JDK-8205592</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
I find the following slow path in BigDecimal:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Somewhat inefficient, but guaranteed to work.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Double.parseDouble(this.toString())&lt;br/&gt;
&lt;br/&gt;
Since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-7131192&quot; title=&quot;BigInteger.doubleValue() is depressingly slow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-7131192&quot;&gt;&lt;strike&gt;JDK-7131192&lt;/strike&gt;&lt;/a&gt; : BigInteger.doubleValue() is depressingly slow&lt;br/&gt;
is now available, something faster could be done.&lt;br/&gt;
&lt;br/&gt;
It suggest doing unscaledValue().doubleValue() * Math.exp(scale()*Math.log(10))&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4964848">JDK-8205592</key>
            <summary>BigDecimal.doubleValue() is depressingly slow</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rgiulietti">Raffaello Giulietti</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcs-pso</label>
                            <label>reproducer-other</label>
                            <label>webbug</label>
                    </labels>
                <created>Sat, 23 Jun 2018 11:45:35 -0700</created>
                <updated>Thu, 4 May 2023 00:14:17 -0700</updated>
                            <resolved>Thu, 27 Apr 2023 10:04:20 -0700</resolved>
                                    <version>8</version>
                    <version>9</version>
                    <version>10</version>
                    <version>11</version>
                    <version>12</version>
                    <version>13</version>
                    <version>14</version>
                    <version>15</version>
                    <version>16</version>
                    <version>17</version>
                    <version>18</version>
                    <version>19</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14577460" author="dukebot" created="Thu, 27 Apr 2023 10:04:19 -0700"  >Changeset: eb358619&lt;br/&gt;
Author:    Raffaello Giulietti &amp;lt;&lt;a href=&apos;mailto:rgiulietti@openjdk.org&apos;&gt;rgiulietti@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-27 17:01:56 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/eb358619dfc344348d72cfe29d50829ba7ca1aea&quot;&gt;https://git.openjdk.org/jdk/commit/eb358619dfc344348d72cfe29d50829ba7ca1aea&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14508032" author="roboduke" created="Thu, 7 Jul 2022 08:27:41 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/9410&quot;&gt;https://git.openjdk.org/jdk/pull/9410&lt;/a&gt;&lt;br/&gt;
Date: 2022-07-07 15:20:32 +0000</comment>
                            <comment id="14190154" author="darcy" created="Mon, 25 Jun 2018 18:11:30 -0700"  >Note that the results of the current BigDecimal code will likely change in some cases once the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8202555&quot; title=&quot;Double.toString(double) sometimes produces incorrect results&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8202555&quot;&gt;&lt;strike&gt;JDK-8202555&lt;/strike&gt;&lt;/a&gt; is in.</comment>
                            <comment id="14189904" author="psonal" created="Mon, 25 Jun 2018 01:23:27 -0700"  >Additional information from submitter :&lt;br/&gt;
I have a running prototype, which has a different performance than the&lt;br/&gt;
actual doubleValue() implementation for BigDecimal. &lt;br/&gt;
&lt;br/&gt;
The idea is not to use Math.exp(scale()*Math.log(10)), but to make &lt;br/&gt;
the following observation, first from old &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-7131192&quot; title=&quot;BigInteger.doubleValue() is depressingly slow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-7131192&quot;&gt;&lt;strike&gt;JDK-7131192&lt;/strike&gt;&lt;/a&gt;:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For BigInteger values we could implement:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int getExponent(BigInteger)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long getMantissa(BigInteger)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double packDouble(int, long)&lt;br/&gt;
&lt;br/&gt;
We can then transform a BigDecimal into a BigInteger, and determine &lt;br/&gt;
the mantissa from there, but need to adapt the exponent. So when&lt;br/&gt;
we have a BigDecimal:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unscaledValue * 10^(-scale)&lt;br/&gt;
&lt;br/&gt;
There are two cases:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Case 1: scale&amp;gt;0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compute unscaledValue&amp;#39; as (unscaledValue&amp;lt;&amp;lt;3*scale)/5^scale&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;we then have for the BigDecimal:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getExponent(BigDecimal) = getExponent(unscaledValue&amp;#39;)-4*scale&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getMantissa(BigDecimal) = getMantissa(unscaledValue&amp;#39;)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Case 2:scale=&amp;lt;0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compute unscaledValue&amp;#39; as unscaledValue*5^scale&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;we then have for the BigDecimal:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getExponent(BigDecimal) = getExponent(unscaledValue&amp;#39;)-scale&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getMantissa(BigDecimal) = getMantissa(unscaledValue&amp;#39;)&lt;br/&gt;
&lt;br/&gt;
I cannot yet upload some code. There are still some small open issues&lt;br/&gt;
for Case 1, how many extra bits should be generated and how the rounding&lt;br/&gt;
of the division should be done there.&lt;br/&gt;
&lt;br/&gt;
But basically it worked, and I already did some benchmarking, and&lt;br/&gt;
the algorithm is faster sometimes. The algorithm doesn&amp;#39;t beat always&lt;br/&gt;
the toString()/parse() approach, since by inspection of the parse() method,&lt;br/&gt;
&lt;br/&gt;
this method uses a large 5^exp cache. So for large scale values our new&lt;br/&gt;
method, which uses the ordinary BigInteger.pow() has a slight disadvantage.&lt;br/&gt;
But one might consider also creating a cache here.&lt;br/&gt;
&lt;br/&gt;
I will try to publish code and benchmark results when finished.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4959327">JDK-8202555</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2emrn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="230"><![CDATA[java.math]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>