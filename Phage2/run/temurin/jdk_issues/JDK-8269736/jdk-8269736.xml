<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:46:46 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8269736] Optimize CDS PatchEmbeddedPointers::do_bit()</title>
                <link>https://bugs.openjdk.org/browse/JDK-8269736</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>&lt;a href=&quot;https://github.com/openjdk/jdk/blob/090cdfc7a2e280c620a0926512fb67f0ce7f3c21/src/hotspot/share/cds/archiveHeapLoader.cpp#L90-L104&quot;&gt;https://github.com/openjdk/jdk/blob/090cdfc7a2e280c620a0926512fb67f0ce7f3c21/src/hotspot/share/cds/archiveHeapLoader.cpp#L90-L104&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The current implementation reads the narrow oop, decodes it using the &amp;quot;dump time&amp;quot; encoding, encodes it using &amp;quot;runtime&amp;quot; encoding, and then stores it back into the heap:&lt;br/&gt;
&lt;br/&gt;
// Patch all the embedded oop pointers inside an archived heap region,&lt;br/&gt;
// to be consistent with the runtime oop encoding.&lt;br/&gt;
class PatchCompressedEmbeddedPointers: public BitMapClosure {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;narrowOop* _start;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;public:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PatchCompressedEmbeddedPointers(narrowOop* start) : _start(start) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool do_bit(size_t offset) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop* p = _start + offset;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop v = *p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!CompressedOops::is_null(v), &amp;quot;null oops should have been filtered out at dump time&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oop o = ArchiveHeapLoader::decode_from_archive(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RawAccess&amp;lt;IS_NOT_NULL&amp;gt;::oop_store(p, o);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
In some cases, the decoding/encoding is not necessary. For example, if the the same number of shifts are used in both dump time and runtime, it can be simplified as:&lt;br/&gt;
&lt;br/&gt;
const uintx delta = (runtime_heap-base - dumptime_heap_base)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt;&amp;gt; num_shifts;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool do_bit(size_t offset) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop* p = _start + offset;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop v = *p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v += delta;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*p = v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5053127">JDK-8269736</key>
            <summary>Optimize CDS PatchEmbeddedPointers::do_bit()</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="matsaave">Matias Saavedra Silva</assignee>
                                    <reporter username="iklam">Ioi Lam</reporter>
                        <labels>
                            <label>archived-heap</label>
                            <label>cds</label>
                    </labels>
                <created>Thu, 1 Jul 2021 00:30:17 -0700</created>
                <updated>Tue, 3 Jan 2023 11:34:47 -0800</updated>
                            <resolved>Wed, 21 Dec 2022 07:35:40 -0800</resolved>
                                    <version>18</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                                <comments>
                            <comment id="14547159" author="dukebot" created="Wed, 21 Dec 2022 07:35:38 -0800"  >Changeset: 65442a2e&lt;br/&gt;
Author:    Matias Saavedra Silva &amp;lt;&lt;a href=&apos;mailto:matsaave@openjdk.org&apos;&gt;matsaave@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Ioi Lam &amp;lt;&lt;a href=&apos;mailto:iklam@openjdk.org&apos;&gt;iklam@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2022-12-21 15:33:24 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/65442a2e26afa7c31b5949e7e20606e4066ced3b&quot;&gt;https://git.openjdk.org/jdk/commit/65442a2e26afa7c31b5949e7e20606e4066ced3b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14545846" author="roboduke" created="Thu, 15 Dec 2022 14:47:27 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/10863&quot;&gt;https://git.openjdk.org/jdk/pull/10863&lt;/a&gt;&lt;br/&gt;
Date: 2022-10-25 20:56:10 +0000</comment>
                            <comment id="14527587" author="iklam" created="Mon, 3 Oct 2022 15:23:16 -0700"  >I think the following can be done as of &lt;a href=&quot;https://github.com/openjdk/jdk/commit/090cdfc7a2e280c620a0926512fb67f0ce7f3c21&quot;&gt;https://github.com/openjdk/jdk/commit/090cdfc7a2e280c620a0926512fb67f0ce7f3c21&lt;/a&gt; :&lt;br/&gt;
&lt;br/&gt;
class PatchCompressedEmbeddedPointersSameShift: public BitMapClosure {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;narrowOop* _start;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int _delta;&lt;br/&gt;
&amp;nbsp;public:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PatchCompressedEmbeddedPointersSameShift(narrowOop* start, intx delta) : _start(start), _delta(delta) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool do_bit(size_t offset) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop* p = _start + offset;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop v = *p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop new_v = v + (narrowOop)_delta;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RawAccess&amp;lt;IS_NOT_NULL&amp;gt;::oop_store(p, new_v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
void ArchiveHeapLoader::patch_embedded_pointers(MemRegion region, address oopmap,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size_t oopmap_size_in_bits) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (UseCompressedOops) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;intx delta = ArchiveHeapLoader::_narrow_oop_base - CompressedOops::base();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int shift = CompressedOops::shift();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (ArchiveHeapLoader::_narrow_oop_shift == shift&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; _dumptime_base_0 == UINTPTR_MAX&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; shift &amp;lt;= 3 &amp;amp;&amp;amp; delta == ((delta &amp;gt;&amp;gt; shift) &amp;lt;&amp;lt; shift)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// fast path&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PatchCompressedEmbeddedPointersShift((narrowOop*)region.start(), delta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bm.iterate(&amp;amp;patcher);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Old code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PatchCompressedEmbeddedPointers patcher((narrowOop*)region.start());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bm.iterate(&amp;amp;patcher);&lt;br/&gt;
&lt;br/&gt;
==========================================&lt;br/&gt;
To take the fast path:&lt;br/&gt;
&lt;br/&gt;
inline oop ArchiveHeapLoader::decode_from_archive(narrowOop v) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;uintptr_t p = ((uintptr_t)_narrow_oop_base) + ((uintptr_t)v &amp;lt;&amp;lt; _narrow_oop_shift);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (p &amp;gt;= _dumptime_base_0) { ...&lt;br/&gt;
&lt;br/&gt;
inline narrowOop CompressedOops::encode_not_null(oop v) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;uint64_t  pd = (uint64_t)(pointer_delta((void*)v, (void*)base(), 1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&amp;gt; pd = p - CompressedOops::base();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;narrowOop result = narrow_oop_cast(pd &amp;gt;&amp;gt; shift());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&amp;gt;  result = pd &amp;gt;&amp;gt; shift();&lt;br/&gt;
&lt;br/&gt;
Let&amp;#39;s assume shift() == 3&lt;br/&gt;
&lt;br/&gt;
result = pd &amp;gt;&amp;gt; 3&lt;br/&gt;
&lt;br/&gt;
Note that pd, _narrow_oop_base and CompressedOops::base() are all divisible by 8&lt;br/&gt;
&lt;br/&gt;
result&amp;lt;&amp;lt;3 = (pd &amp;gt;&amp;gt; 3) &amp;lt;&amp;lt; 3&lt;br/&gt;
result&amp;lt;&amp;lt;3 = pd&lt;br/&gt;
result&amp;lt;&amp;lt;3 = p - CompressedOops::base();&lt;br/&gt;
result&amp;lt;&amp;lt;3 = _narrow_oop_base + (v &amp;lt;&amp;lt; 3) - CompressedOops::base();&lt;br/&gt;
result&amp;lt;&amp;lt;3 =  (v &amp;lt;&amp;lt; 3) + (_narrow_oop_base - CompressedOops::base());&lt;br/&gt;
result&amp;lt;&amp;lt;3 =  (v &amp;lt;&amp;lt; 3) + delta;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
Assuming ((delta &amp;lt;&amp;lt;3) &amp;gt;&amp;gt; 3) == delta&lt;br/&gt;
&lt;br/&gt;
We have&lt;br/&gt;
&lt;br/&gt;
(result&amp;lt;&amp;lt;3) &amp;gt;&amp;gt; 3 =  ((v &amp;lt;&amp;lt; 3) + delta) &amp;gt;&amp;gt; 3;&lt;br/&gt;
&lt;br/&gt;
result =  ((v &amp;lt;&amp;lt; 3) &amp;gt;&amp;gt; 3)  + (delta &amp;gt;&amp;gt; 3);&lt;br/&gt;
result =  v + (delta &amp;gt;&amp;gt; 3);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14527583" author="iklam" created="Mon, 3 Oct 2022 14:21:26 -0700"  >Scenario #2: narrow_oop_shift = 0 (JDK 20 repo as of Oct 3, 2022)&lt;br/&gt;
&lt;br/&gt;
$ java -Xshare:dump -Xmx128m -XX:HeapBaseMinAddress=0xf0000000&lt;br/&gt;
$ java -Xlog:cds -Xmx128m -XX:HeapBaseMinAddress=0xe0000000 --version&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
[0.041s][info][cds] CDS archive was created with max heap size = 128M, and the following configuration:&lt;br/&gt;
[0.041s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0&lt;br/&gt;
[0.041s][info][cds]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0&lt;br/&gt;
[0.041s][info][cds]     heap range = [0x00000000f0000000 - 0x00000000f8000000]&lt;br/&gt;
[0.041s][info][cds] The current max heap size = 128M, HeapRegion::GrainBytes = 1048576&lt;br/&gt;
[0.041s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0&lt;br/&gt;
[0.041s][info][cds]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0&lt;br/&gt;
[0.041s][info][cds]     heap range = [0x00000000e0000000 - 0x00000000e8000000]&lt;br/&gt;
[0.041s][info][cds] CDS heap data needs to be relocated because&lt;br/&gt;
[0.041s][info][cds] the desired range 0x00000000f7e00000 - 0x00000000f7f82000&lt;br/&gt;
[0.041s][info][cds] is outside of the heap 0x00000000e0000000 - 0x00000000e8000000&lt;br/&gt;
[0.041s][info][cds] CDS heap data relocation delta = -268435456 bytes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^^^^^^^&lt;br/&gt;
&lt;br/&gt;
(gdb) p/x v&lt;br/&gt;
$1 = 0xf7f00000 # This is the original value, before patching&lt;br/&gt;
(gdb) p/x *p&lt;br/&gt;
$2 = 0xe7f00000 # This is the patched value&lt;br/&gt;
(gdb) p/x 0xf7f00000 - 268435456&lt;br/&gt;
$3 = 0xe7f00000 # This is a faster way to compute the patched value, without the decode/encode&lt;br/&gt;
</comment>
                            <comment id="14527582" author="iklam" created="Mon, 3 Oct 2022 14:10:36 -0700"  >Scenario #1: narrow_oop_shift = 3 (JDK 20 repo as of Oct 3, 2022)&lt;br/&gt;
&lt;br/&gt;
$ java -Xshare:dump -Xmx16g&lt;br/&gt;
$ java -Xlog:cds -Xmx6g -XX:HeapBaseMinAddress=0x90000000 --version&lt;br/&gt;
[0.226s][info][cds] CDS archive was created with max heap size = 16384M, and the following configuration:&lt;br/&gt;
[0.226s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0&lt;br/&gt;
[0.226s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3&lt;br/&gt;
[0.226s][info][cds]     heap range = [0x00000003c0000000 - 0x00000007c0000000]&lt;br/&gt;
[0.226s][info][cds] The current max heap size = 6144M, HeapRegion::GrainBytes = 4194304&lt;br/&gt;
[0.226s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0&lt;br/&gt;
[0.226s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3&lt;br/&gt;
[0.226s][info][cds]     heap range = [0x0000000090000000 - 0x0000000210000000]&lt;br/&gt;
[0.226s][info][cds] CDS heap data needs to be relocated because&lt;br/&gt;
[0.226s][info][cds] the desired range 0x00000007bf000000 - 0x00000007bf882000&lt;br/&gt;
[0.226s][info][cds] is outside of the heap 0x0000000090000000 - 0x0000000210000000&lt;br/&gt;
[0.226s][info][cds] CDS heap data relocation delta = -24427626496 bytes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^^^^^^^^^^&lt;br/&gt;
Set a breakpoint in gdb at this line:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool do_bit(size_t offset) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop* p = _start + offset;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;narrowOop v = *p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!CompressedOops::is_null(v), &amp;quot;null oops should have been filtered out at dump time&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oop o = ArchiveHeapLoader::decode_from_archive(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RawAccess&amp;lt;IS_NOT_NULL&amp;gt;::oop_store(p, o);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;    &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Breakpoint here:&lt;br/&gt;
&lt;br/&gt;
(gdb) p/x v&lt;br/&gt;
$5 = 0xf7f00000       # This is the original value, before patching&lt;br/&gt;
(gdb) p/x *p&lt;br/&gt;
$6 = 0x41f00000      # This is the patched value&lt;br/&gt;
&lt;br/&gt;
(gdb) p/x 0xf7f00000 - (24427626496 &amp;gt;&amp;gt; 3)&lt;br/&gt;
$7 = 0x41f00000      # This is a faster way to compute the patched value, without the decode/encode&lt;br/&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2tftf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>