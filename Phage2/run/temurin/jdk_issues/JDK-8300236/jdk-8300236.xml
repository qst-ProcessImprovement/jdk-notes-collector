<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 15:43:32 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8300236] Use VarHandle access in Data(Input | Output)Stream classes</title>
                <link>https://bugs.openjdk.org/browse/JDK-8300236</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>VarHandle access gives much better performance compared to explicit bit-shifting, especially for operations in loops.&lt;br/&gt;
&lt;br/&gt;
See &lt;a href=&quot;https://github.com/openjdk/jdk/pull/11840&quot;&gt;https://github.com/openjdk/jdk/pull/11840&lt;/a&gt; for similar changes made to the class java.io.Bits.</description>
                <environment></environment>
        <key id="5091492">JDK-8300236</key>
            <summary>Use VarHandle access in Data(Input | Output)Stream classes</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pminborg">Per-Ake Minborg</assignee>
                                    <reporter username="pminborg">Per-Ake Minborg</reporter>
                        <labels>
                            <label>Performance</label>
                    </labels>
                <created>Mon, 16 Jan 2023 23:59:28 -0800</created>
                <updated>Fri, 6 Oct 2023 07:18:27 -0700</updated>
                            <resolved>Wed, 25 Jan 2023 04:57:04 -0800</resolved>
                                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14616465" author="mbaesken" created="Fri, 6 Oct 2023 07:18:27 -0700"  >Hi Per-Ake , seems this change brought good performance improvements.  There are a few more parts of JDK code where those bit-shifting operations are used to convert/decode bytes into other types.  Have you considered those when you did this change?&lt;br/&gt;
A few examples from JDK src  below, do you think some of them might be worth improving ?&lt;br/&gt;
&lt;br/&gt;
src/java.base/share/classes/sun/nio/cs/UnicodeDecoder.java&lt;br/&gt;
&lt;br/&gt;
60      private char decode(int b1, int b2) {&lt;br/&gt;
61          if (currentByteOrder == BIG)&lt;br/&gt;
62              return (char)((b1 &amp;lt;&amp;lt; 8) | b2);&lt;br/&gt;
63          else&lt;br/&gt;
64              return (char)((b2 &amp;lt;&amp;lt; 8) | b1);&lt;br/&gt;
65      }&lt;br/&gt;
&lt;br/&gt;
src/java.base/share/classes/jdk/internal/util/xml/impl/ReaderUTF16.java&lt;br/&gt;
&lt;br/&gt;
71      public int read(char[] cbuf, int off, int len) throws IOException {&lt;br/&gt;
72          int num = 0;&lt;br/&gt;
73          int val;&lt;br/&gt;
74          if (bo == &amp;#39;b&amp;#39;) {&lt;br/&gt;
75              while (num &amp;lt; len) {&lt;br/&gt;
76                  if ((val = is.read()) &amp;lt; 0) {&lt;br/&gt;
77                      return (num != 0) ? num : -1;&lt;br/&gt;
78                  }&lt;br/&gt;
79                  cbuf[off++] = (char) ((val &amp;lt;&amp;lt; 8) | (is.read() &amp;amp; 0xff));&lt;br/&gt;
80                  num++;&lt;br/&gt;
81              }&lt;br/&gt;
82          } else {&lt;br/&gt;
83              while (num &amp;lt; len) {&lt;br/&gt;
84                  if ((val = is.read()) &amp;lt; 0) {&lt;br/&gt;
85                      return (num != 0) ? num : -1;&lt;br/&gt;
86                  }&lt;br/&gt;
87                  cbuf[off++] = (char) ((is.read() &amp;lt;&amp;lt; 8) | (val &amp;amp; 0xff));&lt;br/&gt;
88                  num++;&lt;br/&gt;
89              }&lt;br/&gt;
90          }&lt;br/&gt;
91          return num;&lt;br/&gt;
92      }&lt;br/&gt;
93  &lt;br/&gt;
94      /**&lt;br/&gt;
95       * Reads a single character.&lt;br/&gt;
96       *&lt;br/&gt;
97       * @return The character read, as an integer in the range 0 to 65535&lt;br/&gt;
98       *  (0x0000-0xffff), or -1 if the end of the stream has been reached.&lt;br/&gt;
99       * @exception IOException If any IO errors occur.&lt;br/&gt;
100       */&lt;br/&gt;
101      public int read() throws IOException {&lt;br/&gt;
102          int val;&lt;br/&gt;
103          if ((val = is.read()) &amp;lt; 0) {&lt;br/&gt;
104              return -1;&lt;br/&gt;
105          }&lt;br/&gt;
106          if (bo == &amp;#39;b&amp;#39;) {&lt;br/&gt;
107              val = (char) ((val &amp;lt;&amp;lt; 8) | (is.read() &amp;amp; 0xff));&lt;br/&gt;
108          } else {&lt;br/&gt;
109              val = (char) ((is.read() &amp;lt;&amp;lt; 8) | (val &amp;amp; 0xff));&lt;br/&gt;
110          }&lt;br/&gt;
111          return val;&lt;br/&gt;
112      }&lt;br/&gt;
&lt;br/&gt;
src/java.xml/share/classes/com/sun/org/apache/xerces/internal/impl/io/UCSReader.java&lt;br/&gt;
&lt;br/&gt;
137              if (fEncoding == UCS4BE)&lt;br/&gt;
138                  return (b0&amp;lt;&amp;lt;24)+(b1&amp;lt;&amp;lt;16)+(b2&amp;lt;&amp;lt;8)+b3;&lt;br/&gt;
139              else&lt;br/&gt;
140                  return (b3&amp;lt;&amp;lt;24)+(b2&amp;lt;&amp;lt;16)+(b1&amp;lt;&amp;lt;8)+b0;&lt;br/&gt;
141          } else { // UCS-2&lt;br/&gt;
&lt;br/&gt;
same with &lt;br/&gt;
public int read(char ch[], int offset, int length) throws IOException {&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
src/java.base/share/classes/com/sun/crypto/provider/RC2Crypt.java&lt;br/&gt;
&lt;br/&gt;
153          // byte to short conversion, little endian (copy into K[])&lt;br/&gt;
154          for (int i = 0, j = 0; i &amp;lt; 64; i++, j += 2) {&lt;br/&gt;
155              t =  (expandedKeyBytes[j    ] &amp;amp; 0xff)&lt;br/&gt;
156                + ((expandedKeyBytes[j + 1] &amp;amp; 0xff) &amp;lt;&amp;lt; 8);&lt;br/&gt;
157              expandedKey[i] = t;&lt;br/&gt;
158          }&lt;br/&gt;
&lt;br/&gt;
166      void encryptBlock(byte[] in, int inOfs, byte[] out, int outOfs) {&lt;br/&gt;
167          int R0 =  (in[inOfs    ] &amp;amp; 0xff)&lt;br/&gt;
168                 + ((in[inOfs + 1] &amp;amp; 0xff) &amp;lt;&amp;lt; 8);&lt;br/&gt;
169          int R1 =  (in[inOfs + 2] &amp;amp; 0xff)&lt;br/&gt;
170                 + ((in[inOfs + 3] &amp;amp; 0xff) &amp;lt;&amp;lt; 8);&lt;br/&gt;
171          int R2 =  (in[inOfs + 4] &amp;amp; 0xff)&lt;br/&gt;
172                 + ((in[inOfs + 5] &amp;amp; 0xff) &amp;lt;&amp;lt; 8);&lt;br/&gt;
173          int R3 =  (in[inOfs + 6] &amp;amp; 0xff)&lt;br/&gt;
174                 + ((in[inOfs + 7] &amp;amp; 0xff) &amp;lt;&amp;lt; 8);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
src/java.base/share/classes/sun/security/ssl/Record.java&lt;br/&gt;
&lt;br/&gt;
72      static int getInt16(ByteBuffer m) throws IOException {&lt;br/&gt;
73          verifyLength(m, 2);&lt;br/&gt;
74          return ((m.get() &amp;amp; 0xFF) &amp;lt;&amp;lt; 8) |&lt;br/&gt;
75                  (m.get() &amp;amp; 0xFF);&lt;br/&gt;
76      }&lt;br/&gt;
77  &lt;br/&gt;
78      static int getInt24(ByteBuffer m) throws IOException {&lt;br/&gt;
79          verifyLength(m, 3);&lt;br/&gt;
80          return ((m.get() &amp;amp; 0xFF) &amp;lt;&amp;lt; 16) |&lt;br/&gt;
81                 ((m.get() &amp;amp; 0xFF) &amp;lt;&amp;lt;  8) |&lt;br/&gt;
82                  (m.get() &amp;amp; 0xFF);&lt;br/&gt;
83      }&lt;br/&gt;
84  &lt;br/&gt;
85      static int getInt32(ByteBuffer m) throws IOException {&lt;br/&gt;
86          verifyLength(m, 4);&lt;br/&gt;
87          return ((m.get() &amp;amp; 0xFF) &amp;lt;&amp;lt; 24) |&lt;br/&gt;
88                 ((m.get() &amp;amp; 0xFF) &amp;lt;&amp;lt; 16) |&lt;br/&gt;
89                 ((m.get() &amp;amp; 0xFF) &amp;lt;&amp;lt;  8) |&lt;br/&gt;
90                  (m.get() &amp;amp; 0xFF);&lt;br/&gt;
91      }&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
src/java.desktop/share/classes/com/sun/media/sound/RIFFReader.java&lt;br/&gt;
&lt;br/&gt;
257      // Read 32 bit signed integer from stream&lt;br/&gt;
258      public int readInt() throws IOException {&lt;br/&gt;
259          int ch1 = read();&lt;br/&gt;
260          int ch2 = read();&lt;br/&gt;
261          int ch3 = read();&lt;br/&gt;
262          int ch4 = read();&lt;br/&gt;
263          if (ch1 &amp;lt; 0)&lt;br/&gt;
264              throw new EOFException();&lt;br/&gt;
265          if (ch2 &amp;lt; 0)&lt;br/&gt;
266              throw new EOFException();&lt;br/&gt;
267          if (ch3 &amp;lt; 0)&lt;br/&gt;
268              throw new EOFException();&lt;br/&gt;
269          if (ch4 &amp;lt; 0)&lt;br/&gt;
270              throw new EOFException();&lt;br/&gt;
271          return ch1 + (ch2 &amp;lt;&amp;lt; 8) | (ch3 &amp;lt;&amp;lt; 16) | (ch4 &amp;lt;&amp;lt; 24);&lt;br/&gt;
272      }&lt;br/&gt;
&lt;br/&gt;
some similar ones as well from src/java.desktop/share/classes/com/sun/media/sound/&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
src/java.base/share/classes/sun/nio/cs/UTF_32Coder.java&lt;br/&gt;
&lt;br/&gt;
52          private int getCP(ByteBuffer src) {&lt;br/&gt;
53              return (currentBO==BIG)&lt;br/&gt;
54                ?(((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt; 24) |&lt;br/&gt;
55                  ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt; 16) |&lt;br/&gt;
56                  ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt;  8) |&lt;br/&gt;
57                  (src.get() &amp;amp; 0xff))&lt;br/&gt;
58                :((src.get() &amp;amp; 0xff) |&lt;br/&gt;
59                  ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt;  8) |&lt;br/&gt;
60                  ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt; 16) |&lt;br/&gt;
61                  ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt; 24));&lt;br/&gt;
62          }&lt;br/&gt;
63  &lt;br/&gt;
64          protected CoderResult decodeLoop(ByteBuffer src, CharBuffer dst) {&lt;br/&gt;
65              if (src.remaining() &amp;lt; 4)&lt;br/&gt;
66                  return CoderResult.UNDERFLOW;&lt;br/&gt;
67              int mark = src.position();&lt;br/&gt;
68              int cp;&lt;br/&gt;
69              try {&lt;br/&gt;
70                  if (currentBO == NONE) {&lt;br/&gt;
71                      cp = ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt; 24) |&lt;br/&gt;
72                           ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt; 16) |&lt;br/&gt;
73                           ((src.get() &amp;amp; 0xff) &amp;lt;&amp;lt;  8) |&lt;br/&gt;
74                           (src.get() &amp;amp; 0xff);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
src/java.base/share/classes/java/util/zip/ZipUtils.java&lt;br/&gt;
&lt;br/&gt;
168      /**&lt;br/&gt;
169       * Fetches unsigned 16-bit value from byte array at specified offset.&lt;br/&gt;
170       * The bytes are assumed to be in Intel (little-endian) byte order.&lt;br/&gt;
171       */&lt;br/&gt;
172      public static final int get16(byte[] b, int off) {&lt;br/&gt;
173          return (b[off] &amp;amp; 0xff) | ((b[off + 1] &amp;amp; 0xff) &amp;lt;&amp;lt; 8);&lt;br/&gt;
174      }&lt;br/&gt;
175  &lt;br/&gt;
176      /**&lt;br/&gt;
177       * Fetches unsigned 32-bit value from byte array at specified offset.&lt;br/&gt;
178       * The bytes are assumed to be in Intel (little-endian) byte order.&lt;br/&gt;
179       */&lt;br/&gt;
180      public static final long get32(byte[] b, int off) {&lt;br/&gt;
181          return (get16(b, off) | ((long)get16(b, off+2) &amp;lt;&amp;lt; 16)) &amp;amp; 0xffffffffL;&lt;br/&gt;
182      }&lt;br/&gt;
183  &lt;br/&gt;
184      /**&lt;br/&gt;
185       * Fetches signed 64-bit value from byte array at specified offset.&lt;br/&gt;
186       * The bytes are assumed to be in Intel (little-endian) byte order.&lt;br/&gt;
187       */&lt;br/&gt;
188      public static final long get64(byte[] b, int off) {&lt;br/&gt;
189          return get32(b, off) | (get32(b, off+4) &amp;lt;&amp;lt; 32);&lt;br/&gt;
190      }&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
src/java.net.http/share/classes/jdk/internal/net/http/frame/FramesDecoder.java&lt;br/&gt;
&lt;br/&gt;
237      public int getShort() {&lt;br/&gt;
238          if (currentBuffer.remaining() &amp;gt;= 2) {&lt;br/&gt;
239              int res = currentBuffer.getShort() &amp;amp; 0xffff;&lt;br/&gt;
240              nextBuffer();&lt;br/&gt;
241              return res;&lt;br/&gt;
242          }&lt;br/&gt;
243          int val = getByte();&lt;br/&gt;
244          val = (val &amp;lt;&amp;lt; 8) + getByte();&lt;br/&gt;
245          return val;&lt;br/&gt;
246      }&lt;br/&gt;
247  &lt;br/&gt;
248      public int getInt() {&lt;br/&gt;
249          if (currentBuffer.remaining() &amp;gt;= 4) {&lt;br/&gt;
250              int res = currentBuffer.getInt();&lt;br/&gt;
251              nextBuffer();&lt;br/&gt;
252              return res;&lt;br/&gt;
253          }&lt;br/&gt;
254          int val = getByte();&lt;br/&gt;
255          val = (val &amp;lt;&amp;lt; 8) + getByte();&lt;br/&gt;
256          val = (val &amp;lt;&amp;lt; 8) + getByte();&lt;br/&gt;
257          val = (val &amp;lt;&amp;lt; 8) + getByte();&lt;br/&gt;
258          return val;&lt;br/&gt;
259  &lt;br/&gt;
260      }</comment>
                            <comment id="14554354" author="dukebot" created="Wed, 25 Jan 2023 04:57:03 -0800"  >Changeset: 74e1a8bf&lt;br/&gt;
Author:    Per Minborg &amp;lt;&lt;a href=&apos;mailto:pminborg@openjdk.org&apos;&gt;pminborg@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-25 12:54:27 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/74e1a8bfa852a55fb8e6e93e19e2999f4d23f959&quot;&gt;https://git.openjdk.org/jdk/commit/74e1a8bfa852a55fb8e6e93e19e2999f4d23f959&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14552843" author="roboduke" created="Thu, 19 Jan 2023 12:01:35 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12076&quot;&gt;https://git.openjdk.org/jdk/pull/12076&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-18 16:34:57 +0000</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zxc3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="244"><![CDATA[java.io]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>