<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:59:08 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8331411] Shenandoah: Reconsider spinning duration in ShenandoahLock</title>
                <link>https://bugs.openjdk.org/browse/JDK-8331411</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325587&quot; title=&quot;Shenandoah: ShenandoahLock should allow blocking in VM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325587&quot;&gt;&lt;strike&gt;JDK-8325587&lt;/strike&gt;&lt;/a&gt; made the contended lock acquisition as the CAS loop with backoffs. We are currently spinning for 0xFFF (4K) times before blocking. Even on non-overloaded systems, if we assume the spinwait cost is ~10ns to call the stub, we would spend about 40us before blocking. This increases TTSP.&lt;br/&gt;
&lt;br/&gt;
On loaded systems, we would need to wait for threads to roll over the spinwait before they can block. For the overload factor of 100 (e.g. 6400 thread on 64-core machine), this would mean 4ms of additional TTSP.&lt;br/&gt;
&lt;br/&gt;
We can probably mitigate this by spinning for shorter duration.&lt;br/&gt;
&lt;br/&gt;
Sample test:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
public class Alloc {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static final int THREADS = 1024;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static final Object[] sinks = new Object[64*THREADS];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static volatile boolean start;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static volatile boolean stop;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String... args) throws Throwable {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int t = 0; t &amp;lt; THREADS; t++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int ft = t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Thread(() -&amp;gt; work(ft * 64)).start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;start = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(10_000);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stop = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void work(int idx) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (!start) { Thread.onSpinWait(); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (!stop) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sinks[idx] = new byte[128];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Run it like this and observe TTSP times:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
java -Xms256m -Xmx256m -XX:+UseShenandoahGC -XX:-UseTLAB -Xlog:gc -Xlog:safepoint Alloc.java&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Things to consider:&lt;br/&gt;
&amp;nbsp;1) Do we need to check for `SafepointSynchronize::is_synchronizing()` to exit spinning early when safepoint is pending?&lt;br/&gt;
&amp;nbsp;2) Does `ThreadBlockInVM` do suspension correctly?&lt;br/&gt;
&amp;nbsp;3) Do we need to unpark from sleep faster (somehow?) when safepoint is over? That may involve switching to mutex of some sort.&lt;br/&gt;
&lt;br/&gt;
Note from Roman:&lt;br/&gt;
I have a feeling that #1 and #2 can both be achieved by simply adding &amp;#39;true&amp;#39; to the ThreadBlockInVM constructor invocation.</description>
                <environment></environment>
        <key id="5128342">JDK-8331411</key>
            <summary>Shenandoah: Reconsider spinning duration in ShenandoahLock</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="xpeng">Xiaolong Peng</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>gc-shenandoah</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                    </labels>
                <created>Tue, 30 Apr 2024 03:59:51 -0700</created>
                <updated>Tue, 17 Sep 2024 08:55:07 -0700</updated>
                            <resolved>Wed, 26 Jun 2024 12:27:43 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14705336" author="roboduke" created="Mon, 16 Sep 2024 14:09:35 -0700"  >[jdk17u-fix-request] Approval Request from Xiaolong Peng&lt;br/&gt;
Backport [&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331411&quot; title=&quot;Shenandoah: Reconsider spinning duration in ShenandoahLock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331411&quot;&gt;&lt;strike&gt;JDK-8331411&lt;/strike&gt;&lt;/a&gt;](&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331411&quot;&gt;https://bugs.openjdk.org/browse/JDK-8331411&lt;/a&gt;) and [&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8335904&quot; title=&quot;Fix invalid comment in ShenandoahLock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8335904&quot;&gt;&lt;strike&gt;JDK-8335904&lt;/strike&gt;&lt;/a&gt;](&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8335904),&quot;&gt;https://bugs.openjdk.org/browse/JDK-8335904),&lt;/a&gt; it is the last PR for the series of improvements for ShenandoahLock we are proposing to backport to jdk17 to address the lock contention issue. It is not a clean backport, there were some code conflicts and build issue due to API change, I have resolved them and tested, overall risk is low.</comment>
                            <comment id="14704537" author="roboduke" created="Thu, 12 Sep 2024 06:58:18 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2868&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2868&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-12 13:34:30 +0000</comment>
                            <comment id="14691099" author="roboduke" created="Thu, 18 Jul 2024 16:27:03 -0700"  >[jdk23u-fix-request] Approval Request from Xiaolong Peng&lt;br/&gt;
Backport 8331411: Shenandoah: Reconsider spinning duration in ShenandoahLock to jdk23 to improve shenandoah heap lock performance under heavy contention. Applies cleanly, also run hotspot_gc_shenandoah test suite, overall risk should be low for jdk23.</comment>
                            <comment id="14691090" author="roboduke" created="Thu, 18 Jul 2024 15:32:05 -0700"  >[jdk21u-fix-request] Approval Request from Xiaolong Peng&lt;br/&gt;
Backport 8331411: Shenandoah: Reconsider spinning duration in ShenandoahLock to jdk21 to improve shenandoah heap lock performance under heavy contention. Applies cleanly, also run hotspot_gc_shenandoah test suite, overall risk should be low for jdk21.</comment>
                            <comment id="14691064" author="roboduke" created="Thu, 18 Jul 2024 13:44:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/850&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/850&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-18 16:22:36 +0000</comment>
                            <comment id="14691039" author="roboduke" created="Thu, 18 Jul 2024 11:03:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/27&quot;&gt;https://git.openjdk.org/jdk23u/pull/27&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-18 16:15:28 +0000</comment>
                            <comment id="14685177" author="dukebot" created="Wed, 26 Jun 2024 12:27:41 -0700"  >Changeset: 817edcb6&lt;br/&gt;
Author:    Xiaolong Peng &amp;lt;&lt;a href=&apos;mailto:xpeng@openjdk.org&apos;&gt;xpeng@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-06-26 19:25:37 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/817edcb697cbb8c608c9292cdc4b99db4f5844dc&quot;&gt;https://git.openjdk.org/jdk/commit/817edcb697cbb8c608c9292cdc4b99db4f5844dc&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14681491" author="roboduke" created="Thu, 13 Jun 2024 11:41:31 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19570&quot;&gt;https://git.openjdk.org/jdk/pull/19570&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-05 23:44:48 +0000</comment>
                            <comment id="14672929" author="shade" created="Mon, 13 May 2024 09:10:04 -0700"  >FTR, Kelvin has an exponential backoff prototype here:&lt;br/&gt;
&amp;nbsp;&lt;a href=&quot;https://github.com/openjdk/jdk/pull/19182&quot;&gt;https://github.com/openjdk/jdk/pull/19182&lt;/a&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5134759">JDK-8336835</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134860">JDK-8336922</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5139294">JDK-8340315</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5129225">JDK-8332083</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5121139">JDK-8325587</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133697">JDK-8335904</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i365lv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17314"><![CDATA[b04]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>