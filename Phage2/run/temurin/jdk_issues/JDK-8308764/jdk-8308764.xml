<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:03:57 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8308764] Reporting errors from create_vm may crash</title>
                <link>https://bugs.openjdk.org/browse/JDK-8308764</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>JNI_CreateJavaVM_inner calls create_vm and examines the result. If it indicates an error (not JNI_OK) then it checks for a pending exception and reports that. That check requires the current thread. However, in some cases create_vm deletes the main thread before returning an error code. As a result, the attempt to get and use current thread will crash (either an assert or a null pointer access).&lt;br/&gt;
&lt;br/&gt;
This crash can be reproduced fairly easily by patching create_vm&amp;#39;s handling of the result of init_globals(), using -XX:+UseNewCode to force an error return.  I tripped over it while testing a fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8240774&quot; title=&quot;[REDO] G1DirtyCardQueue destructor has useless flush&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8240774&quot;&gt;&lt;strike&gt;JDK-8240774&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5101706">JDK-8308764</key>
            <summary>Reporting errors from create_vm may crash</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="kbarrett">Kim Barrett</reporter>
                        <labels>
                            <label>jni</label>
                            <label>noreg-hard</label>
                    </labels>
                <created>Wed, 24 May 2023 03:22:59 -0700</created>
                <updated>Mon, 12 Jun 2023 20:57:10 -0700</updated>
                            <resolved>Wed, 7 Jun 2023 20:31:07 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14587829" author="dukebot" created="Wed, 7 Jun 2023 20:31:06 -0700"  >Changeset: 6646272a&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-08 03:30:11 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/6646272a055f8e6c3955bed49d298b9eda1a805b&quot;&gt;https://git.openjdk.org/jdk/commit/6646272a055f8e6c3955bed49d298b9eda1a805b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14585842" author="roboduke" created="Tue, 30 May 2023 19:56:51 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14238&quot;&gt;https://git.openjdk.org/jdk/pull/14238&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-31 02:51:03 +0000</comment>
                            <comment id="14585838" author="dholmes" created="Tue, 30 May 2023 18:52:41 -0700"  >Testing this is problematic. It is easy to  trigger a non-exception exit path using UseNewCode. But for the exception path to be tested I have to trigger actual throwing of the exception, and the only exception that can really happen here is OOME and I have no way to force the low-level allocation methods to throw OOME for a specific allocation.&lt;br/&gt;
&lt;br/&gt;
That said, we still test that the crashing JavaThread::current() no longer crashes.</comment>
                            <comment id="14585835" author="dholmes" created="Tue, 30 May 2023 18:40:37 -0700"  >The problematic chunk of code in JNI_CreateJavaVM_inner is:&lt;br/&gt;
&lt;br/&gt;
} else {  // create_vm returned an error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// If create_vm exits because of a pending exception, exit with that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// exception.  In the future when we figure out how to reclaim memory,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// we may be able to exit with JNI_ERR and allow the calling application&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// to continue.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (Universe::is_fully_initialized()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// otherwise no pending exception possible - VM will already have aborted&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JavaThread* THREAD = JavaThread::current(); // For exception macros.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (HAS_PENDING_EXCEPTION) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HandleMark hm(THREAD);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
We will only try to report an exception if Universe::is_fully_initialized(), which is set at the start of universe_post_init(), after which numerous exception throwing code paths exist.&lt;br/&gt;
&lt;br/&gt;
universe_post_init() is called near the end of init_globals2() which in turn is called from create_vm:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;status = init_globals2();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (status != JNI_OK) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Threads::remove(main_thread, false);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;main_thread-&amp;gt;smr_delete();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*canTryAgain = false; // don&amp;#39;t let caller call JNI_CreateJavaVM again&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return status;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Given we know we can have exceptions pending at this point (else we should have done a vm_exit_during_initialization elsewhere) it suffices to not perform the smr_delete() and so leave the main_thread intact for JNI_CreateJavaVM_inner to use.&lt;br/&gt;
&lt;br/&gt;
Any other exit path that deletes the main_thread (only one) won&amp;#39;t get past the Universe_is_fully_initialized() check.&lt;br/&gt;
&lt;br/&gt;
Any failure of init_globals() and init_globals2() prevents retrying the creation of the VM so we do not need to explicitly cleanup the main thread..&lt;br/&gt;
&lt;br/&gt;
Updated to reflect the split of init_globals() into two parts by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8240774&quot; title=&quot;[REDO] G1DirtyCardQueue destructor has useless flush&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8240774&quot;&gt;&lt;strike&gt;JDK-8240774&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14584280" author="dholmes" created="Wed, 24 May 2023 18:22:53 -0700"  >Yes the general expectation is that most failures that get reported (rather than do a vm_exit_during_initialization) would have an associated exception from the Java initialization code. But of course there are many things that can go wrong during VM init. We can easily avoid the current_thread crash as noted. I will look at whether we can add jio_snprintf-style error messages as well.</comment>
                            <comment id="14584064" author="kbarrett" created="Wed, 24 May 2023 03:23:54 -0700"  >A workaround that eliminates the crash is to use Thread::current_or_null and only do the exception check and reporting if the result is non-null. But since create_vm will delete the current (main) Thread object before returning in some (most/all?) such scenarios, the exception doesn&amp;#39;t get reported in those cases. Instead there is just a generic failure to start message.&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5013066">JDK-8240774</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31nh7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>