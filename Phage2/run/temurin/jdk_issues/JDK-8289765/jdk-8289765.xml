<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:01:42 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8289765] JDI EventSet/resume/resume008 failed with &quot;ERROR: suspendCounts don&apos;t match for : VirtualThread-unparker&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8289765</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK19 CI:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
debugger&amp;gt; :::::: case: # 2&lt;br/&gt;
debugger&amp;gt; ......waiting for new ThreadStartEvent : 2&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: enabling remove of listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@60ddc97&apos;&gt;7@60ddc97&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; Adding listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@60ddc97&apos;&gt;7@60ddc97&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: vm.resume called&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: exit   :: threadName == thread1&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: enter  :: threadName == thread2&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: exit   :: threadName == thread2&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: Received event set for request: thread start request  (enabled)&lt;br/&gt;
EventHandler&amp;gt; Event: ThreadStartEventImpl req thread start request  (enabled)&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@60ddc97&apos;&gt;7@60ddc97&lt;/a&gt;&lt;br/&gt;
debugger&amp;gt;        got new ThreadStartEvent with propety &amp;#39;number&amp;#39; == ThreadStartRequest3&lt;br/&gt;
debugger&amp;gt; ......checking up on EventSet.resume()&lt;br/&gt;
debugger&amp;gt; ......--&amp;gt; vm.suspend();&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts1&lt;br/&gt;
debugger&amp;gt; {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}&lt;br/&gt;
debugger&amp;gt;         eventSet.resume;&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts2&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
EventHandler&amp;gt; Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)&lt;br/&gt;
debugger&amp;gt; Received communication breakpoint event.&lt;br/&gt;
debugger&amp;gt; {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}&lt;br/&gt;
debugger&amp;gt;         getting : int policy = eventSet.suspendPolicy();&lt;br/&gt;
debugger&amp;gt;         case SUSPEND_ALL&lt;br/&gt;
debugger&amp;gt; checking VirtualThread-unparker&lt;br/&gt;
# ERROR: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : VirtualThread-unparker&lt;br/&gt;
The following stacktrace is for failure analysis.&lt;br/&gt;
nsk.share.TestFailure: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : VirtualThread-unparker&lt;br/&gt;
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)&lt;br/&gt;
	at nsk.share.Log.complain(Log.java:403)&lt;br/&gt;
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:243)&lt;br/&gt;
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1589)&lt;br/&gt;
# ERROR: debugger&amp;gt; before resuming : 2&lt;br/&gt;
# ERROR: debugger&amp;gt; after  resuming : 2&lt;br/&gt;
debugger&amp;gt; ......--&amp;gt; vm.resume()&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: entered&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: received breakpoint event.&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: received instruction from debuggee to finish.&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: exited with false.&lt;br/&gt;
debugger&amp;gt; TESTING ENDS&lt;br/&gt;
debugger&amp;gt; Waiting for debuggee&amp;#39;s exit...&lt;br/&gt;
EventHandler&amp;gt; waitForVMDisconnect&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee: debuggee exits&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_NONE&lt;br/&gt;
EventHandler&amp;gt; Event: VMDeathEventImpl req null&lt;br/&gt;
EventHandler&amp;gt; receieved VMDeath&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:3@7b74fdf&apos;&gt;3@7b74fdf&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_NONE&lt;br/&gt;
EventHandler&amp;gt; Event: VMDisconnectEventImpl req null&lt;br/&gt;
EventHandler&amp;gt; receieved VMDisconnect&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:4@53166b0e&apos;&gt;4@53166b0e&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; finished&lt;br/&gt;
EventHandler&amp;gt; waitForVMDisconnect: done&lt;br/&gt;
debugger&amp;gt; Event handler thread exited.&lt;br/&gt;
debugger&amp;gt; Debuggee PASSED.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
#&amp;gt;  SUMMARY: Following errors occured&lt;br/&gt;
#&amp;gt;      during test execution:&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
# ERROR: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : VirtualThread-unparker&lt;br/&gt;
# ERROR: debugger&amp;gt; before resuming : 2&lt;br/&gt;
# ERROR: debugger&amp;gt; after  resuming : 2&lt;br/&gt;
----------System.err:(0/0)----------</description>
                <environment></environment>
        <key id="5078548">JDK-8289765</key>
            <summary>JDI EventSet/resume/resume008 failed with &quot;ERROR: suspendCounts don&apos;t match for : VirtualThread-unparker&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cjplummer">Chris Plummer</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>intermittent</label>
                            <label>loom</label>
                            <label>noreg-self</label>
                            <label>tier5</label>
                    </labels>
                <created>Tue, 5 Jul 2022 11:53:56 -0700</created>
                <updated>Tue, 14 Nov 2023 09:32:40 -0800</updated>
                            <resolved>Thu, 9 Mar 2023 13:56:22 -0800</resolved>
                                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-svc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14565666" author="dukebot" created="Thu, 9 Mar 2023 13:56:21 -0800"  >Changeset: 8b0eb729&lt;br/&gt;
Author:    Chris Plummer &amp;lt;&lt;a href=&apos;mailto:cjplummer@openjdk.org&apos;&gt;cjplummer@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-09 21:55:15 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/8b0eb7299a5d0e142453ed5c7a17308077e27993&quot;&gt;https://git.openjdk.org/jdk/commit/8b0eb7299a5d0e142453ed5c7a17308077e27993&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14564472" author="roboduke" created="Fri, 3 Mar 2023 12:42:30 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12861&quot;&gt;https://git.openjdk.org/jdk/pull/12861&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-03 18:16:25 +0000</comment>
                            <comment id="14559371" author="cjplummer" created="Sun, 12 Feb 2023 19:50:30 -0800"  >Short story is that this is caused by the arrival of unexpected ThreadStartEvents, which messes up the debugger side. The events are for threads we normally only see getting created when using virtual threads, such as carrier threads and the VirtualThread-unparker thread. Theoretically this issue could happen without virtual threads due to other VM threads starting up such as Common-Cleaner, but we haven&amp;#39;t seen it fail for that reason yet.&lt;br/&gt;
&lt;br/&gt;
The test is testing proper thread suspension for ThreadStartEvent using each of the 3 suspension policy types. The debuggee creates a sequence of 3 debuggee threads, each ones timing coordinated with some complicated synchronization with the debugger using breakpoints and the setting of fields in the debuggee (and careful placement of suspen/resume in the debugger). The ThreadStartRequests that the debugger sets up always use a &amp;quot;count filter&amp;quot; of 1, which means the requests are good for delivering exactly 1 ThreadStartEvent, and any that come after the first will get filtered out. So when an an unexpected ThreadStartEvent arrives for something like a carrier thread, this prematurely moves the debugger on to the next step, and the synchronization with the debuggee gets messed up.&lt;br/&gt;
&lt;br/&gt;
This bug has proved very hard to fix. The synchronization is fragile, and there is a lot of common library code involved with the event handling, which really makes it hard to special case these unexpected ThreadStartEvent. I&amp;#39;ve changed the debugger side so the ThreadStartRequest will allow any number of ThreadStartEvents, and keeps processing them until the expected one arrives, but that just creates other issues with event processing, mostly with respect the thread resumption. I&amp;#39;ve also added a somewhat global filter for any of these ThreadStartEvents events that we tend to see in tests, but that also leads to some event processing issues and thread suspend/resume issues I still haven&amp;#39;t fully addressed. I&amp;#39;ve made progress, but issues still linger that I don&amp;#39;t have a good understanding of yet.</comment>
                            <comment id="14557607" author="dcubed" created="Mon, 6 Feb 2023 10:36:35 -0800"  >Here&amp;#39;s a log file snippet from the jdk-21+9-610-tier5 sighting:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
debugger&amp;gt; :::::: case: # 2&lt;br/&gt;
debugger&amp;gt; ......waiting for new ThreadStartEvent : 2&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: enabling remove of listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@71c8e853&apos;&gt;7@71c8e853&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; Adding listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@71c8e853&apos;&gt;7@71c8e853&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: vm.resume called&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: exit   :: threadName == thread1&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: enter  :: threadName == thread2&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: exit   :: threadName == thread2&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: Received event set for request: thread start request  (enabled)&lt;br/&gt;
EventHandler&amp;gt; Event: ThreadStartEventImpl req thread start request  (enabled)&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@71c8e853&apos;&gt;7@71c8e853&lt;/a&gt;&lt;br/&gt;
debugger&amp;gt;        got new ThreadStartEvent with propety &amp;#39;number&amp;#39; == ThreadStartRequest3&lt;br/&gt;
debugger&amp;gt; ......checking up on EventSet.resume()&lt;br/&gt;
debugger&amp;gt; ......--&amp;gt; vm.suspend();&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts1&lt;br/&gt;
debugger&amp;gt; {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}&lt;br/&gt;
debugger&amp;gt;         eventSet.resume;&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts2&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
EventHandler&amp;gt; Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)&lt;br/&gt;
debugger&amp;gt; Received communication breakpoint event.&lt;br/&gt;
debugger&amp;gt; {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}&lt;br/&gt;
debugger&amp;gt;         getting : int policy = eventSet.suspendPolicy();&lt;br/&gt;
debugger&amp;gt;         case SUSPEND_ALL&lt;br/&gt;
debugger&amp;gt; checking Reference Handler&lt;br/&gt;
# ERROR: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : Reference Handler&lt;br/&gt;
The following stacktrace is for failure analysis.&lt;br/&gt;
nsk.share.TestFailure: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : Reference Handler&lt;br/&gt;
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)&lt;br/&gt;
	at nsk.share.Log.complain(Log.java:403)&lt;br/&gt;
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:243)&lt;br/&gt;
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
# ERROR: debugger&amp;gt; before resuming : 2&lt;br/&gt;
# ERROR: debugger&amp;gt; after  resuming : 2&lt;br/&gt;
debugger&amp;gt; ......--&amp;gt; vm.resume()&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: entered&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: received breakpoint event.&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: received instruction from debuggee to finish.&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: exited with false.&lt;br/&gt;
debugger&amp;gt; TESTING ENDS&lt;br/&gt;
debugger&amp;gt; Waiting for debuggee&amp;#39;s exit...&lt;br/&gt;
EventHandler&amp;gt; waitForVMDisconnect&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee: debuggee exits&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_NONE&lt;br/&gt;
EventHandler&amp;gt; Event: VMDeathEventImpl req null&lt;br/&gt;
EventHandler&amp;gt; receieved VMDeath&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:3@24b8ea66&apos;&gt;3@24b8ea66&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_NONE&lt;br/&gt;
EventHandler&amp;gt; Event: VMDisconnectEventImpl req null&lt;br/&gt;
EventHandler&amp;gt; receieved VMDisconnect&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:4@28bfc7e&apos;&gt;4@28bfc7e&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; finished&lt;br/&gt;
EventHandler&amp;gt; waitForVMDisconnect: done&lt;br/&gt;
debugger&amp;gt; Event handler thread exited.&lt;br/&gt;
debugger&amp;gt; Debuggee PASSED.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
#&amp;gt;  SUMMARY: Following errors occured&lt;br/&gt;
#&amp;gt;      during test execution:&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
# ERROR: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : Reference Handler&lt;br/&gt;
# ERROR: debugger&amp;gt; before resuming : 2&lt;br/&gt;
# ERROR: debugger&amp;gt; after  resuming : 2&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(36/8557)*----------</comment>
                            <comment id="14514800" author="dcubed" created="Tue, 2 Aug 2022 10:05:00 -0700"  >Here&amp;#39;s a log file snippet from the jdk-20+9-485-tier5 sighting:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/jdi/EventSet/resume/resume008/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
debugger&amp;gt; :::::: case: # 2&lt;br/&gt;
debugger&amp;gt; ......waiting for new ThreadStartEvent : 2&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: enabling remove of listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@5df16b4a&apos;&gt;7@5df16b4a&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; Adding listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@5df16b4a&apos;&gt;7@5df16b4a&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: vm.resume called&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: enter  :: threadName == thread2&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: exit   :: threadName == thread2&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
EventHandler&amp;gt; waitForRequestedEventSet: Received event set for request: thread start request  (enabled)&lt;br/&gt;
EventHandler&amp;gt; Event: ThreadStartEventImpl req thread start request  (enabled)&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:7@5df16b4a&apos;&gt;7@5df16b4a&lt;/a&gt;&lt;br/&gt;
debugger&amp;gt;        got new ThreadStartEvent with propety &amp;#39;number&amp;#39; == ThreadStartRequest3&lt;br/&gt;
debugger&amp;gt; ......checking up on EventSet.resume()&lt;br/&gt;
debugger&amp;gt; ......--&amp;gt; vm.suspend();&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts1&lt;br/&gt;
debugger&amp;gt; {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}&lt;br/&gt;
debugger&amp;gt;         eventSet.resume;&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts2&lt;br/&gt;
EventHandler&amp;gt; Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)&lt;br/&gt;
debugger&amp;gt; Received communication breakpoint event.&lt;br/&gt;
debugger&amp;gt; {Reference Handler=2, VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, Finalizer=2, ForkJoinPool-1-worker-4=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2}&lt;br/&gt;
debugger&amp;gt;         getting : int policy = eventSet.suspendPolicy();&lt;br/&gt;
debugger&amp;gt;         case SUSPEND_ALL&lt;br/&gt;
debugger&amp;gt; checking Reference Handler&lt;br/&gt;
# ERROR: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : Reference Handler&lt;br/&gt;
The following stacktrace is for failure analysis.&lt;br/&gt;
nsk.share.TestFailure: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : Reference Handler&lt;br/&gt;
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)&lt;br/&gt;
	at nsk.share.Log.complain(Log.java:403)&lt;br/&gt;
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.testRun(resume008.java:243)&lt;br/&gt;
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.run(resume008.java:84)&lt;br/&gt;
	at nsk.jdi.EventSet.resume.resume008.main(resume008.java:79)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1589)&lt;br/&gt;
# ERROR: debugger&amp;gt; before resuming : 2&lt;br/&gt;
# ERROR: debugger&amp;gt; after  resuming : 2&lt;br/&gt;
debugger&amp;gt; ......--&amp;gt; vm.resume()&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: entered&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: received breakpoint event.&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: received instruction from debuggee to finish.&lt;br/&gt;
debugger&amp;gt; shouldRunAfterBreakpoint: exited with false.&lt;br/&gt;
debugger&amp;gt; TESTING ENDS&lt;br/&gt;
debugger&amp;gt; Waiting for debuggee&amp;#39;s exit...&lt;br/&gt;
EventHandler&amp;gt; waitForVMDisconnect&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee: debuggee exits&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_NONE&lt;br/&gt;
EventHandler&amp;gt; Event: VMDeathEventImpl req null&lt;br/&gt;
EventHandler&amp;gt; receieved VMDeath&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:3@48e51d82&apos;&gt;3@48e51d82&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_NONE&lt;br/&gt;
EventHandler&amp;gt; Event: VMDisconnectEventImpl req null&lt;br/&gt;
EventHandler&amp;gt; receieved VMDisconnect&lt;br/&gt;
EventHandler&amp;gt; Removing listener nsk.share.jdi.EventHandler$&lt;a href=&apos;mailto:4@62a36c19&apos;&gt;4@62a36c19&lt;/a&gt;&lt;br/&gt;
EventHandler&amp;gt; finished&lt;br/&gt;
EventHandler&amp;gt; waitForVMDisconnect: done&lt;br/&gt;
debugger&amp;gt; Event handler thread exited.&lt;br/&gt;
debugger&amp;gt; Debuggee PASSED.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
#&amp;gt;  SUMMARY: Following errors occured&lt;br/&gt;
#&amp;gt;      during test execution:&lt;br/&gt;
#&amp;gt;  &lt;br/&gt;
# ERROR: debugger&amp;gt; ERROR: suspendCounts don&amp;#39;t match for : Reference Handler&lt;br/&gt;
# ERROR: debugger&amp;gt; before resuming : 2&lt;br/&gt;
# ERROR: debugger&amp;gt; after  resuming : 2&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(34/7959)*----------</comment>
                            <comment id="14507592" author="cjplummer" created="Wed, 6 Jul 2022 14:39:06 -0700"  >I&amp;#39;ve been unable to reproduce this. Will keep an eye on it to see if it pops up again.</comment>
                            <comment id="14507590" author="cjplummer" created="Wed, 6 Jul 2022 14:38:27 -0700"  >The could possibly be related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8282379&quot; title=&quot;[LOOM] vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod011 sometimes fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8282379&quot;&gt;&lt;strike&gt;JDK-8282379&lt;/strike&gt;&lt;/a&gt;, which fails due to:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;Verifying threads status after method invocation:&lt;br/&gt;
# ERROR: TEST FAILED: wrong invocation:&lt;br/&gt;
# ERROR: invoking debuggee thread instance of java.lang.VirtualThread(name=&amp;#39;invokemethod011tMainThr&amp;#39;, id=272)&lt;br/&gt;
# ERROR: is not suspended again after the invocation &lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s similar in that we are dealing with a virtual thread not being suspended when it should be.&lt;br/&gt;
&lt;br/&gt;
[UPDATE]: It&amp;#39;s not related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8282379&quot; title=&quot;[LOOM] vmTestbase/nsk/jdi/ClassType/invokeMethod/invokemethod011 sometimes fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8282379&quot;&gt;&lt;strike&gt;JDK-8282379&lt;/strike&gt;&lt;/a&gt;, which is the result of using INVOKE_SINGLE_THREADED when using JDI to invoke a debuggee method. There no invoking going on in this test, so it can&amp;#39;t be the same issue.</comment>
                            <comment id="14507303" author="cjplummer" created="Tue, 5 Jul 2022 16:21:10 -0700"  >The the log just before the failure has important clues:&lt;br/&gt;
&lt;br/&gt;
debugger&amp;gt; {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}&lt;br/&gt;
debugger&amp;gt;         eventSet.resume;&lt;br/&gt;
debugger&amp;gt;         getting : Map&amp;lt;String, Integer&amp;gt; suspendsCounts2&lt;br/&gt;
EventHandler&amp;gt; Received event set with policy = SUSPEND_ALL&lt;br/&gt;
EventHandler&amp;gt; Event: BreakpointEventImpl req breakpoint request nsk.jdi.EventSet.resume.resume008a:75 (enabled)&lt;br/&gt;
debugger&amp;gt; Received communication breakpoint event.&lt;br/&gt;
debugger&amp;gt; {VirtualThread-unparker=2, Common-Cleaner=2, ForkJoinPool-1-worker-1=2, main=2, old-m-a-i-n=2, Signal Dispatcher=2, ForkJoinPool-1-worker-4=2, ForkJoinPool-1-worker-5=2, Notification Thread=2, ForkJoinPool-1-worker-2=2, ForkJoinPool-1-worker-3=2, Reference Handler=2, Finalizer=2}&lt;br/&gt;
&lt;br/&gt;
The first line is a snapshot of suspend counts before the eventSet.resume() and the last line is the snapshort afterwords. Since we are dealing with a SUSPEND_ALL, all of the suspend counts should have been decremented by one after the resuem, but they aren&amp;#39;t. The reason is because in between you can see a BreakpiontEvent was received, and it did a SUSPEND_ALL, which bumped al the suspend counts up by one more than expected. The breakpoint is not expected at this time. The debuggee thread that hit it should still have a suspend count of 1 after the resume, and therefore not progressed to the breakpoint, but for some reason it was resumed. main is the thread hitting the breakpoint (or at least should be). It&amp;#39;s a virtualthread and is showing up with a suspendCount of 2, so I&amp;#39;m not sure why it is getting resumed.&lt;br/&gt;
&lt;br/&gt;
Another odd thing in the log is the presence of the following a bit earlier:&lt;br/&gt;
&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: enter  :: threadName == thread2&lt;br/&gt;
debugee.stderr&amp;gt; **&amp;gt; debuggee:   &amp;#39;run&amp;#39;: exit   :: threadName == thread2&lt;br/&gt;
&lt;br/&gt;
These should have turned up much later, and thread2 should still be in the list of known threads when the two snapshots were taken. So between &amp;quot;main&amp;quot; having been resumed when it shouldn&amp;#39;t have been, and also now &amp;quot;thread2&amp;quot;, it looks like we have an issue with virtual threads being resumed when they are not suppose to be.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5094185">JDK-8302516</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5114718">JDK-8320084</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101025">JDK-8308187</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2xqqr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17407"><![CDATA[b14]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="370"><![CDATA[debugger]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>