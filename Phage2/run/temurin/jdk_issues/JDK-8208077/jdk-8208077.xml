<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:39:51 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8208077] File.listRoots performance degradation</title>
                <link>https://bugs.openjdk.org/browse/JDK-8208077</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
Windows&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
listRoots used to return right away, (1 call takes &amp;lt;1ms), now (when the system has a CD/DVD drive), it takes 0.125 SECONDs to return.  -When the system does not have a CD/DVD drive, it still take 25 ms to return.&lt;br/&gt;
&lt;br/&gt;
This looks to be a regression from bug fix for 8182710: File.listRoots() always returns the root of CD drive.&lt;br/&gt;
Looks the fix after getting the listRoots0 further incurred some System calls, which added quite a bit of cost to the listRoots.&lt;br/&gt;
&lt;br/&gt;
REGRESSION : Last worked in version 8u172&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
Compile the attached java source code with jdk 1.7 or 1.8, run it with command &amp;quot;java TestFileListRoots&amp;quot;, it returns right away (0 ms).  switch java to 9 (I used 9.0.4), do command &amp;quot;java TestFileListRoots&amp;quot;, it still returns right away (0 ms).  Now switch to use java 10 (I used 10.0.1), it took 0.125 seconds to return. Switch to java 11 (11-ea-15), similar bad performance.&lt;br/&gt;
&lt;br/&gt;
ACTUAL -&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java -version&lt;br/&gt;
java version &amp;quot;1.7.0_80&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;javac TestFileListRoots.java&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java TestFileListRoots&lt;br/&gt;
Took 0.0 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
E:\&lt;br/&gt;
S:\&lt;br/&gt;
Z:\&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;set JAVA_HOME=C:\fzhou4_c2\3rd_Party\jsdk\9.0.4\Windows&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;set PATH=C:\fzhou4_c2\3rd_Party\jsdk\9.0.4\Windows\bin&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java TestFileListRoots&lt;br/&gt;
Took 0.0 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
E:\&lt;br/&gt;
S:\&lt;br/&gt;
Z:\&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;set JAVA_HOME=C:\fzhou4_c2\3rd_Party\jsdk\10.0.1\Windows&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;set PATH=C:\fzhou4_c2\3rd_Party\jsdk\10.0.1\Windows\bin&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java -version&lt;br/&gt;
java version &amp;quot;10.0.1&amp;quot; 2018-04-17&lt;br/&gt;
Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java TestFileListRoots&lt;br/&gt;
Took 0.125 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
S:\&lt;br/&gt;
Z:\&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;set JAVA_HOME=C:\fzhou4_c2\3rd_Party\jsdk\11.ea.15\Windows&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;set PATH=C:\fzhou4_c2\3rd_Party\jsdk\11.ea.15\Windows\bin&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java -version&lt;br/&gt;
java version &amp;quot;11-ea&amp;quot; 2018-09-25&lt;br/&gt;
Java(TM) SE Runtime Environment 18.9 (build 11-ea+15)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11-ea+15, mixed mode)&lt;br/&gt;
&lt;br/&gt;
C:\fzhou4_c2&amp;gt;java TestFileListRoots&lt;br/&gt;
Took 0.125 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
S:\&lt;br/&gt;
Z:\&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
import java.io.File;&lt;br/&gt;
&lt;br/&gt;
public class TestFileListRoots {&lt;br/&gt;
	public static void main(String[] args) {&lt;br/&gt;
		long start = System.currentTimeMillis();&lt;br/&gt;
		int fileCount = 0;&lt;br/&gt;
		File[] files = File.listRoots();&lt;br/&gt;
		fileCount = files.length;&lt;br/&gt;
		String[] rootPaths = new String[fileCount];&lt;br/&gt;
		int index = 0;&lt;br/&gt;
		for (File file : files) {&lt;br/&gt;
			String rootPath = file.getAbsolutePath();&lt;br/&gt;
			rootPaths[index++] = rootPath;&lt;br/&gt;
		}&lt;br/&gt;
		long end = System.currentTimeMillis();&lt;br/&gt;
		System.out.println(&amp;quot;Took &amp;quot; + ((end - start)/1000.0) + &amp;quot; seconds&amp;quot;);&lt;br/&gt;
		System.out.println(&amp;quot;Here are the root paths:&amp;quot;);&lt;br/&gt;
		for (String path : rootPaths) {&lt;br/&gt;
			System.out.println(path);&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4967744">JDK-8208077</key>
            <summary>File.listRoots performance degradation</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="alanb">Alan Bateman</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>11bpr-critical-approved</label>
                            <label>amazon-interest</label>
                            <label>bugdb_34747602</label>
                            <label>dcs-pso</label>
                            <label>dcs-ue</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk20u-fix-SQE-ok</label>
                            <label>jdk20u-fix-request</label>
                            <label>jdk20u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>regression</label>
                            <label>release-note=yes</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Thu, 19 Jul 2018 08:02:59 -0700</created>
                <updated>Mon, 7 Aug 2023 14:16:23 -0700</updated>
                            <resolved>Wed, 18 Jan 2023 23:01:33 -0800</resolved>
                                    <version>10</version>
                    <version>11</version>
                    <version>17</version>
                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                                                            <comments>
                            <comment id="14555488" author="roboduke" created="Mon, 30 Jan 2023 08:18:46 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk20u/pull/2&quot;&gt;https://git.openjdk.org/jdk20u/pull/2&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-30 16:09:14 +0000</comment>
                            <comment id="14553887" author="roboduke" created="Mon, 23 Jan 2023 19:40:07 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/1681&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/1681&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-24 03:34:18 +0000</comment>
                            <comment id="14553886" author="vrudomet" created="Mon, 23 Jan 2023 19:31:32 -0800"  >Fix request [11u]&lt;br/&gt;
&lt;br/&gt;
Clean backport for parity with 11.0.19-oracle.&lt;br/&gt;
Simple change, low risk. Windows only.&lt;br/&gt;
&lt;br/&gt;
Checked on Linux x64 and Windows x64 pipelines.</comment>
                            <comment id="14553514" author="roboduke" created="Mon, 23 Jan 2023 08:11:20 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1098&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1098&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-23 15:42:03 +0000</comment>
                            <comment id="14553505" author="goetz" created="Mon, 23 Jan 2023 07:42:50 -0800"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.7-oracle.&lt;br/&gt;
Simple change, low risk. Windows only.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes on linux and windows. SAP nightly testing passed.</comment>
                            <comment id="14552617" author="dukebot" created="Wed, 18 Jan 2023 23:01:32 -0800"  >Changeset: 5b0af1a8&lt;br/&gt;
Author:    Alan Bateman &amp;lt;&lt;a href=&apos;mailto:alanb@openjdk.org&apos;&gt;alanb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-19 06:59:38 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/5b0af1a80bb4d2a81cda7e26a6ad0db43e679519&quot;&gt;https://git.openjdk.org/jdk/commit/5b0af1a80bb4d2a81cda7e26a6ad0db43e679519&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14552407" author="roboduke" created="Wed, 18 Jan 2023 07:49:08 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12072&quot;&gt;https://git.openjdk.org/jdk/pull/12072&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-18 14:16:22 +0000</comment>
                            <comment id="14552208" author="alanb" created="Tue, 17 Jan 2023 23:45:37 -0800"  >I think there was a typo in the above, I assume the submitter was asked to test FileSystems::getRootDirectories, not getFileStores.</comment>
                            <comment id="14211685" author="bpb" created="Fri, 21 Sep 2018 16:34:27 -0700"  >The version of listRoots() prior to the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8182710&quot; title=&quot;File.listRoots() always returns the root of CD drive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8182710&quot;&gt;&lt;strike&gt;JDK-8182710&lt;/strike&gt;&lt;/a&gt; was incorrect and thus its performance cannot be held up as a standard. The updated version of listRoots() is much slower, but it is correct and its output and performance both match those of getFileStores(). Therefore this issue is resolved as not an issue.</comment>
                            <comment id="14211651" author="bpb" created="Fri, 21 Sep 2018 14:46:22 -0700"  >If one runs the benchmark&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Benchmark&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Iterable&amp;lt;FileStore&amp;gt; getFileStores() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return FileSystems.getDefault().getFileStores();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
then massively higher throughput versus the listRoots() benchmark is observed. The method getFileStores() however returns only an Iterable and no actual FileStores are created until accessed via the iteration. If one actually converts the iteration into an array as in the following benchmark then almost identical throughput compared to the listRoots() benchmark is observed. Therefore there does not appear to be any significant performance difference between listRoots() and getFileStores().&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Benchmark&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public FileStore[] listStores() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileStore[] stores = new FileStore[26];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int count = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (FileStore store: FileSystems.getDefault().getFileStores()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stores[count++] = store;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Arrays.copyOf(stores, count);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
</comment>
                            <comment id="14211621" author="bpb" created="Fri, 21 Sep 2018 09:46:18 -0700"  >Using my JDK 12 local build on Windows, listRoots and getFileStores return the same results, without and with a CD inserted:&lt;br/&gt;
&lt;br/&gt;
$ ./jdk/build/windows-x64/jdk/bin/java ListRoots&lt;br/&gt;
File.listRoots():&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
E:\&lt;br/&gt;
&lt;br/&gt;
FileSystems.getDefault().getFileStores():&lt;br/&gt;
System (C:)              94368764     75991128     18377636&lt;br/&gt;
VBOX_VirtualBox (D:)    487712924    358954836    128758088&lt;br/&gt;
NTFS VOLUME (E:)          1045500        33684      1011816&lt;br/&gt;
&lt;br/&gt;
$ ./jdk/build/windows-x64/jdk/bin/java ListRoots&lt;br/&gt;
File.listRoots():&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
E:\&lt;br/&gt;
F:\&lt;br/&gt;
&lt;br/&gt;
FileSystems.getDefault().getFileStores():&lt;br/&gt;
System (C:)              94368764     75991128     18377636&lt;br/&gt;
VBOX_VirtualBox (D:)    487712924    358954896    128758028&lt;br/&gt;
NTFS VOLUME (E:)          1045500        33684      1011816&lt;br/&gt;
VBox_GAs_5.2.18 (F:)        56618        56618            0&lt;br/&gt;
</comment>
                            <comment id="14211546" author="alanb" created="Fri, 21 Sep 2018 00:05:56 -0700"  >Do the changes in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8182710&quot; title=&quot;File.listRoots() always returns the root of CD drive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8182710&quot;&gt;&lt;strike&gt;JDK-8182710&lt;/strike&gt;&lt;/a&gt; mean that listRoots and getRootDirectories return different results? We may have to look at this again to see how getRootDirectories behave.</comment>
                            <comment id="14211514" author="bpb" created="Thu, 20 Sep 2018 15:45:12 -0700"  >I re-ran the benchmark with various edits applied to the source. The performance degradation is due neither to lambdas nor to streams, but rather to the Files.exists() method. I tried several approaches including checking the file attributes in the native listRoots0() before returning the bit mask, and using GetLogicalDriveStringsW() instead of GetLogicalDrives(). The need to actually access the file system to validate the drive kept the performance at about the same level for all variants tested. The version of the code in place prior to the fix of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8182710&quot; title=&quot;File.listRoots() always returns the root of CD drive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8182710&quot;&gt;&lt;strike&gt;JDK-8182710&lt;/strike&gt;&lt;/a&gt; did not access the file system at all but was incorrect. I think that we need to keep the current, correct version in place and accept the performance degradation. Therefore I recommend resolving this issue as Won&amp;#39;t Fix.</comment>
                            <comment id="14198654" author="bpb" created="Mon, 23 Jul 2018 17:34:31 -0700"  >An even simpler JMH benchmark&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Benchmark&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public File[] listRoots() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File[] files = File.listRoots();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return files;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;narrows the problem down completely to File.listRoots():&lt;br/&gt;
&lt;br/&gt;
JDK version    Throughput (ops / s)&lt;br/&gt;
1.8.0_111        1175944.311 +/- 19003.486&lt;br/&gt;
9.0.4                1004445.199 +/- 21630.942&lt;br/&gt;
10.0.1                    1502.556 +/- 28.515</comment>
                            <comment id="14198652" author="bpb" created="Mon, 23 Jul 2018 17:19:50 -0700"  >I created a simple JMH benchmark identical to the provided test:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Benchmark&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void testMethod() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File[] files = File.listRoots();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int fileCount = files.length;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String[] rootPaths = new String[fileCount];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int index = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (File file : files) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String rootPath = file.getAbsolutePath();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rootPaths[index++] = rootPath;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Using the publicly released GA versions of JDK 1.8.0_111, 9.0.4, and 10.0.1 on a Windows 7 virtual machine gives the results below for one test fork and these parameter settings:&lt;br/&gt;
&lt;br/&gt;
# Warmup: 5 iterations, 5 s each&lt;br/&gt;
# Measurement: 5 iterations, 10 s each&lt;br/&gt;
# Timeout: 10 min per iteration&lt;br/&gt;
# Threads: 1 thread, will synchronize iterations&lt;br/&gt;
&lt;br/&gt;
The throughput scores in operations per second were&lt;br/&gt;
&lt;br/&gt;
JDK             Score&lt;br/&gt;
1.8.0_111    1129583.969 +/- 30381.351&lt;br/&gt;
9.0.4            1007058.527 +/- 27568.550&lt;br/&gt;
10.0.1          1496.949 +/- 21.318&lt;br/&gt;
&lt;br/&gt;
Clearly there has been a huge performance deterioration somewhere.</comment>
                            <comment id="14198458" author="alanb" created="Mon, 23 Jul 2018 02:01:45 -0700"  >It may be that the existence check (used to filter the list of volumes) is an issue in the reported environment. FileSystem::getRootDirectories do not do this check.&lt;br/&gt;
&lt;br/&gt;
The new implementation also uses streams and lambda so it&amp;#39;s possible the submitter is seeing some overhead on first usage. It would be useful if a real benchmark could be created to see if this part is a real issue or not. </comment>
                            <comment id="14198449" author="psonal" created="Mon, 23 Jul 2018 01:29:25 -0700"  >Tested on Windows 7 system with no CD drive:&lt;br/&gt;
JDK 10 b13- Pass&lt;br/&gt;
JDK 10 b14 - Fail&lt;br/&gt;
JDK 10.0.2 - Fail&lt;br/&gt;
JDK 11-ea - Fail&lt;br/&gt;
&lt;br/&gt;
java version &amp;quot;10-internal&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 10-internal+13-jdk-1013)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 10-internal+13-jdk-1013, mixed mode)&lt;br/&gt;
Took 0.0 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
&lt;br/&gt;
java version &amp;quot;10-internal&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 10-internal+14-jdk-1014)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 10-internal+14-jdk-1014, mixed mode)&lt;br/&gt;
Took 0.114 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\&lt;br/&gt;
&lt;br/&gt;
java version &amp;quot;11-ea&amp;quot; 2018-09-25&lt;br/&gt;
Java(TM) SE Runtime Environment 18.9 (build 11-ea+22)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11-ea+22, mixed mode)&lt;br/&gt;
Took 0.076 seconds&lt;br/&gt;
Here are the root paths:&lt;br/&gt;
C:\&lt;br/&gt;
D:\</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5092027">JDK-8300723</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5092028">JDK-8300724</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5092428">JDK-8301053</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5092569">JDK-8301172</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5092829">JDK-8301368</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5093007">JDK-8301533</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5093553">JDK-8301979</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4932584">JDK-8182710</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5098881">JDK-8306431</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="77805" name="JI9056145.java" size="662" author="psonal" created="Mon, 23 Jul 2018 01:18:19 -0700"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5092515">JDK-8301125</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17424"><![CDATA[b14]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="16302">10</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19301"><![CDATA[windows_10]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2f41v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="244"><![CDATA[java.io]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>