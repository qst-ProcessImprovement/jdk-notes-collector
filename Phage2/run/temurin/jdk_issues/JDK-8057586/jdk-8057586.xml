<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:32:25 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8057586] Explicit GC ignored if GCLocker is active</title>
                <link>https://bugs.openjdk.org/browse/JDK-8057586</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When a System.gc() is called, the VM operation is scheduled with no synchronization with the GCLocker and, in some cases, the Full GC immediately aborts if the GCLocker is active.&lt;br/&gt;
&lt;br/&gt;
Even though the code path is different, the cause is similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8057573&quot; title=&quot;CMSScavengeBeforeRemark ignored if GCLocker is active&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8057573&quot;&gt;&lt;strike&gt;JDK-8057573&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
I have reproduced this with both ParallelGC and CMS.</description>
                <environment></environment>
        <key id="4745341">JDK-8057586</key>
            <summary>Explicit GC ignored if GCLocker is active</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://bugs.openjdk.org/images/jbsImages/p5.png">P5</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="iwalulya">Ivan Walulya</assignee>
                                    <reporter username="tonyp">Tony Printezis</reporter>
                        <labels>
                            <label>gc-locker</label>
                            <label>jdk9-defer-yes</label>
                    </labels>
                <created>Thu, 4 Sep 2014 08:47:24 -0700</created>
                <updated>Wed, 9 Jul 2025 07:24:05 -0700</updated>
                            <resolved>Mon, 24 Apr 2023 01:48:43 -0700</resolved>
                                    <version>9</version>
                    <version>17</version>
                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14575980" author="dukebot" created="Mon, 24 Apr 2023 01:48:42 -0700"  >Changeset: 4a9f8efa&lt;br/&gt;
Author:    Ivan Walulya &amp;lt;&lt;a href=&apos;mailto:iwalulya@openjdk.org&apos;&gt;iwalulya@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-24 08:47:23 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4a9f8efa867f84463f054d6624bcc5a89033e152&quot;&gt;https://git.openjdk.org/jdk/commit/4a9f8efa867f84463f054d6624bcc5a89033e152&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14569650" author="roboduke" created="Mon, 27 Mar 2023 07:37:12 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13191&quot;&gt;https://git.openjdk.org/jdk/pull/13191&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-27 13:41:32 +0000</comment>
                            <comment id="13549688" author="tschatzl" created="Fri, 5 Sep 2014 04:02:41 -0700"  >ilw:&lt;br/&gt;
impact: low -&amp;gt; causes young gc with non-full eden instead of full gc&lt;br/&gt;
likelihood: medium -&amp;gt; lots of gc locker activity&lt;br/&gt;
workaround: high -&amp;gt; fix application gc locker use&lt;br/&gt;
-&amp;gt; P5&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="13549398" author="tonyp" created="Thu, 4 Sep 2014 08:53:40 -0700"  >This can be reproduced with the same test posted on &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8057573&quot; title=&quot;CMSScavengeBeforeRemark ignored if GCLocker is active&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8057573&quot;&gt;&lt;strike&gt;JDK-8057573&lt;/strike&gt;&lt;/a&gt; (JNICriticalStressTest3). Run it this way:&lt;br/&gt;
&lt;br/&gt;
java -XX:+UseParallelOldGC -Xms3g -Xmx3g -Xmn2g -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC JNICriticalStressTest3 300 4 1&lt;br/&gt;
&lt;br/&gt;
I attached example output from ParallelGC (output.ps.system-gc). System.gc() was called 59 times (look for the &amp;quot;SYSTEM_GC BEFORE / AFTER&amp;quot; output), but the log only shows 12 Full GCs. Here&amp;#39;s the output from a Full GC that did not happen:&lt;br/&gt;
&lt;br/&gt;
SYSTEM_GC BEFORE&lt;br/&gt;
SYSTEM_GC AFTER&lt;br/&gt;
{Heap before GC invocations=89 (full 0):&lt;br/&gt;
&amp;nbsp;PSYoungGen      total 2073088K, used 720665K [0x0000000740000000, 0x00000007c0000000, 0x00000007c0000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;eden space 2049024K, 34% used [0x0000000740000000,0x000000076ab2a0e8,0x00000007bd100000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;from space 24064K, 87% used [0x00000007be880000,0x00000007bfd1c6e0,0x00000007c0000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;to   space 24064K, 0% used [0x00000007bd100000,0x00000007bd100000,0x00000007be880000)&lt;br/&gt;
&amp;nbsp;ParOldGen       total 1048576K, used 84032K [0x0000000700000000, 0x0000000740000000, 0x0000000740000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;object space 1048576K, 8% used [0x0000000700000000,0x0000000705210210,0x0000000740000000)&lt;br/&gt;
&amp;nbsp;Metaspace       used 2783K, capacity 4496K, committed 4864K, reserved 1056768K&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class space    used 293K, capacity 388K, committed 512K, reserved 1048576K&lt;br/&gt;
30.219: #88: [GC (GCLocker Initiated GC) [PSYoungGen: 720665K-&amp;gt;7140K(2056192K)] 804698K-&amp;gt;91437K(3104768K), 0.0049870 secs] [Times: user=0.01 sys=0.00 real=0.00 secs] &lt;br/&gt;
Heap after GC invocations=89 (full 0):&lt;br/&gt;
&amp;nbsp;PSYoungGen      total 2056192K, used 7140K [0x0000000740000000, 0x00000007c0000000, 0x00000007c0000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;eden space 2049024K, 0% used [0x0000000740000000,0x0000000740000000,0x00000007bd100000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;from space 7168K, 99% used [0x00000007bd100000,0x00000007bd7f9230,0x00000007bd800000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;to   space 25600K, 0% used [0x00000007be700000,0x00000007be700000,0x00000007c0000000)&lt;br/&gt;
&amp;nbsp;ParOldGen       total 1048576K, used 84296K [0x0000000700000000, 0x0000000740000000, 0x0000000740000000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;object space 1048576K, 8% used [0x0000000700000000,0x0000000705252240,0x0000000740000000)&lt;br/&gt;
&amp;nbsp;Metaspace       used 2783K, capacity 4496K, committed 4864K, reserved 1056768K&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class space    used 293K, capacity 388K, committed 512K, reserved 1048576K&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Note that instead of the Full GC, a GCLocker-initiated young GC happened with a non-full eden. This looks similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8048556&quot; title=&quot;Unnecessary GCLocker-initiated young GCs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8048556&quot;&gt;&lt;strike&gt;JDK-8048556&lt;/strike&gt;&lt;/a&gt; but the cause is different. The Full GC checks whether the GCLocker is active with check_active_before_gc() which has the side-effect of telling the GCLocker to actually schedule a GC as it&amp;#39;s normally called when the eden is full.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5090312">JDK-8299276</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4733229">JDK-8048556</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4745328">JDK-8057573</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="22172" name="output.ps.system-gc" size="1632705" author="tonyp" created="Thu, 4 Sep 2014 08:49:57 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0bc7z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>66133</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>