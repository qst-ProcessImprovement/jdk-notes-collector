<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 15:37:47 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8300098] java/util/concurrent/ConcurrentHashMap/ConcurrentAssociateTest.java fails with internal timeout when executed with TieredCompilation1/3</title>
                <link>https://bugs.openjdk.org/browse/JDK-8300098</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Test &lt;br/&gt;
java/util/concurrent/ConcurrentHashMap/ConcurrentAssociateTest.java&lt;br/&gt;
&lt;br/&gt;
use an internal non-scalable timeout. The test fails when executed with&lt;br/&gt;
&amp;nbsp;-XX:TieredStopAtLevel=1&lt;br/&gt;
or&lt;br/&gt;
&amp;nbsp;-XX:TieredStopAtLevel=3&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
The trace:&lt;br/&gt;
test ConcurrentAssociateTest.testCompute(): success&lt;br/&gt;
test ConcurrentAssociateTest.testComputeIfAbsent(): success&lt;br/&gt;
test ConcurrentAssociateTest.testMerge(): success&lt;br/&gt;
test ConcurrentAssociateTest.testPut(): failure&lt;br/&gt;
java.util.concurrent.TimeoutException&lt;br/&gt;
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)&lt;br/&gt;
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)&lt;br/&gt;
	at ConcurrentAssociateTest.testOnce(ConcurrentAssociateTest.java:148)&lt;br/&gt;
	at ConcurrentAssociateTest.test(ConcurrentAssociateTest.java:102)&lt;br/&gt;
	at ConcurrentAssociateTest.testPut(ConcurrentAssociateTest.java:73)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)&lt;br/&gt;
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)&lt;br/&gt;
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)&lt;br/&gt;
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)&lt;br/&gt;
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)&lt;br/&gt;
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)&lt;br/&gt;
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)&lt;br/&gt;
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)&lt;br/&gt;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&lt;br/&gt;
	at org.testng.TestRunner.privateRun(TestRunner.java:764)&lt;br/&gt;
	at org.testng.TestRunner.run(TestRunner.java:585)&lt;br/&gt;
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)&lt;br/&gt;
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)&lt;br/&gt;
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)&lt;br/&gt;
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)&lt;br/&gt;
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)&lt;br/&gt;
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)&lt;br/&gt;
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)&lt;br/&gt;
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)&lt;br/&gt;
	at org.testng.TestNG.runSuites(TestNG.java:1069)&lt;br/&gt;
	at org.testng.TestNG.run(TestNG.java:1037)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
test ConcurrentAssociateTest.testPutAll(): success</description>
                <environment></environment>
        <key id="5091338">JDK-8300098</key>
            <summary>java/util/concurrent/ConcurrentHashMap/ConcurrentAssociateTest.java fails with internal timeout when executed with TieredCompilation1/3</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="vklang">Viktor Klang</assignee>
                                    <reporter username="lmesnik">Leonid Mesnik</reporter>
                        <labels>
                            <label>atr</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>oracle-triage-21</label>
                    </labels>
                <created>Thu, 12 Jan 2023 18:31:51 -0800</created>
                <updated>Tue, 8 Aug 2023 14:05:38 -0700</updated>
                            <resolved>Mon, 6 Feb 2023 07:28:16 -0800</resolved>
                                    <version>17.0.7-oracle</version>
                    <version>18</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                                                                <comments>
                            <comment id="14593578" author="roboduke" created="Tue, 4 Jul 2023 08:49:34 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2026&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2026&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-04 15:38:56 +0000</comment>
                            <comment id="14593570" author="lucy" created="Tue, 4 Jul 2023 07:53:42 -0700"  >Fix request [11u] &lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 11.0.21-oracle.&lt;br/&gt;
&lt;br/&gt;
Patch did not apply cleanly. There was a whitespace diff which confused the merge algorithm. In addition, change &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8207146&quot; title=&quot;Rename jdk.internal.misc.Unsafe::xxxObject to xxxReference&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8207146&quot;&gt;&lt;strike&gt;JDK-8207146&lt;/strike&gt;&lt;/a&gt; is missing: Unsafe::compareAndSetReference had to be reverted to Unsafe::compareAndSetObject&lt;br/&gt;
&lt;br/&gt;
Manual testing successful - with and without fix.&lt;br/&gt;
SAP nightly tests did not reveal any issue related to this PR.</comment>
                            <comment id="14593260" author="mdoerr" created="Sun, 2 Jul 2023 09:37:33 -0700"  >Fix Request (17u):&lt;br/&gt;
Should get backported for parity with 17.0.9-oracle. Applies cleanly.</comment>
                            <comment id="14592871" author="roboduke" created="Thu, 29 Jun 2023 14:19:51 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1519&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1519&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-29 21:14:32 +0000</comment>
                            <comment id="14557536" author="dukebot" created="Mon, 6 Feb 2023 07:28:15 -0800"  >Changeset: ecf8842c&lt;br/&gt;
Author:    Viktor Klang &amp;lt;&lt;a href=&apos;mailto:viktor.klang@oracle.com&apos;&gt;viktor.klang@oracle.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Alan Bateman &amp;lt;&lt;a href=&apos;mailto:alanb@openjdk.org&apos;&gt;alanb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-06 15:26:32 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ecf8842cd2309210f3d5eee7f9f28a198a860686&quot;&gt;https://git.openjdk.org/jdk/commit/ecf8842cd2309210f3d5eee7f9f28a198a860686&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14556032" author="roboduke" created="Tue, 31 Jan 2023 02:52:34 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12319&quot;&gt;https://git.openjdk.org/jdk/pull/12319&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-31 10:45:07 +0000</comment>
                            <comment id="14556031" author="roboduke" created="Tue, 31 Jan 2023 02:48:11 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12318&quot;&gt;https://git.openjdk.org/jdk/pull/12318&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-31 10:32:45 +0000</comment>
                            <comment id="14555355" author="thartmann" created="Mon, 30 Jan 2023 00:54:19 -0800"  >Moved this back to core-libs/java.util.concurrent as it seems to be an issue with the CHM implementation. I leave tests running for a bit longer to verify.&lt;br/&gt;
&lt;br/&gt;
Update: No failures after 1000 runs.</comment>
                            <comment id="14555349" author="thartmann" created="Mon, 30 Jan 2023 00:47:46 -0800"  >Thanks [~alanb], that matches my observations. With the reduced test and flags, it usually reproduced 1/10 and I&amp;#39;ve already executed several hundred iterations.</comment>
                            <comment id="14555346" author="alanb" created="Mon, 30 Jan 2023 00:28:10 -0800"  >[~thartmann] I did some initial testing with the updated CHM yesterday and did not see any failures, 2000 runs with both TieredStopAtLevel=1, and the same with TieredStopAtLevel=3.</comment>
                            <comment id="14555344" author="thartmann" created="Mon, 30 Jan 2023 00:24:39 -0800"  >Thanks, Doug. After reviewing the C1 generated code once more, I&amp;#39;m also starting to believe that this is not a JIT issue but simply related to timing.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll run your patch through testing and report back.</comment>
                            <comment id="14555267" author="dl" created="Sun, 29 Jan 2023 03:44:42 -0800"  >There&amp;#39;s a CHM bug scenario that I haven&amp;#39;t been able to rule out after looking at this again: A  late clearing of waiter field in ConcurrentHashMap.contendedLock by a previous waiter. There may be a constraint I&amp;#39;ve forgotten that makes this impossible in principle, but it is easy to change to be more clearly correct by replacing the writes with CASes, and thus rule out while checking C1. Diffs are below. I&amp;#39;ll mail a copy to Viktor.&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java b/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java&lt;br/&gt;
index 63ff6f21be9..648f4a8c9c6 100644&lt;br/&gt;
--- a/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java&lt;br/&gt;
+++ b/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java&lt;br/&gt;
@@ -2862,22 +2862,19 @@ public class ConcurrentHashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Possibly blocks awaiting root lock.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final void contendedLock() {&lt;br/&gt;
-            boolean waiting = false;&lt;br/&gt;
+            Thread current = Thread.currentThread();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int s;;) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (((s = lockState) &amp;amp; ~WAITER) == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (U.compareAndSetInt(this, LOCKSTATE, s, WRITER)) {&lt;br/&gt;
-                        if (waiting)&lt;br/&gt;
-                            waiter = null;&lt;br/&gt;
+                        U.compareAndSetReference(this, WAITERTHREAD, current, null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-                else if ((s &amp;amp; WAITER) == 0) {&lt;br/&gt;
-                    if (U.compareAndSetInt(this, LOCKSTATE, s, s | WAITER)) {&lt;br/&gt;
-                        waiting = true;&lt;br/&gt;
-                        waiter = Thread.currentThread();&lt;br/&gt;
-                    }&lt;br/&gt;
-                }&lt;br/&gt;
-                else if (waiting)&lt;br/&gt;
+                else if ((s &amp;amp; WAITER) == 0)&lt;br/&gt;
+                    U.compareAndSetInt(this, LOCKSTATE, s, s | WAITER);&lt;br/&gt;
+                else if (waiter != current)&lt;br/&gt;
+                    U.compareAndSetReference(this, WAITERTHREAD, null, current);&lt;br/&gt;
+                else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LockSupport.park(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
@@ -3296,6 +3293,9 @@ public class ConcurrentHashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final long LOCKSTATE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= U.objectFieldOffset(TreeBin.class, &amp;quot;lockState&amp;quot;);&lt;br/&gt;
+        private static final long WAITERTHREAD&lt;br/&gt;
+            = U.objectFieldOffset(TreeBin.class, &amp;quot;waiter&amp;quot;);&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/* ----------------Table Traversal -------------- */&lt;br/&gt;
</comment>
                            <comment id="14554608" author="thartmann" created="Thu, 26 Jan 2023 00:32:52 -0800"  >Initial ILW = Incorrect execution of C1 compiled code (deadlock), intermittent but reproducible with single test on Linux AArch64, no workaround but disable compilation of affected method = HMM = P2</comment>
                            <comment id="14554607" author="thartmann" created="Thu, 26 Jan 2023 00:30:29 -0800"  >Let&amp;#39;s move this to hotspot/compiler for now, given that there is lots of evidence that this is a C1 bug.</comment>
                            <comment id="14554606" author="thartmann" created="Thu, 26 Jan 2023 00:29:23 -0800"  >I was able to narrow it down to a single C1 compiled method:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;890   68   !   1       java.util.concurrent.ConcurrentHashMap$TreeBin::find (191 bytes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 52   java.lang.Object::equals (11 bytes)   no static binding&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 81   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   disallowed by CompileCommand&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 106   java.util.concurrent.ConcurrentHashMap$TreeNode::findTreeNode (177 bytes)   callee is too large&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 157   jdk.internal.misc.Unsafe::getAndAddInt (27 bytes)   intrinsic&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 177   java.util.concurrent.locks.LockSupport::unpark (26 bytes)   disallowed by CompileCommand&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 120   jdk.internal.misc.Unsafe::getAndAddInt (27 bytes)   intrinsic&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@ 140   java.util.concurrent.locks.LockSupport::unpark (26 bytes)   disallowed by CompileCommand&lt;br/&gt;
&lt;br/&gt;
-XX:TieredStopAtLevel=1 -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,java.util.concurrent.ConcurrentHashMap$TreeBin::find -XX:+PrintCompilation -XX:+PrintInlining -XX:CompileCommand=dontinline,java.util.concurrent.locks.LockSupport::unpark -XX:CompileCommand=dontinline,jdk.internal.misc.Unsafe::compareAndSetInt&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/536c9a512ea90d97a1ae5310453410d55db98bdd/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java#L2890&quot;&gt;https://github.com/openjdk/jdk/blob/536c9a512ea90d97a1ae5310453410d55db98bdd/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java#L2890&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Attached failingRun1.log includes a dump of that method.</comment>
                            <comment id="14553613" author="JIRAUSER20508" created="Mon, 23 Jan 2023 11:58:54 -0800"  >Adding more info, and again, this needs a fair amount of test runs to produce a failure, I&amp;#39;m observing around ~10% failure occurrence when the test fails.&lt;br/&gt;
&lt;br/&gt;
The following is on Linux and Aarch64:&lt;br/&gt;
&lt;br/&gt;
Test doesn&amp;#39;t fail when given -Xint&lt;br/&gt;
Test doesn&amp;#39;t fail when given -XX:-TieredCompilation&lt;br/&gt;
Test doesn&amp;#39;t fail when given -XX:TieredStopAtLevel=3 -XX:+UseParallelGC&lt;br/&gt;
Test doesn&amp;#39;t fail when given -XX:TieredStopAtLevel=3 -XX:+UseZGC&lt;br/&gt;
&lt;br/&gt;
Test fails when given -XX:TieredStopAtLevel=3&lt;br/&gt;
Test fails when given -XX:TieredStopAtLevel=3 -XX:+UseG1GC&lt;br/&gt;
Test fails when given -XX:TieredStopAtLevel=3 -XX:-InlineNatives&lt;br/&gt;
Test fails when given -XX:TieredStopAtLevel=1 -XX:-InlineNatives&lt;br/&gt;
Test fails when given -XX:TieredStopAtLevel=3 -XX:-UseLSE&lt;br/&gt;
Test fails when given -XX:TieredStopAtLevel=1 -XX:-UseLSE</comment>
                            <comment id="14553507" author="martin" created="Mon, 23 Jan 2023 08:01:08 -0800"  >I used to do a lot of stress testing of concurrency tests at Google, but the test environment was limited to machines with a strong memory model and a small number of cpus.  I have been surprised by how few bugs have been found in recent years due to weak memory model hardware.  Perhaps the Ampere machines have both aggressively weak memory model hardware combined with a very large number of cpus, and this is such a bug.  I recommend doing as much openjdk testing and debugging on high-end Ampere machines as possible.  I see Oracle Cloud has such machines - &lt;a href=&quot;https://www.oracle.com/cloud/compute/arm/&quot;&gt;https://www.oracle.com/cloud/compute/arm/&lt;/a&gt;.</comment>
                            <comment id="14553267" author="alanb" created="Fri, 20 Jan 2023 23:38:47 -0800"  >So far, we seem to be able to duplicate this on linux-aarch64 on Ampere A1 and with -XX:TieredStopAtLevel=1 and -XX:TieredStopAtLevel=3.  It duplicates with main line, JDK 19, JDK 18, and JDK 17u.  No sighting so far on x64 or macosx-aarch64.</comment>
                            <comment id="14550963" author="alanb" created="Fri, 13 Jan 2023 01:38:00 -0800"  >The test uses a timeout of 200s so I don&amp;#39;t think scaling will help. Instead, there be something else going on. I attach the thread dump from the run that timed out. It looks like we have:&lt;br/&gt;
&lt;br/&gt;
ForkJoinPool.commonPool-worker-3 blocked in putVal trying to lock &lt;a href=&apos;mailto:TreeBin@34c6fe5c&apos;&gt;TreeBin@34c6fe5c&lt;/a&gt; that is owned by worker-5.&lt;br/&gt;
&lt;br/&gt;
ForkJoinPool.commonPool-worker-6 blocked in putVal trying to lock &lt;a href=&apos;mailto:TreeBin@34c6fe5c&apos;&gt;TreeBin@34c6fe5c&lt;/a&gt; that is owned by worker-5.&lt;br/&gt;
&lt;br/&gt;
ForkJoinPool.commonPool-worker-8 blocked in transfer trying to lock &lt;a href=&apos;mailto:TreeBin@34c6fe5c&apos;&gt;TreeBin@34c6fe5c&lt;/a&gt; that owned by worker-5.&lt;br/&gt;
&lt;br/&gt;
ForkJoinPool.commonPool-worker-5 owns &lt;a href=&apos;mailto:TreeBin@34c6fe5c&apos;&gt;TreeBin@34c6fe5c&lt;/a&gt; but has parked waiting for the write lock so it can insert into the tree. I don&amp;#39;t see any other threads that might unpark this writer.&lt;br/&gt;
&lt;br/&gt;
[~lmesnik] Are you able to duplicate this issue on this linux-aarch64 host? If it fails consistently with TieredStopAtLevel=1 and TieredStopAtLevel=3 but not with C2 then it hints of a C1 issue, maybe only on aarch64?&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5102234">JDK-8309220</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5102235">JDK-8309221</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5102241">JDK-8309227</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5104596">JDK-8311277</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5104836">JDK-8311507</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102445" name="ConcurrentHashMap.diff" size="2053" author="thartmann" created="Mon, 30 Jan 2023 00:29:50 -0800"/>
                            <attachment id="102425" name="failingRun1.log" size="77899" author="thartmann" created="Thu, 26 Jan 2023 07:16:36 -0800"/>
                            <attachment id="102295" name="threaddump.txt" size="10029" author="alanb" created="Fri, 13 Jan 2023 01:09:02 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zwdv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17336"><![CDATA[b09]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="215"><![CDATA[java.util.concurrent]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>