<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 18:23:31 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8305688] jdk build --with-memory-size=1024 broken by JDK-8305100</title>
                <link>https://bugs.openjdk.org/browse/JDK-8305688</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>I&amp;#39;ve been building --with-jobs=1 --with-memory-size=1024 and that recently started failing with OOME:&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;Compiling up to 3446 files for java.base&lt;br/&gt;
&amp;nbsp;[stderr] java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.CompilerThreadPool.dispatchCompilation(CompilerThreadPool.java:49)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.Server.handleRequest(Server.java:211)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.Server.lambda$start$1(Server.java:173)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
&amp;nbsp;[stderr] Caused by: java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.nio.file.Files.read(Files.java:3213)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.nio.file.Files.readAllBytes(Files.java:3270)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.module.ModuleReferences$ExplodedModuleReader.read(ModuleReferences.java:410)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:809)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:741)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:665)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)&lt;br/&gt;
&amp;nbsp;[stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.Main.resourceMessage(Main.java:448)&lt;br/&gt;
&amp;nbsp;[stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:332)&lt;br/&gt;
&amp;nbsp;[stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:176)&lt;br/&gt;
&amp;nbsp;[stderr] 	at jdk.compiler.interim/com.sun.tools.javac.main.JavacToolProvider.run(JavacToolProvider.java:54)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.Server.runCompiler(Server.java:242)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.CompilerThreadPool.lambda$dispatchCompilation$0(CompilerThreadPool.java:49)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.CompilerThreadPool$$Lambda$62/0x00000001000c4e98.call(Unknown Source)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.lang.Thread.runWith(Thread.java:1636)&lt;br/&gt;
&amp;nbsp;[stderr] 	... 1 more&lt;br/&gt;
&amp;nbsp;gmake[3]: *** [CompileJavaModules.gmk:95: /home/martin/ws/jdk/build/linux-x86_64-server-release/jdk/modules/java.base/_the.java.base_batch] Error 1&lt;br/&gt;
&amp;nbsp;gmake[2]: *** [make/Main.gmk:193: java.base-java] Error 2&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;ERROR: Build failed for target &amp;#39;images&amp;#39; in configuration &amp;#39;linux-x86_64-server-release&amp;#39; (exit code 2) &lt;br/&gt;
&amp;nbsp;Stopping javac server&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;=== Output from failing command(s) repeated here ===&lt;br/&gt;
&amp;nbsp;* For target jdk_modules_java.base__the.java.base_batch:&lt;br/&gt;
&amp;nbsp;[stderr] java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.CompilerThreadPool.dispatchCompilation(CompilerThreadPool.java:49)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.Server.handleRequest(Server.java:211)&lt;br/&gt;
&amp;nbsp;[stderr] 	at javacserver.server.Server.lambda$start$1(Server.java:173)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.lang.Thread.run(Thread.java:1623)&lt;br/&gt;
&amp;nbsp;[stderr] Caused by: java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.nio.file.Files.read(Files.java:3213)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/java.nio.file.Files.readAllBytes(Files.java:3270)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.module.ModuleReferences$ExplodedModuleReader.read(ModuleReferences.java:410)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:809)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassInModuleOrNull(BuiltinClassLoader.java:741)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:665)&lt;br/&gt;
&amp;nbsp;[stderr] 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... (rest of output omitted)&lt;br/&gt;
```</description>
                <environment></environment>
        <key id="5098005">JDK-8305688</key>
            <summary>jdk build --with-memory-size=1024 broken by JDK-8305100</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jlaskey">Jim Laskey</assignee>
                                    <reporter username="martin">Martin Buchholz</reporter>
                        <labels>
                            <label>noreg-hard</label>
                            <label>regression</label>
                    </labels>
                <created>Wed, 5 Apr 2023 16:00:13 -0700</created>
                <updated>Wed, 19 Apr 2023 23:42:04 -0700</updated>
                            <resolved>Thu, 13 Apr 2023 04:44:59 -0700</resolved>
                                                    <fixVersion>21</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14573541" author="dukebot" created="Thu, 13 Apr 2023 04:44:58 -0700"  >Changeset: 2060c8ea&lt;br/&gt;
Author:    Jim Laskey &amp;lt;&lt;a href=&apos;mailto:jlaskey@openjdk.org&apos;&gt;jlaskey@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-13 11:42:00 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/2060c8ea14119048f06b5a8c3c251f4e8d1ef43b&quot;&gt;https://git.openjdk.org/jdk/commit/2060c8ea14119048f06b5a8c3c251f4e8d1ef43b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14572324" author="martin" created="Thu, 6 Apr 2023 12:18:01 -0700"  >&amp;gt; took a very long time to build libjvm&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m actually *trying* to make the build take a very long time!&lt;br/&gt;
You could call it &amp;quot;flattening the curve&amp;quot;!</comment>
                            <comment id="14572322" author="martin" created="Thu, 6 Apr 2023 11:57:11 -0700"  >&amp;gt; --with-memory-size=1024 is pushing the boundaries.&lt;br/&gt;
&lt;br/&gt;
... but I found that the build was passing even with --with-memory-size=50&lt;br/&gt;
&lt;br/&gt;
&amp;gt; OOM frequently with --with-memory-size=1024 and --with-jobs &amp;gt; 1&lt;br/&gt;
&lt;br/&gt;
The idea of my configure flags is to build on machines with low resources (like Raspberry Pis), with low impact on unrelated processes during the build (e.g. in automated regression builds), so I want --with-jobs=1.&lt;br/&gt;
&lt;br/&gt;
(I think there are some build system bugs with --jobs=1 -- I&amp;#39;ve noticed multiple javac processes running even with that flag used.)&lt;br/&gt;
&lt;br/&gt;
I have a back burner goal of some day being able to build openjdk on my Raspberry Pi Zero 2, with only 512 MB of RAM.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; noreg-cleanup&lt;br/&gt;
&lt;br/&gt;
Instead of noreg-cleanup I would use noreg-hard -- easy to test ad hoc; hard to test via jtreg.</comment>
                            <comment id="14572321" author="roboduke" created="Thu, 6 Apr 2023 11:44:06 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13378&quot;&gt;https://git.openjdk.org/jdk/pull/13378&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-06 18:37:36 +0000</comment>
                            <comment id="14572294" author="jlaskey" created="Thu, 6 Apr 2023 09:01:17 -0700"  >There is a change that keeps the source buffer around longer than it should. I will revert the portion of the change set that causes that to happen.&lt;br/&gt;
&lt;br/&gt;
On the flip side, OOM was hard to reproduce on my aarch64 and x64 machines -- and took a very long time to build libjvm in the process. I was, however able to get OOM frequently with --with-memory-size=1024 and --with-jobs &amp;gt; 1, with or without the change set. I actually went back to March 28 and crashed. So I would say that in general that  --with-memory-size=1024 is pushing the boundaries.&lt;br/&gt;
</comment>
                            <comment id="14572111" author="martin" created="Wed, 5 Apr 2023 16:32:12 -0700"  >This was my most frustrating experience with JIRA - the web interface threw away my issue edits multiple times</comment>
                            <comment id="14572110" author="martin" created="Wed, 5 Apr 2023 16:23:59 -0700"  >I suspect that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305100&quot; title=&quot;[REDO] Clean up JavadocTokenizer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305100&quot;&gt;&lt;strike&gt;JDK-8305100&lt;/strike&gt;&lt;/a&gt; is causing greatly increased memory retention (of javadoc comments) during javac execution, most of which is rarely used.&lt;br/&gt;
&lt;br/&gt;
I suspect that whatever mechanism is responsible for responding to --with-memory-size is no longer working well.  I was surprised to see a jdk build succeed --with-memory-size=50 previous to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305100&quot; title=&quot;[REDO] Clean up JavadocTokenizer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305100&quot;&gt;&lt;strike&gt;JDK-8305100&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
Of course, memory usage is dependent on architecture and many other things.  If you can&amp;#39;t repro --with-memory-size=1024, try lower values like 512.</comment>
                            <comment id="14572109" author="martin" created="Wed, 5 Apr 2023 16:13:07 -0700"  >I git bisected using this self-explanatory shell snippet (but that only works for me):&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;# 2023-04: find OOME during build in javac compilation&lt;br/&gt;
&amp;nbsp;#&lt;br/&gt;
&amp;nbsp;# $ git show -s --oneline 790acedaabd&lt;br/&gt;
&amp;nbsp;# 790acedaabd 8305100: [REDO] Clean up JavadocTokenizer&lt;br/&gt;
&amp;nbsp;# Fails with OOME with BISECT_MEMORY_SIZE &amp;lt;= 1024&lt;br/&gt;
&amp;nbsp;# Succeeds with BISECT_MEMORY_SIZE &amp;gt;= 1152&lt;br/&gt;
&amp;nbsp;#&lt;br/&gt;
&amp;nbsp;# At 790acedaabd^, build works even with BISECT_MEMORY_SIZE as low as 50&lt;br/&gt;
&amp;nbsp;# 2e91585ac94 8303123: Add line break opportunity to single type parameters&lt;br/&gt;
&amp;nbsp;openjdk:bisect() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose git -C &amp;quot;$repo&amp;quot; bisect reset&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose git -C &amp;quot;$repo&amp;quot; bisect start &amp;#39;master@{2023-04-04}&amp;#39; &amp;#39;master@{2023-04-01}&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose git -C &amp;quot;$repo&amp;quot; bisect run bro openjdk:bisect-run&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;openjdk:bisect-run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;local -r repo=${BISECT_REPO-&amp;quot;$HOME/ws/jdk&amp;quot;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;local -r boot=${BISECT_BOOT_JDK-&amp;quot;$HOME/jdk/jdk20&amp;quot;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;local -r jobs=${BISECT_JOBS-1}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;local -r size=${BISECT_MEMORY_SIZE-1024}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cd &amp;quot;$repo&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare -ar configure=(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bash ./configure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--with-boot-jdk=&amp;quot;$boot&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--with-jobs=&amp;quot;$jobs&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--with-memory-size=&amp;quot;$size&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose &amp;quot;${configure[@]}&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose make clean&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;verbose taskset 01 nice ionice make images&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
```</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5097315">JDK-8305100</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103344" name="8305100.revert.patch" size="26726" author="jlaskey" created="Thu, 6 Apr 2023 06:02:19 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3118j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17414"><![CDATA[b19]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>