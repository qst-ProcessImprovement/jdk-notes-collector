<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:57:57 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8306561] Possible out of bounds access in print_pointer_information</title>
                <link>https://bugs.openjdk.org/browse/JDK-8306561</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Currently the gtests&lt;br/&gt;
gtest/GTestWrapper.java&lt;br/&gt;
gtest/NMTGtests.java#nmt-detail&lt;br/&gt;
gtest/NMTGtests.java#nmt-summary&lt;br/&gt;
&lt;br/&gt;
crash on AIX.  Crashes look like this :&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x090000000bbaa898, pid=16712006, tid=258&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (21.0) (build 21-internal-adhoc.openjdk.jdk-dev)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (21-internal-adhoc.openjdk.jdk-dev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, aix-ppc64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xffffffff]  MallocTracker::print_pointer_information(void const*, outputStream*)+0xb8&lt;br/&gt;
#&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
---------------  S U M M A R Y ------------&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Command Line: -XX:+ExecutingUnitTests -XX:NativeMemoryTracking=detail &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Host: PV_8_Compat, 24 cores, 96G, 2 7&lt;br/&gt;
Time: Wed Apr 12 23:19:00 2023 CEST elapsed time: 0.995633 seconds (0d 0h 0m 0s)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Current thread (0x00000001102bc0a0):  JavaThread &amp;quot;main&amp;quot; [_thread_in_native, id=258, stack(0x0000000110093000,0x0000000110294888)]&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Stack: [0x0000000110093000,0x0000000110294888],  sp=0x0000000110293880,  free space=2050k&lt;br/&gt;
Native frame:&lt;br/&gt;
iar:  0x090000000bbaa898 libjvm.so::MallocTracker::print_pointer_information(void const*, outputStream*)+0xb8  (C++ saves_lr stores_bc gpr_saved:13 fixedparms:2 )&lt;br/&gt;
lr:   0x090000000bbaa88c libjvm.so::MallocTracker::print_pointer_information(void const*, outputStream*)+0xac  (C++ saves_lr stores_bc gpr_saved:13 fixedparms:2 )&lt;br/&gt;
sp:   0x0000000110293880 (base - 0x1008) &lt;br/&gt;
rtoc: 0x08001000a049a700 &lt;br/&gt;
|---stackaddr----|   |----lrsave------|:   &amp;lt;function name&amp;gt;&lt;br/&gt;
0x0000000110293990 - 0x090000000bba46e0 libjvm.so::_ZN10MemTracker23print_containing_regionEPKvP12outputStream@AF130_13+0x20  (C++ saves_lr stores_bc gpr_saved:2 fixedparms:2 )&lt;br/&gt;
0x0000000110293a10 - 0x090000000d4ddbd0 libjvm.so::test_pointer(void const*, bool, char const*)+0x90  (C++ saves_lr stores_bc gpr_saved:14 fixedparms:3 parmsonstk:1)&lt;br/&gt;
0x0000000110293f60 - 0x090000000d4de770 libjvm.so::NMT_location_printing_mmap_2_vm_Test::TestBody()+0x70  (C++ saves_lr stores_bc gpr_saved:3 fixedparms:1 )&lt;br/&gt;
0x0000000110293ff0 - 0x090000000b4e24b4 libjvm.so::void testing::internal::HandleExceptionsInMethodIfSupported&amp;lt;testing::Test, void&amp;gt;(testing::Test*, void (testing::Test::*)(), char const*)+0x174  (C++ saves_lr stores_bc gpr_saved:5 fixedparms:4 )&lt;br/&gt;
0x0000000110294090 - 0x090000000b4e20a8 libjvm.so::testing::Test::Run()+0x308  (C++ saves_lr stores_bc gpr_saved:10 fixedparms:1 )&lt;br/&gt;
0x0000000110294160 - 0x090000000b4e4de8 libjvm.so::testing::TestInfo::Run()+0x528  (C++ saves_lr stores_bc gpr_saved:14 fixedparms:1 )&lt;br/&gt;
0x0000000110294280 - 0x090000000b4e7598 libjvm.so::testing::TestSuite::Run()+0x718  (C++ saves_cr saves_lr stores_bc gpr_saved:10 fixedparms:1 )&lt;br/&gt;
0x0000000110294380 - 0x090000000b5074a8 libjvm.so::testing::internal::UnitTestImpl::RunAllTests()+0x7a8  (C++ saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 )&lt;br/&gt;
0x0000000110294570 - 0x090000000b506c2c libjvm.so::testing::UnitTest::Run()+0x40c  (C++ saves_lr stores_bc gpr_saved:9 fixedparms:1 )&lt;br/&gt;
0x0000000110294670 - 0x090000000b463504 libjvm.so::IPRA.$_ZL17runUnitTestsInneriPPc+0x224  (C++ saves_lr stores_bc gpr_saved:9 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x0000000110294730 - 0x090000000b4632a0 libjvm.so::thread_wrapper+0x20  (C++ saves_lr stores_bc fixedparms:1 )&lt;br/&gt;
0x00000001102947a0 - 0x090000000054bfec libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )&lt;br/&gt;
0x0000000110294820 - 0x0000000000000000 &lt;br/&gt;
*** end of backchain ***&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5099034">JDK-8306561</key>
            <summary>Possible out of bounds access in print_pointer_information</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tobermeier">Thomas Obermeier</assignee>
                                    <reporter username="mbaesken">Matthias Baesken</reporter>
                        <labels>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>nmt</label>
                            <label>problemlist</label>
                    </labels>
                <created>Thu, 20 Apr 2023 04:59:47 -0700</created>
                <updated>Tue, 21 Nov 2023 00:23:46 -0800</updated>
                            <resolved>Thu, 2 Nov 2023 02:53:22 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                                                            <comments>
                            <comment id="14627243" author="roboduke" created="Fri, 17 Nov 2023 07:26:24 -0800"  >[jdk21u-fix-request] Approval Request from Christoph Langer&lt;br/&gt;
Request backport of this nmt fix which fixes crashes observed in GTest on AIX. Testing: SAP nightlies and GHA. Risk is low.</comment>
                            <comment id="14627242" author="roboduke" created="Fri, 17 Nov 2023 07:21:36 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/379&quot;&gt;https://git.openjdk.org/jdk21u/pull/379&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-17 15:14:50 +0000</comment>
                            <comment id="14623315" author="dukebot" created="Thu, 2 Nov 2023 02:53:08 -0700"  >Changeset: d6ce62eb&lt;br/&gt;
Author:    Thomas Obermeier &amp;lt;&lt;a href=&apos;mailto:thomas.obermeier@sap.com&apos;&gt;thomas.obermeier@sap.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Matthias Baesken &amp;lt;&lt;a href=&apos;mailto:mbaesken@openjdk.org&apos;&gt;mbaesken@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-02 09:51:22 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/d6ce62ebc01eb483b486af886d9b79f60ff87de1&quot;&gt;https://git.openjdk.org/jdk/commit/d6ce62ebc01eb483b486af886d9b79f60ff87de1&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14621993" author="JIRAUSER21001" created="Mon, 30 Oct 2023 04:15:05 -0700"  >created &lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319104:&quot;&gt;https://bugs.openjdk.org/browse/JDK-8319104:&lt;/a&gt; GtestWrapper crashes with SIGILL in AsyncLogTest::test_asynclog_raw on AIX opt &lt;br/&gt;
in order to track the error described by Christoph above. </comment>
                            <comment id="14621456" author="dcubed" created="Thu, 26 Oct 2023 13:28:52 -0700"  >The fix is in platform independent code so dropping &amp;#39;oraclejdk-na&amp;#39; label.</comment>
                            <comment id="14621394" author="roboduke" created="Thu, 26 Oct 2023 09:26:29 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16381&quot;&gt;https://git.openjdk.org/jdk/pull/16381&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-26 16:11:00 +0000</comment>
                            <comment id="14621393" author="stuefe" created="Thu, 26 Oct 2023 09:24:47 -0700"  >[~tobermeier] Spot on. Good analysis.&lt;br/&gt;
&lt;br/&gt;
[~dkumari] I just grab this quick and fix it. I also want to analyse why this does not crash with Linux.&lt;br/&gt;
&lt;br/&gt;
---&lt;br/&gt;
&lt;br/&gt;
Update: I see you took this already Thomas. No problem, feel free to proceed.</comment>
                            <comment id="14621384" author="JIRAUSER21001" created="Thu, 26 Oct 2023 08:59:44 -0700"  >MallocTracker::print_pointer_information in src/hotspot/share/services/mallocTracker.cpp is called to check the highest pointer address of the reserved region. To do so it aligns the test pointer down to the next 8 Byte boundary and casts this address to class MallocHeader in order to use this classes eye-catcher member _canary for validation. Method looks_valid() dereferences _canary&amp;#39;s content. _canary has an offset of 14 bytes relative to the class. Therefore it resides outside the reserved region for the highest pointer address, which causes a segmentation violation. &lt;br/&gt;
&lt;br/&gt;
We would expect the same error also for other platforms than AIX as memory is read, which is not allocated. Interestingly, Linux seems to allow this access for 5 times 4K above the reserved region.&lt;br/&gt;
&lt;br/&gt;
As a solution,  looks_valid() should check _canary&amp;#39;s address as being invalid, and return false immediately.</comment>
                            <comment id="14616639" author="clanger" created="Sun, 8 Oct 2023 23:29:02 -0700"  >The crash mentioned above is observed in runs of gtest/GTestWrapper.java with fastdebug builds. For opt builds we see:&lt;br/&gt;
&lt;br/&gt;
#  SIGILL (0x4) at pc=0x0000000000000000, pid=13304280, tid=258&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (22.0) (build 22-internal-adhoc.openjdk.jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (22-internal-adhoc.openjdk.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, aix-ppc64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x42cbc]  LogTagSet::vwrite(LogLevel::type, char const*, char*)+0x104&lt;br/&gt;
&lt;br/&gt;
Native frame:&lt;br/&gt;
iar:  0x0000000000000000 (unknown module)::(unknown function)+?&lt;br/&gt;
lr:   0x090000000527ad00 libjvm.so::LogTagSet::vwrite(LogLevel::type, char const*, char*)+0x148  (C++ uses_alloca saves_lr stores_bc gpr_saved:12 fixedparms:4 parmsonstk:1)&lt;br/&gt;
sp:   0x00000001102aea80 (base - 0xE08) &lt;br/&gt;
rtoc: 0x0000000000000000 (invalid)&lt;br/&gt;
|---stackaddr----|   |----lrsave------|:   &amp;lt;function name&amp;gt;&lt;br/&gt;
0x00000001102aedb0 - 0x0900000005e3ad10 libjvm.so::LogImpl&amp;lt;(LogTag::type)73, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0&amp;gt;::warning(char const*, ...)+0x54  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001102aee40 - 0x0900000005e3a800 libjvm.so::AsyncLogTest::test_asynclog_raw()+0x6c  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102aef20 - 0x0900000005e39a2c libjvm.so::AsyncLogTest_asynclog_vm_Test::TestBody()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:9 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af0a0 - 0x0900000005dd2798 libjvm.so::testing::Test::Run()+0x390  (C++ uses_alloca saves_lr stores_bc gpr_saved:15 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af190 - 0x0900000005dd2140 libjvm.so::testing::TestInfo::Run()+0x418  (C++ uses_alloca saves_lr stores_bc gpr_saved:17 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af2a0 - 0x0900000005dd0460 libjvm.so::testing::TestSuite::Run()+0x564  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:16 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af3a0 - 0x0900000005dcb628 libjvm.so::testing::internal::UnitTestImpl::RunAllTests()+0xe78  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af560 - 0x0900000005dca548 libjvm.so::testing::UnitTest::Run()+0x9c  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af610 - 0x0900000005dd3984 libjvm.so::runUnitTestsInner(int, char**)+0x56c  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:13 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001102af720 - 0x0900000005dd33d4 libjvm.so::thread_wrapper+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102af7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )&lt;br/&gt;
0x00000001102af820 - 0x0000000000000000 &lt;br/&gt;
*** end of backchain ***&lt;br/&gt;
</comment>
                            <comment id="14582878" author="mbaesken" created="Fri, 19 May 2023 04:58:57 -0700"  >A similar crash on AIX in MallocTracker::print_pointer_information  can be seen in the test  &amp;#39;gtest/GTestWrapper.java&amp;#39; .&lt;br/&gt;
&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.openjdk.jdk-dev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, aix-ppc64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x615bdc]  MallocTracker::print_pointer_information(void const*, outputStream*)+0xd0&lt;br/&gt;
&lt;br/&gt;
Native frame:&lt;br/&gt;
iar:  0x090000000686bbdc libjvm.so::MallocTracker::print_pointer_information(void const*, outputStream*)+0xd0  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:12 fixedparms:2 parmsonstk:1)&lt;br/&gt;
lr:   0x090000000686bbd0 libjvm.so::MallocTracker::print_pointer_information(void const*, outputStream*)+0xc4  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:12 fixedparms:2 parmsonstk:1)&lt;br/&gt;
sp:   0x00000001102bfd00 (base - 0xB88) &lt;br/&gt;
rtoc: 0x08001000a06a1df0 &lt;br/&gt;
|---stackaddr----|   |----lrsave------|:   &amp;lt;function name&amp;gt;&lt;br/&gt;
0x00000001102bfe00 - 0x090000000686ba7c libjvm.so::MemTracker::print_containing_region(void const*, outputStream*)+0x44  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001102bfe90 - 0x09000000076f3cac libjvm.so::test_pointer(void const*, bool, char const*)+0x68  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:3 parmsonstk:1)&lt;br/&gt;
0x00000001102c0030 - 0x09000000076f6a88 libjvm.so::NMT_location_printing_mmap_2_vm_Test::TestBody()+0x80  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c00c0 - 0x09000000073ce814 libjvm.so::testing::Test::Run()+0x394  (C++ uses_alloca saves_lr stores_bc gpr_saved:15 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c01b0 - 0x09000000073ce1a0 libjvm.so::testing::TestInfo::Run()+0x418  (C++ uses_alloca saves_lr stores_bc gpr_saved:17 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c02c0 - 0x09000000073cd710 libjvm.so::testing::TestSuite::Run()+0x410  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:9 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c0390 - 0x09000000073c88d4 libjvm.so::testing::internal::UnitTestImpl::RunAllTests()+0xe10  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c0560 - 0x09000000073c7878 libjvm.so::testing::UnitTest::Run()+0xac  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c0610 - 0x09000000073cfa94 libjvm.so::runUnitTestsInner(int, char**)+0x570  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:13 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001102c0720 - 0x09000000073cf4e4 libjvm.so::thread_wrapper+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001102c07a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )&lt;br/&gt;
0x00000001102c0820 - 0x0000000000000000 &lt;br/&gt;
*** end of backchain ***&lt;br/&gt;
&lt;br/&gt;
Unfortunately inspecting the core made the dbx crash .</comment>
                            <comment id="14577303" author="mbaesken" created="Thu, 27 Apr 2023 05:49:53 -0700"  >[~tsteele]  should we exclude the test on AIX, as long as it is crashing?&lt;br/&gt;
Do you see the crash too?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5115133">JDK-8320456</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5114119">JDK-8319542</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5099630">JDK-8307006</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                                              <subtask id="5099630">JDK-8307006</subtask>
                                                              <subtask id="5100675">JDK-8307891</subtask>
                                                              <subtask id="5111951">JDK-8317711</subtask>
                                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i317kz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>