<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:43:31 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8298448] UndefinedBehaviorSanitizer</title>
                <link>https://bugs.openjdk.org/browse/JDK-8298448</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>UBSan (&lt;a href=&quot;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&quot;&gt;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&lt;/a&gt;) is available in gcc and clang and detects behavior that is undefined according to the C and C++ standards and reports it. I enabled it in &lt;a href=&quot;https://github.com/jcking/jdk/tree/ubsan&quot;&gt;https://github.com/jcking/jdk/tree/ubsan&lt;/a&gt; and it turns out OpenJDK relies on quite a bit of undefined behavior from unaligned stores/loads, accessing member functions and fields using unaligned pointers, and binding NULL to references.&lt;br/&gt;
&lt;br/&gt;
To be more well defined, OpenJDK should be buildable with UBSan and the majority of undefined behavior should be replaced. If it is intentional it should be suppressed. Ultimately all tests should be able to pass with a UBSan build.</description>
                <environment></environment>
        <key id="5089292">JDK-8298448</key>
            <summary>UndefinedBehaviorSanitizer</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jcking">Justin King</assignee>
                                    <reporter username="jcking">Justin King</reporter>
                        <labels>
                            <label>ubsan</label>
                    </labels>
                <created>Thu, 8 Dec 2022 22:46:45 -0800</created>
                <updated>Tue, 8 Oct 2024 08:16:54 -0700</updated>
                            <resolved>Thu, 12 Jan 2023 07:53:01 -0800</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14711236" author="ihse" created="Tue, 8 Oct 2024 08:16:54 -0700"  >[~mbaesken] I&amp;#39;d recommend you bring that as a discussion to build-dev instead of necroposting in this bug report.</comment>
                            <comment id="14710923" author="mbaesken" created="Mon, 7 Oct 2024 08:04:10 -0700"  >I wanted to try the &amp;quot;minimal runtime&amp;quot; option of ubsan because it might be faster and has other benefits.&lt;br/&gt;
See&lt;br/&gt;
&lt;a href=&quot;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#minimal-runtime&quot;&gt;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#minimal-runtime&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Unfortunately it seems to be available only with clang, not (yet?) gcc,  so I configured &lt;br/&gt;
--with-additional-ubsan-checks=-fsanitize-minimal-runtime --with-toolchain-type=clang&lt;br/&gt;
&lt;br/&gt;
but after some compilation I run into this :&lt;br/&gt;
jdk/lib/server/libjvm.so: undefined symbol: __ubsan_handle_type_mismatch_minimal&lt;br/&gt;
&lt;br/&gt;
Any ideas what&amp;#39;s wrong here ?&lt;br/&gt;
&lt;a href=&quot;https://github.com/systemd/systemd/issues/26975&quot;&gt;https://github.com/systemd/systemd/issues/26975&lt;/a&gt;&lt;br/&gt;
suggests that we might need to adjust the linker settings to allow undefined symbols , not sure if this is the same issue ?</comment>
                            <comment id="14675718" author="mbaesken" created="Thu, 23 May 2024 07:46:31 -0700"  >We have on Linux an overflow reported by ubsan:&lt;br/&gt;
&lt;br/&gt;
os.cpp:1928:34: runtime error: pointer index expression with base 0x000000001000 overflowed to 0xfffffffffffff000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7fa25d3f6ab5 in os::attempt_reserve_memory_between(char*, char*, unsigned long, unsigned long, bool) /jdk/src/hotspot/share/runtime/os.cpp:1928&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7fa259f72fcc in call_attempt_reserve_memory_between  /jdk/test/hotspot/gtest/runtime/test_os_reserve_between.cpp:69&lt;br/&gt;
&lt;br/&gt;
However looking at the code location, it seems the overflow is handled/checked in the coding later .  So there is nothing to &amp;quot;fix&amp;quot; .&lt;br/&gt;
Should we mark the function  with an attribute so that the ubsan check is disabled ?&lt;br/&gt;
Otherwise we always get the wrong report ?&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14672537" author="mbaesken" created="Fri, 10 May 2024 06:24:08 -0700"  >We have quite a lot of  &amp;quot;runtime error: applying non-zero offset &amp;lt;xyz&amp;gt; to null pointer&amp;quot; ; not sure if it is worth the effort adjusting **all** those code locations, I am not aware that they cause any real trouble on our compilers/platforms.</comment>
                            <comment id="14671161" author="JIRAUSER20603" created="Mon, 6 May 2024 07:47:16 -0700"  >IMO, unless something is a critical implementation detail that cannot be changed without significant headache, we should aim to fix undefined behavior. That incorrect function type can probably be resolved fairly easily by a small refactor which adds a dummy argument that is ignored so it matches the call signature. Looks like `nop` is not the only offender in the class.</comment>
                            <comment id="14671142" author="mbaesken" created="Mon, 6 May 2024 06:38:59 -0700"  >I disabled the alignment checks for now with  &lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331298&quot;&gt;https://bugs.openjdk.org/browse/JDK-8331298&lt;/a&gt;&lt;br/&gt;
8331298: avoid alignment checks in UBSAN enabled build&lt;br/&gt;
&lt;br/&gt;
There are also some &amp;#39;call  ... through pointer to incorrect function type&amp;#39; related ubsan errors. See for example :&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331563&quot;&gt;https://bugs.openjdk.org/browse/JDK-8331563&lt;/a&gt;&lt;br/&gt;
8331563: ubsan error: templateTable.cpp:62:3: runtime error: call to function TemplateTable::nop() through pointer to incorrect function type&lt;br/&gt;
&lt;br/&gt;
Should we do source changes to always have exactly matching function pointers ? Or relax this a little more and avoid those checks? Or  disable the ubsan warning for specific checks with pragma/__attribute in the sources ?&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14668358" author="mbaesken" created="Fri, 26 Apr 2024 05:54:57 -0700"  >After fixing the  ADLC issue above, the newly compiled JVM fails in the build with various alignment related check errors (store to misaligned address / member access within misaligned address).  Maybe we should for now disable the UBSAN alignment checks, I am not sure if those should be really changed in the code (but we could discuss it of course),&lt;br/&gt;
2 examples seen :&lt;br/&gt;
&lt;br/&gt;
/jdk/src/hotspot/cpu/x86/macroAssembler_x86.hpp:128:13: runtime error: store to misaligned address 0x15099c3cf4ce for type &amp;#39;int&amp;#39;, which requires 4 byte alignment&lt;br/&gt;
0x15099c3cf4ce: note: pointer points here&lt;br/&gt;
&amp;nbsp;00 80 0f 86 00 00  00 00 3d 06 00 00 80 76  60 3d 07 00 00 80 76 40  3d 08 00 00 80 76 20 3d  1e 00&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^ &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x1509b3b04f10 in MacroAssembler::pd_patch_instruction(unsigned char*, unsigned char*, char const*, int) /jdk/src/hotspot/cpu/x86/macroAssembler_x86.hpp:128&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x1509b3b04f10 in Label::patch_instructions(MacroAssembler*) /jdk/src/hotspot/share/asm/assembler.cpp:201&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x1509b940b6d8 in VM_Version_StubGenerator::generate_get_cpu_info() /jdk/src/hotspot/cpu/x86/vm_version_x86.cpp:381&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x1509b94059bd in VM_Version::initialize() /jdk/src/hotspot/cpu/x86/vm_version_x86.cpp:2138&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x1509b93fb56e in VM_Version_init() /jdk/src/hotspot/share/runtime/vm_version.cpp:32&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#5 0x1509b61ef947 in init_globals() /jdk/src/hotspot/share/runtime/init.cpp:126&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#6 0x1509b8fb0e29 in Threads::create_vm(JavaVMInitArgs*, bool*) /jdk/src/hotspot/share/runtime/threads.cpp:553&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#7 0x1509b67da3d7 in JNI_CreateJavaVM_inner /jdk/src/hotspot/share/prims/jni.cpp:3581&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#8 0x1509b67da3d7 in JNI_CreateJavaVM /jdk/src/hotspot/share/prims/jni.cpp:3672&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#9 0x1509c0eed957 in InitializeJVM /jdk/src/java.base/share/native/libjli/java.c:1550&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#10 0x1509c0eed957 in JavaMain /jdk/src/java.base/share/native/libjli/java.c:491&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;... (rest of output omitted)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
/jdk/src/hotspot/share/runtime/vmStructs.cpp:2653:3: runtime error: member access within misaligned address 0x7fff39f33a30 for type &amp;#39;struct XCollectedHeap&amp;#39;, which requires 64 byte alignment&lt;br/&gt;
0x7fff39f33a30: note: pointer points here&lt;br/&gt;
&amp;nbsp;ff ff ef 7f  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^ &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x152482fb311c in operator() /jdk/src/hotspot/share/runtime/vmStructs.cpp:2653&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x152482fb311c in __static_initialization_and_destruction_0 /jdk/src/hotspot/share/runtime/vmStructs.cpp:2653&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x15249138a5e9 in call_init.part.0 (/lib64/ld-linux-x86-64.so.2+0x115e9) (BuildId: be5d0c46cde7620968b30cd3c9a737179b4f8f5f)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x15249138a705 in _dl_init (/lib64/ld-linux-x86-64.so.2+0x11705) (BuildId: be5d0c46cde7620968b30cd3c9a737179b4f8f5f)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x152490953fbd in _dl_catch_exception (/lib64/libc.so.6+0x156fbd) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#5 0x15249138eed3 in dl_open_worker (/lib64/ld-linux-x86-64.so.2+0x15ed3) (BuildId: be5d0c46cde7620968b30cd3c9a737179b4f8f5f)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#6 0x15249095402c in _dl_catch_exception (/lib64/libc.so.6+0x15702c) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#7 0x15249138e28a in _dl_open (/lib64/ld-linux-x86-64.so.2+0x1528a) (BuildId: be5d0c46cde7620968b30cd3c9a737179b4f8f5f)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#8 0x1524913203b5 in dlopen_doit (/lib64/libdl.so.2+0x13b5) (BuildId: d217b228882341aeb761264b83415f7458617268)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#9 0x15249095402c in _dl_catch_exception (/lib64/libc.so.6+0x15702c) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#10 0x1524909540be in _dl_catch_error (/lib64/libc.so.6+0x1570be) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;... (rest of output omitted)&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14668340" author="mbaesken" created="Fri, 26 Apr 2024 04:31:55 -0700"  >For some strange reason, when using gcc 11.3 / ubsan on Linux x86_64, I do not run into the reported ADLC issue, ADLC seems to build and run fine.&lt;br/&gt;
But the ADLC issue reported above seems to be easy to fix, there is a missing nullptr check in the ADLC code that is not super critical but still better to have. &lt;br/&gt;
However later in the build process when the newly compiled JVM comes into play, other ubsan related issues show up :</comment>
                            <comment id="14668200" author="mbaesken" created="Fri, 26 Apr 2024 01:24:06 -0700"  >I created&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331167&quot;&gt;https://bugs.openjdk.org/browse/JDK-8331167&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14668014" author="ihse" created="Thu, 25 Apr 2024 08:57:24 -0700"  >It is no good if you can&amp;#39;t even compile with it. :-( I think getting adlc clean is a worthy goal, but in the meantime we might need to exclude it, since it is more useful to check the product code than the build tools.</comment>
                            <comment id="14668008" author="mbaesken" created="Thu, 25 Apr 2024 08:43:49 -0700"  >When configuring with &amp;#39;--enable-ubsan&amp;#39;  and doing a macOS x86_64 fastdebug build,  I run into this build error  after very short time :&lt;br/&gt;
jdk/src/hotspot/share/adlc/adlparse.cpp:5228:36: runtime error: applying non-zero offset 1 to null pointer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x103fa4b4b in ADLParser::skipws_common(bool) adlparse.cpp:5228&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x103f76aed in ADLParser::skipws() adlparse.hpp:271&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#2 0x103f763c6 in ADLParser::parse() adlparse.cpp:95&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#3 0x10407054d in main main.cpp:178&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#4 0x7fff2044ef3c in start+0x0 (libdyld.dylib:x86_64+0x15f3c)&lt;br/&gt;
&lt;br/&gt;
So the  &amp;#39;--enable-ubsan&amp;#39;  seems to be not really usable at the moment on macOS because it even fails to compile the JDK.&lt;br/&gt;
Did this ever work?  Should we exclude adlc  from ubsan sanitizing or is it a goal to get adlc &amp;#39;clean&amp;#39;   too ?</comment>
                            <comment id="14550756" author="dukebot" created="Thu, 12 Jan 2023 07:53:00 -0800"  >Changeset: 7a85d95e&lt;br/&gt;
Author:    Justin King &amp;lt;&lt;a href=&apos;mailto:jcking@openjdk.org&apos;&gt;jcking@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Magnus Ihse Bursie &amp;lt;&lt;a href=&apos;mailto:ihse@openjdk.org&apos;&gt;ihse@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-12 15:50:05 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/7a85d95e828283d57e1df0344be454626470675d&quot;&gt;https://git.openjdk.org/jdk/commit/7a85d95e828283d57e1df0344be454626470675d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14544115" author="roboduke" created="Thu, 8 Dec 2022 23:02:45 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11604&quot;&gt;https://git.openjdk.org/jdk/pull/11604&lt;/a&gt;&lt;br/&gt;
Date: 2022-12-09 06:53:31 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5092277">JDK-8300935</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5128046">JDK-8331201</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128008">JDK-8331167</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128211">JDK-8331298</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099222">JDK-8306709</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099223">JDK-8306710</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5130554">JDK-8333144</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zk2b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>