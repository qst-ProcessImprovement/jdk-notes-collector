<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:50:06 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8327990] [macosx-aarch64] Various tests fail with -XX:+AssertWXAtThreadSync</title>
                <link>https://bugs.openjdk.org/browse/JDK-8327990</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>On macOS/aarch64 a thread must switch to WXWrite mode before entering the VM [1]&lt;br/&gt;
Entering the VM without WXWrite can cause sporadic crashes as described in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8327036&quot; title=&quot;[macosx-aarch64] SIGBUS in MarkActivationClosure::do_code_blob reached from Unsafe_CopySwapMemory0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8327036&quot;&gt;&lt;strike&gt;JDK-8327036&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
Below are locations that violate the invariant. For each location a test is given that fails if executed with with -XX:+AssertWXAtThreadSync.&lt;br/&gt;
&lt;br/&gt;
JfrJvmtiAgent::retransform_classes()&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/cfd9209e03176bd8e02acd74b51a16f3113fbd21/src/hotspot/share/jfr/instrumentation/jfrJvmtiAgent.cpp#L149&quot;&gt;https://github.com/openjdk/jdk/blob/cfd9209e03176bd8e02acd74b51a16f3113fbd21/src/hotspot/share/jfr/instrumentation/jfrJvmtiAgent.cpp#L149&lt;/a&gt;&lt;br/&gt;
jfr_set_enabled()&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/0776fff0e321c3f541354404b3ec0aa1992923a0/src/hotspot/share/jfr/jni/jfrJniMethod.cpp#L104&quot;&gt;https://github.com/openjdk/jdk/blob/0776fff0e321c3f541354404b3ec0aa1992923a0/src/hotspot/share/jfr/jni/jfrJniMethod.cpp#L104&lt;/a&gt;&lt;br/&gt;
Tests:&lt;br/&gt;
jdk/jfr/event/runtime/TestClassLoadEvent.java&lt;br/&gt;
compiler/intrinsics/klass/CastNullCheckDroppingsTest.java&lt;br/&gt;
&lt;br/&gt;
JvmtiExport::get_jvmti_interface&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/prims/jvmtiExport.cpp#L385&quot;&gt;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/prims/jvmtiExport.cpp#L385&lt;/a&gt;&lt;br/&gt;
Test:serviceability/jvmti/vthread/GetThreadState/GetThreadStateTest.java&lt;br/&gt;
&lt;br/&gt;
GetCarrierThread&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/prims/jvmtiExtensions.cpp#L133&quot;&gt;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/prims/jvmtiExtensions.cpp#L133&lt;/a&gt;&lt;br/&gt;
Test:serviceability/jvmti/vthread/GetThreadStateMountedTest/GetThreadStateMountedTest.java&lt;br/&gt;
&lt;br/&gt;
JfrRecorderService::emit_leakprofiler_events&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/jfr/recorder/service/jfrRecorderService.cpp#L702&quot;&gt;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/jfr/recorder/service/jfrRecorderService.cpp#L702&lt;/a&gt;&lt;br/&gt;
Test:jdk/jfr/event/oldobject/TestObjectAge.java&lt;br/&gt;
&lt;br/&gt;
JfrJavaEventWriter::flush&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/jfr/writers/jfrJavaEventWriter.cpp#L126&quot;&gt;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/jfr/writers/jfrJavaEventWriter.cpp#L126&lt;/a&gt;&lt;br/&gt;
JfrStorage::register_full&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/jfr/recorder/storage/jfrStorage.cpp#L294&quot;&gt;https://github.com/openjdk/jdk/blob/c342188fd978dd94e7788fb0fb0345fd8c0eaa9a/src/hotspot/share/jfr/recorder/storage/jfrStorage.cpp#L294&lt;/a&gt;&lt;br/&gt;
Test:jdk/jfr/api/consumer/TestRecordingFileWrite.java&lt;br/&gt;
&lt;br/&gt;
JfrIntrinsicSupport::write_checkpoint&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d3f3011d56267360d65841da3550eca79cf1575b/src/hotspot/share/jfr/support/jfrIntrinsics.cpp#L54&quot;&gt;https://github.com/openjdk/jdk/blob/d3f3011d56267360d65841da3550eca79cf1575b/src/hotspot/share/jfr/support/jfrIntrinsics.cpp#L54&lt;/a&gt;&lt;br/&gt;
Test:jdk/jfr/threading/TestManyVirtualThreads.java&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/0583f7357480c0500daa82f490b2fcc05f2fb65a/src/hotspot/share/runtime/interfaceSupport.inline.hpp#L253-L259&quot;&gt;https://github.com/openjdk/jdk/blob/0583f7357480c0500daa82f490b2fcc05f2fb65a/src/hotspot/share/runtime/interfaceSupport.inline.hpp#L253-L259&lt;/a&gt;</description>
                <environment></environment>
        <key id="5123981">JDK-8327990</key>
            <summary>[macosx-aarch64] Various tests fail with -XX:+AssertWXAtThreadSync</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rrich">Richard Reingruber</assignee>
                                    <reporter username="rrich">Richard Reingruber</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                    </labels>
                <created>Tue, 12 Mar 2024 07:43:17 -0700</created>
                <updated>Fri, 23 May 2025 11:57:21 -0700</updated>
                            <resolved>Thu, 21 Mar 2024 07:11:28 -0700</resolved>
                                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14679395" author="roboduke" created="Thu, 6 Jun 2024 00:57:51 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/580&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/580&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-16 11:54:19 +0000</comment>
                            <comment id="14679384" author="clanger" created="Thu, 6 Jun 2024 00:10:07 -0700"  >same here, please prepare the PR and get it reviewed in case it&amp;#39;s not clean.</comment>
                            <comment id="14679199" author="rrich" created="Wed, 5 Jun 2024 07:20:53 -0700"  >Fix request (21u)&lt;br/&gt;
&lt;br/&gt;
The backport from 22u to 21u applies cleanly. Risk is low.&lt;br/&gt;
&lt;br/&gt;
Testing:&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve verified every added WXState change if it is actually required.&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing with AssertWXAtThreadSync enabled: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests. </comment>
                            <comment id="14664067" author="roboduke" created="Tue, 9 Apr 2024 06:54:06 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/133&quot;&gt;https://git.openjdk.org/jdk22u/pull/133&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-08 14:48:14 +0000</comment>
                            <comment id="14663259" author="rrich" created="Fri, 5 Apr 2024 07:37:58 -0700"  >Fix request (22u)&lt;br/&gt;
&lt;br/&gt;
I would like to backport this to jdk 22 to get clean testing with -XX:+AssertWXAtThreadSync and avoid crashes because the VM is entered with the wrong WXState. The latter is very unlikely nevertheless aiming for clean tests with -XX:+AssertWXAtThreadSync will help to reduce the probability that users are affected by regressions in this area.&lt;br/&gt;
&lt;br/&gt;
The original change did not apply cleanly because JfrRecorderService::emit_leakprofiler_events() does not exist in jdk 22 so I left out the hunk in jfrRecorderService.cpp.&lt;br/&gt;
&lt;br/&gt;
I consider the risk of the backport low.&lt;br/&gt;
It could happen that dynamically generated code is called after changing to WXWrite and before the transition to _thread_in_vm (this would crash) but during the review of the original change it has been found that this does not happen. &lt;br/&gt;
&lt;br/&gt;
Testing:&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve verified every added WXState change if it is actually required.&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing with AssertWXAtThreadSync enabled: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests.</comment>
                            <comment id="14660356" author="dholmes" created="Mon, 25 Mar 2024 22:22:31 -0700"  >&amp;gt; Any place where we find that we need to switch to &amp;#39;W&amp;#39; the first question I would want us to ask is, why are we in &amp;#39;X&amp;#39;, is that expected, or is some code holding onto &amp;#39;X&amp;#39; for too long? &lt;br/&gt;
&lt;br/&gt;
In general it is because we were outside the VM and code outside the VM defaults to X. E.g the JavaCallWrapper sets X mode before invoking the Java method, so if that Java method then does something to call back into the VM we have to switch to W mode.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; If we do then I thought a JavaThread should only be in &amp;quot;W&amp;quot; for as short as possible.&lt;br/&gt;
&lt;br/&gt;
My understanding from the original macOS port that had to implement this, is that the transition can be expensive so trades-off fine-grained, narrow scoped, control, for performance. Hence the general rule of W inside the VM, X outside the VM, and switch to X when needed in the VM.&lt;br/&gt;
&lt;br/&gt;
Someone would have to do a detailed analysis to find every location that specifically needs X or specifically needs Y to determine which default would be more performant overall.&lt;br/&gt;
&lt;br/&gt;
Also note that W is needed in more cases than just the obvious generation of JIT&amp;#39;d code, there is also stub generation and updating of oops within stubs (apparently).</comment>
                            <comment id="14659685" author="rrich" created="Fri, 22 Mar 2024 08:49:43 -0700"  >It might be good for stability to do that. But is &amp;quot;W&amp;quot; even a good default from a security point of view for a JavaThread? I thought &amp;quot;W&amp;quot; would be a good default for JIT threads.&lt;br/&gt;
I&amp;#39;m not an expert in this area and I don&amp;#39;t know if we actually want to benefit from W^X neither (do we?).&lt;br/&gt;
If we do then I thought a JavaThread should only be in &amp;quot;W&amp;quot; for as short as possible.</comment>
                            <comment id="14659677" author="gziemski" created="Fri, 22 Mar 2024 08:34:08 -0700"  >All the jvmti calls follow similar pattern:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current_thread));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadInVMfromNative __tiv(current_thread);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VM_ENTRY_BASE(jvmtiError, jvmti_Allocate , current_thread)&lt;br/&gt;
</comment>
                            <comment id="14659670" author="gziemski" created="Fri, 22 Mar 2024 08:20:44 -0700"  >I agree that we need to make sure that all the place identified here need the WX state to be in &amp;#39;W&amp;#39;, which is the &amp;quot;default&amp;quot;, however, I wish that we could find a way to make sure that we turn OFF non-default state as soon as possible, not sprinkle out &amp;#39;W&amp;#39; state transitions.&lt;br/&gt;
&lt;br/&gt;
&amp;#39;W&amp;#39; is the default, we should make an effort to make sure that &amp;#39;X&amp;#39; is only turned on for min duration possible. Any place where we find that we need to switch to &amp;#39;W&amp;#39; the first question I would want us to ask is, why are we in &amp;#39;X&amp;#39;, is that expected, or is some code holding onto &amp;#39;X&amp;#39; for too long?</comment>
                            <comment id="14659660" author="gziemski" created="Fri, 22 Mar 2024 08:04:13 -0700"  >If &amp;#39;W&amp;#39; is our default state, why not just enforce and set WX state to &amp;#39;W&amp;#39; here and if it doesn&amp;#39;t match simply print out a warning to a log?</comment>
                            <comment id="14659556" author="mbaesken" created="Fri, 22 Mar 2024 01:31:03 -0700"  >A related question - should we change the default of AssertWXAtThreadSync globals-flag  from false to true (so that the checking/assert is always done on macOS aarch64)  ?&lt;br/&gt;
Benefit would be that such issues like the ones fixed in this PR are seen earlier.&lt;br/&gt;
(however it may cost a bit of performance)</comment>
                            <comment id="14659341" author="dukebot" created="Thu, 21 Mar 2024 07:11:26 -0700"  >Changeset: e41bc42d&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-03-21 14:09:42 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e41bc42deb22615c9b93ee639d04e9ed2bd57f64&quot;&gt;https://git.openjdk.org/jdk/commit/e41bc42deb22615c9b93ee639d04e9ed2bd57f64&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14657067" author="rrich" created="Wed, 13 Mar 2024 02:54:08 -0700"  >&amp;gt; Shouldn&amp;#39;t the ThreadInVMfromNative transition be responsible for setting WXWrite mode?&lt;br/&gt;
&lt;br/&gt;
This would be reasonable in my opinion.&lt;br/&gt;
In my PR I&amp;#39;ve hoisted setting WXWrite mode in JfrJvmtiAgent::retransform_classes() because multiple instance of ThreadInVMfromNative are reached. This is likely not even necessary. Still exceptions could be made if there are usages of ThreadInVMfromNative where it is needed.</comment>
                            <comment id="14657064" author="roboduke" created="Wed, 13 Mar 2024 02:46:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18238&quot;&gt;https://git.openjdk.org/jdk/pull/18238&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-12 15:05:00 +0000</comment>
                            <comment id="14656976" author="dholmes" created="Tue, 12 Mar 2024 23:11:25 -0700"  >Shouldn&amp;#39;t the ThreadInVMfromNative transition be responsible for setting WXWrite mode?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5127235">JDK-8330552</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131410">JDK-8333866</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5122810">JDK-8327036</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5126279">JDK-8329748</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i35esz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="374"><![CDATA[jfr]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>