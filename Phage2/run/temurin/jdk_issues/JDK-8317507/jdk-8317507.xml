<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:30:22 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8317507] C2 compilation fails with &quot;Exceeded _node_regs array&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8317507</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>java -Xmx1G -XX:+IgnoreUnrecognizedVMOptions -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,*Test*::* -XX:-TieredCompilation -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:UseAVX=2 Test.java&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (.../open/src/hotspot/share/opto/regalloc.hpp:85), pid=1681802, tid=1681816&lt;br/&gt;
#  assert(idx &amp;lt; _node_regs_max_index) failed: Exceeded _node_regs array&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+17) (fastdebug build 22-ea+17-1342)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+17-1342, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x6ebf45]  PhaseCFG::insert_goto_at(unsigned int, unsigned int)+0x695&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:   3200  109    b        Test::vMeth (119 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f12d5057000,0x00007f12d5158000],  sp=0x00007f12d5153e90,  free space=1011k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x6ebf45]  PhaseCFG::insert_goto_at(unsigned int, unsigned int)+0x695  (regalloc.hpp:85)&lt;br/&gt;
V  [libjvm.so+0x6ede8c]  PhaseCFG::fixup_flow()+0x1ac&lt;br/&gt;
V  [libjvm.so+0x9ee37d]  Compile::Code_Gen()+0x4ad&lt;br/&gt;
V  [libjvm.so+0x9f107e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1c9e&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
FAILURE ANALYSIS&lt;br/&gt;
&lt;br/&gt;
The failure is caused by a seemingly legal but degenerate Ideal graph where around 94% of the nodes (544 out of 579 after Compile::Optimize()) are floating-point additions (AddF). On x64, these nodes, whose second operand is `inc` (see attached TestSimpler.java), are initially implemented with addF_reg_reg machine nodes. Register allocation spills `inc`, and then PhaseChaitin::fixup_spills() replaces each of the addF_reg_reg machine nodes with their memory-operand version (addF_reg_mem). PhaseRegAlloc has allocated 1118 elements for PhaseRegAlloc::_node_regs (612 + (612 &amp;gt;&amp;gt; 1) + 200 as per PhaseRegAlloc::alloc_node_regs), but each transformation from addF_reg_reg to addF_reg_mem creates a fresh node ID (Compile::next_unique()) and Compile::_unique eventually grows beyond the size of PhaseRegAlloc::_node_regs, which finally triggers the assertion failure when PhaseRegAlloc::set_pair is called for a newly created node post-register allocation (e.g. during the target-dependent peephole phase).&lt;br/&gt;
&lt;br/&gt;
The reason why this failure occurs only after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287087&quot; title=&quot;C2: perform SLP reduction analysis on-demand&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287087&quot;&gt;&lt;strike&gt;JDK-8287087&lt;/strike&gt;&lt;/a&gt; is that this changeset makes it possible to detect a reduction chain that was undetectable before, when the innermost loop as been fully unrolled:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static float test(float inc) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int i = 0, j = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;float f = dontInline();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (i++ &amp;lt; 128) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f += inc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return f;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
This stronger analysis result provided by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287087&quot; title=&quot;C2: perform SLP reduction analysis on-demand&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287087&quot;&gt;&lt;strike&gt;JDK-8287087&lt;/strike&gt;&lt;/a&gt; leads to the SLP early unrolling policy (SuperWord::unrolling_analysis()) requesting additional unrolling of the outermost loop, but due to limitations in the superword framework, the loop is finally not vectorized, leaving a graph with a very high density of AddF nodes (512 AddF nodes in the main loop body).&lt;br/&gt;
&lt;br/&gt;
Potential solutions include:&lt;br/&gt;
- reusing the node ID of the replaced nodes in PhaseChaitin::fixup_spills() and/or adjusting Compile::_unique appropriately,&lt;br/&gt;
- resizing _node_regs on an out-of-bounds attempt (e.g. using a growable array),&lt;br/&gt;
- further increasing the size of _node_regs, and&lt;br/&gt;
- adjusting the loop unrolling policy to avoid excessive unrolling for pure reduction loops.&lt;br/&gt;
A temporary workaround is to use -XX:-UseCISCSpill.</description>
                <environment></environment>
        <key id="5111710">JDK-8317507</key>
            <summary>C2 compilation fails with &quot;Exceeded _node_regs array&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rcastanedalo">Roberto Castaneda Lozano</assignee>
                                    <reporter username="thartmann">Tobias Hartmann</reporter>
                        <labels>
                            <label>CPU24_04-critical-approved</label>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>c2-superword</label>
                            <label>javafuzzer</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk8u-fix-request</label>
                            <label>jdk8u-fix-yes</label>
                            <label>oracle-triage-22</label>
                    </labels>
                <created>Wed, 4 Oct 2023 03:55:35 -0700</created>
                <updated>Thu, 26 Jun 2025 06:40:42 -0700</updated>
                            <resolved>Mon, 30 Oct 2023 05:57:16 -0700</resolved>
                                    <version>7</version>
                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14659723" author="roboduke" created="Fri, 22 Mar 2024 10:26:56 -0700"  >[jdk8u-fix-request] Approval Request from Martin Balao Alonso&lt;br/&gt;
8u is affected by this bug so I&amp;#39;d like to request approval for a backport. The 17u patch applied with minor changes, the test works fine and risk is minimal.</comment>
                            <comment id="14659689" author="roboduke" created="Fri, 22 Mar 2024 09:01:36 -0700"  >[jdk11u-fix-request] Approval Request from Martin Balao Alonso&lt;br/&gt;
11u is affected by this bug so I&amp;#39;d like to request approval for a backport. The 17u patch applied cleanly, the test works fine and risk is minimal.</comment>
                            <comment id="14659487" author="roboduke" created="Thu, 21 Mar 2024 17:58:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk8u-dev/pull/470&quot;&gt;https://git.openjdk.org/jdk8u-dev/pull/470&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-22 00:54:09 +0000</comment>
                            <comment id="14659485" author="roboduke" created="Thu, 21 Mar 2024 17:54:00 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2617&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2617&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-22 00:50:04 +0000</comment>
                            <comment id="14633598" author="roboduke" created="Tue, 12 Dec 2023 02:22:26 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2039&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2039&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-11 17:10:54 +0000</comment>
                            <comment id="14633597" author="roboduke" created="Tue, 12 Dec 2023 02:19:57 -0800"  >[jdk17u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to fix the C2 corner case. Applies cleanly. Tests pass.</comment>
                            <comment id="14623420" author="roboduke" created="Thu, 2 Nov 2023 09:23:39 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to fix the C2 crash. Applies cleanly. Testing passes.</comment>
                            <comment id="14623054" author="roboduke" created="Wed, 1 Nov 2023 10:11:05 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/317&quot;&gt;https://git.openjdk.org/jdk21u/pull/317&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-01 17:05:00 +0000</comment>
                            <comment id="14622022" author="dukebot" created="Mon, 30 Oct 2023 05:57:06 -0700"  >Changeset: a5818972&lt;br/&gt;
Author:    Roberto Casta&amp;#xF1;eda Lozano &amp;lt;&lt;a href=&apos;mailto:rcastanedalo@openjdk.org&apos;&gt;rcastanedalo@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-30 12:54:03 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a5818972c16bd883d768ff2fb23a8aa9e0142c65&quot;&gt;https://git.openjdk.org/jdk/commit/a5818972c16bd883d768ff2fb23a8aa9e0142c65&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14620940" author="shade" created="Wed, 25 Oct 2023 03:22:48 -0700"  >Ok, great. Thanks for testing! Would you mind PR-ing the manual test as new jtreg testcase, so we can backport it along with this fix?</comment>
                            <comment id="14620936" author="rcastanedalo" created="Wed, 25 Oct 2023 03:17:39 -0700"  >Good point [~shade], the failure can indeed be triggered in earlier JDK releases (latest update releases of JDK 8, 11, and 17) using the attached program Manual.java where the loop is manually unrolled:&lt;br/&gt;
$ javac Manual.java&lt;br/&gt;
$ java -Xcomp -XX:CompileOnly=Manual::test -XX:CompileCommand=dontinline,Manual::dontInline Manual</comment>
                            <comment id="14620928" author="shade" created="Wed, 25 Oct 2023 02:27:02 -0700"  >Looking at the fix, it looks like that while it is triggered by more aggressive optimizations added by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287087&quot; title=&quot;C2: perform SLP reduction analysis on-demand&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287087&quot;&gt;&lt;strike&gt;JDK-8287087&lt;/strike&gt;&lt;/a&gt; in JDK 21, the bug is actually more generic, and can trigger in earlier JDK releases? I.e. if user writes a heavily unrolled loop by hand?</comment>
                            <comment id="14620126" author="roboduke" created="Mon, 23 Oct 2023 03:05:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16306&quot;&gt;https://git.openjdk.org/jdk/pull/16306&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-23 09:48:40 +0000</comment>
                            <comment id="14619512" author="thartmann" created="Thu, 19 Oct 2023 07:06:04 -0700"  >Yes, raising priority.</comment>
                            <comment id="14619469" author="rcastanedalo" created="Thu, 19 Oct 2023 03:58:17 -0700"  >I just attached a slightly further simplified version of the reproducer (TestSimpler.java) which triggers the same assert failure without stress options:&lt;br/&gt;
&lt;br/&gt;
java -Xcomp -XX:CompileOnly=TestSimpler::test -XX:CompileCommand=dontinline,TestSimpler::dontInline TestSimpler.java&lt;br/&gt;
&lt;br/&gt;
In light of this, would it be justified to adjust the bug priority due to higher likelihood [~thartmann]?</comment>
                            <comment id="14615802" author="thartmann" created="Wed, 4 Oct 2023 05:49:16 -0700"  >[~rcastanedalo], could you please have a look?</comment>
                            <comment id="14615801" author="thartmann" created="Wed, 4 Oct 2023 05:44:12 -0700"  >ILW = Crash during C2 compilation, reproducible with simple test case and stress options, -XX:-UseSuperWord = HLM = P3</comment>
                            <comment id="14615800" author="thartmann" created="Wed, 4 Oct 2023 05:41:59 -0700"  >I attached a simplified version of the test and narrowed it down to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287087&quot; title=&quot;C2: perform SLP reduction analysis on-demand&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287087&quot;&gt;&lt;strike&gt;JDK-8287087&lt;/strike&gt;&lt;/a&gt; in JDK 21 b21:&lt;br/&gt;
&lt;br/&gt;
java -XX:+IgnoreUnrecognizedVMOptions -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,*Test*::test -XX:-TieredCompilation -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:CompileCommand=dontinline,TestSimple::dontInline -XX:UseAVX=2 TestSimple.java</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5117450">JDK-8322410</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118505">JDK-8323373</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120424">JDK-8325014</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120425">JDK-8325015</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120426">JDK-8325016</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5125344">JDK-8329145</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5125345">JDK-8329146</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127094">JDK-8330425</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127120">JDK-8330446</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5162839">JDK-8360669</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5162854">JDK-8360684</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114503">JDK-8319887</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5116902">JDK-8321987</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121337">JDK-8325738</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121338">JDK-8325739</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121339">JDK-8325740</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="5113674">JDK-8319209</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5075332">JDK-8287087</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5113367">JDK-8318959</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5113068">JDK-8318703</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="106678" name="FuzzerUtils.java" size="13240" author="thartmann" created="Wed, 4 Oct 2023 04:31:20 -0700"/>
                            <attachment id="106891" name="Manual.java" size="9629" author="rcastanedalo" created="Wed, 25 Oct 2023 03:14:05 -0700"/>
                            <attachment id="106677" name="Test.java" size="6719" author="thartmann" created="Wed, 4 Oct 2023 04:31:10 -0700"/>
                            <attachment id="106679" name="TestSimple.java" size="695" author="thartmann" created="Wed, 4 Oct 2023 05:41:05 -0700"/>
                            <attachment id="106856" name="TestSimpler.java" size="517" author="rcastanedalo" created="Thu, 19 Oct 2023 03:53:26 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33d2r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>