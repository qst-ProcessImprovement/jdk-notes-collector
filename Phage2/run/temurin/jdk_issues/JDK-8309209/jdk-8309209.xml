<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:59:15 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8309209] C2 failed &quot;assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8309209</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following closed test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/vm/compiler/regression/b4659732/b4659732.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75bea5d9-3494-44c5-b595-940c09953f94/runs/d47578f2-2d63-4496-ae16-7d9c1168ade8/workspace/open/src/hotspot/share/runtime/stackOverflow.cpp:148), pid=4102839, tid=4102861&lt;br/&gt;
#  assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0+25) (fastdebug build 21-ea+25-LTS-2192)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+25-LTS-2192, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x14fadf0]  StackOverflow::enable_stack_reserved_zone(bool)+0x160&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179842/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/feaef807-e9e4-4563-953a-43b337b4d31b/runs/4eaae39f-3447-4f6b-88b2-840fe0aebedb/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_vmTestbase_vm_compiler_regression/scratch/2/core.4102839)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S179842/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/feaef807-e9e4-4563-953a-43b337b4d31b/runs/4eaae39f-3447-4f6b-88b2-840fe0aebedb/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_vmTestbase_vm_compiler_regression/scratch/2/hs_err_pid4102839.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(1/176)----------&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM warning: Potentially dangerous stack overflow in ReservedStackAccess annotated method vm.compiler.regression.b4659732.b4659732.recurse()V [1]&lt;br/&gt;
----------rerun:(40/10340)*----------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack trace:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffffb44fcb00):  JavaThread &amp;quot;MainThread&amp;quot;        [_thread_in_Java, id=4102861, stack(0x0000ffff72fff000,0x0000ffff731ff000) (2048K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff72fff000,0x0000ffff731ff000],  sp=0x0000ffff7301c090,  free space=116k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x14fadf0]  StackOverflow::enable_stack_reserved_zone(bool)+0x160  (stackOverflow.cpp:148)&lt;br/&gt;
V  [libjvm.so+0x14a2648]  SharedRuntime::enable_stack_reserved_zone(JavaThread*)+0x58  (sharedRuntime.cpp:3348)&lt;br/&gt;
J 259 c2 vm.compiler.regression.b4659732.b4659732.recurse()V (31 bytes) @ 0x0000ffffa8d41f68 [0x0000ffffa8d407c0+0x00000000000017a8]&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (printing native stack (with source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75bea5d9-3494-44c5-b595-940c09953f94/runs/d47578f2-2d63-4496-ae16-7d9c1168ade8/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]&lt;br/&gt;
&lt;br/&gt;
Retrying call stack printing without source information...&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x14fadf0]  StackOverflow::enable_stack_reserved_zone(bool)+0x160  (stackOverflow.cpp:148)&lt;br/&gt;
V  [libjvm.so+0x14a2648]  SharedRuntime::enable_stack_reserved_zone(JavaThread*)+0x58&lt;br/&gt;
J 259 c2 vm.compiler.regression.b4659732.b4659732.recurse()V (31 bytes) @ 0x0000ffffa8d41f68 [0x0000ffffa8d407c0+0x00000000000017a8]&lt;br/&gt;
&lt;br/&gt;
[error occurred during error reporting (retry printing native stack (no source info)), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S105687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/75bea5d9-3494-44c5-b595-940c09953f94/runs/d47578f2-2d63-4496-ae16-7d9c1168ade8/workspace/open/src/hotspot/share/code/codeCache.inline.hpp:49)]</description>
                <environment></environment>
        <key id="5102222">JDK-8309209</key>
            <summary>C2 failed &quot;assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>stack</label>
                            <label>tier2</label>
                    </labels>
                <created>Wed, 31 May 2023 07:05:39 -0700</created>
                <updated>Tue, 9 Jan 2024 10:11:54 -0800</updated>
                            <resolved>Sun, 2 Jul 2023 21:24:58 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14623675" author="roboduke" created="Fri, 3 Nov 2023 09:09:36 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to handle the ReservedStackArea corner case for more platforms. Applies cleanly. Testing passes.</comment>
                            <comment id="14623056" author="roboduke" created="Wed, 1 Nov 2023 10:36:02 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/318&quot;&gt;https://git.openjdk.org/jdk21u/pull/318&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-01 17:30:50 +0000</comment>
                            <comment id="14593277" author="dukebot" created="Sun, 2 Jul 2023 21:24:57 -0700"  >Changeset: 52ee5700&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-03 04:23:58 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/52ee570025589d4d813ec4deae1f6133ca83156b&quot;&gt;https://git.openjdk.org/jdk/commit/52ee570025589d4d813ec4deae1f6133ca83156b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14592189" author="roboduke" created="Mon, 26 Jun 2023 23:31:16 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14669&quot;&gt;https://git.openjdk.org/jdk/pull/14669&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-27 06:12:47 +0000</comment>
                            <comment id="14592157" author="dholmes" created="Mon, 26 Jun 2023 18:12:25 -0700"  >It seems that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8146697&quot; title=&quot;VM crashes in test Test7005594&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8146697&quot;&gt;&lt;strike&gt;JDK-8146697&lt;/strike&gt;&lt;/a&gt; was only applied to x64 where the failure was seen, rather than being added to the same code on all platforms. The current situation seems very similar to that reported in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8146697&quot; title=&quot;VM crashes in test Test7005594&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8146697&quot;&gt;&lt;strike&gt;JDK-8146697&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14592156" author="dholmes" created="Mon, 26 Jun 2023 18:04:08 -0700"  >I have noticed what may be a critical different between Aarch64 and x64 in InterpreterMacroAssembler::remove_activation&lt;br/&gt;
&lt;br/&gt;
Here is the Aarch64 code:&lt;br/&gt;
&lt;br/&gt;
if (StackReservedPages &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// testing if reserved zone needs to be re-enabled&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Label no_reserved_zone_enabling;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// look for an overflow into the stack reserved zone, i.e.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// interpreter_frame_sender_sp &amp;lt;= JavaThread::reserved_stack_activation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ldr(rscratch1, Address(rthread, JavaThread::reserved_stack_activation_offset()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmp(rscratch2, rscratch1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;br(Assembler::LS, no_reserved_zone_enabling);&lt;br/&gt;
&lt;br/&gt;
and here is the x64:&lt;br/&gt;
&lt;br/&gt;
if (StackReservedPages &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// testing if reserved zone needs to be re-enabled&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Register rthread = LP64_ONLY(r15_thread) NOT_LP64(rcx);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Label no_reserved_zone_enabling;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NOT_LP64(get_thread(rthread);)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmpl(Address(rthread, JavaThread::stack_guard_state_offset()), StackOverflow::stack_guard_enabled);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcc(Assembler::equal, no_reserved_zone_enabling);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmpptr(rbx, Address(rthread, JavaThread::reserved_stack_activation_offset()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcc(Assembler::lessEqual, no_reserved_zone_enabling);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
The Aarch64 code is missing the check of the JavaThread::stack_guard_state, which IIUC means on x64 we would jump over the SharedRuntime::enable_stack_reserved_zone call that fails on Aarch64.</comment>
                            <comment id="14591125" author="dlong" created="Wed, 21 Jun 2023 11:40:58 -0700"  >JavaThread::_stack_overflow_state._reserved_stack_activation being non-NULL should be another indicator. &lt;br/&gt;
</comment>
                            <comment id="14590843" author="thartmann" created="Wed, 21 Jun 2023 00:00:15 -0700"  >I&amp;#39;m lacking the expertise in the relevant code here ([~fparain], any thoughts?). [~dlong] it sounds like your theory could be validated with a test that RSA annotates a method that triggers a stack overflow, forces inlining and triggers a second stack overflow. </comment>
                            <comment id="14590805" author="dlong" created="Tue, 20 Jun 2023 20:35:51 -0700"  >I&amp;#39;m guessing the problem is the way RSA is implemented for compiled frames with inlining.  We probably got a 1st stack overflow in an inlined RSA method, unguarded the reserved area, then continued running.  Because the RSA boundary is inlined, we don&amp;#39;t re-protect/disable the area until the caller compiled method returns.  So when we get a 2nd stack overflow with the reserved area still enabled, we hit the assert.  If that&amp;#39;s what is happening, then it seems like a fundamental design problem and could happen on other platforms, not just aarch64.</comment>
                            <comment id="14590363" author="dholmes" created="Mon, 19 Jun 2023 18:46:04 -0700"  >I&amp;#39;m not sure the amount of stack reserved is what is at issue here but it certainly will be a problem in general. But how can you know how much stack to reserve? We set the reservation limits based on experimentation with the intended RSA methods. If these are inlined into other methods then the required stack is non-deterministic in general.</comment>
                            <comment id="14590262" author="thartmann" created="Mon, 19 Jun 2023 06:08:41 -0700"  >&amp;gt; I think in general we should never inline a RSA annotated method. [~thartmann] what are your thoughts on that?&lt;br/&gt;
&lt;br/&gt;
It sounds like these RSA annotated methods are often performance critical and preventing them from inlining will definitely have a negative effect on performance. But couldn&amp;#39;t we reserve more stack for them even when inlining?</comment>
                            <comment id="14590177" author="dholmes" created="Mon, 19 Jun 2023 00:32:28 -0700"  >We can see from:&lt;br/&gt;
&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM warning: Potentially dangerous stack overflow in ReservedStackAccess annotated method vm.compiler.regression.b4659732.b4659732.recurse()V [1] &lt;br/&gt;
&lt;br/&gt;
that inlining is again the problem, as the recurse() method is not a RSA annotated method. The real RSA method is likely within the println call chain, or the string concatenation call chain.&lt;br/&gt;
&lt;br/&gt;
Exactly what goes wrong is hard to determine. The failure is only seen on Aarch64 so I can&amp;#39;t do any local testing or debugging.&lt;br/&gt;
&lt;br/&gt;
I think in general we should never inline a RSA annotated method. [~thartmann] what are your thoughts on that?&lt;br/&gt;
&lt;br/&gt;
Edit: note that I previously indicated that not inlining RSA methods could be bad for performance, but perhaps that needs to be investigated?</comment>
                            <comment id="14587430" author="lfoltan" created="Tue, 6 Jun 2023 11:17:44 -0700"  >ILW = HLM = P3</comment>
                            <comment id="14586511" author="thartmann" created="Thu, 1 Jun 2023 21:58:49 -0700"  >[~dholmes] okay, thanks for the background information!</comment>
                            <comment id="14586484" author="dholmes" created="Thu, 1 Jun 2023 17:21:24 -0700"  >[~thartmann] the crash in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8259504&quot; title=&quot;runtime/ReservedStack/ReservedStackTest.java crashes with assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8259504&quot;&gt;&lt;strike&gt;JDK-8259504&lt;/strike&gt;&lt;/a&gt; wouldn&amp;#39;t reproduce and in particular did not reproduce after extended testing of the modified test from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8231031&quot; title=&quot;runtime/ReservedStack/ReservedStackTest.java fails after jsr166 refresh&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8231031&quot;&gt;&lt;strike&gt;JDK-8231031&lt;/strike&gt;&lt;/a&gt; so was flagged as a duplicate. But this was not a simple test fix. Basically ReservedStackAccess doesn&amp;#39;t work correctly in the presence of JIT inlining and that inlining is what was disabled by the test change.&lt;br/&gt;
&lt;br/&gt;
Stackoverflow errors are highly problematic, but I will try to take a look at this particular failure.</comment>
                            <comment id="14586227" author="thartmann" created="Thu, 1 Jun 2023 02:01:35 -0700"  >I&amp;#39;m not able to reproduce this and I don&amp;#39;t think this is a JIT issue. Moving to hotspot/runtime for their evaluation.</comment>
                            <comment id="14586208" author="thartmann" created="Thu, 1 Jun 2023 01:01:07 -0700"  >Looks similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8259504&quot; title=&quot;runtime/ReservedStack/ReservedStackTest.java crashes with assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8259504&quot;&gt;&lt;strike&gt;JDK-8259504&lt;/strike&gt;&lt;/a&gt; which was closed as duplicate of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8231031&quot; title=&quot;runtime/ReservedStack/ReservedStackTest.java fails after jsr166 refresh&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8231031&quot;&gt;&lt;strike&gt;JDK-8231031&lt;/strike&gt;&lt;/a&gt; but I don&amp;#39;t understand how that test fix would address the assert (paging [~dholmes]).</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5114321">JDK-8319721</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118489">JDK-8323357</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4860495">JDK-8146697</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5038974">JDK-8259504</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103498">JDK-8310293</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31qnv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>