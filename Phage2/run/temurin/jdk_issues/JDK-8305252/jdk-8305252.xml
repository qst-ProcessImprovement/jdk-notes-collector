<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 18:11:47 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8305252] make_method_handle_intrinsic may call java code under a lock</title>
                <link>https://bugs.openjdk.org/browse/JDK-8305252</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>`SystemDictionary::find_method_handle_intrinsic` calls `Method::make_method_handle_intrinsic` under the `InvokeMethodTable_lock`  lock. The correctness is motivated with a comment:&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// This function could get an OOM but it is safe to call inside of a lock because&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// throwing OutOfMemoryError doesn&amp;#39;t call Java code.&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
However `Method::make_adapters` will throw a `VirtualMachineError` via &lt;br/&gt;
`THROW_MSG_NULL(vmSymbols::java_lang_VirtualMachineError(), &amp;quot;Out of space in CodeCache for adapters&amp;quot;);` which will call java code.&lt;br/&gt;
&lt;br/&gt;
Fastdebug linux x86_64 stack trace:&lt;br/&gt;
```&lt;br/&gt;
V  [libjvm.so+0x10a4ab0]  JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;amp;, Handle, JavaValue*, JavaThread*)+0xa0  (javaCalls.cpp:60)&lt;br/&gt;
V  [libjvm.so+0x10a6764]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x1a4  (javaCalls.cpp:394)&lt;br/&gt;
V  [libjvm.so+0x10a8a07]  JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x317  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0x10a92f9]  JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, JavaThread*)+0xf9  (javaCalls.cpp:295)&lt;br/&gt;
V  [libjvm.so+0xd71dca]  Exceptions::new_exception(JavaThread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle)+0x22a  (exceptions.cpp:285)&lt;br/&gt;
V  [libjvm.so+0xd72022]  Exceptions::new_exception(JavaThread*, Symbol*, Symbol*, JavaCallArguments*, Handle, Handle, Handle)+0x62  (exceptions.cpp:306)&lt;br/&gt;
V  [libjvm.so+0xd72df4]  Exceptions::new_exception(JavaThread*, Symbol*, char const*, Handle, Handle, Handle, Exceptions::ExceptionMsgToUtf8Mode)+0x604  (exceptions.cpp:389)&lt;br/&gt;
V  [libjvm.so+0xd76e68]  Exceptions::_throw_msg(JavaThread*, char const*, int, Symbol*, char const*, Handle, Handle)+0x198  (exceptions.cpp:193)&lt;br/&gt;
V  [libjvm.so+0xd7718e]  Exceptions::_throw_msg(JavaThread*, char const*, int, Symbol*, char const*)+0x1ee  (exceptions.cpp:232)&lt;br/&gt;
V  [libjvm.so+0x167cb19]  Method::make_adapters(methodHandle const&amp;amp;, JavaThread*)+0x129  (method.cpp:1258)&lt;br/&gt;
V  [libjvm.so+0x167cc3b]  Method::link_method(methodHandle const&amp;amp;, JavaThread*)+0x11b  (method.cpp:1234)&lt;br/&gt;
V  [libjvm.so+0x16839fd]  Method::make_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x73d  (method.cpp:1484)&lt;br/&gt;
V  [libjvm.so+0x1a983ed]  SystemDictionary::find_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x19d  (systemDictionary.cpp:1963)&lt;br/&gt;
```</description>
                <environment></environment>
        <key id="5097483">JDK-8305252</key>
            <summary>make_method_handle_intrinsic may call java code under a lock</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="coleenp">Coleen Phillimore</assignee>
                                    <reporter username="aboldtch">Axel Boldt-Christmas</reporter>
                        <labels>
                            <label>hashtable</label>
                    </labels>
                <created>Thu, 30 Mar 2023 06:33:21 -0700</created>
                <updated>Mon, 1 May 2023 10:06:53 -0700</updated>
                            <resolved>Mon, 24 Apr 2023 05:57:43 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14576050" author="dukebot" created="Mon, 24 Apr 2023 05:57:42 -0700"  >Changeset: 7400aff3&lt;br/&gt;
Author:    Coleen Phillimore &amp;lt;&lt;a href=&apos;mailto:coleenp@openjdk.org&apos;&gt;coleenp@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-24 12:55:15 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/7400aff3b8a0294dcbb6e89e9d8aad984f29fe92&quot;&gt;https://git.openjdk.org/jdk/commit/7400aff3b8a0294dcbb6e89e9d8aad984f29fe92&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14575607" author="dholmes" created="Thu, 20 Apr 2023 19:02:57 -0700"  >FTR the &amp;quot;back-off and delete&amp;quot; approach is now discarded as the deletion is problematc.</comment>
                            <comment id="14575606" author="dholmes" created="Thu, 20 Apr 2023 18:56:38 -0700"  >I don&amp;#39;t see any reason the code pointed out in the description has to throw a newly create VME instead of just an OOME, and we can throw OOME without executing Java code - though we may need to expend some effort to force that (it would be a pre-allocated, probably stackless OOME).&lt;br/&gt;
&lt;br/&gt;
Alternatively, if the only reason this Method/ConstMethod code is using TRAPS is to communicate OOM conditions, then perhaps we could stop doing that and just return null on OOM and then let the top-level code throw the actual OOME? It forsakes the convenience of using CHECK of course.&lt;br/&gt;
&lt;br/&gt;
Or we use a pre-allocated stackless OOME and then let the top-level code replace it with a newly created OOME - outside the locked region. The C++ stack is of no relevance to the OOME so it doesn&amp;#39;t matter at what level we construct it.</comment>
                            <comment id="14575492" author="roboduke" created="Thu, 20 Apr 2023 11:38:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13307&quot;&gt;https://git.openjdk.org/jdk/pull/13307&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-03 19:30:49 +0000</comment>
                            <comment id="14574700" author="roboduke" created="Tue, 18 Apr 2023 08:31:01 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13308&quot;&gt;https://git.openjdk.org/jdk/pull/13308&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-03 19:33:27 +0000</comment>
                            <comment id="14574151" author="jvernee" created="Mon, 17 Apr 2023 05:59:38 -0700"  >[~coleenp] Thanks. I&amp;#39;m gonna dig into the usage of MHN_resolve_Mem, and will try to set up a more targeted micro benchmark to measure this.</comment>
                            <comment id="14573675" author="coleenp" created="Thu, 13 Apr 2023 12:45:56 -0700"  >[~jvernee] Here&amp;#39;s a CHT version of this change if you want to test out your read lock theory.  CHT has all this boilerplate code and is more complicated so if it doesn&amp;#39;t help, we&amp;#39;d rather use ResourceHash.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/13468&quot;&gt;https://github.com/openjdk/jdk/pull/13468&lt;/a&gt;</comment>
                            <comment id="14571823" author="coleenp" created="Tue, 4 Apr 2023 14:14:51 -0700"  >&amp;gt; Any way, whether dropping the lock altogether would help is mostly a hunch I have, so it seems better to address it separately.&lt;br/&gt;
&lt;br/&gt;
Yes.&lt;br/&gt;
&lt;br/&gt;
If you want file an RFE and some directions to observe performance data (if possible), we&amp;#39;ll have a look at it.&lt;br/&gt;
You could observe the value of dropping the lock for read if you compare the results with JDK 17.  That version had lock free reads on this table.  There&amp;#39;s a lot of other differences so maybe it&amp;#39;s apples to oranges, but it would be an interesting data point.</comment>
                            <comment id="14571811" author="jvernee" created="Tue, 4 Apr 2023 13:24:04 -0700"  >Sorry, what I should have said is: 2/3rds of the time spent in find_method_handle_intrinic is spent outside of make_method_handle_intrinsic (which takes up the other 1/3rd), and that share grows if I run the benchmark for longer. So, I think that time can be mostly attributed to looking up existing entries in the cache and then returning early.&lt;br/&gt;
&lt;br/&gt;
I think that if taking the global lock for the initial lookup can be avoided, that might potentially speed this code up (i.e. make the cache hit fast-path faster). We&amp;#39;d get:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lookup -&amp;gt; if success, return method&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;create method handle intrinsic -&amp;gt; set_adapter, etc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CAS new method into the table. Delete if another thread beat us.&lt;br/&gt;
&lt;br/&gt;
Which seems like it would be possible if _invoke_method_intrinsic_table was switched to a concurrent hash table.&lt;br/&gt;
&lt;br/&gt;
FWIW, most of the linking in that benchmark happens on a single thread, so I think that&amp;#39;s why dropping the lock just for make_method_handle_intrinsic doesn&amp;#39;t have much effect. (I&amp;#39;ve parallelized the fuzzer in the past, but it didn&amp;#39;t have much effect, possibly because of the global MH intrinsic and adapter locks)&lt;br/&gt;
&lt;br/&gt;
Any way, whether dropping the lock altogether would help is mostly a hunch I have, so it seems better to address it separately.</comment>
                            <comment id="14571760" author="coleenp" created="Tue, 4 Apr 2023 10:42:38 -0700"  >I have to admit, that I have no idea how to read these flamegraphs.  It&amp;#39;s disappointing that it doesn&amp;#39;t help here.  The old code did:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock global lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lookup -&amp;gt; if success, return Method;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;create method handle intrinsic -&amp;gt; set_adapter, etc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unlock&lt;br/&gt;
&lt;br/&gt;
The new version(s) do a variation of:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock global lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lookup -&amp;gt; if success, return method&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unlock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;create method handle intrinsic -&amp;gt; set_adapter, etc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try to add new method if not added by racing thread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unlock&lt;br/&gt;
&lt;br/&gt;
So the current version has a global lock around all the create method handle intrinsic code, which is the thing you said takes all the time.</comment>
                            <comment id="14571717" author="jvernee" created="Tue, 4 Apr 2023 08:38:18 -0700"  >I tested the different versions and don&amp;#39;t really see a big difference between them.&lt;br/&gt;
&lt;br/&gt;
baseline: &lt;a href=&quot;https://cr.openjdk.org/~jvernee/link_mh/fuzzer_baseline.html&quot;&gt;https://cr.openjdk.org/~jvernee/link_mh/fuzzer_baseline.html&lt;/a&gt;&lt;br/&gt;
racy: &lt;a href=&quot;https://cr.openjdk.org/~jvernee/link_mh/fuzzer_racy.html&quot;&gt;https://cr.openjdk.org/~jvernee/link_mh/fuzzer_racy.html&lt;/a&gt; (&lt;a href=&quot;https://github.com/openjdk/jdk/pull/13308&quot;&gt;https://github.com/openjdk/jdk/pull/13308&lt;/a&gt;)&lt;br/&gt;
exclusive: &lt;a href=&quot;https://cr.openjdk.org/~jvernee/link_mh/fuzzer_excl.html&quot;&gt;https://cr.openjdk.org/~jvernee/link_mh/fuzzer_excl.html&lt;/a&gt; (&lt;a href=&quot;https://github.com/openjdk/jdk/pull/13307&quot;&gt;https://github.com/openjdk/jdk/pull/13307&lt;/a&gt;)&lt;br/&gt;
&lt;br/&gt;
(In the flame graph you&amp;#39;ll want to look for one of the red &amp;#39;MHN_resolve_mem&amp;#39; peaks)&lt;br/&gt;
&lt;br/&gt;
Since all versions still grab a lock for the lookup, this seems expected.&lt;br/&gt;
&lt;br/&gt;
(I&amp;#39;ve also tried, unsuccessfully so far, to isolate this code path in a simpler benchmark. It seems hard to isolate the exact code path without spinning a bunch of bytecode, due to caching in the MethodHandle implementation).&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14571510" author="coleenp" created="Mon, 3 Apr 2023 15:55:57 -0700"  >The performance of this code is not in the scope but it is of interest.  Both fixes above might be good for performance because we drop the lock for make_method_handle_intrinsic ... get_adapter.  The current code serializes this with a global lock.  Can you try my fix either A or B above?</comment>
                            <comment id="14571493" author="jvernee" created="Mon, 3 Apr 2023 14:04:54 -0700"  >generate_native_wrapper barely takes any time at all. Most of the time is spent in find_method_handle_intrinsic, of which about 1/3rd is spent in make_method_handle_intrinsic. Off that 1/3rd most of the time is spent in get_adapter, and about a quarter of the time spent in get_adapter is spent in create-adapter. So, it seems that lookups take a significant amount of time. (see: &lt;a href=&quot;https://cr.openjdk.org/~jvernee/resolve_profile.png&quot;&gt;https://cr.openjdk.org/~jvernee/resolve_profile.png&lt;/a&gt; )&lt;br/&gt;
&lt;br/&gt;
This is a profile of a fuzzer I built for Panama, which creates lots of MethodHandles with 0-30 parameters of mostly different shapes.&lt;br/&gt;
&lt;br/&gt;
Though, on second thought, improving the performance of this code is perhaps not in the scope of the current issue (and probably needs more investigation too...). So, feel free to disregard that aspect.</comment>
                            <comment id="14571476" author="jvernee" created="Mon, 3 Apr 2023 13:17:58 -0700"  >It seems like the racing version has the potential to be lock-free altogether (maybe using ConcurrentHashTable?) Threads can race and CAS the result into the table, or back off and delete.&lt;br/&gt;
&lt;br/&gt;
That would also avoid taking a lock for the common case where a Method* already exists. This code (SystemDictionary::find_method_handle_intrinsic) is quite visible in profiles that create a lot of MethodHandles. It accounts for most of the time spent in `MethodHandleNatives::resolve` (Java), of which less than half is spent in `make_method_handle_intrinsic`, so it seems that lookups take up quite a bit of time as well (most of the rest of the time is spent in `AdapterHandlerLibrary::get_adapter`). Avoiding the lock might help.&lt;br/&gt;
&lt;br/&gt;
My $0.02&lt;br/&gt;
&lt;br/&gt;
P.S. Maybe a hybrid mode is also possible: lock-free read from (concurrent) map, if null: grab a lock and wait for 1 thread to generate the thing. Avoids taking the lock for reads in most cases, but doesn&amp;#39;t allow racing for creation.</comment>
                            <comment id="14571469" author="coleenp" created="Mon, 3 Apr 2023 12:41:46 -0700"  >Which draft PR change is worse?&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/13307&quot;&gt;https://github.com/openjdk/jdk/pull/13307&lt;/a&gt;&lt;br/&gt;
or&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/13308&quot;&gt;https://github.com/openjdk/jdk/pull/13308&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
We have to give up the Mutex to create a method handle intrinsic function, so have to have a way to deal with racing threads doing the same thing, which isn&amp;#39;t very atypical.&lt;br/&gt;
&lt;br/&gt;
One change has some tortured logic to add the entry, create the Method and then add the method afterwards.  Racing threads wait for the first one.  The other simply deletes the Method created by the losing thread, except it has to call nmethod-&amp;gt;flush() and add things to the CLD-&amp;gt;deallocate_list which is something we have to clean up in a safepoint.&lt;br/&gt;
</comment>
                            <comment id="14571052" author="coleenp" created="Fri, 31 Mar 2023 10:24:44 -0700"  >The OOM comment is a lie too.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="5099565">JDK-8306950</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5099473">JDK-8306874</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30yaz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17002"><![CDATA[Fix failed]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>