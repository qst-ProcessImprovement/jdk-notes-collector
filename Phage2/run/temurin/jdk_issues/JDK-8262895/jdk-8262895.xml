<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:45:29 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8262895] [macos_aarch64] runtime/CompressedOops/CompressedClassPointers.java fails with &apos;Narrow klass base: 0x0000000000000000&apos; missing from stdout/stderr</title>
                <link>https://bugs.openjdk.org/browse/JDK-8262895</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Testing &lt;a href=&quot;https://github.com/openjdk/jdk/pull/2200&quot;&gt;https://github.com/openjdk/jdk/pull/2200&lt;/a&gt; reveals this failure in runtime/CompressedOops/CompressedClassPointers.java:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;stdout: [[0.011s][info][gc,metaspace] Compressed class space mapped at: 0x0000007000000000-0x0000007040000000, reserved size: 1073741824&lt;br/&gt;
[0.011s][info][gc,metaspace] Narrow klass base: 0x0000007000000000, Narrow klass shift: 0, Narrow klass range: 0x40000000&lt;br/&gt;
];&lt;br/&gt;
&amp;nbsp;stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Shared spaces are not supported in this VM&lt;br/&gt;
java version &amp;quot;17-internal&amp;quot; 2021-09-14 LTS&lt;br/&gt;
Java(TM) SE Runtime Environment (fastdebug build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 17-internal+0-LTS-2021-02-27-1954067.mikael.vidstedt.jdk-macosjib, mixed mode)&lt;br/&gt;
]&lt;br/&gt;
&amp;nbsp;exitValue = 0&lt;br/&gt;
&lt;br/&gt;
java.lang.RuntimeException: &amp;#39;Narrow klass base: 0x0000000000000000&amp;#39; missing from stdout/stderr &lt;br/&gt;
&lt;br/&gt;
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:206)&lt;br/&gt;
	at CompressedClassPointers.largeHeapAbove32GTest(CompressedClassPointers.java:128)&lt;br/&gt;
	at CompressedClassPointers.main(CompressedClassPointers.java:324)&lt;br/&gt;
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:831)&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5043539">JDK-8262895</key>
            <summary>[macos_aarch64] runtime/CompressedOops/CompressedClassPointers.java fails with &apos;Narrow klass base: 0x0000000000000000&apos; missing from stdout/stderr</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="matsaave">Matias Saavedra Silva</assignee>
                                    <reporter username="gziemski">Gerard Ziemski</reporter>
                        <labels>
                            <label>memory</label>
                            <label>noreg-self</label>
                            <label>starter</label>
                    </labels>
                <created>Tue, 2 Mar 2021 14:14:12 -0800</created>
                <updated>Mon, 26 Aug 2024 17:16:01 -0700</updated>
                            <resolved>Mon, 27 Feb 2023 07:54:40 -0800</resolved>
                                    <version>17</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14700777" author="roboduke" created="Mon, 26 Aug 2024 17:16:01 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2825&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2825&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-27 00:11:42 +0000</comment>
                            <comment id="14563078" author="dukebot" created="Mon, 27 Feb 2023 07:54:38 -0800"  >Changeset: f5a12768&lt;br/&gt;
Author:    Matias Saavedra Silva &amp;lt;&lt;a href=&apos;mailto:matsaave@openjdk.org&apos;&gt;matsaave@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Coleen Phillimore &amp;lt;&lt;a href=&apos;mailto:coleenp@openjdk.org&apos;&gt;coleenp@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-27 15:53:33 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/f5a12768fba4a6508fb0359aedd608fd9d6d9024&quot;&gt;https://git.openjdk.org/jdk/commit/f5a12768fba4a6508fb0359aedd608fd9d6d9024&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14555167" author="roboduke" created="Fri, 27 Jan 2023 12:54:49 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12234&quot;&gt;https://git.openjdk.org/jdk/pull/12234&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-26 20:34:32 +0000</comment>
                            <comment id="14426288" author="gziemski" created="Tue, 8 Jun 2021 08:38:28 -0700"  >The test seems unreliable on macOS in general, regardless of the underlaying hardware architecture, i.e. x86_64 or aarch64&lt;br/&gt;
&lt;br/&gt;
Not sure how useful it is on macOS because of that, but also in a big picture kind of way, why do we have such test in the first place. Thomas Stuffe said this in his review of a related issue &lt;a href=&quot;https://github.com/openjdk/jdk/pull/3865#discussion_r630171134:&quot;&gt;https://github.com/openjdk/jdk/pull/3865#discussion_r630171134:&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Arguably we may even completely exclude the test, like I do for AIX already. Its important for Windows, somewhat less important for Linux, and covers other platforms only for completeness sake.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
So the question is: is it the case here as well that the test is of a less significance on macOS compared to Linux/Windows?&lt;br/&gt;
&lt;br/&gt;
Moving out of JDK17.</comment>
                            <comment id="14425455" author="gziemski" created="Fri, 4 Jun 2021 11:26:19 -0700"  >I get the same failure even on x86_64 mac (after running many processes for a while). Rebooting the machine makes it work for an undermined period of time, till the OS VM space gets fragmented enough (?) again.</comment>
                            <comment id="14406779" author="akozlov" created="Fri, 12 Mar 2021 06:03:01 -0800"  >For the bookkeeping, the change &lt;a href=&quot;https://github.com/openjdk/jdk/pull/2200/commits/d1783762d9a9b29e9fdf6784a911d6dfb31b0479&quot;&gt;https://github.com/openjdk/jdk/pull/2200/commits/d1783762d9a9b29e9fdf6784a911d6dfb31b0479&lt;/a&gt;</comment>
                            <comment id="14405842" author="vkempik" created="Tue, 9 Mar 2021 04:55:23 -0800"  >Thanks for analysis Richard, we will disable the subtest on mac_aarch64 for now</comment>
                            <comment id="14405267" author="rrich" created="Fri, 5 Mar 2021 07:10:18 -0800"  >There seems to be an issue with mapping the heap at preferred addresses[1] on macos_aarch64.&lt;br/&gt;
&lt;br/&gt;
With additional tracing and setting -XX:HeapSearchSteps=40 we see that the vm&lt;br/&gt;
fails to map the heap at one of the preferred addresses (thanks Vladimir for&lt;br/&gt;
doing the test):&lt;br/&gt;
&lt;br/&gt;
images/jdk/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx31g -XX:-UseAOT -Xlog:gc+metaspace=trace,cds=trace,heap+gc+exit=info,gc+heap+coops=trace -Xshare:off -XX:+VerifyBeforeGC -XX:HeapSearchSteps=40 -version&lt;br/&gt;
OpenJDK 64-Bit Server VM warning: Shared spaces are not supported in this VM&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000001000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000001800000000 heap of size 0x7c1000000&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000002000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000004000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0000005000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0008000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.005s][trace][gc,heap,coops] Trying to allocate at address 0x0010000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0018000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0020000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0080000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0100000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.006s][trace][gc,heap,coops] Trying to allocate at address 0x0110000000000000 heap of size 0x7c1000000&lt;br/&gt;
[0.006s][trace][gc,heap,coops] Trying to allocate at address NULL heap of size 0x7c1000000&lt;br/&gt;
[0.006s][debug][gc,heap,coops] Protected page at the reserved heap base: 0x0000000280000000 / 16777216 bytes&lt;br/&gt;
[0.006s][debug][gc,heap,coops] Heap address: 0x0000000281000000, size: 31744 MB, Compressed Oops mode: Non-zero based: 0x0000000280000000, Oop shift amount: 3&lt;br/&gt;
[0.007s][info ][gc,metaspace ] Compressed class space mapped at: 0x0000007000000000-0x0000007040000000, reserved size: 1073741824&lt;br/&gt;
[0.007s][info ][gc,metaspace ] Narrow klass base: 0x0000007000000000, Narrow klass shift: 0, Narrow klass range: 0x40000000&lt;br/&gt;
openjdk version &amp;quot;17-internal&amp;quot; 2021-09-14&lt;br/&gt;
OpenJDK Runtime Environment (build 17-internal+0-adhoc.tester.jdk)&lt;br/&gt;
OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.tester.jdk, mixed mode)&lt;br/&gt;
[0,044s][info ][gc,heap,exit ] Heap&lt;br/&gt;
[0,044s][info ][gc,heap,exit ] garbage-first heap total 262144K, used 1647K [0x0000000281000000, 0x0000000a41000000)&lt;br/&gt;
[0,044s][info ][gc,heap,exit ] region size 16384K, 1 young (16384K), 0 survivors (0K)&lt;br/&gt;
[0,044s][info ][gc,heap,exit ] Metaspace used 3401K, committed 3456K, reserved 1056768K&lt;br/&gt;
[0,044s][info ][gc,heap,exit ] class space used 267K, committed 320K, reserved 1048576K&lt;br/&gt;
&lt;br/&gt;
Finally it is mapped at 10GB (0x0000000281000000), leaving hardly room for a 4GB aligned[2] compressed class space below 32G. And indeed we get a compressed class space with an encoding base that is not zero and largeHeapAbove32GTest fails then.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
[1] get_attach_addresses_for_disjoint_mode(): &lt;a href=&quot;https://github.com/openjdk/jdk/blob/8d3de4b1bdb5dc13bb7724596dc2123ba05bbb81/src/hotspot/share/memory/virtualspace.cpp#L477&quot;&gt;https://github.com/openjdk/jdk/blob/8d3de4b1bdb5dc13bb7724596dc2123ba05bbb81/src/hotspot/share/memory/virtualspace.cpp#L477&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
[2] On aarch64 the encoding base has to be 4GB aligned. Unfortunately the 4GB alignment is enforced to strictly on the start address of the compressed class space instead of enforcing it on the encoding base. See &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8258756&quot; title=&quot;AArch64: can&amp;#39;t get compressed class pointers with unscaled encoding.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8258756&quot;&gt;&lt;strike&gt;JDK-8258756&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
</comment>
                            <comment id="14405050" author="vkempik" created="Thu, 4 Mar 2021 06:12:18 -0800"  >so it fails only in one subtest , rest of subtests are working fine&lt;br/&gt;
&lt;br/&gt;
at CompressedClassPointers.largeHeapAbove32GTest(CompressedClassPointers.java:128)&lt;br/&gt;
&lt;br/&gt;
this subtest was added as part of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8258576&quot; title=&quot;Try to get zerobased CCS if heap is above 32 and CDS is disabled&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8258576&quot;&gt;&lt;strike&gt;JDK-8258576&lt;/strike&gt;&lt;/a&gt; just recently</comment>
                            <comment id="14404903" author="vkempik" created="Wed, 3 Mar 2021 10:14:03 -0800"  >That test should probably be disabled on mac_aarch64 same way it was disabled on windows ( &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8234058&quot;&gt;https://bugs.openjdk.java.net/browse/JDK-8234058&lt;/a&gt; ) due to ASLR</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5037687">JDK-8258576</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5037927">JDK-8258756</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5004290">JDK-8234058</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2rtyz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17349"><![CDATA[b12]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>