<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:42:12 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8304147] JVM crash during shutdown when dumping dynamic archive</title>
                <link>https://bugs.openjdk.org/browse/JDK-8304147</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>I came across an intermittent issue where the JVM is crashing when dumping dynamic archive.&lt;br/&gt;
Analyzing the logs and core dump indicate there is a race condition between the Signal handler thread and the DestroyJavaVM thread for global data structures in ClassPrelinker.&lt;br/&gt;
&lt;br/&gt;
Thread stack of the DestroyJavaVM thread at the time of crash:&lt;br/&gt;
&lt;br/&gt;
Thread 1 (Thread 0x7f5ca7f68700 (LWP 1878717)):&lt;br/&gt;
&lt;br/&gt;
&amp;lt;signal handling frames are removed&amp;gt;&lt;br/&gt;
#7  &amp;lt;signal handler called&amp;gt;&lt;br/&gt;
#8  ResourceHashtableBase&amp;lt;FixedResourceHashtableStorage&amp;lt;15889u, InstanceKlass*, bool&amp;gt;, InstanceKlass*, bool, (AnyObj::allocation_type)2, (MEMFLAGS)13, &amp;amp;(unsigned int primitive_hash&amp;lt;InstanceKlass*&amp;gt;(InstanceKlass* const&amp;amp;)), &amp;amp;(bool primitive_equals&amp;lt;InstanceKlass*&amp;gt;(InstanceKlass* const&amp;amp;, InstanceKlass* const&amp;amp;))&amp;gt;::lookup_node (key=&amp;lt;synthetic pointer&amp;gt;: &amp;lt;optimized out&amp;gt;, hash=18926782, this=0x0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at src/hotspot/share/utilities/resourceHash.hpp:83&lt;br/&gt;
#9  ResourceHashtableBase&amp;lt;FixedResourceHashtableStorage&amp;lt;15889u, InstanceKlass*, bool&amp;gt;, InstanceKlass*, bool, (AnyObj::allocation_type)2, (MEMFLAGS)13, &amp;amp;(unsigned int primitive_hash&amp;lt;InstanceKlass*&amp;gt;(InstanceKlass* const&amp;amp;)), &amp;amp;(bool primitive_equals&amp;lt;InstanceKlass*&amp;gt;(InstanceKlass* const&amp;amp;, InstanceKlass* const&amp;amp;))&amp;gt;::put_if_absent (p_created=&amp;lt;synthetic pointer&amp;gt;, key=&amp;lt;synthetic pointer&amp;gt;: &amp;lt;optimized out&amp;gt;, this=0x0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at src/hotspot/share/utilities/resourceHash.hpp:168&lt;br/&gt;
#10 ClassPrelinker::dumptime_resolve_constants (ik=ik@entry=0x80100d670, __the_thread__=__the_thread__@entry=0x7f5ca0029f10) at src/hotspot/share/cds/classPrelinker.cpp:125&lt;br/&gt;
#11 0x00007f5ca6708b14 in MetaspaceShared::link_class_for_cds (__the_thread__=0x7f5ca0029f10, ik=0x80100d670) at src/hotspot/share/cds/metaspaceShared.cpp:621&lt;br/&gt;
#12 MetaspaceShared::link_shared_classes (jcmd_request=jcmd_request@entry=false, __the_thread__=__the_thread__@entry=0x7f5ca0029f10) at src/hotspot/share/cds/metaspaceShared.cpp:651&lt;br/&gt;
#13 0x00007f5ca625f49a in DynamicArchive::prepare_for_dump_at_exit () at src/hotspot/share/cds/dynamicArchive.cpp:383&lt;br/&gt;
#14 0x00007f5ca63fd6cd in JavaThread::invoke_shutdown_hooks (this=this@entry=0x7f5ca0029f10) at src/hotspot/share/runtime/javaThread.cpp:2038&lt;br/&gt;
#15 0x00007f5ca6a2778d in Threads::destroy_vm () at src/hotspot/share/runtime/threads.cpp:1081&lt;br/&gt;
#16 0x00007f5ca647af3b in jni_DestroyJavaVM_inner (vm=&amp;lt;optimized out&amp;gt;) at src/hotspot/share/prims/jni.cpp:3735&lt;br/&gt;
#17 jni_DestroyJavaVM (vm=&amp;lt;optimized out&amp;gt;) at src/hotspot/share/prims/jni.cpp:3747&lt;br/&gt;
#18 0x00007f5ca792eb44 in JavaMain (_args=&amp;lt;optimized out&amp;gt;) at src/java.base/share/native/libjli/java.c:555&lt;br/&gt;
#19 0x00007f5ca7932af9 in ThreadJavaMain (args=&amp;lt;optimized out&amp;gt;) at src/java.base/unix/native/libjli/java_md.c:650&lt;br/&gt;
#20 0x00007f5ca77131cf in start_thread () from /lib64/libpthread.so.0&lt;br/&gt;
#21 0x00007f5ca717bdd3 in clone () from /lib64/libc.so.6&lt;br/&gt;
&lt;br/&gt;
Thread stack of the signal handler thread at the time of crash:&lt;br/&gt;
&lt;br/&gt;
Thread 2 (Thread 0x7f5c4e420700 (LWP 1879009)):&lt;br/&gt;
#0  0x00007f5ca771ca07 in write () from /lib64/libpthread.so.0&lt;br/&gt;
#1  0x00007f5ca6799a38 in os::write (fd=1, buf=0x7f5ca017af90, nBytes=2) at src/hotspot/os/posix/os_posix.cpp:776&lt;br/&gt;
#2  0x00007f5ca679f16e in defaultStream::write (this=0x7f5ca0000b70, s=0x7f5ca017af90 &amp;quot;of&amp;quot;, len=2) at src/hotspot/share/utilities/ostream.cpp:895&lt;br/&gt;
#3  0x00007f5ca679ca02 in outputStream::do_vsnprintf_and_write_with_automatic_buffer (this=this@entry=0x7f5ca0000b70, format=&amp;lt;optimized out&amp;gt;, ap=ap@entry=0x7f5c4e41f2e8, add_cr=add_cr@entry=false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at src/hotspot/share/utilities/ostream.cpp:129&lt;br/&gt;
#4  0x00007f5ca679cfe9 in outputStream::do_vsnprintf_and_write (add_cr=false, ap=0x7f5c4e41f2e8, format=0x7f5ca6b7e5e6 &amp;quot;%s&amp;quot;, this=0x7f5ca0000b70) at src/hotspot/share/utilities/ostream.cpp:142&lt;br/&gt;
#5  outputStream::print (this=this@entry=0x7f5ca0000b70, format=format@entry=0x7f5ca6b7e5e6 &amp;quot;%s&amp;quot;) at src/hotspot/share/utilities/ostream.cpp:149&lt;br/&gt;
#6  0x00007f5ca69c26e7 in Symbol::print_symbol_on (this=0x800493cd0, st=0x7f5ca0000b70) at src/hotspot/share/oops/symbol.cpp:191&lt;br/&gt;
#7  0x00007f5ca671251e in Method::print_invocation_count (this=this@entry=0x7f5bfc315e80) at src/hotspot/share/oops/constantPool.hpp:457&lt;br/&gt;
#8  0x00007f5ca63e2d15 in print_method_profiling_data () at src/hotspot/share/runtime/java.cpp:132&lt;br/&gt;
#9  print_method_profiling_data () at src/hotspot/share/runtime/java.cpp:117&lt;br/&gt;
#10 0x00007f5ca63e301d in print_statistics () at src/hotspot/share/runtime/java.cpp:342&lt;br/&gt;
#11 0x00007f5ca63e4d39 in before_exit (thread=thread@entry=0x7f5c40000fe0, halt=halt@entry=true) at src/hotspot/share/runtime/java.cpp:532&lt;br/&gt;
#12 0x00007f5ca64b008a in JVM_Halt (code=143) at src/hotspot/share/prims/jvm.cpp:444&lt;br/&gt;
#13 0x00007f5c901a1ca0 in ?? ()&lt;br/&gt;
#14 0x00007f5c901a193f in ?? ()&lt;br/&gt;
#15 0x00007f5c4e41f728 in ?? ()&lt;br/&gt;
#16 0x000000080067db80 in ?? ()&lt;br/&gt;
#17 0x0000000000000004 in ?? ()&lt;br/&gt;
#18 0x000000080003d600 in ?? ()&lt;br/&gt;
#19 0x0000000000000000 in ?? ()&lt;br/&gt;
&lt;br/&gt;
Race condition:&lt;br/&gt;
&lt;br/&gt;
There are two exit paths in the JVM:&lt;br/&gt;
1. When the JVM falls off the end of main() method, the main thread (in java launcher) attaches itself as&lt;br/&gt;
DestroyJavaVM thread and initiates the shutdown sequence by calling destroy_vm(). DestroyJavaVM waits for all&lt;br/&gt;
non-daemon threads to stop before starting the shutdown sequence.&lt;br/&gt;
2. When the application is sent a signal like SIGTERM, the signal handler thread starts the shutdown sequence&lt;br/&gt;
by invoking Shutdown.exit() which in turns calls JVM_BeforeHalt(), runs shutdown hooks and calls JVM_Halt().&lt;br/&gt;
&lt;br/&gt;
It is possible that the application has registered a shutdown hook that results in normal termination of main method().&lt;br/&gt;
In such case path 2 can trigger path 1 as well.&lt;br/&gt;
&lt;br/&gt;
In both shutdown sequences JVM attempts to dump dynamic archive by calling DynamicArchive::prepare_for_dump_at_exit() followed by DynamicArchive::dump().&lt;br/&gt;
DynamicArchive::prepare_for_dump_at_exit() initializes ClassPrelinker::_processed_classes and DynamicArchive::dump() frees the field and sets it to NULL.&lt;br/&gt;
&lt;br/&gt;
If the two sequences run together, as it happened in this case, it is possible that after DestroyJavaVM thread has initialized ClassPrelinker::_processed_classes (as part of DynamicArchive::prepare_for_dump_at_exit()), the signal handler thread frees it in DynamicArchive::dump() which which will cause DestroyJavaVM to access invalid memory when it subsequently&lt;br/&gt;
uses ClassPrelinker::_processed_classes.&lt;br/&gt;
&lt;br/&gt;
One of the ways to fix it is to prohibit DestroyJavaVM from executing DynamicArchive::prepare_for_dump_at_exit() if the signal handler thread has completed DynamicArchive::dump().</description>
                <environment></environment>
        <key id="5096183">JDK-8304147</key>
            <summary>JVM crash during shutdown when dumping dynamic archive</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="asmehra">Ashutosh Mehra</reporter>
                        <labels>
                            <label>cds</label>
                            <label>intermittent</label>
                    </labels>
                <created>Tue, 14 Mar 2023 08:19:38 -0700</created>
                <updated>Mon, 3 Apr 2023 12:09:04 -0700</updated>
                            <resolved>Mon, 27 Mar 2023 15:06:42 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14569826" author="dukebot" created="Mon, 27 Mar 2023 15:06:40 -0700"  >Changeset: 63ce88b5&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-27 22:05:23 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/63ce88b5fbc8e2b9be01a135156885000bc5c48d&quot;&gt;https://git.openjdk.org/jdk/commit/63ce88b5fbc8e2b9be01a135156885000bc5c48d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14568716" author="dholmes" created="Wed, 22 Mar 2023 00:07:36 -0700"  >Failure mode for the new test before the fix, on a debug VM:&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/scratch/users/daholme/jdk-dev3.git/open/src/hotspot/share/cds/classPrelinker.cpp:59), pid=5951, tid=5974&lt;br/&gt;
#  assert(_vm_classes == nullptr) failed: must be&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-03-21-0800142.daholme...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-03-21-0800142.daholme..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xab32d5]  ClassPrelinker::initialize()+0x35&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f83d4000d30):  JavaThread &amp;quot;Daemon&amp;quot; daemon [_thread_in_vm, id=5974, stack(0x00007f840b2f1000,0x00007f840b3f2000)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f840b2f1000,0x00007f840b3f2000],  sp=0x00007f840b3f0650,  free space=1021k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xab32d5]  ClassPrelinker::initialize()+0x35  (classPrelinker.cpp:59)&lt;br/&gt;
V  [libjvm.so+0x161e822]  MetaspaceShared::link_shared_classes(bool, JavaThread*)+0x22  (metaspaceShared.cpp:626)&lt;br/&gt;
V  [libjvm.so+0xd01b76]  DynamicArchive::prepare_for_dump_at_exit()+0xc6  (dynamicArchive.cpp:383)&lt;br/&gt;
V  [libjvm.so+0x121149d]  JVM_BeforeHalt+0x19d  (jvm.cpp:432)&lt;br/&gt;
j  java.lang.Shutdown.beforeHalt()V+0 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  java.lang.Runtime.halt(I)V+13 &lt;a href=&apos;mailto:java.base@21-internal&apos;&gt;java.base@21-internal&lt;/a&gt;&lt;br/&gt;
j  ExitRace$1$1.run()V+18&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f84400fcd21&lt;br/&gt;
V  [libjvm.so+0x1069050]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0x1069880]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x450  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0x1069f51]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:191)&lt;br/&gt;
V  [libjvm.so+0x11ec12b]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2924)&lt;br/&gt;
V  [libjvm.so+0x109d586]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:710)&lt;br/&gt;
V  [libjvm.so+0x1aa7780]  Thread::call_run()+0x100  (thread.cpp:224)&lt;br/&gt;
V  [libjvm.so+0x17453c3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:740)&lt;br/&gt;
</comment>
                            <comment id="14568702" author="roboduke" created="Tue, 21 Mar 2023 22:27:08 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13134&quot;&gt;https://git.openjdk.org/jdk/pull/13134&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-22 05:03:50 +0000</comment>
                            <comment id="14567965" author="dholmes" created="Sun, 19 Mar 2023 15:40:18 -0700"  >Okay thanks [~asmehra]</comment>
                            <comment id="14567742" author="JIRAUSER20510" created="Fri, 17 Mar 2023 05:48:59 -0700"  >Assigning it to David as per the discussion.</comment>
                            <comment id="14567741" author="JIRAUSER20510" created="Fri, 17 Mar 2023 05:48:07 -0700"  >I think it makes sense if you take it over as it seems there has already been quite a bit of discussion on which approach to take. I guess it would be easier if you continue with that.</comment>
                            <comment id="14567642" author="dholmes" created="Thu, 16 Mar 2023 18:24:23 -0700"  >[~asmehra] Okay so after much further discussion it was decided the prepare could be moved, and also that the dump could be moved to happen straight after the prepare. But then it was realized that dumping at exit can also race with the jcmd initiated dump, so further locking will still be needed anyway. I think [~ccheung] may want to take this over if you don&amp;#39;t mind?&lt;br/&gt;
&lt;br/&gt;
Edit: should have checked first, he is heading off on vacation soon. I can leave this with you [~asmehra] or else I can take it over?</comment>
                            <comment id="14567624" author="dholmes" created="Thu, 16 Mar 2023 16:04:43 -0700"  >[~asmehra] Sorry don&amp;#39;t have any further details at the moment but will update if they come to hand.</comment>
                            <comment id="14567472" author="JIRAUSER20510" created="Thu, 16 Mar 2023 06:59:55 -0700"  >[~dholmes] Can you please elaborate a bit about the concern related to moving `prepare_for_dump_at_exit` in relation to shutdown hooks. I am interested in understanding what can go wrong if we take that route.</comment>
                            <comment id="14567261" author="dholmes" created="Wed, 15 Mar 2023 14:38:36 -0700"  >[~asmehra] After some internal discussion I think the `prepare_for_dump_at_exit` can be moved much closer to the actual dump point inside the before_exit code. We probably don&amp;#39;t want to start shutting things down before running the Java code that `prepare_for_dump_at_exit` runs, so it can probably move to the start of before_exit, after we do the logic that ensures only a single thread can be executing.&lt;br/&gt;
&lt;br/&gt;
Edit: after further discussion there may be some concern about moving it, mainly in relation to execution of shutdown hooks. In that case we need to ensure that only one thread at a time can execute the prepare logic, and that a second thread will wait for the first to complete.&lt;br/&gt;
&lt;br/&gt;
Here is the call chain logic for the three potential exit paths:&lt;br/&gt;
&lt;br/&gt;
Runtime.halt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-&amp;gt; Shutdown.beforeHalt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; JVM_BeforeHalt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; DynamicArchive::prepare_for_dump_at_exit();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; commit shutdown event&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-&amp;gt; Shutdown.halt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; halt0()   // inside sync block so single-threaded&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; JVM_Halt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; before_exit()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// single-threaded by Mutex &amp;amp; wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;shutdown stuff&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DynamicArchive::dump()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;more shutdown stuff&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Runtime.exit()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-&amp;gt; Shutdown.exit()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// single threaded by sync-block&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shutdown.beforeHalt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; DynamicArchive::prepare_for_dump_at_exit();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; commit shutdown event&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shutdown.runHooks()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shutdown.halt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; halt0()   // inside sync block so single-threaded&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; JVM_Halt()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; before_exit()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// single-threaded by Mutex &amp;amp; wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;shutdown stuff&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DynamicArchive::dump()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;more shutdown stuff&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
DestroyJavaVM()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-&amp;gt; Threads::destroy_vm();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; wait till last non-daemon thread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; commit shutdown event &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; JavaThread::invoke_shutdown_hooks()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; DynamicArchive::prepare_for_dump_at_exit();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; Shutdown.shutdown()   // upcall to Java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; Shutdown.runHooks()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; before_exit()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// single-threaded by Mutex &amp;amp; wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;shutdown stuff&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DynamicArchive::dump()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;more shutdown stuff&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Aside: I think Runtime.halt() is also buggy in allowing multiple threads to call beforeHalt()</comment>
                            <comment id="14567248" author="JIRAUSER20510" created="Wed, 15 Mar 2023 13:59:50 -0700"  >[~dholmes] You are right about Signal Dispatcher thread being a daemon thread and its termination does not play any role in the race condition. While debugging somehow I got tricked into believing DestroyJavaVM is waiting for Signal Dispatcher to exit. I will update the text to remove this discrepancy.</comment>
                            <comment id="14566927" author="dholmes" created="Tue, 14 Mar 2023 18:05:30 -0700"  >I agree with the analysis. There is a basic problem that DynamicArchive::prepare_for_dump_at_exit() in one exit path, can execute concurrently with DynamicArchive::dump() in the other. And of course DynamicArchive::prepare_for_dump_at_exit() can run concurrently with itself in both exit paths which is also a problem. I think the fix here is for DynamicArchive::prepare_for_dump_at_exit() to be thread-safe and able to detect that it has already run. Or its placement needs to be reconsidered. I&amp;#39;m unclear why we actually need to do DynamicArchive::prepare_for_dump_at_exit() so far ahead of the dump itself?</comment>
                            <comment id="14566898" author="dholmes" created="Tue, 14 Mar 2023 15:18:42 -0700"  >[~asmehra] Note that the Signal Dispatcher thread _is_ a daemon thread, so it&amp;#39;s termination does not affect the progress of DestroyJavaVM.&lt;br/&gt;
&lt;br/&gt;
Also there are a number of ways non-daemon threads can be started after the DestroyJavaVM thread has progressed past the point where all non-daemon threads were presumed terminated. The Java level shutdown logic is supposed to ensure only one thread can perform an orderly shutdown.</comment>
                            <comment id="14566897" author="dholmes" created="Tue, 14 Mar 2023 15:12:28 -0700"  >I need to study this in more detail (one reading was not enough). The two exit paths can race but there should be a clear point where one wins the race and the other will proceed no further. It is possible the (fairly) recent dynamic dumping code has broken something here.</comment>
                            <comment id="14566838" author="mseledtsov" created="Tue, 14 Mar 2023 11:09:42 -0700"  >ILW = HLL = P4</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5097204">JDK-8304996</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5096469">JDK-8304381</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5095265">JDK-8303422</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30qa3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17312"><![CDATA[b16]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>