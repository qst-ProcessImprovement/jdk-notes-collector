<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:57:01 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8287087] C2: perform SLP reduction analysis on-demand</title>
                <link>https://bugs.openjdk.org/browse/JDK-8287087</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Currently, SLP reduction vectorization follows a two-step approach:&lt;br/&gt;
&lt;br/&gt;
(1) identify and mark reduction nodes and their corresponding loops early (to inform the unrolling policy),&lt;br/&gt;
(2) reuse later this information (which nodes are marked as reductions) to guide SLP vectorization.&lt;br/&gt;
&lt;br/&gt;
By performing (1) before loop unrolling, this approach can identify reductions in a simple and efficient manner. However, it has a serious drawback that makes it hard to maintain: many different high-level loop transformations and low-level Ideal transformations can invalidate the node and loop reduction marks (flags) within the loop optimization iterations between steps (1) and (2) above, leading in the worst case to SLP miscompilations based on inconsistent reduction information. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8261147&quot; title=&quot;C2: Node is wrongly marked as reduction resulting in a wrong execution due to wrong vector instructions &quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8261147&quot;&gt;&lt;strike&gt;JDK-8261147&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8279622&quot; title=&quot;C2: miscompilation of map pattern as a vector reduction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8279622&quot;&gt;&lt;strike&gt;JDK-8279622&lt;/strike&gt;&lt;/a&gt; are actual miscompilations caused by this design problem.&lt;br/&gt;
&lt;br/&gt;
A potential solution is to run step (1) on-demand: first to inform the unrolling policy, and then again to guide SLP vectorization. This would avoid this source of bugs by construction, because there would not be analysis information &amp;quot;on the side&amp;quot; that could be potentially invalidated. If a node found to be a reduction before unrolling stops being a reduction due to some loop or Ideal transformation, it will simply not be identified and treated as a reduction by SLP vectorization.&lt;br/&gt;
&lt;br/&gt;
The solution suggested in this RFE requires generalizing reduction analysis to also identify reductions on unrolled loops. For example, the analysis should be able to detect that node (166 AddI) in reduction-before-unrolling.pdf (attached) is a reduction, and also that nodes {(166 AddI, 504 AddI, 579 AddI, 591 AddI)} form a reduction chain in the corresponding unrolled loop reduction-unrolled-x4.pdf. While detecting reduction chains in unrolled loops is necessarily more costly, the cost is never worse than (&amp;quot;number of phi nodes in the loop&amp;quot; x LoopMaxUnroll), under the assumption that all nodes in an unrolled reduction chain are connected via the same input number. This assumption is key to avoid a combinatorial explosion, and seems to hold in practice, since reduction chains are formed by cloning the same reduction node a number of times.&lt;br/&gt;
&lt;br/&gt;
A prototype of this alternative design is available at &lt;a href=&quot;https://github.com/robcasloz/jdk/tree/JDK-8287087&quot;&gt;https://github.com/robcasloz/jdk/tree/JDK-8287087&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
Work left to do:&lt;br/&gt;
&lt;br/&gt;
- Evaluate the overhead of doing general reduction analysis on unrolled loops and its contribution to total C2 execution time (&lt;a href=&quot;https://github.com/robcasloz/jdk/blob/2171ced27b6a99651b194ab51919c68ade5afb23/src/hotspot/share/opto/superword.cpp#L115&quot;&gt;https://github.com/robcasloz/jdk/blob/2171ced27b6a99651b194ab51919c68ade5afb23/src/hotspot/share/opto/superword.cpp#L115&lt;/a&gt;).&lt;br/&gt;
&lt;br/&gt;
- Evaluate the overhead of doing per-node general reduction analysis for x86-64 min/max floating-point intrinsic selection (&lt;a href=&quot;https://github.com/robcasloz/jdk/blob/2171ced27b6a99651b194ab51919c68ade5afb23/src/hotspot/share/opto/node.cpp#L3236&quot;&gt;https://github.com/robcasloz/jdk/blob/2171ced27b6a99651b194ab51919c68ade5afb23/src/hotspot/share/opto/node.cpp#L3236&lt;/a&gt;).&lt;br/&gt;
&lt;br/&gt;
- Test that the same reduction loops are vectorized as before. As part of this effort, IR test framework checks could be added to the reduction vectorization test cases for more robust regression testing. Some examples can be found in the prototype, e.g. &lt;a href=&quot;https://github.com/robcasloz/jdk/blob/general-reduction-analysis/test/hotspot/jtreg/compiler/loopopts/superword/RedTest_int_x64.java&quot;&gt;https://github.com/robcasloz/jdk/blob/general-reduction-analysis/test/hotspot/jtreg/compiler/loopopts/superword/RedTest_int_x64.java&lt;/a&gt;. This would require additional support IR test framework for multi-target IR matching, see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8280120&quot; title=&quot;[IR Framework] Add attribute to @IR to enable/disable IR matching based on the architecture&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8280120&quot;&gt;&lt;strike&gt;JDK-8280120&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
- Test that the x86-64 min/max floating-point intrinsic selection works at least as well as (and possibly better than) the original implementation. The potential improvement over the original implementation comes from the fact that on-demand reduction analysis would be performed on *every* min/max floating-point node visited during instruction selection, not just on those visited in the context of SLP analysis.</description>
                <environment></environment>
        <key id="5075332">JDK-8287087</key>
            <summary>C2: perform SLP reduction analysis on-demand</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rcastanedalo">Roberto Castaneda Lozano</assignee>
                                    <reporter username="rcastanedalo">Roberto Castaneda Lozano</reporter>
                        <labels>
                            <label>c2</label>
                            <label>c2-superword</label>
                    </labels>
                <created>Fri, 20 May 2022 06:04:46 -0700</created>
                <updated>Wed, 4 Oct 2023 05:45:47 -0700</updated>
                            <resolved>Thu, 27 Apr 2023 02:42:21 -0700</resolved>
                                    <version>19</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                                <comments>
                            <comment id="14577262" author="dukebot" created="Thu, 27 Apr 2023 02:42:20 -0700"  >Changeset: 1be80a44&lt;br/&gt;
Author:    Roberto Casta&amp;#xF1;eda Lozano &amp;lt;&lt;a href=&apos;mailto:rcastanedalo@openjdk.org&apos;&gt;rcastanedalo@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-27 09:39:53 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/1be80a4445cf74adc9b2cd5bf262a897f9ede74f&quot;&gt;https://git.openjdk.org/jdk/commit/1be80a4445cf74adc9b2cd5bf262a897f9ede74f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14568743" author="roboduke" created="Wed, 22 Mar 2023 04:13:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13120&quot;&gt;https://git.openjdk.org/jdk/pull/13120&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-21 14:49:26 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="5084596">JDK-8294715</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5065809">JDK-8279622</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5074194">JDK-8286177</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5101678">JDK-8308746</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5041212">JDK-8261147</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5098041">JDK-8305707</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5099611">JDK-8306989</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4771220">JDK-8074981</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4981365">JDK-8217561</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5079961">JDK-8290964</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5111710">JDK-8317507</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="99029" name="reduction-before-unrolling.pdf" size="2280" author="rcastanedalo" created="Fri, 20 May 2022 06:04:03 -0700"/>
                            <attachment id="99028" name="reduction-unrolled-x4.pdf" size="3286" author="rcastanedalo" created="Fri, 20 May 2022 06:04:03 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2x6xf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>