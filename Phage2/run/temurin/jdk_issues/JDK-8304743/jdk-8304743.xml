<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 17:55:22 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8304743] Compile_lock and SystemDictionary updates</title>
                <link>https://bugs.openjdk.org/browse/JDK-8304743</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>There&amp;#39;s code in class loading that takes the Compile_lock when updating the SystemDictionary like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ // Grabbing the Compile_lock prevents systemDictionary updates&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// during compilations.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MutexLocker mu(THREAD, Compile_lock);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;update_dictionary(THREAD, loaded_class, loader_data);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
The system dictionary is a concurrent hashtable and is also protected by the SystemDictionary_lock for writes, so shouldn&amp;#39;t need the Compile_lock.  The compiler ci code (and jvmci) code takes out the Compile_lock to read the system dictionary to see if the class is loaded, but briefly and doesn&amp;#39;t hold the lock while compiling so the class could be loaded before or after the ci code reads it.&lt;br/&gt;
&lt;br/&gt;
I was concerned by this code because when loading a class, we used to have&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MutexLocker ml(Compile_lock);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add_to_hierarchy();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;update_dictionary();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
But &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300926&quot; title=&quot;Several startup regressions  ~6-70% in 21-b6 all platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300926&quot;&gt;&lt;strike&gt;JDK-8300926&lt;/strike&gt;&lt;/a&gt; moved add_to_hierarchy outside of this code block.  add_to_hierarchy needs the Compile_lock because the Compile_lock is also the lock for dependencies, but now it releases the compile lock before updating the dictionary.&lt;br/&gt;
&lt;br/&gt;
Even with the Compile_lock around the update_dictionary() if there&amp;#39;s an assert to verify that everything in the hierarchy (subclass, sibling and implementor) is also found in the dictionary, it could fire depending on timing.  But nothing in dependencies does that.&lt;br/&gt;
&lt;br/&gt;
Still the Compile_lock doesn&amp;#39;t help.  There used to be a notice_modifications() call that would be a short cut for dependencies that was set during system dictionary updates and read using the Compile_lock.  That code is now gone.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5096910">JDK-8304743</key>
            <summary>Compile_lock and SystemDictionary updates</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="coleenp">Coleen Phillimore</assignee>
                                    <reporter username="coleenp">Coleen Phillimore</reporter>
                        <labels>
                            <label>classloading</label>
                    </labels>
                <created>Wed, 22 Mar 2023 12:30:05 -0700</created>
                <updated>Mon, 10 Apr 2023 10:23:09 -0700</updated>
                            <resolved>Mon, 3 Apr 2023 13:26:57 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14571480" author="dukebot" created="Mon, 3 Apr 2023 13:26:55 -0700"  >Changeset: b062b1bd&lt;br/&gt;
Author:    Coleen Phillimore &amp;lt;&lt;a href=&apos;mailto:coleenp@openjdk.org&apos;&gt;coleenp@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-03 20:25:36 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/b062b1bd8126610d9288dc179d69e54a40b81015&quot;&gt;https://git.openjdk.org/jdk/commit/b062b1bd8126610d9288dc179d69e54a40b81015&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14571081" author="dlong" created="Fri, 31 Mar 2023 14:30:25 -0700"  >Is there a guarantee that any klasses the compiler found in the hierarchy are actually in the dictionary by the time the compiled code gets to execute?  If not, then we could have something like this fail:  Class.forName(this.getClass().getName())</comment>
                            <comment id="14571062" author="roboduke" created="Fri, 31 Mar 2023 10:51:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13270&quot;&gt;https://git.openjdk.org/jdk/pull/13270&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-31 13:23:31 +0000</comment>
                            <comment id="14570966" author="coleenp" created="Fri, 31 Mar 2023 05:18:52 -0700"  >Vladimir Ivanov&lt;br/&gt;
&amp;nbsp;&amp;nbsp;15 hours ago&lt;br/&gt;
CI keeps a cache of previous requests, so if some klass lookup failed before, it won&#8217;t try to look it up again.&lt;br/&gt;
&lt;br/&gt;
Vladimir Ivanov&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14 hours ago&lt;br/&gt;
CHA relies on siblings list to iterate over subclasses and it will discover the class once add_to_hierarchy is over. It&#8217;s covered by the lock.&lt;br/&gt;
ciEnv::get_klass_by_name_impl() queries SD, but it doesn&#8217;t matter whether a concurrent class loading is visible or not. What matters is that compilers consistently see a class as loaded or not. And there&#8217;s no need in the lock to have that.&lt;br/&gt;
&lt;br/&gt;
Coleen Phillimore&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14 hours ago&lt;br/&gt;
so the compilers save a state that they find when they do the SD lookup in unloaded_klasses and don&#8217;t ask again (edited) &lt;br/&gt;
&lt;br/&gt;
Vladimir Ivanov&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14 hours ago&lt;br/&gt;
Right.&lt;br/&gt;
&lt;br/&gt;
Vladimir Ivanov&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14 hours ago&lt;br/&gt;
IMO it&#8217;s safe to remove the lock around update_dictionary call.</comment>
                            <comment id="14570508" author="rehn" created="Wed, 29 Mar 2023 12:26:51 -0700"  >So the adding to unload classes list is a previous behavior, which is unclear is it can cause some problems?</comment>
                            <comment id="14570499" author="coleenp" created="Wed, 29 Mar 2023 11:28:42 -0700"  >&lt;br/&gt;
Another class can&amp;#39;t be linked before the deopt for loading has taken effect, because in the loading path, the class isn&amp;#39;t in the dictionary until the deopt is done.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.  A.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add_to_hierarchy&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;B&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;update_dictionary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.  won&amp;#39;t find class in dictionary until the deopt in add_to_hierarchy done.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if lookup at A =&amp;gt; adds to the unloaded_klasses list&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if lookup at B =&amp;gt; same&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if lookup at C =&amp;gt; class is loaded and same.&lt;br/&gt;
&lt;br/&gt;
The only difference with the Compile_lock around add_to_hierarchy and update_dictionary is that at B, t2 doesn&amp;#39;t wait for the deoptimization before adding to the unloaded classes list.</comment>
                            <comment id="14570073" author="rehn" created="Tue, 28 Mar 2023 06:51:26 -0700"  >Talking about the normal case when we use CHA.&lt;br/&gt;
&lt;br/&gt;
The class can be linked before this deopt have taking effect.&lt;br/&gt;
Meaning another thread can see this loaded class.&lt;br/&gt;
And that other thread can link this class.&lt;br/&gt;
But that will trigger a second deopt and that deopt cannot pass the first deopt.&lt;br/&gt;
And it will not be fully initialized before all deopts are completed.&lt;br/&gt;
(We are holding the init monitor)&lt;br/&gt;
&lt;br/&gt;
So it&amp;#39;s not possible to create this class before both deopt have been completed.</comment>
                            <comment id="14570043" author="coleenp" created="Tue, 28 Mar 2023 05:28:05 -0700"  >Can other threads see the loaded classes before they&amp;#39;re deoptimized? And could that also be a problem?</comment>
                            <comment id="14569983" author="rehn" created="Tue, 28 Mar 2023 02:17:21 -0700"  >So I looked a bit at this, it seem like we can be adding an &amp;quot;unloaded class&amp;quot; in CI.&lt;br/&gt;
It&amp;#39;s not clear what effects this have, so I recommend going back to the version of the patch where InstanceKlass::add_to_hierarchy takes the DeoptimizationScope as parameter:&lt;br/&gt;
&lt;br/&gt;
###############################&lt;br/&gt;
&amp;nbsp;&amp;nbsp;DeoptimizationScope deopt_scope;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MutexLocker mu_r(THREAD, Compile_lock);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Add to class hierarchy, and do possible deoptimizations.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add_to_hierarchy(&amp;amp;deopt_scope, k);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Add to systemDictionary - so other classes can see it.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Grabs and releases SystemDictionary_lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;update_dictionary(THREAD, k, loader_data);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Perform the deopt handshake outside Compile_lock.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;deopt_scope.deoptimize_marked();&lt;br/&gt;
###############################</comment>
                            <comment id="14569067" author="coleenp" created="Thu, 23 Mar 2023 05:20:42 -0700"  >I am saying both.  If we actually need the Compile_lock to keep dependencies and dictionary entries consistent, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300926&quot; title=&quot;Several startup regressions  ~6-70% in 21-b6 all platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300926&quot;&gt;&lt;strike&gt;JDK-8300926&lt;/strike&gt;&lt;/a&gt; introduced a bug.  But when I looked at it in the review, I didn&amp;#39;t believe that Compile_lock is needed.  I am worried about the case:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;t1: add_to_hierarchy under Compile_lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;t2: grab Compile_lock read dependencies -&amp;gt; for some InstanceKlass in hierarchy look it up in Dictionary and not find it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;t1: take Compile_lock -&amp;gt; add to dictionary&lt;br/&gt;
&lt;br/&gt;
We don&amp;#39;t look up InstanceKlass in hierarchy in the dependency code as far as I can tell but it would be good to have some way to verify this chain of events is harmless.  [~vlivanov]</comment>
                            <comment id="14569000" author="rehn" created="Thu, 23 Mar 2023 01:34:54 -0700"  >I don&amp;#39;t understand if Coleen is saying that I introduced a bug or since I did not introduce a bug I proved that we don&amp;#39;t need Compile_lock.</comment>
                            <comment id="14568920" author="dholmes" created="Wed, 22 Mar 2023 16:06:13 -0700"  >&amp;gt; But &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300926&quot; title=&quot;Several startup regressions  ~6-70% in 21-b6 all platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300926&quot;&gt;&lt;strike&gt;JDK-8300926&lt;/strike&gt;&lt;/a&gt; moved add_to_hierarchy outside of this code block.  add_to_hierarchy&lt;br/&gt;
&amp;gt; needs the Compile_lock because the Compile_lock is also the lock for dependencies, but &lt;br/&gt;
&amp;gt; now it releases the compile lock before updating the dictionary.&lt;br/&gt;
&lt;br/&gt;
I raised this in the PR for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300926&quot; title=&quot;Several startup regressions  ~6-70% in 21-b6 all platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8300926&quot;&gt;&lt;strike&gt;JDK-8300926&lt;/strike&gt;&lt;/a&gt; but [~rehn] said it was okay.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5097814">JDK-8305509</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5092266">JDK-8300926</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30urn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17417"><![CDATA[b17]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>