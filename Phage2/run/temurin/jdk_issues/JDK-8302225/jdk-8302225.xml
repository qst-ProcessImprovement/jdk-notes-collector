<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 16:44:34 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8302225] SunJCE Provider doesn&apos;t validate key sizes when using &apos;constrained&apos; transforms for AES/KW and AES/KWP</title>
                <link>https://bugs.openjdk.org/browse/JDK-8302225</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>One of my colleagues reported the following issue:&lt;br/&gt;
&lt;br/&gt;
OpenJDK&amp;#39;s SunJCE `Provider` doesn&amp;#39;t validate key sizes when using &amp;quot;constrained&amp;quot; (see below) transforms for AES/KW and AES/KWP which were introduced in OpenJDK 17.&lt;br/&gt;
&lt;br/&gt;
Re: Constrained. Looking at the &amp;quot;Standard Names&amp;quot; reference for Ciphers for Java 17: &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#cipher-algorithm-names&quot;&gt;https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#cipher-algorithm-names&lt;/a&gt; which states for AES &amp;quot;To use the AES cipher with only one valid key size, use the format AES_&amp;lt;n&amp;gt;, where &amp;lt;n&amp;gt; can be 128, 192 or 256&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
The following AESWrap and AESWrapPad sections have similar wording and state that AESWrap is the same as AES/KW and AESWrapPad is the same as AES/KWP. I.e. we should reasonably assume that AES_128/KW behaves the same as (e.g.) AES_128/CBC when it comes to valid key sizes.&lt;br/&gt;
&lt;br/&gt;
However this is not the case.  For modes CBC, ECB etc, `Cipher.init()` will throw `InvalidKeyException` if an incorrectly sized key is passed in.  For mode KW and KWP, no exception is thrown and the operation just silently uses the key that is passed in and sets its internal key size to match.&lt;br/&gt;
&lt;br/&gt;
A demo is provided (see attached `KeyWrap.java` file).&lt;br/&gt;
&lt;br/&gt;
Its method `findDuplicateOutputs()` finds key-size-constrained transformations that give the same result.  So for example the first five lines:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
Secret key length 128&lt;br/&gt;
128 bit KEK with AES/KWP/NoPadding -&amp;gt; 946628a78a4bd865a6169bdb460e05f25e793c8bed49d5fd&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AES_128/KWP/NoPadding with same 128 bit KEK gives the same result.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AES_192/KWP/NoPadding with same 128 bit KEK gives the same result.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AES_256/KWP/NoPadding with same 128 bit KEK gives the same result.&lt;br/&gt;
```&lt;br/&gt;
shows that AES/KWP/NoPadding, AES_128/KWP/NoPadding, AES_192/KWP/NoPadding and AES_256/KWP/NoPadding all give the result when passed a 128 bit key-encrypting key.&lt;br/&gt;
&lt;br/&gt;
We know that AES/KWP/NoPadding is _supposed_ to use whatever key size is passed in, so this tells us that all 4 transforms are using a 128bit key and key size.  But from the Standard Names document, we would expect the AES_192 and AES_256 variants to throw.&lt;br/&gt;
&lt;br/&gt;
The rest of the output repeats this for different secret key and key-encrypting key sizes to show the issue applies across the board.&lt;br/&gt;
&lt;br/&gt;
The poc uses AES/KWP but the results are the same as for AES/KW.&lt;br/&gt;
&lt;br/&gt;
The second method in the demo is `checkKeySizeConstraintsForAesCbc()`. This shows that for AES/CBC, trying to use an invalid key size throws in `init()`.  The same applies to ECB, GCM and all the other, non-wrapping modes.  Default output from this method is nothing... If it succeeds in initialising a `Cipher` with an invalid key then it will print.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5093854">JDK-8302225</key>
            <summary>SunJCE Provider doesn&apos;t validate key sizes when using &apos;constrained&apos; transforms for AES/KW and AES/KWP</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="valeriep">Valerie Peng</assignee>
                                    <reporter username="cushon">Liam Miller-Cushon</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                    </labels>
                <created>Fri, 10 Feb 2023 09:57:24 -0800</created>
                <updated>Wed, 20 Nov 2024 01:55:40 -0800</updated>
                            <resolved>Thu, 16 Feb 2023 13:59:33 -0800</resolved>
                                                    <fixVersion>21</fixVersion>
                                    <component>security-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14723103" author="roboduke" created="Mon, 18 Nov 2024 02:46:01 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3047&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3047&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-18 10:28:25 +0000</comment>
                            <comment id="14723095" author="goetz" created="Mon, 18 Nov 2024 02:31:16 -0800"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I would like to fix this issue in the sun crypto provider. It improves&lt;br/&gt;
validation of keys.  Double-checked with Valerie, the author of this change.&lt;br/&gt;
Risk is acceptable, although it&amp;#39;s an important component. The change&lt;br/&gt;
is tested well already in 21 and of limited complexity.&lt;br/&gt;
Resolved Copyright, probably clean.&lt;br/&gt;
Test passes, but does not reproduce the issue. SAP nightly testing passed.</comment>
                            <comment id="14560830" author="dukebot" created="Thu, 16 Feb 2023 13:59:31 -0800"  >Changeset: 4ce493f0&lt;br/&gt;
Author:    Valerie Peng &amp;lt;&lt;a href=&apos;mailto:valeriep@openjdk.org&apos;&gt;valeriep@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-16 21:58:34 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4ce493f09ea3a34322462e82fd73b8375be1cba5&quot;&gt;https://git.openjdk.org/jdk/commit/4ce493f09ea3a34322462e82fd73b8375be1cba5&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14560160" author="roboduke" created="Tue, 14 Feb 2023 18:29:12 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12569&quot;&gt;https://git.openjdk.org/jdk/pull/12569&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-15 02:23:31 +0000</comment>
                            <comment id="14559769" author="valeriep" created="Mon, 13 Feb 2023 16:28:43 -0800"  >There is an existing regression test on checking that InvalidKeyException being thrown for &amp;quot;constrained&amp;quot; transformations when an otherwise-valid AES key size is used; however, due to a test bug, it ends up using invalid AES keys, i.e. 128-byte key instead of 128-bit keys, which is caught and detected by the underlying AESCrypt class. Thus masking this AES KW impl bug.&lt;br/&gt;
&lt;br/&gt;
Need to fix both the src and the regression test.</comment>
                            <comment id="14559725" author="valeriep" created="Mon, 13 Feb 2023 12:27:11 -0800"  >Need to validate key size during initialization.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5144362">JDK-8344612</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102618" name="KeyWrap.java" size="5805" author="cushon" created="Fri, 10 Feb 2023 09:56:38 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="21108">17</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30bwr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="229"><![CDATA[javax.crypto]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>