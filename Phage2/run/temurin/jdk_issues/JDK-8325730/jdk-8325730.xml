<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 22:39:23 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8325730] StringBuilder.toString allocation for the empty String</title>
                <link>https://bugs.openjdk.org/browse/JDK-8325730</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
In Java 17 StringBuilder.toString was calling StringLatin1.newString that returned a literal &amp;quot;&amp;quot; for len == 0. After &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8282429&quot;&gt;https://bugs.openjdk.org/browse/JDK-8282429&lt;/a&gt; &lt;a href=&quot;https://github.com/openjdk/jdk/commit/bab431cc120fe09be371dadef0c1caf79ec9eef4&quot;&gt;https://github.com/openjdk/jdk/commit/bab431cc120fe09be371dadef0c1caf79ec9eef4&lt;/a&gt; Java 21 returns a new String object each time.  While it is minor, it still looks like a regression that effects such code paths as deserialisation.&lt;br/&gt;
&lt;br/&gt;
REGRESSION : Last worked in version 17.0.10&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
new StringBuilder().toString() == &amp;quot;&amp;quot;&lt;br/&gt;
&lt;br/&gt;
ACTUAL -&lt;br/&gt;
false&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
public class Test {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(new StringBuilder().toString() == &amp;quot;&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5121271">JDK-8325730</key>
            <summary>StringBuilder.toString allocation for the empty String</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="redestad">Claes Redestad</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>dcsrk</label>
                            <label>jdk21u-na</label>
                            <label>jdk22u-fix-SQE-ok-next</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                            <label>regression</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Mon, 12 Feb 2024 14:09:34 -0800</created>
                <updated>Thu, 13 Mar 2025 09:31:33 -0700</updated>
                            <resolved>Tue, 20 Feb 2024 12:30:06 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                                <comments>
                            <comment id="14760712" author="smarks" created="Thu, 13 Mar 2025 09:31:33 -0700"  >&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt; has been fixed, so the regression fix is spec compliant as of JDK 25.&lt;br/&gt;
&lt;br/&gt;
If the spec change &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt; is ever backported to JDK 21 in a Maintenance Release, then this regression fix &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325730&quot; title=&quot;StringBuilder.toString allocation for the empty String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325730&quot;&gt;&lt;strike&gt;JDK-8325730&lt;/strike&gt;&lt;/a&gt; can also be backported to JDK 21.&lt;br/&gt;
</comment>
                            <comment id="14754120" author="goetz" created="Sat, 15 Feb 2025 06:42:40 -0800"  >[21u-na]&lt;br/&gt;
&lt;br/&gt;
As Oracle backs this out from 21, we will not backport this either.</comment>
                            <comment id="14751711" author="JIRAUSER20601" created="Thu, 13 Feb 2025 03:26:02 -0800"  >As changes in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325730&quot; title=&quot;StringBuilder.toString allocation for the empty String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325730&quot;&gt;&lt;strike&gt;JDK-8325730&lt;/strike&gt;&lt;/a&gt; is non compliant with the specification in AbstractStringBuilder.toString , will be doing backout of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325730&quot; title=&quot;StringBuilder.toString allocation for the empty String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325730&quot;&gt;&lt;strike&gt;JDK-8325730&lt;/strike&gt;&lt;/a&gt; from 21.0.7-oracle. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8349913&quot;&gt;https://bugs.openjdk.org/browse/JDK-8349913&lt;/a&gt; will be used to backout the changes</comment>
                            <comment id="14751488" author="smarks" created="Wed, 12 Feb 2025 11:57:16 -0800"  >Started work on &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14750670" author="shade" created="Mon, 10 Feb 2025 08:00:04 -0800"  >&amp;gt; I can work on &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt; if people think it&amp;#39;s useful to do so. And &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt; seems like a duplicate of that, unless [~shade] has other ideas. &lt;br/&gt;
&lt;br/&gt;
Please :) It feels fairly weird to backport things that are not adherent to the letter of the spec.&lt;br/&gt;
&lt;br/&gt;
I closed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt; as duplicate of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14750130" author="smarks" created="Thu, 6 Feb 2025 15:36:36 -0800"  >[~goetz] Well there&amp;#39;s not much &amp;quot;status&amp;quot; to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt; at least. Way back in JDK 8 I fixed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-7174936&quot; title=&quot;(spec str) several String methods claim to always create new String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-7174936&quot;&gt;&lt;strike&gt;JDK-7174936&lt;/strike&gt;&lt;/a&gt; and removed requirements in several places where the spec seemed to require creation of a &amp;quot;new&amp;quot; String. In fact the implementation wasn&amp;#39;t returning a new String and so was technically in violation. Nobody thought it made sense to &amp;quot;fix&amp;quot; the implementation to conform to the spec, so we relaxed the spec so that it didn&amp;#39;t require a new String every time.&lt;br/&gt;
&lt;br/&gt;
Of course it&amp;#39;s possible to write a program that uses == on String to discern the exact behavior, but nobody ever complained about the behavior. They did complain about the spec&amp;#39;s overly restrictive requirements, and so we changed them.&lt;br/&gt;
&lt;br/&gt;
Some time later I observed similar spec wording in StringBuilder/Buffer and I thought that similar reasoning applied, so I filed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt;. However, I got busy with other stuff and never worked on it. Given that strictly speaking the implementation doesn&amp;#39;t conform to the spec, we&amp;#39;re in the same position as we were with String before, and we can either change the spec or the implementation. I don&amp;#39;t think there&amp;#39;s a reason against changing the spec, and it doesn&amp;#39;t make sense to me to slow down the implementation to match the spec, so I&amp;#39;m in favor of changing the spec.&lt;br/&gt;
&lt;br/&gt;
I can work on &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt; if people think it&amp;#39;s useful to do so. And &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt; seems like a duplicate of that, unless [~shade] has other ideas.&lt;br/&gt;
</comment>
                            <comment id="14750015" author="goetz" created="Thu, 6 Feb 2025 06:26:17 -0800"  >Hi [~shade], [~jjose], [~redestad], [~smarks],&lt;br/&gt;
&lt;br/&gt;
what is the status of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8138614&quot; title=&quot;(spec str) StringBuffer and StringBuilder methods improperly require &amp;quot;new&amp;quot; String to be returned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8138614&quot;&gt;&lt;strike&gt;JDK-8138614&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt;?&lt;br/&gt;
Did you consider finalizing this when backporting &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325730&quot; title=&quot;StringBuilder.toString allocation for the empty String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325730&quot;&gt;&lt;strike&gt;JDK-8325730&lt;/strike&gt;&lt;/a&gt; to 21?&lt;br/&gt;
Will the spec actually be relaxed?  Will this be backported to 21?&lt;br/&gt;
&lt;br/&gt;
Thanks, Goetz&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14749776" author="shade" created="Wed, 5 Feb 2025 09:55:22 -0800"  >This is the way I see the current state:&lt;br/&gt;
&lt;br/&gt;
JDK 8, 11: returns new String (compliant, inefficient)&lt;br/&gt;
JDK 17: returns constant &amp;quot;&amp;quot; (non-compliant, efficient) [done by accident with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8240094&quot; title=&quot;Optimize empty substring handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8240094&quot;&gt;&lt;strike&gt;JDK-8240094&lt;/strike&gt;&lt;/a&gt; in JDK 15]&lt;br/&gt;
JDK 21: returns new String (compliant, inefficient) [done by accident with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8282429&quot; title=&quot;StringBuilder/StringBuffer.toString() skip compressing for UTF16 strings &quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8282429&quot;&gt;&lt;strike&gt;JDK-8282429&lt;/strike&gt;&lt;/a&gt; in JDK 19]&lt;br/&gt;
JDK 25: returns constant &amp;quot;&amp;quot; (non-compliant, efficient) [done by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325730&quot; title=&quot;StringBuilder.toString allocation for the empty String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325730&quot;&gt;&lt;strike&gt;JDK-8325730&lt;/strike&gt;&lt;/a&gt; in JDK 23]&lt;br/&gt;
&lt;br/&gt;
It looks that we lean to resolve the non-compliance by amending the spec (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt;), and allow returning constant &amp;quot;&amp;quot;. Backporting to JDK 21 would bring JDK 21 behavior in line with all JDKs later than 17, which might be a good argument in favor of backport in itself.&lt;br/&gt;
&lt;br/&gt;
But I would have expected us to resolve &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt;, so that we have an iron-clad argument this is behavior going forward, before backporting to JDK 21, though. I am a bit surprised to see 21.0.7-oracle backport...</comment>
                            <comment id="14749703" author="roboduke" created="Wed, 5 Feb 2025 05:48:33 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1387&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1387&lt;/a&gt;&lt;br/&gt;
Date: 2025-02-05 13:43:01 +0000</comment>
                            <comment id="14749701" author="goetz" created="Wed, 5 Feb 2025 05:41:05 -0800"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.7-oracle.&lt;br/&gt;
Medium risk, as it slightly changes behaviour. See also discussion.  But we should behave the same as OracleJDK.&lt;br/&gt;
Clean backport.&lt;br/&gt;
SAP nightly testing passed.</comment>
                            <comment id="14749698" author="goetz" created="Wed, 5 Feb 2025 05:34:37 -0800"  >Hi [~shade], the first (oldest) change you mention has a CSR.  This change adheres to the description in that CSR. The change after that has no CSR.  Also, OracleJDK 21 has this change now. So I think we should backport. </comment>
                            <comment id="14673543" author="shade" created="Wed, 15 May 2024 03:02:59 -0700"  >I filed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332282&quot; title=&quot;AbstractStringBuilder.toString spec needs amendments for empty strings&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332282&quot;&gt;&lt;strike&gt;JDK-8332282&lt;/strike&gt;&lt;/a&gt; to address the disconnect with specification. I am still leaning to backport this fix to jdk21u to avoid the behavior flapping between releases. [~sgehwolf] [~goetz], do you have opinions about this?</comment>
                            <comment id="14657355" author="redestad" created="Thu, 14 Mar 2024 02:46:42 -0700"  >That spec should probably be rewritten to allow for a pre-allocated `String` to be returned to better reflect long standing behavior. E.g. `StringBuffer` will (somewhat awkwardly) return a cached string on repeat `toString()` calls since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8013395&quot;&gt;https://bugs.openjdk.org/browse/JDK-8013395&lt;/a&gt; (8). &lt;br/&gt;
&lt;br/&gt;
Edit: scratch that, except for &amp;quot;&amp;quot; StringBuffer::toString always returns a new String.</comment>
                            <comment id="14657353" author="shade" created="Thu, 14 Mar 2024 02:32:56 -0700"  >The backport to jdk21u prompted me to look at `AbstractStringBuilder.toString` spec, which says:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Returns a string representing the data in this sequence.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* A new {@code String} object is allocated and initialized to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* contain the character sequence currently represented by this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* object. This {@code String} is then returned. Subsequent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* changes to this sequence do not affect the contents of the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* {@code String}.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @return  a string representation of this sequence of characters.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public abstract String toString();&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
I read it as: a new string is _always_ allocated with `toString()`, which means `return &amp;quot;&amp;quot;` is against the spec?</comment>
                            <comment id="14657352" author="roboduke" created="Thu, 14 Mar 2024 02:30:42 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/364&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/364&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-13 19:21:42 +0000</comment>
                            <comment id="14654792" author="roboduke" created="Tue, 5 Mar 2024 05:15:58 -0800"  >[jdk22u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to fix the regression introduced in JDK 19. Applies cleanly. Tests pass. The benchmark improvements are the same as in mainline.</comment>
                            <comment id="14652791" author="roboduke" created="Tue, 27 Feb 2024 07:22:06 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/70&quot;&gt;https://git.openjdk.org/jdk22u/pull/70&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-27 15:17:21 +0000</comment>
                            <comment id="14650947" author="dukebot" created="Tue, 20 Feb 2024 12:30:05 -0800"  >Changeset: d2590c69&lt;br/&gt;
Author:    Claes Redestad &amp;lt;&lt;a href=&apos;mailto:redestad@openjdk.org&apos;&gt;redestad@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-02-20 20:28:55 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/d2590c69b4efe5aa2b48b08070e0dbafb04ef202&quot;&gt;https://git.openjdk.org/jdk/commit/d2590c69b4efe5aa2b48b08070e0dbafb04ef202&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14650854" author="roboduke" created="Tue, 20 Feb 2024 08:37:13 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17931&quot;&gt;https://git.openjdk.org/jdk/pull/17931&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-20 16:32:54 +0000</comment>
                            <comment id="14650850" author="redestad" created="Tue, 20 Feb 2024 08:28:24 -0800"  >Yes, this is a regression. The microbenchmark that was added when this optimization was put in place (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8240094&quot;&gt;https://bugs.openjdk.org/browse/JDK-8240094&lt;/a&gt;) only covered String API, not StringBuilder.toString. I&amp;#39;ll amend that.</comment>
                            <comment id="14650767" author="jlaskey" created="Tue, 20 Feb 2024 04:09:33 -0800"  >Will fix to eliminate additional string pressure but the user should not rely on equality. Bad practice. Recommend new StringBuilder().toString().isEmpty().</comment>
                            <comment id="14648683" author="JIRAUSER19835" created="Tue, 13 Feb 2024 02:40:57 -0800"  >The observations onmacOS:&lt;br/&gt;
JDK 21 output : false&lt;br/&gt;
JDK 11.0.20 output : false&lt;br/&gt;
JDK 17.0.10 output : true  &amp;gt;&amp;gt; Failed&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5123753">JDK-8327770</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128213">JDK-8331299</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5012117">JDK-8240094</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5069356">JDK-8282429</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129504">JDK-8332282</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5150533">JDK-8349913</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34yoj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="190"><![CDATA[java.lang]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17001"><![CDATA[Not verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>