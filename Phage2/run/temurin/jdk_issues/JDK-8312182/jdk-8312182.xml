<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:40:35 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8312182] THPs cause huge RSS due to thread start timing issue</title>
                <link>https://bugs.openjdk.org/browse/JDK-8312182</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>If THP (Transparent Huge Pages) are enabled unconditionally on the system, java applications that use many threads may see a huge Resident Set Size. That footprint is caused by thread stacks being mostly paged in. This page-in is caused by thread stack memory being transformed into huge pages by khugepaged; later, those huge pages usually shatter into small pages when Java guard pages are established at thread start, but the remaining splinter small pages remain paged in.&lt;br/&gt;
&lt;br/&gt;
Note that this effect is independent of any JVM switches; it happens regardless of -XX:+UseTransparentHugePages.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303215&quot; title=&quot;Make thread stacks not use huge pages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303215&quot;&gt;&lt;strike&gt;JDK-8303215&lt;/strike&gt;&lt;/a&gt; attempted to fix this problem by making it unlikely that thread stack boundaries are aligned to THP page size. Unfortunately, that was not sufficient. We still see JVMs with huge footprints, especially if they did create many Java threads in rapid succession.&lt;br/&gt;
&lt;br/&gt;
Demonstration:&lt;br/&gt;
&lt;br/&gt;
10000 idle threads with 100 MB pre-touched java heap, -Xss2M, on x64, will consume:&lt;br/&gt;
&lt;br/&gt;
A) Baseline (THP disabled on system): 369 MB&lt;br/&gt;
B) THP=&amp;quot;always&amp;quot;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303215&quot; title=&quot;Make thread stacks not use huge pages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303215&quot;&gt;&lt;strike&gt;JDK-8303215&lt;/strike&gt;&lt;/a&gt; present: 1.5 GB .. &amp;gt;2 GB (very wobbly)&lt;br/&gt;
C) THP=&amp;quot;always&amp;quot;, &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303215&quot; title=&quot;Make thread stacks not use huge pages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303215&quot;&gt;&lt;strike&gt;JDK-8303215&lt;/strike&gt;&lt;/a&gt; present, artificial delay after thread start: 20,6 GB (!).&lt;br/&gt;
Cause:&lt;br/&gt;
&lt;br/&gt;
The problem is caused by timing. When we create multiple Java threads, the following sequence of actions happens:&lt;br/&gt;
&lt;br/&gt;
In the parent thread:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the parent thread calls pthread_create(3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pthread_create(3) creates the thread stack by calling mmap(2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pthread_create(3) calls clone(2) to start the child thread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;repeat to start more threads&lt;br/&gt;
&lt;br/&gt;
Each child thread:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;queries its stack dimensions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;handshakes with the parent to signal lifeness&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;establishes guard pages at the low end of the stack&lt;br/&gt;
&lt;br/&gt;
The thread stack mapping is established in the parent thread; the guard pages are placed by the child threads. There is a time window in which the thread stack is already mapped into address space, but guard pages still need to be placed.&lt;br/&gt;
&lt;br/&gt;
If the parent is faster than the children, it will have created mappings faster than the children can place guard pages on them.&lt;br/&gt;
&lt;br/&gt;
For the kernel, these thread stacks are just anonymous mappings. It places them adjacent to each other to reduce address space fragmentation. As long as no guard pages are placed yet, all these thread stack mappings (VMAs) have the same attributes - same permission bits, all anonymous. Hence, the kernel will fold them into a single large VMA.&lt;br/&gt;
&lt;br/&gt;
That VMA may be large enough to be eligible for huge pages. Now the JVM races with the khugepaged: If khugepaged is faster than the JVM, it will have converted that larger VMA partly or fully into hugepages before the child threads start creating guard pages.&lt;br/&gt;
&lt;br/&gt;
The child threads will catch up and create guard pages. That will splinter the large VMA into several smaller VMAs (two for each thread, one for the usable thread section, and one protected for the guards). Each of these VMAs will typically be smaller than a huge page, and typically not huge-page-aligned. The huge pages created by khugepaged will mostly shatter into small pages, but these small pages remain paged-in. Effect: we pay memory for the whole thread stacks even though the threads did not start yet.&lt;br/&gt;
&lt;br/&gt;
This is a similar effect as described in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303215&quot; title=&quot;Make thread stacks not use huge pages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303215&quot;&gt;&lt;strike&gt;JDK-8303215&lt;/strike&gt;&lt;/a&gt;; but we assumed it only affects individual threads when it affects whole regions of adjacent thread stacks.&lt;br/&gt;
Example:&lt;br/&gt;
&lt;br/&gt;
Let&amp;#39;s create three threads. Each thread stack, including guard pages, is 2M + 4K sized (+4K because of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303215&quot; title=&quot;Make thread stacks not use huge pages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303215&quot;&gt;&lt;strike&gt;JDK-8303215&lt;/strike&gt;&lt;/a&gt;).&lt;br/&gt;
&lt;br/&gt;
Their thread stacks will be located at: ( [base .. end .. guard]:&lt;br/&gt;
&lt;br/&gt;
T1: [7feea53ff000 .. 7feea5202000 .. 7feea51fe000] &lt;br/&gt;
T2: [7feea5600000 .. 7feea5403000 .. 7feea53ff000] &lt;br/&gt;
T3: [7feea5801000 .. 7feea5604000 .. 7feea5600000]&lt;br/&gt;
&lt;br/&gt;
After pthread_create(3), their thread stacks exist without JVM guard pages. Kernel merges the VMAs of their thread stacks into a single mapping &amp;gt; 6MB. khugepaged then coalesces their small pages into 3 huge pages:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
7feea51fe000-7feea5801000 rw-p 00000000 00:00 0    &amp;lt;&amp;lt;&amp;lt;------- all three stacks as one VMA&lt;br/&gt;
Size:               6156 kB&lt;br/&gt;
KernelPageSize:        4 kB&lt;br/&gt;
MMUPageSize:           4 kB&lt;br/&gt;
Rss:                6148 kB&lt;br/&gt;
Pss:                6148 kB&lt;br/&gt;
Shared_Clean:          0 kB&lt;br/&gt;
Shared_Dirty:          0 kB&lt;br/&gt;
Private_Clean:         0 kB&lt;br/&gt;
Private_Dirty:      6148 kB&lt;br/&gt;
Referenced:         6148 kB&lt;br/&gt;
Anonymous:          6148 kB&lt;br/&gt;
LazyFree:              0 kB&lt;br/&gt;
AnonHugePages:      6144 kB      &amp;lt;&amp;lt;&amp;lt;---------- 3x2MB huge pages&lt;br/&gt;
ShmemPmdMapped:        0 kB&lt;br/&gt;
FilePmdMapped:         0 kB&lt;br/&gt;
Shared_Hugetlb:        0 kB&lt;br/&gt;
Private_Hugetlb:       0 kB&lt;br/&gt;
Swap:                  0 kB&lt;br/&gt;
SwapPss:               0 kB&lt;br/&gt;
Locked:                0 kB&lt;br/&gt;
THPeligible:    1    &lt;br/&gt;
VmFlags: rd wr mr mw me ac sd &lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Threads start and create their respective guard pages. The single VMA splinters into 6 smaller VMAs. The huge pages shatter into small pages that remain paged-in:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
7feea51fe000-7feea5202000 ---p 00000000 00:00 0   &amp;lt;&amp;lt;----- guard pages for T1&lt;br/&gt;
Size:                 16 kB&lt;br/&gt;
...&lt;br/&gt;
7feea5202000-7feea53ff000 rw-p 00000000 00:00 0   &amp;lt;&amp;lt;------ thread stack for T1&lt;br/&gt;
Size:               2036 kB&lt;br/&gt;
KernelPageSize:        4 kB&lt;br/&gt;
MMUPageSize:           4 kB&lt;br/&gt;
Rss:                2036 kB&lt;br/&gt;
Pss:                2036 kB&lt;br/&gt;
Private_Dirty:      2036 kB   &amp;lt;&amp;lt;&amp;lt;--------  all pages resident&lt;br/&gt;
...&lt;br/&gt;
7feea53ff000-7feea5403000 ---p 00000000 00:00 0   &amp;lt;&amp;lt;----- guard pages for T2&lt;br/&gt;
Size:                 16 kB&lt;br/&gt;
...&lt;br/&gt;
7feea5403000-7feea5600000 rw-p 00000000 00:00 0   &amp;lt;&amp;lt;------ thread stack for T2&lt;br/&gt;
Size:               2036 kB&lt;br/&gt;
KernelPageSize:        4 kB&lt;br/&gt;
MMUPageSize:           4 kB&lt;br/&gt;
Rss:                2036 kB&lt;br/&gt;
Pss:                2036 kB&lt;br/&gt;
Private_Dirty:      2036 kB   &amp;lt;&amp;lt;&amp;lt;--------  all pages resident&lt;br/&gt;
...&lt;br/&gt;
7feea5600000-7feea5604000 ---p 00000000 00:00 0    &amp;lt;&amp;lt;----- guard pages for T3 &lt;br/&gt;
Size:                 16 kB&lt;br/&gt;
...&lt;br/&gt;
7feea5604000-7feea5801000 rw-p 00000000 00:00 0    &amp;lt;&amp;lt;------ thread stack for T3&lt;br/&gt;
Size:               2036 kB&lt;br/&gt;
KernelPageSize:        4 kB&lt;br/&gt;
MMUPageSize:           4 kB&lt;br/&gt;
Rss:                2036 kB&lt;br/&gt;
Pss:                2036 kB&lt;br/&gt;
Private_Dirty:      2036 kB   &amp;lt;&amp;lt;&amp;lt;--------  all pages resident&lt;br/&gt;
...&lt;br/&gt;
```</description>
                <environment></environment>
        <key id="5105621">JDK-8312182</key>
            <summary>THPs cause huge RSS due to thread start timing issue</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stuefe">Thomas Stuefe</assignee>
                                    <reporter username="stuefe">Thomas Stuefe</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>large-pages</label>
                            <label>redhat-interest</label>
                            <label>sustaining</label>
                    </labels>
                <created>Mon, 17 Jul 2023 09:53:00 -0700</created>
                <updated>Tue, 5 Dec 2023 01:38:53 -0800</updated>
                            <resolved>Fri, 21 Jul 2023 07:21:49 -0700</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14607643" author="stuefe" created="Wed, 30 Aug 2023 02:39:45 -0700"  >Fix Request 17u:&lt;br/&gt;
&lt;br/&gt;
I want to backport this to 17u since it can cause huge RSS bloat and performance problems on Linux when THPs are unconditionally enabled.&lt;br/&gt;
&lt;br/&gt;
The patch applies cleanly and the risk is small. &lt;br/&gt;
&lt;br/&gt;
The actual changes in this patch are very limited: if THPs are unconditionally enabled, always let the libc alloate a guard page and slightly alter stack sizes that are (THP page size) in size. Even though this (very slightly) increases stack sizes, the observed effect would be a possibly large reduction in RSS because the patch prevents unwanted hugepage clustering of thread stack pages.&lt;br/&gt;
&lt;br/&gt;
GHA ran through successfully (before the last rebase). I also did a lot of manual tests on Ubuntu x64 to verify the problem being solved by this patch.</comment>
                            <comment id="14607641" author="roboduke" created="Wed, 30 Aug 2023 02:38:38 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1697&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1697&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-25 11:57:30 +0000</comment>
                            <comment id="14606759" author="roboduke" created="Fri, 25 Aug 2023 23:06:46 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/103&quot;&gt;https://git.openjdk.org/jdk21u/pull/103&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-25 12:48:36 +0000</comment>
                            <comment id="14606755" author="stuefe" created="Fri, 25 Aug 2023 22:37:26 -0700"  >Fix Request 21u: &lt;br/&gt;
&lt;br/&gt;
I want to backport this to 21u since it can cause huge RSS bloat and performance problems on Linux when THPs are unconditionally enabled.&lt;br/&gt;
&lt;br/&gt;
The patch applies cleanly and the risk is small. &lt;br/&gt;
</comment>
                            <comment id="14605364" author="roboduke" created="Mon, 21 Aug 2023 09:11:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1679&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1679&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-21 12:47:15 +0000</comment>
                            <comment id="14605130" author="roboduke" created="Fri, 18 Aug 2023 23:36:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2086&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2086&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-17 14:50:49 +0000</comment>
                            <comment id="14603979" author="stuefe" created="Tue, 15 Aug 2023 02:39:36 -0700"  >All JDKs down to 8 are affected (I did not test earlier versions).&lt;br/&gt;
&lt;br/&gt;
Starting 10000 threads with 2MB stack, Xmx=Xms=1G, +AlwaysPreTouch:&lt;br/&gt;
&lt;br/&gt;
RSS, in GB, per JDK release:&lt;br/&gt;
&lt;br/&gt;
THP Mode &amp;quot;always&amp;quot;&lt;br/&gt;
jdk 8: 	6-8&lt;br/&gt;
jdk 11:	11-13&lt;br/&gt;
jdk 17: 11-13&lt;br/&gt;
&lt;br/&gt;
THP Mode &amp;quot;never&amp;quot;&lt;br/&gt;
jdk 8: 	11-13&lt;br/&gt;
jdk 11:	1.2&lt;br/&gt;
jdk 17: 1.2&lt;br/&gt;
</comment>
                            <comment id="14601913" author="stuefe" created="Fri, 4 Aug 2023 04:44:52 -0700"  >Note: downports planned (11, 17, possibly 8)</comment>
                            <comment id="14597864" author="dukebot" created="Fri, 21 Jul 2023 07:21:48 -0700"  >Changeset: 84b325b8&lt;br/&gt;
Author:    Thomas Stuefe &amp;lt;&lt;a href=&apos;mailto:stuefe@openjdk.org&apos;&gt;stuefe@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-21 14:19:57 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/84b325b844c08809448a9c073a11443d9e3c3f8e&quot;&gt;https://git.openjdk.org/jdk/commit/84b325b844c08809448a9c073a11443d9e3c3f8e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14596917" author="roboduke" created="Tue, 18 Jul 2023 08:46:22 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14919&quot;&gt;https://git.openjdk.org/jdk/pull/14919&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-18 08:14:56 +0000</comment>
                            <comment id="14596685" author="stuefe" created="Mon, 17 Jul 2023 11:54:38 -0700"  >A very simple solution is to let the glibc create a guard page. We normally don&amp;#39;t do that for Java threads. But if glibc creates the guard page, it does so by mprotecting the end of the stack *before* cloning the child thread. That means there will not exist a time within which the thread stack VMA will be mergeable with the preceding adjacent VMA.&lt;br/&gt;
&lt;br/&gt;
Note, however, that establishing glibc guards in addition to JVM guards costs one additional VMA per thread (now 3, before 2) since glibc guard and JVM guard cannot be merged; the issue is tracked by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8312211&quot; title=&quot;[Linux] Java guard page VMAs should clear the VM_ACCOUNT mm flag&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8312211&quot;&gt;&lt;strike&gt;JDK-8312211&lt;/strike&gt;&lt;/a&gt;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5108985">JDK-8315122</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5109316">JDK-8315396</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5115857">JDK-8321110</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5103423">JDK-8310233</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107857">JDK-8314139</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5095026">JDK-8303215</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106076">JDK-8312585</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5105653">JDK-8312211</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32bmb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>