<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:27:27 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8297605] improve DelayQueue removal method javadoc</title>
                <link>https://bugs.openjdk.org/browse/JDK-8297605</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The documentation for java.util.concurrent.DelayQueue states:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;The head of the queue is that Delayed element whose delay expired furthest in the past. If no delay has expired there is no head and poll will return null.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
However the documentation for the peek() method states:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Unlike poll, if no expired elements are available in the queue, this method returns the element that will expire next, if one exists.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
With a return value documented as: &amp;quot;the head of this queue, or null if this queue is empty&amp;quot;&lt;br/&gt;
&lt;br/&gt;
I believe the wording that states &amp;quot;If no delay has expired there is no head...&amp;quot; is confusing and inconsistent with the documentation for peek().&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5088288">JDK-8297605</key>
            <summary>improve DelayQueue removal method javadoc</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="martin">Martin Buchholz</assignee>
                                    <reporter username="swpalmer">Scott Palmer</reporter>
                        <labels>
                            <label>javadoc</label>
                    </labels>
                <created>Thu, 24 Nov 2022 13:26:35 -0800</created>
                <updated>Wed, 9 Aug 2023 10:36:02 -0700</updated>
                            <resolved>Fri, 31 Mar 2023 11:13:16 -0700</resolved>
                                    <version>19.0.2</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14571064" author="dukebot" created="Fri, 31 Mar 2023 11:13:09 -0700"  >Changeset: a565be4d&lt;br/&gt;
Author:    Martin Buchholz &amp;lt;&lt;a href=&apos;mailto:martin@openjdk.org&apos;&gt;martin@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-03-31 18:11:53 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a565be4dc5fa6bbaa92553763caf6f2cc5c2c2a1&quot;&gt;https://git.openjdk.org/jdk/commit/a565be4dc5fa6bbaa92553763caf6f2cc5c2c2a1&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14564194" author="roboduke" created="Thu, 2 Mar 2023 12:10:05 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12838&quot;&gt;https://git.openjdk.org/jdk/pull/12838&lt;/a&gt;&lt;br/&gt;
Date: 2023-03-02 20:00:56 +0000</comment>
                            <comment id="14562468" author="roboduke" created="Thu, 23 Feb 2023 07:44:53 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12729&quot;&gt;https://git.openjdk.org/jdk/pull/12729&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-23 15:36:48 +0000</comment>
                            <comment id="14562414" author="roboduke" created="Thu, 23 Feb 2023 01:15:06 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12727&quot;&gt;https://git.openjdk.org/jdk/pull/12727&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-23 09:05:49 +0000</comment>
                            <comment id="14562336" author="dholmes" created="Wed, 22 Feb 2023 15:02:02 -0800"  >[~vklang] I like that too! Thanks.</comment>
                            <comment id="14562073" author="swpalmer" created="Wed, 22 Feb 2023 08:25:45 -0800"  >[~ vklang]&lt;br/&gt;
&lt;br/&gt;
+1 I think that clears things up nicely.</comment>
                            <comment id="14561976" author="JIRAUSER20508" created="Wed, 22 Feb 2023 02:12:52 -0800"  >[~swpalmer]&lt;br/&gt;
&lt;br/&gt;
Thanks for your comment, Scott. Reflecting on what you say, what do you think of separating it out to two distinct things: &amp;quot;expired head&amp;quot; and &amp;quot;head&amp;quot;?&lt;br/&gt;
&lt;br/&gt;
So for instance, poll would be:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;     * Retrieves and removes the expired head of this queue, or returns {@code null} if the queue is empty or the current head has not yet expired.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
And take would be:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;     * Retrieves and removes the expired head of this queue, waiting if necessary for the head of the queue to expire.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Then peek can be:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;     * Retrieves, but does not remove, the head of this queue regardless of its expiration status, or returns {@code null} if this queue is empty.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Then the following sentence could be removed from the general DelayQueue class documentation:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;If no delay has expired there is no head and {@code poll}&lt;br/&gt;
&amp;nbsp;* will return {@code null}.&amp;quot;</comment>
                            <comment id="14561877" author="swpalmer" created="Tue, 21 Feb 2023 21:58:50 -0800"  >Well I think something should be done. You can&#8217;t say you don&#8217;t have a head of the queue in one context yet have a method that also says it will return but not remove the head. How can you do that if there is no head?&lt;br/&gt;
&lt;br/&gt;
The way I think of this is that there is always a &#8220;head&#8221; for a non-empty queue. DelayQueue modifies the behaviour, not the structure, such that poll will return an expired head or null if the head has not expired or the queue is empty. Peek() always returns but does not remove the head, and take() blocks until there is an expired head.&lt;br/&gt;
&lt;br/&gt;
The only part that I would change are these sentences in the DelayQueue description: &lt;br/&gt;
&lt;br/&gt;
&#8220;The head of the queue is that Delayed element whose delay expired furthest in the past. If no delay has expired there is no head and poll will return null.&#8221; &lt;br/&gt;
&lt;br/&gt;
That conflicts with the documentation for peek() which clearly has a different idea of when the queue has a head, stating: &#8220;Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.&#8221;  I agree with how the peek() method documentation views the head of the queue.&lt;br/&gt;
The documentation of poll() and take() are okay as they are, since they never refer to the queue having no head.&lt;br/&gt;
&lt;br/&gt;
I would change those two sentences in the DelayQueue description to:&lt;br/&gt;
&#8220;The head of the queue is the Delayed element that is expired furthest in the past or is closest to expiring next if no elements have expired. If the queue is empty or the head has not yet expired, poll will return null.&#8221; &lt;br/&gt;
&lt;br/&gt;
I see similarities to a PriorityQueue where the &#8220;natural order&#8221; is based on the expiration time, but elements are blocked from being removed via poll() or take() until that time has expired. Maybe that isn&#8217;t a good way to think of it?</comment>
                            <comment id="14561708" author="JIRAUSER20508" created="Tue, 21 Feb 2023 07:50:31 -0800"  >[~swpalmer] I&amp;#39;m inclined to close this unless there&amp;#39;s a clearer alternative proposed, as David mentioned above, DelayQueue is a bit different since there&amp;#39;s a temporal aspect to the availability of elements.</comment>
                            <comment id="14548706" author="JIRAUSER20508" created="Wed, 4 Jan 2023 07:17:00 -0800"  >&amp;gt;DelayQueue isn&amp;#39;t a typical container-style data structure. We want the &amp;quot;head&amp;quot; to only be expired elements otherwise the caller has to check for expiration themselves.&lt;br/&gt;
&lt;br/&gt;
Indeed, the difference is that DelayQueue isn&amp;#39;t a typical FIFO-style queue: rather the element with the lowest &amp;quot;timestamp&amp;quot; considered to be the head of the queue, and in some cases it isn&amp;#39;t considered the head of the queue (i.e. if the timestamp is in the future).&lt;br/&gt;
&lt;br/&gt;
Perhaps one confusing aspect is that the documentation speaks of the &amp;quot;delay&amp;quot; rather than at which point an element is to be made available? (i.e. relativistic vs absolute).</comment>
                            <comment id="14548191" author="dholmes" created="Mon, 2 Jan 2023 18:42:03 -0800"  >&amp;gt; It&#8217;s the idea of a non-empty queue having &#8220;no head&#8221; that seems wrong to me.&lt;br/&gt;
&lt;br/&gt;
DelayQueue isn&amp;#39;t a typical container-style data structure. We want the &amp;quot;head&amp;quot; to only be expired elements otherwise the caller has to check for expiration themselves. The ability to peek into the internals of the implementation is more for debugging/monitoring.</comment>
                            <comment id="14548156" author="swpalmer" created="Mon, 2 Jan 2023 06:38:11 -0800"  >Yes, that&#8217;s better.  &lt;br/&gt;
It&#8217;s the idea of a non-empty queue having &#8220;no head&#8221; that seems wrong to me.  I don&#8217;t like the definition of &#8220;head&#8221; being &#8220;an expired element&#8221;.  To me it makes more sense to specify how the methods act on the head if it has not expired.  I.e. describe how the behaviour differs from a normal queue without messing around with the definitions of the structure. In this case, when take or poll are called, the head of the queue stays put until it expires.</comment>
                            <comment id="14548146" author="JIRAUSER20508" created="Mon, 2 Jan 2023 06:14:58 -0800"  >[~swpalmer]&lt;br/&gt;
&lt;br/&gt;
Would something to the following effect be less confusing?&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Retrieves, but does not remove, the head of this queue, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* returns {@code null} if this queue is empty.  Unlike&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* {@code poll}, this method may return an element which&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* has not yet expired.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @return the head of this queue, or {@code null} if this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*         queue is empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/</comment>
                            <comment id="14540481" author="dholmes" created="Sun, 27 Nov 2022 16:03:29 -0800"  >&amp;gt; With a return value documented as: &amp;quot;the head of this queue, or null if this queue is empty&amp;quot; &lt;br/&gt;
&lt;br/&gt;
I think this is the part that is lacking as the possible return value is one of:&lt;br/&gt;
- the head of the queue if there is one (by definition of head being an expired element)&lt;br/&gt;
- null if the queue is empty&lt;br/&gt;
- the first unexpired element if the queue is non-empty and has no &amp;quot;head&amp;quot;</comment>
                            <comment id="14540279" author="martin" created="Thu, 24 Nov 2022 23:55:30 -0800"  >I agree the javadoc for DelayQueue can be improved.&lt;br/&gt;
&lt;br/&gt;
DelayQueue is weird and doesn&amp;#39;t really implement the Queue contract.&lt;br/&gt;
Different methods have different meanings for &amp;quot;head&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
Previous documentation efforts have helped, especially:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Even though unexpired elements cannot be removed using take or poll, they are otherwise treated as normal elements. For example, the size method returns the count of both expired and unexpired elements.&amp;quot;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5096838">JDK-8304686</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zduz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17417"><![CDATA[b17]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="215"><![CDATA[java.util.concurrent]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>