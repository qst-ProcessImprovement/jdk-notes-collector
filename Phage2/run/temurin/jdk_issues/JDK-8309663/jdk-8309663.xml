<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:59:43 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8309663] test fails &quot;assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8309663</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
serviceability/jvmti/vthread/FollowReferences/VThreadStackRefTest.java#default&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(6/398)----------&lt;br/&gt;
command: main -Djdk.virtualThreadScheduler.parallelism=1 -agentlib:VThreadStackRefTest VThreadStackRefTest&lt;br/&gt;
reason: User specified action: run main/othervm/native -Djdk.virtualThreadScheduler.parallelism=1 -agentlib:VThreadStackRefTest VThreadStackRefTest &lt;br/&gt;
started: Thu Jun 08 03:32:05 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
finished: Thu Jun 08 03:32:32 UTC 2023&lt;br/&gt;
elapsed time (seconds): 26.98&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(41/2859)----------&lt;br/&gt;
created class VThreadStackRefTest$VThreadUnmountedReferenced&lt;br/&gt;
created class VThreadStackRefTest$VThreadUnmountedEnded&lt;br/&gt;
created class VThreadStackRefTest$VThreadMountedReferenced&lt;br/&gt;
created class VThreadStackRefTest$VThreadMountedJNIReferenced&lt;br/&gt;
created class VThreadStackRefTest$PThreadReferenced&lt;br/&gt;
threads:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vthreadUnmounted: VirtualThread[#32]/waiting&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vthreadEnded: VirtualThread[#35]/terminated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- vthreadMounted: VirtualThread[#36]/runnable@ForkJoinPool-1-worker-1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- pthread: Thread[#37,Thread-1,5,MainThreadGroup]&lt;br/&gt;
test classes:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(0) class VThreadStackRefTest$VThreadUnmountedReferenced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(1) class VThreadStackRefTest$VThreadUnmountedJNIReferenced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(2) class VThreadStackRefTest$VThreadMountedReferenced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(3) class VThreadStackRefTest$VThreadMountedJNIReferenced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(4) class VThreadStackRefTest$PThreadReferenced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(5) class VThreadStackRefTest$VThreadUnmountedEnded&lt;br/&gt;
Thread VirtualThread[#32]/waiting: unmounted&lt;br/&gt;
Thread VirtualThread[#36]/runnable@ForkJoinPool-1-worker-1: mounted&lt;br/&gt;
JNI local: index = 3, thread_id = 36&lt;br/&gt;
Stack local: index = 2, thread_id = 36&lt;br/&gt;
Stack local: index = 4, thread_id = 37&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S14090/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/12aad8ed-cf3c-41cb-8164-344f33d1386e/runs/683ff040-6fd8-48dd-9782-2bb011040acf/workspace/open/src/hotspot/share/oops/compressedOops.inline.hpp:140), pid=14722, tid=14742&lt;br/&gt;
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (21.0+26) (fastdebug build 21-ea+26-LTS-2277)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+26-LTS-2277, compiled mode, sharing, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x5ed590]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0xa0&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1109/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/423bf862-ffee-460e-82a8-41c38006fe63/runs/fdcf1912-6ed8-40cd-b14a-9b71de02efa6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/1/core.14722)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S1109/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/423bf862-ffee-460e-82a8-41c38006fe63/runs/fdcf1912-6ed8-40cd-b14a-9b71de02efa6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/1/hs_err_pid14722.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(40/6613)*----------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fd4e413d890):  VMThread &amp;quot;VM Thread&amp;quot;          [id=14742, stack(0x00007fd4d894c000,0x00007fd4d8a4c000) (1024K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fd4d894c000,0x00007fd4d8a4c000],  sp=0x00007fd4d8a48ee0,  free space=1011k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x5ed590]  CompressedKlassPointers::decode_not_null(unsigned int, unsigned char*)+0xa0  (compressedOops.inline.hpp:140)&lt;br/&gt;
V  [libjvm.so+0x11b7281]  CallbackWrapper::CallbackWrapper(JvmtiTagMap*, oop)+0xa1  (compressedOops.inline.hpp:134)&lt;br/&gt;
V  [libjvm.so+0x11ba031]  CallbackInvoker::invoke_advanced_stack_ref_callback(jvmtiHeapReferenceKind, long, long, int, _jmethodID*, long, int, oop)+0xd1  (jvmtiTagMap.cpp:1736)&lt;br/&gt;
V  [libjvm.so+0x11bab27]  JNILocalRootsClosure::do_oop(oop*)+0x167  (jvmtiTagMap.cpp:2001)&lt;br/&gt;
V  [libjvm.so+0x14103da]  nmethod::oops_do(OopClosure*, bool)+0x29a  (nmethod.cpp:1773)&lt;br/&gt;
V  [libjvm.so+0x11b66ff]  StackRefCollector::do_frame(vframe*)+0x11f  (nmethod.hpp:551)&lt;br/&gt;
V  [libjvm.so+0x11b6834]  StackRefCollector::process_frames(vframe*)+0x34  (jvmtiTagMap.cpp:2353)&lt;br/&gt;
V  [libjvm.so+0x11bb464]  VM_HeapWalkOperation::collect_vthread_stack_refs(oop)+0x434  (jvmtiTagMap.cpp:2886)&lt;br/&gt;
V  [libjvm.so+0x11bbdc7]  VM_HeapWalkOperation::visit(oop)+0x5e7  (jvmtiTagMap.cpp:2910)&lt;br/&gt;
V  [libjvm.so+0x11b6b1e]  VM_HeapWalkOperation::doit()+0x2ce  (jvmtiTagMap.cpp:2958)&lt;br/&gt;
V  [libjvm.so+0x1872459]  VM_Operation::evaluate()+0x139  (vmOperations.cpp:71)&lt;br/&gt;
V  [libjvm.so+0x189515b]  VMThread::evaluate_operation(VM_Operation*)+0x10b  (vmThread.cpp:281)&lt;br/&gt;
V  [libjvm.so+0x1895ccf]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)&lt;br/&gt;
V  [libjvm.so+0x1895eb4]  VMThread::loop()+0x84  (vmThread.cpp:502)&lt;br/&gt;
V  [libjvm.so+0x1895fb7]  VMThread::run()+0x87  (vmThread.cpp:175)&lt;br/&gt;
V  [libjvm.so+0x1793f8a]  Thread::call_run()+0xba  (thread.cpp:217)&lt;br/&gt;
V  [libjvm.so+0x149505c]  thread_native_entry(Thread*)+0x11c  (os_linux.cpp:775)&lt;br/&gt;
&lt;br/&gt;
Since we&amp;#39;re crashing during a heap walk operation, I&amp;#39;m starting this&lt;br/&gt;
bug off in hotspot/gc for initial triage.</description>
                <environment></environment>
        <key id="5102746">JDK-8309663</key>
            <summary>test fails &quot;assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="amenkov">Alex Menkov</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>Xcomp</label>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>problemlist</label>
                            <label>tier5</label>
                            <label>zgc</label>
                    </labels>
                <created>Thu, 8 Jun 2023 06:54:32 -0700</created>
                <updated>Wed, 24 Jul 2024 14:23:52 -0700</updated>
                            <resolved>Mon, 7 Aug 2023 11:29:20 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                                                                                                            <comments>
                            <comment id="14618755" author="roboduke" created="Tue, 17 Oct 2023 01:56:31 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Clean backport to fix a corner case in JVMTI + concurrent GCs.</comment>
                            <comment id="14618422" author="roboduke" created="Mon, 16 Oct 2023 09:15:52 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/253&quot;&gt;https://git.openjdk.org/jdk21u/pull/253&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-16 15:30:44 +0000</comment>
                            <comment id="14602330" author="dukebot" created="Mon, 7 Aug 2023 11:29:18 -0700"  >Changeset: 83edffa6&lt;br/&gt;
Author:    Alex Menkov &amp;lt;&lt;a href=&apos;mailto:amenkov@openjdk.org&apos;&gt;amenkov@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-08-07 18:27:33 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/83edffa608d998a118d1d12f62d73be40a8982bc&quot;&gt;https://git.openjdk.org/jdk/commit/83edffa608d998a118d1d12f62d73be40a8982bc&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14589133" author="roboduke" created="Tue, 13 Jun 2023 18:06:44 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14460&quot;&gt;https://git.openjdk.org/jdk/pull/14460&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-14 01:02:09 +0000</comment>
                            <comment id="14588291" author="amenkov" created="Fri, 9 Jun 2023 17:11:20 -0700"  >&amp;gt; 2) _blk is a JNILocalRootsClosure and the nmethod oops are not JNILocals nor roots.&lt;br/&gt;
&amp;gt; 3) The stackChunk this code is visiting is not a root and the code still uses JNILocalRootsClosure &lt;br/&gt;
&lt;br/&gt;
JNILocalRootsClosure reports JVMTI_HEAP_REFERENCE_JNI_LOCAL reference. The spec was updated recently, this kind means only &amp;quot;JNI local reference&amp;quot;, it may be root or not root. &amp;quot;JNILocalRootsClosure&amp;quot; is just a historical name (like CallbackInvoker::report_stack_ref_root which reports &amp;quot;Local variable on a thread stack&amp;quot;, root or not root). Maybe to avoid confusion it make sense to rename classes/functions which contain &amp;quot;root&amp;quot;, but are used for not root objects.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 4) It&amp;#39;s unclear if we really should be visiting the nmethod oops here. Most oops will be visited by report_java_stack_refs, because locals and expressions from the nmethods are included (with the correct barriers). We tried to find out why we visit the nmethod oops here but only found &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8038797&quot; title=&quot;JVMTI FollowReferences does not report roots reachable from nmethods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8038797&quot;&gt;&lt;strike&gt;JDK-8038797&lt;/strike&gt;&lt;/a&gt;, which lacks details of why this needed to be added. Maybe [~coleenp] remembers more. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; At first I thought I added that because Mikael said that GC needed it, but I think the reason is that there are oops in the nmethod oops section that keep metadata alive that aren&amp;#39;t in the locals and expression stack. &lt;br/&gt;
&lt;br/&gt;
I think if a reference from nmethod is reported as local/expression, it should not be reported additionally as JNI local, but for now I prefer to keep the code as is (to handle oops which are not in locals/expressions).&lt;br/&gt;
As a fix for this issue I&amp;#39;m going to add load barriers for nmethods.&lt;br/&gt;
</comment>
                            <comment id="14588185" author="coleenp" created="Fri, 9 Jun 2023 08:14:06 -0700"  >&amp;gt;  Maybe [~coleenp] remembers more.&lt;br/&gt;
&lt;br/&gt;
At first I thought I added that because Mikael said that GC needed it, but I think the reason is that there are oops in the nmethod oops section that keep metadata alive that aren&amp;#39;t in the locals and expression stack.&lt;br/&gt;
</comment>
                            <comment id="14588114" author="stefank" created="Fri, 9 Jun 2023 02:16:17 -0700"  >This code is dubious for various reasons:&lt;br/&gt;
---&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Follow oops from compiled nmethod.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (jvf-&amp;gt;cb() != nullptr &amp;amp;&amp;amp; jvf-&amp;gt;cb()-&amp;gt;is_nmethod()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_blk-&amp;gt;set_context(_thread_tag, _tid, _depth, method);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jvf-&amp;gt;cb()-&amp;gt;as_nmethod()-&amp;gt;oops_do(_blk);&lt;br/&gt;
---&lt;br/&gt;
&lt;br/&gt;
1) This lacks appropriate load barriers. This works for non-vthreads because we have other infrastructure that applies the correct barriers for &amp;quot;on-stack&amp;quot; oops. Something else is needed for vthreads. There are different ways to solve this:&lt;br/&gt;
a) Call run_nmethod_entry_barrier() before calling oops_do, or&lt;br/&gt;
b) Use NMethodAccess&amp;lt;ON_PHANTOM_OOP_REF&amp;gt;::oop_load before passing the oop to _blk&lt;br/&gt;
&lt;br/&gt;
2) _blk is a JNILocalRootsClosure and the nmethod oops are not JNILocals nor roots.&lt;br/&gt;
&lt;br/&gt;
3) The stackChunk this code is visiting is not a root and the code still uses JNILocalRootsClosure&lt;br/&gt;
&lt;br/&gt;
4) It&amp;#39;s unclear if we really should be visiting the nmethod oops here. Most oops will be visited by report_java_stack_refs, because locals and expressions from the nmethods are included (with the correct barriers). We tried to find out why we visit the nmethod oops here but only found &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8038797&quot; title=&quot;JVMTI FollowReferences does not report roots reachable from nmethods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8038797&quot;&gt;&lt;strike&gt;JDK-8038797&lt;/strike&gt;&lt;/a&gt;, which lacks details of why this needed to be added. Maybe [~coleenp] remembers more.&lt;br/&gt;
&lt;br/&gt;
/ StefanK &amp;amp; Erik&amp;#xD6;</comment>
                            <comment id="14588018" author="stefank" created="Thu, 8 Jun 2023 12:29:00 -0700"  >I looked at the code and I couldn&amp;#39;t see any load barrier infrastructure that made it safe for this code to load oops. Did I miss it or is this the reason for this crash? Could you explain how you make sure that you are allowed to read the oops in the stackChunk?</comment>
                            <comment id="14588008" author="amenkov" created="Thu, 8 Jun 2023 11:57:49 -0700"  >The crash occurs when FollowReferences explores stack references for unmounted virtual thread (from stackChunks) and looking for JNI locals for compiled nmethod</comment>
                            <comment id="14587934" author="stefank" created="Thu, 8 Jun 2023 07:06:40 -0700"  >There was a recent change to FollowReferences:&lt;br/&gt;
---&lt;br/&gt;
commit 207fbcb08319c4cae976fc5248780d4b438ae5f9&lt;br/&gt;
Author: Alex Menkov &amp;lt;&lt;a href=&apos;mailto:amenkov@openjdk.org&apos;&gt;amenkov@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:   Wed May 24 20:26:10 2023 +0000&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8299414: JVMTI FollowReferences should support references from VirtualThread stack&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reviewed-by: sspitsyn, kevinw&lt;br/&gt;
---&lt;br/&gt;
&lt;br/&gt;
It would be good to get an initial assessment from the SVC team.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5112878">JDK-8318543</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5135107">JDK-8337151</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                                              <subtask id="5102857">JDK-8309760</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31twb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17338"><![CDATA[b10]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="372"><![CDATA[jvmti]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>