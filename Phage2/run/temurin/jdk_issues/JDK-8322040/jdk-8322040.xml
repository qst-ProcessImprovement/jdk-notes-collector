<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:15:57 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8322040] Missing array bounds check in ClassReader.parameter</title>
                <link>https://bugs.openjdk.org/browse/JDK-8322040</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When javac reads a MethodParameters attribute with fewer entries than there are method parameters, it does not do a bounds check before reading from the array parameterNameIndicesMp here [1]. Note that there is a corresponding bounds check for parameterNameIndicesLvt below that code.&lt;br/&gt;
&lt;br/&gt;
The ArrayIndexOutOfBounds exception is handled by ClassReader [2] and results in a bad.class.file error.&lt;br/&gt;
&lt;br/&gt;
I noticed this while debugging a crash for a class that had ended up in a bad state, and I think the root cause is that the class is getting &amp;#39;half completed&amp;#39; before MethodParameter attribute handling crashes, and then the compilation handles the exception and continues with the class file in a bad state.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/cf948548c390c42ca63525d41a9d63ff31349c3a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2805-L2807&quot;&gt;https://github.com/openjdk/jdk/blob/cf948548c390c42ca63525d41a9d63ff31349c3a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2805-L2807&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/cf948548c390c42ca63525d41a9d63ff31349c3a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L3108&quot;&gt;https://github.com/openjdk/jdk/blob/cf948548c390c42ca63525d41a9d63ff31349c3a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L3108&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
---&lt;br/&gt;
&lt;br/&gt;
I found the following crash while try to produce a repro, which is slightly different than the original crash I found:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
import javax.annotation.processing.AbstractProcessor;&lt;br/&gt;
import javax.annotation.processing.RoundEnvironment;&lt;br/&gt;
import javax.annotation.processing.SupportedAnnotationTypes;&lt;br/&gt;
import javax.lang.model.SourceVersion;&lt;br/&gt;
import javax.lang.model.element.TypeElement;&lt;br/&gt;
import javax.tools.Diagnostic;&lt;br/&gt;
import java.util.Set;&lt;br/&gt;
&lt;br/&gt;
@SupportedAnnotationTypes(&amp;quot;*&amp;quot;)&lt;br/&gt;
public class P extends AbstractProcessor {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public SourceVersion getSupportedSourceVersion() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return SourceVersion.latestSupported();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment roundEnv) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processingEnv&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.getMessager()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.printMessage(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Diagnostic.Kind.NOTE,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processingEnv&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.getElementUtils()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.getTypeElement(&amp;quot;T.I&amp;quot;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.getEnclosedElements()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.toString());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
import java.nio.file.Files;&lt;br/&gt;
import java.nio.file.Paths;&lt;br/&gt;
import org.objectweb.asm.ClassWriter;&lt;br/&gt;
import org.objectweb.asm.Label;&lt;br/&gt;
import org.objectweb.asm.MethodVisitor;&lt;br/&gt;
import org.objectweb.asm.Opcodes;&lt;br/&gt;
&lt;br/&gt;
public class TDump implements Opcodes {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static void main(String[] args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Files.write(Paths.get(&amp;quot;T.class&amp;quot;), dump());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static byte[] dump() throws Exception {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ClassWriter classWriter = new ClassWriter(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MethodVisitor methodVisitor;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classWriter.visit(V19, ACC_SUPER, &amp;quot;T&amp;quot;, null, &amp;quot;java/lang/Object&amp;quot;, null);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classWriter.visitSource(&amp;quot;T.java&amp;quot;, null);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classWriter.visitNestMember(&amp;quot;T$I&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classWriter.visitInnerClass(&amp;quot;T$I&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;I&amp;quot;, 0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor = classWriter.visitMethod(0, &amp;quot;&amp;lt;init&amp;gt;&amp;quot;, &amp;quot;()V&amp;quot;, null, null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitCode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Label label0 = new Label();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitLabel(label0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitLineNumber(1, label0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitVarInsn(ALOAD, 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitMethodInsn(INVOKESPECIAL, &amp;quot;java/lang/Object&amp;quot;, &amp;quot;&amp;lt;init&amp;gt;&amp;quot;, &amp;quot;()V&amp;quot;, false);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitInsn(RETURN);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitMaxs(1, 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitEnd();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, &amp;quot;f&amp;quot;, &amp;quot;(II)V&amp;quot;, null, null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitParameter(&amp;quot;x&amp;quot;, 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitCode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Label label0 = new Label();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitLabel(label0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitLineNumber(3, label0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitInsn(RETURN);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitMaxs(0, 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methodVisitor.visitEnd();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classWriter.visitEnd();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return classWriter.toByteArray();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
class T {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static void f(int x, int y) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class I {}&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
javac -cp asm-9.5.jar:asm-util-9.5.jar TDump.java T.java P.java&lt;br/&gt;
java -cp asm-9.5.jar:asm-util-9.5.jar:. TDump&lt;br/&gt;
javac -parameters -processor P T.I&lt;br/&gt;
...&lt;br/&gt;
An exception has occurred in the compiler (22-internal). Please file a bug against the Java compiler via the Java bug reporting page (&lt;a href=&quot;https://bugreport.java.com&quot;&gt;https://bugreport.java.com&lt;/a&gt;) after checking the Bug Database (&lt;a href=&quot;https://bugs.java.com&quot;&gt;https://bugs.java.com&lt;/a&gt;) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.&lt;br/&gt;
java.lang.ClassCastException: class com.sun.tools.javac.comp.Resolve$BadClassFileError cannot be cast to class com.sun.tools.javac.code.Symbol$ClassSymbol (com.sun.tools.javac.comp.Resolve$BadClassFileError and com.sun.tools.javac.code.Symbol$ClassSymbol are in module jdk.compiler of loader &amp;#39;app&amp;#39;)&lt;br/&gt;
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1255)&lt;br/&gt;
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)&lt;br/&gt;
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)&lt;br/&gt;
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)&lt;br/&gt;
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)&lt;br/&gt;
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)</description>
                <environment></environment>
        <key id="5116959">JDK-8322040</key>
            <summary>Missing array bounds check in ClassReader.parameter</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cushon">Liam Miller-Cushon</assignee>
                                    <reporter username="cushon">Liam Miller-Cushon</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                    </labels>
                <created>Wed, 13 Dec 2023 13:47:07 -0800</created>
                <updated>Tue, 17 Dec 2024 13:33:20 -0800</updated>
                            <resolved>Fri, 15 Dec 2023 02:18:17 -0800</resolved>
                                    <version>11.0.23</version>
                    <version>17.0.11</version>
                    <version>21.0.2</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14635551" author="roboduke" created="Tue, 19 Dec 2023 08:54:58 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/74&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/74&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-19 16:47:28 +0000</comment>
                            <comment id="14635550" author="cushon" created="Tue, 19 Dec 2023 08:53:47 -0800"  >Fix Request JDK 21u&lt;br/&gt;
&lt;br/&gt;
This fixes a missing array bounds check introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292275&quot; title=&quot;javac does not emit SYNTHETIC and MANDATED flags for parameters by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292275&quot;&gt;&lt;strike&gt;JDK-8292275&lt;/strike&gt;&lt;/a&gt;, and which was leading to a crash in specific situations after the changes introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The fix applied cleanly. The test required updating due to changes in the Class-File API. The modified test fails without the patch, and passes with it.</comment>
                            <comment id="14635549" author="cushon" created="Tue, 19 Dec 2023 08:53:42 -0800"  >Fix Request JDK 22u&lt;br/&gt;
&lt;br/&gt;
This fixes a missing array bounds check introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292275&quot; title=&quot;javac does not emit SYNTHETIC and MANDATED flags for parameters by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292275&quot;&gt;&lt;strike&gt;JDK-8292275&lt;/strike&gt;&lt;/a&gt;, and which was leading to a crash in specific situations after the changes introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The fix applied cleanly. The test required updating due to changes in the Class-File API. The modified test fails without the patch, and passes with it.</comment>
                            <comment id="14635547" author="roboduke" created="Tue, 19 Dec 2023 08:52:26 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/4&quot;&gt;https://git.openjdk.org/jdk22u/pull/4&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-19 16:47:29 +0000</comment>
                            <comment id="14635538" author="cushon" created="Tue, 19 Dec 2023 08:20:55 -0800"  >Thanks ~shade,&lt;br/&gt;
&lt;br/&gt;
The root cause I found with the missing bounds check on `parameterNameIndicesMp` affects 21 and later, `parameterNameIndicesMp` was added in 21 for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292275&quot; title=&quot;javac does not emit SYNTHETIC and MANDATED flags for parameters by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292275&quot;&gt;&lt;strike&gt;JDK-8292275&lt;/strike&gt;&lt;/a&gt;: &lt;a href=&quot;https://github.com/openjdk/jdk/commit/b3dbf28bc0614bee2f7137af95389134155c9511#diff-23a8d62238ad3bc7231f693927b6af76a1f7a1c947456eb443545227e586fb04R2488&quot;&gt;https://github.com/openjdk/jdk/commit/b3dbf28bc0614bee2f7137af95389134155c9511#diff-23a8d62238ad3bc7231f693927b6af76a1f7a1c947456eb443545227e586fb04R2488&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I haven&amp;#39;t been able to come up with a realistic repro for that crash, but I also don&amp;#39;t see downsides to proactively backporting to 21.&lt;br/&gt;
&lt;br/&gt;
The NPE in &amp;#39;interfaces_field&amp;#39; is supposed to be impossible, by the time TypeAnnotationSymbolVisitor sees a class symbol that field should have been filled in. It&amp;#39;s possible that there are other related error recovery bugs in this area that could lead to symbols ending up in a bad state, and have similar symptoms.</comment>
                            <comment id="14635431" author="shade" created="Tue, 19 Dec 2023 05:05:25 -0800"  >I am provisionally adding the affected versions from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt;, since it affects the code added there. This needs more investigation for the impact on update releases.</comment>
                            <comment id="14634589" author="dukebot" created="Fri, 15 Dec 2023 02:18:15 -0800"  >Changeset: 20de541b&lt;br/&gt;
Author:    Liam Miller-Cushon &amp;lt;&lt;a href=&apos;mailto:cushon@openjdk.org&apos;&gt;cushon@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-12-15 10:16:35 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/20de541b1304b4dc3a385f8a78f1215da237e4aa&quot;&gt;https://git.openjdk.org/jdk/commit/20de541b1304b4dc3a385f8a78f1215da237e4aa&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14634128" author="roboduke" created="Wed, 13 Dec 2023 15:03:00 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17097&quot;&gt;https://git.openjdk.org/jdk/pull/17097&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-13 22:57:04 +0000</comment>
                            <comment id="14634127" author="cushon" created="Wed, 13 Dec 2023 14:52:41 -0800"  >The stack trace for the original crash I saw was the following.&lt;br/&gt;
&lt;br/&gt;
That crash is occurring in code added for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot;&gt;https://bugs.openjdk.org/browse/JDK-8225377&lt;/a&gt;. I wasn&amp;#39;t able to minimize the crash, and there were a few unusual things going on in that compilation including a custom argument to --system that contained an invalid MethodParameters attribute, and eventually lead me to the ArrayIndexOutOfBounds issue discussed above.&lt;br/&gt;
&lt;br/&gt;
I currently do not think &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt; is the root cause of this crash, and I also don&amp;#39;t think this crash will be very common because it requires both the invalid method parameters attribute and a specific error recovery scenario.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Exception: java.lang.NullPointerException: Cannot invoke &amp;quot;com.sun.tools.javac.util.List.iterator()&amp;quot; because &amp;quot;t.interfaces_field&amp;quot; is null; java.lang.NullPointerException: Cannot invoke &amp;quot;com.sun.tools.javac.util.List.iterator()&amp;quot; because &amp;quot;t.interfaces_field&amp;quot; is null&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitClassSymbol(ClassReader.java:2300)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitClassSymbol(ClassReader.java:2286)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.accept(Symbol.java:1585)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Types$DefaultSymbolVisitor.visit(Types.java:4930)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.jvm.ClassReader.addTypeAnnotationsToSymbol(ClassReader.java:2283)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationCompleter.run(ClassReader.java:2266)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:191)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:322)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1418)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Symbol.apiComplete(Symbol.java:688)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:859)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;	at jdk.compiler/com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements(Symbol.java:797)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5117696">JDK-8322642</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118321">JDK-8323204</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="5146541">JDK-8346469</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5117110">JDK-8322175</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5081204">JDK-8292275</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i348ln:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>