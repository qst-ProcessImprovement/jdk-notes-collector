<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:32:37 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8315923] pretouch_memory by atomic-add-0 fragments huge pages unexpectedly</title>
                <link>https://bugs.openjdk.org/browse/JDK-8315923</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Since &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8272807&quot; title=&quot;Permit use of memory concurrent with pretouch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8272807&quot;&gt;&lt;strike&gt;JDK-8272807&lt;/strike&gt;&lt;/a&gt; (version 18 b10), the implementation of os::pretouch_memory got updated from volatile-write-0 to each page in a range, to atomic-add-0, which was to &amp;quot;permit use of memory concurrently with pretouch&amp;quot;. &lt;br/&gt;
&lt;br/&gt;
However when we have options -XX:+AlwaysPreTouch -XX:+UseTransparentHugePages together for an app using huge amount of memory like &amp;gt;200GiB. According to logs of numastat -mnv, the transparent huge pages would be fragmented into regular pages unexpectedly. Later on kernel would try to assemble all regular pages (for example 4KB) to make up  huge pages (in this case 2MB) gradually. This procedure would cause minutes or longer than half an hour, which impacted the performance on not only the startup phase, but also eventual scores of some key benchmarks especially those highly counting on 99th percentile response-time ones.&lt;br/&gt;
&lt;br/&gt;
From the viewpoint of kernel, if we use &#8220;load&#8221; instruction in the first place (such as volatile-add-0, or atomic-add-0), kernel actually doesn&#8217;t allocate any page, but use &#8220;zero&#8221; page (it is a special page with all 0) instead. The following write (store instructions) will trigger COW (copy-on-write). But kernel will allocate small pages instead of huge pages for COW. Later on, the huge pages are installed by the dedicated kernel thread asynchronously. Kernel did allocate huge page for COW prior v5.8, but the behavior was changed due to commit &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3917c80280c9&quot;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3917c80280c9&lt;/a&gt; (&#8220;thp: change CoW semantics for anon-THP&#8221;).&lt;br/&gt;
&lt;br/&gt;
Therefore, the issue behaves differently with various Linux versions, 4.18 is fine while almost all recent ones like 5.8+, 6.x could show same problem. We could not go back to use volatile-write-0, or revert kernels to the last-known-good point. Instead, madvise call with MADV_POPULATE_WRITE (since Linux 5.14) can be the right way of pretouching memory, and it works well with both regular and huge pages.</description>
                <environment></environment>
        <key id="5109909">JDK-8315923</key>
            <summary>pretouch_memory by atomic-add-0 fragments huge pages unexpectedly</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lliu">Liming Liu</assignee>
                                    <reporter username="qpzhang">Patrick Zhang</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>memory</label>
                    </labels>
                <created>Fri, 8 Sep 2023 03:20:58 -0700</created>
                <updated>Tue, 22 Oct 2024 21:34:29 -0700</updated>
                            <resolved>Fri, 26 Jan 2024 08:45:20 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                                                                <comments>
                            <comment id="14715991" author="JIRAUSER21715" created="Tue, 22 Oct 2024 21:29:44 -0700"  >The &amp;quot;size&amp;quot; of pretouch is required, while the &amp;quot;size&amp;quot; of useMemory is not used. So I think it is safe to remove the second one.&lt;br/&gt;
&lt;br/&gt;
Edit: the first one is also not required as it is constant.</comment>
                            <comment id="14710918" author="mbaesken" created="Mon, 7 Oct 2024 07:29:09 -0700"  >The test added by this seems to cause warnings as errors when using clang on Linux  (clang15 is used) :&lt;br/&gt;
&lt;br/&gt;
/jdk/test/hotspot/gtest/runtime/test_os_linux.cpp:363:28: error: lambda capture &amp;#39;size&amp;#39; is not required to be captured for this use [-Werror,-Wunused-lambda-capture]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auto pretouch = [heap, size](Thread*, int) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;~~^~~~&lt;br/&gt;
/jdk/test/hotspot/gtest/runtime/test_os_linux.cpp:366:29: error: lambda capture &amp;#39;size&amp;#39; is not used [-Werror,-Wunused-lambda-capture]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auto useMemory = [heap, size](Thread*, int) {&lt;br/&gt;
&lt;br/&gt;
should we remove size ?&lt;br/&gt;
</comment>
                            <comment id="14688445" author="roboduke" created="Tue, 9 Jul 2024 20:07:53 -0700"  >[jdk21u-fix-request] Approval Request from Liming Liu&lt;br/&gt;
</comment>
                            <comment id="14687352" author="roboduke" created="Fri, 5 Jul 2024 02:02:15 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/825&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/825&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-05 08:55:58 +0000</comment>
                            <comment id="14644051" author="dukebot" created="Fri, 26 Jan 2024 08:45:19 -0800"  >Changeset: a65a8952&lt;br/&gt;
Author:    Liming Liu &amp;lt;&lt;a href=&apos;mailto:limingliu@os.amperecomputing.com&apos;&gt;limingliu@os.amperecomputing.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Thomas Stuefe &amp;lt;&lt;a href=&apos;mailto:stuefe@openjdk.org&apos;&gt;stuefe@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-26 16:42:46 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a65a89522d2f24b1767e1c74f6689a22ea32ca6a&quot;&gt;https://git.openjdk.org/jdk/commit/a65a89522d2f24b1767e1c74f6689a22ea32ca6a&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14614322" author="roboduke" created="Wed, 27 Sep 2023 05:06:04 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15781&quot;&gt;https://git.openjdk.org/jdk/pull/15781&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-18 07:37:26 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5133966">JDK-8336123</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5057125">JDK-8272807</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133656">JDK-8335865</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5136710">JDK-8338305</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120115">JDK-8324776</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120123">JDK-8324781</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120178">JDK-8324817</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120689">JDK-8325218</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123072">JDK-8327171</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="21802">18</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i331yz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>