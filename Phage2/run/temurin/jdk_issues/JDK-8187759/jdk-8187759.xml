<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:26:08 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8187759] Background not refreshed when painting over a transparent JFrame</title>
                <link>https://bugs.openjdk.org/browse/JDK-8187759</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>FULL PRODUCT VERSION :&lt;br/&gt;
openjdk version &amp;quot;1.8.0_141&amp;quot;&lt;br/&gt;
OpenJDK Runtime Environment (build 1.8.0_141-8u141-b15-3~14.04-b15)&lt;br/&gt;
OpenJDK 64-Bit Server VM (build 25.141-b15, mixed mode)&lt;br/&gt;
&lt;br/&gt;
ADDITIONAL OS VERSION INFORMATION :&lt;br/&gt;
Linux Wall-E 3.13.0-35-generic #62-Ubuntu SMP Fri Aug 15 01:58:42 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
The best is to check this link to understand the problem : &lt;a href=&quot;https://stackoverflow.com/questions/46273464/background-not-refreshed-when-painting-over-a-transparent-jframe&quot;&gt;https://stackoverflow.com/questions/46273464/background-not-refreshed-when-painting-over-a-transparent-jframe&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Basically, the background of the JFrame is not refreshed despite calling repaint() when the JFrame is transparent. The bug seems to affect only the jvm for GNU/Linux as it could not be reproduced under MacOS.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
There is a test case at &lt;a href=&quot;https://stackoverflow.com/questions/46273464/background-not-refreshed-when-painting-over-a-transparent-jframe&quot;&gt;https://stackoverflow.com/questions/46273464/background-not-refreshed-when-painting-over-a-transparent-jframe&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
The &amp;quot;text&amp;quot; label should be moving around the frame&lt;br/&gt;
ACTUAL -&lt;br/&gt;
The &amp;quot;text&amp;quot; label is painted over the frame but previously painted text are never cleared.&lt;br/&gt;
&lt;br/&gt;
REPRODUCIBILITY :&lt;br/&gt;
This bug can be reproduced always.&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
package test;&lt;br/&gt;
&lt;br/&gt;
import java.awt.Color;&lt;br/&gt;
import java.awt.Component;&lt;br/&gt;
import java.awt.Graphics;&lt;br/&gt;
import java.awt.Graphics2D;&lt;br/&gt;
import java.awt.Point;&lt;br/&gt;
import java.awt.event.MouseAdapter;&lt;br/&gt;
import java.awt.event.MouseEvent;&lt;br/&gt;
import java.awt.image.BufferedImage;&lt;br/&gt;
import javax.swing.JFrame;&lt;br/&gt;
import javax.swing.JLabel;&lt;br/&gt;
import javax.swing.JPanel;&lt;br/&gt;
import javax.swing.SwingUtilities;&lt;br/&gt;
&lt;br/&gt;
public class TranslucentWindow extends JFrame {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** The image we will draw on the frame **/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final BufferedImage test = generateImage();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** The location where to paint the image **/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private Point p = new Point();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Set up the GUI **/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public TranslucentWindow() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setDefaultCloseOperation(EXIT_ON_CLOSE);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setUndecorated(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setExtendedState(MAXIMIZED_BOTH);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setBackground(new Color(0, 0, 0, 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Disable this line for case 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setContentPane(new TranslucentPane());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getContentPane().addMouseMotionListener(new MouseDragListener());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SwingUtilities.invokeLater(new Runnable() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new TranslucentWindow().setVisible(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Move the image on the frame **/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private class MouseDragListener extends MouseAdapter {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void mouseMoved(MouseEvent e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p = e.getPoint();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;repaint();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Capture an image of any component **/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static BufferedImage getImage(Component c) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(c==null) return null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedImage image = new BufferedImage(c.getWidth(), c.getHeight(), BufferedImage.TYPE_INT_ARGB);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Graphics2D g = image.createGraphics();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c.printAll(g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;g.dispose();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return image;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Generates a dummy image to be painted on the frame **/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static BufferedImage generateImage() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JLabel label = new JLabel(&amp;quot;test&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label.setSize(label.getPreferredSize());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return getImage(label);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Enable these lines for case 2&lt;br/&gt;
//    @Override&lt;br/&gt;
//    public void paint(Graphics g) {&lt;br/&gt;
//        super.paint(g);&lt;br/&gt;
//        g.drawImage(test, p.x, p.y, this);&lt;br/&gt;
//    }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public class TranslucentPane extends JPanel {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public TranslucentPane() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setOpaque(false);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected void paintComponent(Graphics g) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.paintComponent(g); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Graphics2D g2d = (Graphics2D) g.create();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;g2d.setColor(new Color(0,0,0,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;g2d.fillRect(0, 0, getWidth(), getHeight());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;g2d.drawImage(test, p.x, p.y, this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}    &lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
Every attempt to find a workaround has failed...&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4940020">JDK-8187759</key>
            <summary>Background not refreshed when painting over a transparent JFrame</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tr">Tejesh R</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcspks</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok-next</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                            <label>reproducer-yes</label>
                            <label>sn_149</label>
                            <label>sn_150</label>
                            <label>sn_151</label>
                            <label>sn_153</label>
                            <label>sn_154</label>
                            <label>sn_155</label>
                            <label>sn_156</label>
                            <label>sn_157</label>
                            <label>sn_158</label>
                            <label>sn_163</label>
                            <label>webbug</label>
                    </labels>
                <created>Mon, 18 Sep 2017 02:00:12 -0700</created>
                <updated>Mon, 2 Sep 2024 04:38:35 -0700</updated>
                            <resolved>Tue, 20 Feb 2024 21:55:55 -0800</resolved>
                                    <version>7u80</version>
                    <version>8</version>
                    <version>9</version>
                    <version>10</version>
                                    <fixVersion>23</fixVersion>
                                    <component>client-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14702273" author="aivanov" created="Mon, 2 Sep 2024 04:38:35 -0700"  >During the code review for this fix, it was discovered the newly added test fails on macOS and Windows [1].&lt;br/&gt;
&lt;br/&gt;
Two follow-up bugs were submitted [2]:&lt;br/&gt;
&#8226; &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8326026&quot; title=&quot;Mouse drag for a transparent frame fails in Windows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8326026&quot;&gt;JDK-8326026&lt;/a&gt;: Mouse drag for a transparent frame fails in Windows&lt;br/&gt;
&#8226; &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8326027&quot; title=&quot;[TEST_BUG] Comparing screenshots of frame with white background fails in Mac&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8326027&quot;&gt;JDK-8326027&lt;/a&gt;: Comparing buffered images  of white background frame fails in Mac&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/pull/17081#discussion_r1474738798&quot;&gt;https://github.com/openjdk/jdk/pull/17081#discussion_r1474738798&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/pull/17081#issuecomment-1947887272&quot;&gt;https://github.com/openjdk/jdk/pull/17081#issuecomment-1947887272&lt;/a&gt;</comment>
                            <comment id="14667056" author="roboduke" created="Mon, 22 Apr 2024 12:04:13 -0700"  >[jdk11u-fix-request] Approval Request from Amos&lt;br/&gt;
&amp;quot;Backporting for parity with 11.0.24-oracle. Clean backport. SAP nightlies passed on 2024-04-16,17,19,20&#8221;</comment>
                            <comment id="14666724" author="roboduke" created="Sun, 21 Apr 2024 00:03:59 -0700"  >[jdk17u-fix-request] Approval Request from Amos&lt;br/&gt;
&amp;quot;Backporting for parity with 17.0.12-oracle. Clean backport. SAP nightlies passed on 2024-04-17,19,20&#8221;</comment>
                            <comment id="14666706" author="roboduke" created="Sat, 20 Apr 2024 23:28:29 -0700"  >[jdk21u-fix-request] Approval Request from Amos&lt;br/&gt;
&amp;quot;Backporting for parity with 21.0.4-oracle. Clean backport. SAP nightlies passed on 2024-04-16,19,20&#8221;</comment>
                            <comment id="14664558" author="roboduke" created="Wed, 10 Apr 2024 20:30:05 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/487&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/487&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-11 03:24:45 +0000</comment>
                            <comment id="14664556" author="roboduke" created="Wed, 10 Apr 2024 20:29:24 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2646&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2646&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-11 03:24:31 +0000</comment>
                            <comment id="14664555" author="roboduke" created="Wed, 10 Apr 2024 20:28:30 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2389&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2389&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-11 03:24:39 +0000</comment>
                            <comment id="14654975" author="roboduke" created="Tue, 5 Mar 2024 20:15:41 -0800"  >[jdk22u-fix-request] Approval Request from Renjith Kannath Pariyangad&lt;br/&gt;
Clean backport</comment>
                            <comment id="14653158" author="JIRAUSER20403" created="Wed, 28 Feb 2024 04:48:33 -0800"  >Fix request: 22u &lt;br/&gt;
&lt;br/&gt;
Clean back port, this fix resolve Background drawing issue over a transparent JFrame. This resolve drawing issues of Menu or other popup over a transparent JFrame.&lt;br/&gt;
&lt;br/&gt;
Clean backport &lt;br/&gt;
Pull request: &lt;a href=&quot;https://github.com/openjdk/jdk/pull/17081&quot;&gt;https://github.com/openjdk/jdk/pull/17081&lt;/a&gt;</comment>
                            <comment id="14653157" author="roboduke" created="Wed, 28 Feb 2024 04:48:21 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/77&quot;&gt;https://git.openjdk.org/jdk22u/pull/77&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-28 12:43:18 +0000</comment>
                            <comment id="14651109" author="dukebot" created="Tue, 20 Feb 2024 21:55:54 -0800"  >Changeset: 04d43c43&lt;br/&gt;
Author:    Tejesh R &amp;lt;&lt;a href=&apos;mailto:tr@openjdk.org&apos;&gt;tr@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-02-21 05:54:30 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/04d43c435d3ede519df169053dd9d724aa2312eb&quot;&gt;https://git.openjdk.org/jdk/commit/04d43c435d3ede519df169053dd9d724aa2312eb&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14633633" author="roboduke" created="Tue, 12 Dec 2023 05:09:47 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17081&quot;&gt;https://git.openjdk.org/jdk/pull/17081&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-12 13:04:26 +0000</comment>
                            <comment id="14618245" author="JIRAUSER19800" created="Sun, 15 Oct 2023 21:17:33 -0700"  >The issue seems to be related to the design of how doubleBuffering and paint is handled in Linux. In linux, Paint is handled by BufferStrategyPaintManager unlike in Windows/Macos where RepaintManager handles Paint and doublebuffering. I guess, re-design at BufferStrategyPaintManager would be required to address this issue and also needs a better understanding of how StrategyPaintManager handles paint and doubleBuffering functionalities.</comment>
                            <comment id="14590376" author="psadhukhan" created="Mon, 19 Jun 2023 20:20:13 -0700"  >might be related to the tranparency issue for GraphicsConfiguration</comment>
                            <comment id="14118796" author="pbansal" created="Tue, 26 Sep 2017 23:46:41 -0700"  >This issue is reproducible in Ubuntu 16.04 with JDK 10</comment>
                            <comment id="14117940" author="pardesha" created="Wed, 20 Sep 2017 19:45:35 -0700"  >Checked this for Windows 10, MAC OS X 10.12.6 and Ubuntu LTS 16.0.4 with JDK 6u45, 7u80, 8, 8u144 and 9 ea b181.&lt;br/&gt;
The issue is reproducible across all JDK versions mentioned above in Ubuntu except 6u45.&lt;br/&gt;
&lt;br/&gt;
Results:&lt;br/&gt;
=======&lt;br/&gt;
OS			6u45	7u80	8		8u144	9 ea b181&lt;br/&gt;
Ubuntu 16.0.4	OK		FAIL	       FAIL	        FAIL	        FAIL&lt;br/&gt;
Windows	10	OK		OK		OK		OK		OK	&lt;br/&gt;
MAC 10.12.6	OK		OK		OK		OK		OK&lt;br/&gt;
&lt;br/&gt;
This seems a regression in JDK 7 (7u80) for Ubuntu (Linux). Works fine with all above mentioned JDK versions in Windows and MAC. This looks like an OS specific issue.&lt;br/&gt;
&lt;br/&gt;
The issue is being discussed at Stackoverflow:&lt;br/&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/46273464/background-not-refreshed-when-painting-over-a-transparent-jframe&quot;&gt;https://stackoverflow.com/questions/46273464/background-not-refreshed-when-painting-over-a-transparent-jframe&lt;/a&gt; </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5123776">JDK-8327795</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123778">JDK-8327797</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123779">JDK-8327798</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123784">JDK-8327803</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127637">JDK-8330885</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127644">JDK-8330892</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5127948">JDK-8331139</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5121656">JDK-8326026</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121657">JDK-8326027</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="72583" name="TranslucentWindow.java" size="2855" author="pardesha" created="Wed, 20 Sep 2017 19:46:17 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17048"><![CDATA[linux_ubuntu]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2afmz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="206"><![CDATA[javax.swing]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>