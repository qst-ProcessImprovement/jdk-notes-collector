<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:41:38 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8316924] java/lang/Thread/virtual/stress/ParkALot.java times out</title>
                <link>https://bugs.openjdk.org/browse/JDK-8316924</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Inconsistent execution behaviour leads to a jtreg test timeout.&lt;br/&gt;
&lt;br/&gt;
In some instances the test is marked as passed BUT test has not terminated gracefully with threads remain executing and have not completed their task execution&lt;br/&gt;
&lt;br/&gt;
Other instances the test is stuck in the startup iteration and the test is moribund&lt;br/&gt;
&amp;nbsp;extract below&lt;br/&gt;
----------messages:(8/289)----------&lt;br/&gt;
command: main ParkALot 500000&lt;br/&gt;
reason: User specified action: run main/othervm ParkALot 500000 &lt;br/&gt;
started: Thu Sep 21 15:32:04 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
Timeout information:&lt;br/&gt;
--- Timeout information end.&lt;br/&gt;
finished: Thu Sep 21 15:40:50 UTC 2023&lt;br/&gt;
elapsed time (seconds): 525.827&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(33/1499)----------&lt;br/&gt;
2023-09-21T15:32:04.411187696Z 1 threads ...&lt;br/&gt;
2023-09-21T15:32:06.243404694Z 2 threads ...&lt;br/&gt;
2023-09-21T15:32:08.334409048Z 3 threads ...&lt;br/&gt;
2023-09-21T15:32:10.797923912Z 4 threads ...&lt;br/&gt;
2023-09-21T15:32:13.861938532Z 5 threads ...&lt;br/&gt;
2023-09-21T15:32:17.809720497Z 6 threads ...&lt;br/&gt;
2023-09-21T15:32:23.305455821Z 7 threads ...&lt;br/&gt;
2023-09-21T15:32:30.054651730Z 8 threads ...&lt;br/&gt;
2023-09-21T15:32:38.691064971Z 9 threads ...&lt;br/&gt;
2023-09-21T15:32:48.688304398Z 10 threads ...&lt;br/&gt;
2023-09-21T15:32:58.963760433Z 11 threads ...&lt;br/&gt;
2023-09-21T15:33:07.805807140Z 12 threads ...&lt;br/&gt;
2023-09-21T15:33:16.660177008Z 13 threads ...&lt;br/&gt;
2023-09-21T15:33:27.716685491Z 14 threads ...&lt;br/&gt;
2023-09-21T15:33:39.170794058Z 15 threads ...&lt;br/&gt;
2023-09-21T15:33:53.489750556Z 16 threads ...&lt;br/&gt;
2023-09-21T15:34:11.380673436Z 17 threads ...&lt;br/&gt;
2023-09-21T15:34:30.943381201Z 18 threads ...&lt;br/&gt;
2023-09-21T15:34:50.278798259Z 19 threads ...&lt;br/&gt;
2023-09-21T15:35:10.190032985Z 20 threads ...&lt;br/&gt;
2023-09-21T15:35:31.109356765Z 21 threads ...&lt;br/&gt;
2023-09-21T15:35:51.139607996Z 22 threads ...&lt;br/&gt;
2023-09-21T15:36:11.584651552Z 23 threads ...&lt;br/&gt;
2023-09-21T15:36:32.447378200Z 24 threads ...&lt;br/&gt;
2023-09-21T15:36:54.518852830Z 25 threads ...&lt;br/&gt;
2023-09-21T15:37:17.470204912Z 26 threads ...&lt;br/&gt;
2023-09-21T15:37:42.300813763Z 27 threads ...&lt;br/&gt;
2023-09-21T15:38:08.437603958Z 28 threads ...&lt;br/&gt;
2023-09-21T15:38:35.754687548Z 29 threads ...&lt;br/&gt;
2023-09-21T15:39:04.156057341Z 30 threads ...&lt;br/&gt;
2023-09-21T15:39:32.658074312Z 31 threads ...&lt;br/&gt;
2023-09-21T15:40:02.006672023Z 32 threads ...&lt;br/&gt;
Timeout signalled after 480 seconds&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(36/5799)*----------&lt;br/&gt;
&lt;br/&gt;
test result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+16-1247/linux-x64.jdk/jdk-22/bin/java&amp;#39; timed out (timeout set to 480000ms, elapsed time including timeout handling was 525822ms).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;quot;MainThread&amp;quot; #34 [2683474] prio=5 os_prio=0 cpu=97.56ms elapsed=490.64s allocated=983K defined_classes=48 tid=0x00007f4e804350d0 nid=2683474 waiting on condition  [0x00007f4e55887000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: TIMED_WAITING (parking)&lt;br/&gt;
	at jdk.internal.misc.Unsafe.park(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Native Method)&lt;br/&gt;
	- parking to wait for  &amp;lt;0x00000000d1400ab8&amp;gt; (a java.util.concurrent.CountDownLatch$Sync)&lt;br/&gt;
	at java.util.concurrent.locks.LockSupport.parkNanos(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/LockSupport.java:269)&lt;br/&gt;
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/AbstractQueuedSynchronizer.java:756)&lt;br/&gt;
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/AbstractQueuedSynchronizer.java:1126)&lt;br/&gt;
	at java.util.concurrent.CountDownLatch.await(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/CountDownLatch.java:276)&lt;br/&gt;
	at java.util.concurrent.ThreadPerTaskExecutor.awaitTermination(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ThreadPerTaskExecutor.java:181)&lt;br/&gt;
	at java.util.concurrent.ThreadPerTaskExecutor.awaitTermination(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ThreadPerTaskExecutor.java:195)&lt;br/&gt;
	at java.util.concurrent.ThreadPerTaskExecutor.close(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ThreadPerTaskExecutor.java:212)&lt;br/&gt;
	at ParkALot.main(ParkALot.java:61)&lt;br/&gt;
	at java.lang.invoke.LambdaForm$DMH/0x00007f4e07002000.invokeStatic(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/LambdaForm$DMH)&lt;br/&gt;
	at java.lang.invoke.LambdaForm$MH/0x00007f4e07003400.invoke(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/LambdaForm$MH)&lt;br/&gt;
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Invokers$Holder)&lt;br/&gt;
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/DirectMethodHandleAccessor.java:154)&lt;br/&gt;
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
	at java.lang.Thread.runWith(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1583)&lt;br/&gt;
	at java.lang.Thread.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1570)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;....&lt;br/&gt;
&lt;br/&gt;
&amp;quot;VirtualThread-unparker&amp;quot; #38 [2683510] daemon prio=5 os_prio=0 cpu=17832.85ms elapsed=490.59s allocated=56657K defined_classes=0 tid=0x00007f4dc8002440 nid=2683510 waiting on condition  [0x00007f4e55584000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: TIMED_WAITING (parking)&lt;br/&gt;
	at jdk.internal.misc.Unsafe.park(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Native Method)&lt;br/&gt;
	- parking to wait for  &amp;lt;0x00000000d0003048&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)&lt;br/&gt;
	at java.util.concurrent.locks.LockSupport.parkNanos(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/LockSupport.java:269)&lt;br/&gt;
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/AbstractQueuedSynchronizer.java:1758)&lt;br/&gt;
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ScheduledThreadPoolExecutor.java:1182)&lt;br/&gt;
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ScheduledThreadPoolExecutor.java:899)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor.getTask(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ThreadPoolExecutor.java:1070)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor.runWorker(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ThreadPoolExecutor.java:1130)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/ThreadPoolExecutor.java:642)&lt;br/&gt;
	at java.lang.Thread.runWith(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1583)&lt;br/&gt;
	at java.lang.Thread.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1570)&lt;br/&gt;
	at jdk.internal.misc.InnocuousThread.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/InnocuousThread.java:186)&lt;br/&gt;
&lt;br/&gt;
....&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Thread-527&amp;quot; #1175 [2813272] prio=5 os_prio=0 cpu=12953.29ms elapsed=13.03s allocated=4399K defined_classes=0 tid=0x00007f4dd005f1f0 nid=2813272 runnable  [0x00007f4cb98d6000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: RUNNABLE&lt;br/&gt;
	at java.lang.System$2.unparkVirtualThread(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/System.java:2657)&lt;br/&gt;
	at jdk.internal.misc.VirtualThreads.unpark(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/VirtualThreads.java:93)&lt;br/&gt;
	at java.util.concurrent.locks.LockSupport.unpark(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/LockSupport.java:179)&lt;br/&gt;
	at ParkALot.parkALot(ParkALot.java:88)&lt;br/&gt;
	at ParkALot.lambda$main$0(ParkALot.java:59)&lt;br/&gt;
	at ParkALot$$Lambda/0x00007f4e07001200.run(Unknown Source)&lt;br/&gt;
	at java.util.concurrent.Executors$RunnableAdapter.call(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Executors.java:572)&lt;br/&gt;
	at java.util.concurrent.FutureTask.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/FutureTask.java:317)&lt;br/&gt;
	at java.lang.Thread.runWith(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1583)&lt;br/&gt;
	at java.lang.Thread.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1570)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Locked ownable synchronizers:&lt;br/&gt;
	- None&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Thread-528&amp;quot; #1177 [2813273] prio=5 os_prio=0 cpu=12952.30ms elapsed=13.03s allocated=4425K defined_classes=0 tid=0x00007f4dd0060200 nid=2813273 runnable  [0x00007f4cb8ecc000]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;java.lang.Thread.State: RUNNABLE&lt;br/&gt;
	at java.lang.System$2.unparkVirtualThread(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/System.java:2657)&lt;br/&gt;
	at jdk.internal.misc.VirtualThreads.unpark(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/VirtualThreads.java:93)&lt;br/&gt;
	at java.util.concurrent.locks.LockSupport.unpark(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/LockSupport.java:179)&lt;br/&gt;
	at ParkALot.parkALot(ParkALot.java:88)&lt;br/&gt;
	at ParkALot.lambda$main$0(ParkALot.java:59)&lt;br/&gt;
	at ParkALot$$Lambda/0x00007f4e07001200.run(Unknown Source)&lt;br/&gt;
	at java.util.concurrent.Executors$RunnableAdapter.call(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Executors.java:572)&lt;br/&gt;
	at java.util.concurrent.FutureTask.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/FutureTask.java:317)&lt;br/&gt;
	at java.lang.Thread.runWith(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1583)&lt;br/&gt;
	at java.lang.Thread.run(&lt;a href=&apos;mailto:java.base@22-ea&apos;&gt;java.base@22-ea&lt;/a&gt;/Thread.java:1570)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5111059">JDK-8316924</key>
            <summary>java/lang/Thread/virtual/stress/ParkALot.java times out</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="alanb">Alan Bateman</assignee>
                                    <reporter username="msheppar">Mark Sheppard</reporter>
                        <labels>
                            <label>CPU24_07-critical-SQE-OK</label>
                            <label>CPU24_07-critical-approved</label>
                            <label>amazon-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                            <label>noreg-self</label>
                            <label>sbr</label>
                    </labels>
                <created>Mon, 25 Sep 2023 16:03:32 -0700</created>
                <updated>Thu, 25 Jul 2024 08:40:06 -0700</updated>
                            <resolved>Wed, 27 Sep 2023 05:56:15 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14649661" author="roboduke" created="Thu, 15 Feb 2024 04:44:11 -0800"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
Follow-up test fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322818&quot; title=&quot;Thread::getStackTrace can fail with InternalError if virtual thread is timed-parked when pinned&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322818&quot;&gt;&lt;strike&gt;JDK-8322818&lt;/strike&gt;&lt;/a&gt;. In mainline since Sep 2023. Test-only change. The fix is part of large atomic change, see 21u PR.</comment>
                            <comment id="14649644" author="roboduke" created="Thu, 15 Feb 2024 04:38:51 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/245&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/245&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-08 11:17:02 +0000</comment>
                            <comment id="14614677" author="alanb" created="Thu, 28 Sep 2023 05:39:51 -0700"  >&amp;gt; Based on the dial back changes, what is the current objective of the test and what are its success and failure criteria ? &lt;br/&gt;
&lt;br/&gt;
The stress tests in this directory mostly bash on parking, timed-parking, parking while pinned, and hence stress the freeze and thaw code.  Success is the tests completely successfully. Failure would be a crash, assert, or hang/timeout. These tests run in tier1 so their execution time has to be limited for the default configuration (release builds). Debug builds with -XX:+VerifyContinuations is important for anyone touching the continuation or virtual thread implementation.</comment>
                            <comment id="14614653" author="msheppar" created="Thu, 28 Sep 2023 04:56:13 -0700"  >I had a few comments/questions, but lgtm got in before I could make them.&lt;br/&gt;
&lt;br/&gt;
The test is classified as a stress test and a certain amount of &amp;quot;stress&amp;quot; was observed on the SBR runs. For stress typically you are looking at pushing the bounds or limits  of normal operation, to create extreme conditions, to see what are the side effects. Alternatively, incrementally increasing the operational load, creating intense conditions to challenge the operational stability of a system, to establish some measure of maximum capacity or capability.&lt;br/&gt;
&lt;br/&gt;
It can be observed on Windows SBR that at iteration 23 i.e. activating 23 threads with 500,000 park/unpark operations the test exceeds its allotted execution time.  This is taking in the region of 12minutes  On the linux SBR system the successful execution takes just under 8 minutes and all time timeout conditions are just beyond 8 minutes. Thus, this would suggest extending the jtreg timeout, or reduce the number of iterations seems in order. In this instance the change has opted for a reduction in number operations. :+1&lt;br/&gt;
&lt;br/&gt;
However, the reduction in the max number of threads to 4, seems questionable, and would contradicts the stress goals of the test. So what is the current purpose of this test. What are its expected failure criteria?&lt;br/&gt;
&lt;br/&gt;
Then there is the change of spinOnWait to yield. The latter is good citizen behaviour, but why do anything? Why not just loop again to possibly force the OS to bump the thread on its time slice? Again create extreme conditions for instability.&lt;br/&gt;
&lt;br/&gt;
Based on the dial back changes, what is the current objective of the test and what are its success and failure criteria ?&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14614334" author="dukebot" created="Wed, 27 Sep 2023 05:56:14 -0700"  >Changeset: b24ad7cf&lt;br/&gt;
Author:    Alan Bateman &amp;lt;&lt;a href=&apos;mailto:alanb@openjdk.org&apos;&gt;alanb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-09-27 12:54:29 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/b24ad7cf5710c698f5946e10d44785f24431f966&quot;&gt;https://git.openjdk.org/jdk/commit/b24ad7cf5710c698f5946e10d44785f24431f966&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14614266" author="roboduke" created="Wed, 27 Sep 2023 00:55:25 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15940&quot;&gt;https://git.openjdk.org/jdk/pull/15940&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-27 07:47:19 +0000</comment>
                            <comment id="14614053" author="alanb" created="Tue, 26 Sep 2023 05:00:27 -0700"  >[~msheppar] The TEST.properties in the stress directly ensures that they don&amp;#39;t run concurrently. On your analysis, then test N, there are N virtual threads spinning parking and N platform thread spinning unparking. This is why it only pushes concurrency to nprocs/2. I&amp;#39;ll dial down this test to avoid it taking too long on these big systems. I&amp;#39;ll also dial down the number of iterations for debug builds as they are really slow when running with -XX:+VerifyContinuations.</comment>
                            <comment id="14613955" author="alanb" created="Mon, 25 Sep 2023 23:12:58 -0700"  >This is a stress test that interleaves untimed and timed parking. Like the the other stress tests in this directory, a race condition or other bug would likely hang, crash, or cause other failures. The test runs from to 1 up to ncpus/2, so 1..32 on this test host. Note that the close method waits for threads to terminate, if a thread is not unparked then the main thread will block indefinitely in close (waiting for the threads started in the executer to terminate) and the test will timeout. The issue here doesn&amp;#39;t seem to be a hang or bug, it&amp;#39;s just that it the test slows down at each iteration. In the output, testing with 30 threads took 34s, testing with 31 threads took 35s, the testing with 32 threads didn&amp;#39;t finish before the test timed out.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5122746">JDK-8326972</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128574">JDK-8331599</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129071">JDK-8331973</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3392b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17417"><![CDATA[b17]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="190"><![CDATA[java.lang]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>