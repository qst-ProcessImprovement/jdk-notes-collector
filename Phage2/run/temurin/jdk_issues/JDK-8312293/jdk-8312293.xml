<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:41:11 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8312293] SIGSEGV in jfr.internal.event.EventWriter.putUncheckedByte after JDK-8312086</title>
                <link>https://bugs.openjdk.org/browse/JDK-8312293</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Tests:&lt;br/&gt;
applications/microbenchmarks/other/Test_8.java#id4&lt;br/&gt;
applications/microbenchmarks/other/Test_8.java#id3&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007fe7606fe761, pid=35850, tid=35880&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+7) (fastdebug build 22-ea+7-443)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+7-443, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# J 1540 c2 jdk.jfr.internal.event.EventWriter.putUncheckedByte(B)V &lt;a href=&apos;mailto:jdk.jfr@22-ea&apos;&gt;jdk.jfr@22-ea&lt;/a&gt; (22 bytes) @ 0x00007fe7606fe761 [0x00007fe7606fe720+0x0000000000000041]&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007fe7606fe761, pid=35850, tid=35880&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+7) (fastdebug build 22-ea+7-443)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+7-443, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# J 1540 c2 jdk.jfr.internal.event.EventWriter.putUncheckedByte(B)V &lt;a href=&apos;mailto:jdk.jfr@22-ea&apos;&gt;jdk.jfr@22-ea&lt;/a&gt; (22 bytes) @ 0x00007fe7606fe761 [0x00007fe7606fe720+0x0000000000000041]&lt;br/&gt;
#</description>
                <environment></environment>
        <key id="5105750">JDK-8312293</key>
            <summary>SIGSEGV in jfr.internal.event.EventWriter.putUncheckedByte after JDK-8312086</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mgronlun">Markus Gr&#246;nlund</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>hgupdate-sync</label>
                            <label>jdk21-fix-request</label>
                            <label>jdk21-fix-yes</label>
                            <label>tier8</label>
                    </labels>
                <created>Tue, 18 Jul 2023 14:17:14 -0700</created>
                <updated>Wed, 3 Jan 2024 14:36:05 -0800</updated>
                            <resolved>Fri, 21 Jul 2023 05:22:46 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14599679" author="dcubed" created="Thu, 27 Jul 2023 10:28:53 -0700"  >The JDK21 back port is integrated in jdk-21+33-2491.</comment>
                            <comment id="14599584" author="roboduke" created="Thu, 27 Jul 2023 02:48:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/147&quot;&gt;https://git.openjdk.org/jdk21/pull/147&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-27 09:38:51 +0000</comment>
                            <comment id="14599416" author="kvn" created="Wed, 26 Jul 2023 10:46:13 -0700"  >Fix request for JDK 21 approved.</comment>
                            <comment id="14597834" author="dukebot" created="Fri, 21 Jul 2023 05:22:45 -0700"  >Changeset: 59f66a3b&lt;br/&gt;
Author:    Markus Gr&amp;#xF6;nlund &amp;lt;&lt;a href=&apos;mailto:mgronlun@openjdk.org&apos;&gt;mgronlun@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-21 12:21:35 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/59f66a3b839c5b77c2770fa0bdd76f399d2d86d6&quot;&gt;https://git.openjdk.org/jdk/commit/59f66a3b839c5b77c2770fa0bdd76f399d2d86d6&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14597814" author="mgronlun" created="Fri, 21 Jul 2023 04:16:58 -0700"  >Fix Request&lt;br/&gt;
&lt;br/&gt;
The fix should be backported to jdk21 to prevent SIGSEGV in the JFR code.&lt;br/&gt;
The fix is straightforward, applies cleanly, and the risk is very low.</comment>
                            <comment id="14597671" author="roboduke" created="Thu, 20 Jul 2023 13:05:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14962&quot;&gt;https://git.openjdk.org/jdk/pull/14962&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-20 19:59:50 +0000</comment>
                            <comment id="14597664" author="mgronlun" created="Thu, 20 Jul 2023 12:36:17 -0700"  >// This issue is related to deoptimizing a compiled method that inlines the jdk/jfr/internal/JVM.commit(J)J intrinsic.&lt;br/&gt;
//&lt;br/&gt;
// Deoptimization unpack frame for method jdk/jfr/internal/event/EventWriter.endEvent()Z&lt;br/&gt;
// JRT_LEAF(BasicType, Deoptimization::unpack_frames(JavaThread* thread, int exec_mode))&lt;br/&gt;
//&lt;br/&gt;
// When the code is deoptimized, the return value from JVM.commit(J)J could be a completely invalid pointer.&lt;br/&gt;
//&lt;br/&gt;
// PROBLEM ANALYSIS&lt;br/&gt;
//&lt;br/&gt;
// Stack after unpack&lt;br/&gt;
000000b4`34bfe700  000000b4`34bfe700&lt;br/&gt;
000000b4`34bfe708  00000237`29db8b63 &amp;lt;&amp;lt;-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J&lt;br/&gt;
000000b4`34bfe710  00000000`00000005&lt;br/&gt;
000000b4`34bfe718  00000237`29f74c40&lt;br/&gt;
000000b4`34bfe720  00000237`29f39210&lt;br/&gt;
000000b4`34bfe728  00000235`1afe21e8&lt;br/&gt;
000000b4`34bfe730  00000237`29db8c70 &amp;lt;&amp;lt;-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z&lt;br/&gt;
000000b4`34bfe738  000000b4`34bfe700&lt;br/&gt;
000000b4`34bfe740  000000b4`34bfe770&lt;br/&gt;
000000b4`34bfe748  000000b4`34bfe7c0 &amp;lt;&amp;lt;-- rbp&lt;br/&gt;
000000b4`34bfe750  00000235`15b389f6&lt;br/&gt;
000000b4`34bfe758  00000000`00000000&lt;br/&gt;
000000b4`34bfe760  00000000`00000000&lt;br/&gt;
000000b4`34bfe768  deaddeaf`00002013&lt;br/&gt;
000000b4`34bfe770  00000235`1d8937e8 &amp;lt;&amp;lt;-- r14 [locals]&lt;br/&gt;
&lt;br/&gt;
// Registers after unpack (note rax)&lt;br/&gt;
rax=000002376f9dedac rbx=0000000000000048 rcx=f67412f973520000&lt;br/&gt;
rdx=0000000000000008 rsi=000002379a602ff0 rdi=0000023798875fa0&lt;br/&gt;
rip=0000023515b59266 rsp=000000b434bfe700 rbp=000000b434bfe748&lt;br/&gt;
&amp;nbsp;r8=00000000000000b8  r9=00000000000000c0 r10=00007ffbbca70000&lt;br/&gt;
r11=00007ffbbca71b4b r12=0000000000c00000 r13=0000023729affda8&lt;br/&gt;
r14=0000000000000000 r15=000002376f9de920&lt;br/&gt;
&lt;br/&gt;
// bcp&lt;br/&gt;
00000237`29db8b63  b8 30 00 41 20 09 &lt;br/&gt;
&lt;br/&gt;
// bci: 99:  0xb8 == invokestatic // Method jdk/jfr/internal/JVM.commit:(J)J (JIT)&lt;br/&gt;
// &amp;lt;deoptimization&amp;gt;&lt;br/&gt;
// bci: 102: 0x41 == lstore_2 (Interpreter)&lt;br/&gt;
&lt;br/&gt;
// After deopt, the interpreter continues with the lstore_2 instruction:&lt;br/&gt;
00000235`15b42da8 498946e8        mov     qword ptr [r14-18h],rax&lt;br/&gt;
&lt;br/&gt;
// Stack after retired lstore_2&lt;br/&gt;
000000b4`34bfe700  000000b4`34bfe700&lt;br/&gt;
000000b4`34bfe708  00000237`29db8b63 &amp;lt;&amp;lt;-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J&lt;br/&gt;
000000b4`34bfe710  00000000`00000005&lt;br/&gt;
000000b4`34bfe718  00000237`29f74c40&lt;br/&gt;
000000b4`34bfe720  00000237`29f39210&lt;br/&gt;
000000b4`34bfe728  00000235`1afe21e8&lt;br/&gt;
000000b4`34bfe730  00000237`29db8c70 &amp;lt;&amp;lt;-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z&lt;br/&gt;
000000b4`34bfe738  00000000`00000000&lt;br/&gt;
000000b4`34bfe740  000000b4`34bfe770&lt;br/&gt;
000000b4`34bfe748  000000b4`34bfe7c0 &amp;lt;&amp;lt;-- rbp&lt;br/&gt;
000000b4`34bfe750  00000235`15b389f6&lt;br/&gt;
000000b4`34bfe758  00000237`6f9dedac &amp;lt;&amp;lt;--lstore_2 stored the current value in rax, expecting it to hold the return value from commit(). But endEvent inlined commit() and did not place the result there. 00000237`6f9dedac is a pointer to the _thread_state field of the thread: +0x48c _thread_state : 8 ( _thread_in_Java )&lt;br/&gt;
000000b4`34bfe760  00000000`00000000&lt;br/&gt;
000000b4`34bfe768  deaddeaf`00002013&lt;br/&gt;
000000b4`34bfe770  00000235`1d8937e8 &amp;lt;&amp;lt;-- r14 [locals]&lt;br/&gt;
&lt;br/&gt;
// How could a pointer to the _thread_state field of the current thread    +0x48c _thread_state : 8 ( _thread_in_Java ), be treated as the next position returned by JVM.commit(J)J. Why was it placed into rax instead of the real nextPosition?&lt;br/&gt;
// When JVM.commit(J)J is inlined heavily, rax is not necessarily used for placing the immediate result from the commit(J)J instructions. For example:&lt;br/&gt;
&lt;br/&gt;
...&lt;br/&gt;
000001c9`a4693ae3 4c8b9424e0000000 mov     r10,qword ptr [rsp+0E0h]&lt;br/&gt;
000001c9`a4693aeb 4c89942498000000 mov     qword ptr [rsp+98h],r10&lt;br/&gt;
000001c9`a4693af3 e828447dff       call    000001c9`a3e67f20 // &amp;lt;&amp;lt;-- this calls the VM function JfrIntrinsicSupport::return_lease. The invoked method return type is void, hence on return, rax contains whatever the register was used for last. Here, it was used for a pointer to the current _thread_state.&lt;br/&gt;
000001c9`a4693af8 0f1f8400e8160020 nop     dword ptr [rax+rax+200016E8h]&lt;br/&gt;
000001c9`a4693b00 4c8ba424f0000000 mov     r12,qword ptr [rsp+0F0h]&lt;br/&gt;
000001c9`a4693b08 4c8b8c24e8000000 mov     r9,qword ptr [rsp+0E8h]&lt;br/&gt;
000001c9`a4693b10 4c8b842498000000 mov     r8,qword ptr [rsp+98h]&lt;br/&gt;
000001c9`a4693b18 4c8b9424f0000000 mov     r10,qword ptr [rsp+0F0h]&lt;br/&gt;
000001c9`a4693b20 4533db          xor     r11d,r11d // r11d == nullptr (rscratch2 is used to return a pointer, not rax)&lt;br/&gt;
000001c9`a4693b23 498bcb          mov     rcx,r11&lt;br/&gt;
000001c9`a4693b26 e961f1ffff      jmp     000001c9`a4692c8c&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
// This could indicate a more general issue with how deoptimization happens in these kinds of situations. Or it could indicate that the JVM.commit(J)J intrinsic needs something extra to inform the compiler better of how to &amp;quot;unpack&amp;quot; for deoptimization.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
//&lt;br/&gt;
// FIX&lt;br/&gt;
//&lt;br/&gt;
// Fix: I ensure that rax is always null when returning from the VM JfrIntrinsicSupport::return_lease() call. Its return value is changed from void to void* and always returns a nullptr. In the case of deoptimization post invocation of JVM::commit(J)J, should the buffer lease have been returned, the return value is always null.&lt;br/&gt;
//&lt;br/&gt;
// Fix: Stack after unpack&lt;br/&gt;
00000044`265fec90  00000044`265fec90&lt;br/&gt;
00000044`265fec98  000001d3`16db8f63 &amp;lt;&amp;lt;-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J&lt;br/&gt;
00000044`265feca0  00000000`00000005&lt;br/&gt;
00000044`265feca8  000001d3`16f74e00&lt;br/&gt;
00000044`265fecb0  000001d3`16f38f90&lt;br/&gt;
00000044`265fecb8  000001d3`7ffb0e90&lt;br/&gt;
00000044`265fecc0  000001d3`16db9070 &amp;lt;&amp;lt;-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z&lt;br/&gt;
00000044`265fecc8  00000044`265fec90&lt;br/&gt;
00000044`265fecd0  00000044`265fed00&lt;br/&gt;
00000044`265fecd8  00000044`265fed50 &amp;lt;-- rbp&lt;br/&gt;
00000044`265fece0  000001d3`010289f6&lt;br/&gt;
00000044`265fece8  00000000`00000000&lt;br/&gt;
00000044`265fecf0  00000000`00000000&lt;br/&gt;
00000044`265fecf8  deaddeaf`00002013&lt;br/&gt;
00000044`265fed00  000001d3`9f843ee0 &amp;lt;&amp;lt;-- r14 [locals]&lt;br/&gt;
&lt;br/&gt;
// Fix: Registers after unpack (note rax is now 0)&lt;br/&gt;
rax=0000000000000000 rbx=0000000000000048 rcx=facfea4f0f970000&lt;br/&gt;
rdx=0000000000000008 rsi=000001d5846c8ff0 rdi=000001d587d1afa0&lt;br/&gt;
rip=000001d301049266 rsp=00000044265fec90 rbp=00000044265fecd8&lt;br/&gt;
&amp;nbsp;r8=00000000000000b8  r9=00000000000000c0 r10=00007ffbbca70000&lt;br/&gt;
r11=00007ffbbca71b4b r12=0000000093c00000 r13=000001d316afffe8&lt;br/&gt;
&lt;br/&gt;
000001d3`16db8f63   b8 30 00 41 20 09 &lt;br/&gt;
&lt;br/&gt;
// bci: 99:  0xb8 == invokestatic // Method jdk/jfr/internal/JVM.commit:(J)J (JIT)&lt;br/&gt;
// &amp;lt;deoptimization&amp;gt;&lt;br/&gt;
// bci: 102: 0x41 == lstore_2 (Interpreter)&lt;br/&gt;
&lt;br/&gt;
// After deopt, the interpreter continues with the lstore_2 instruction:&lt;br/&gt;
000001d3`01031e6a 498b46e8        mov     qword ptr [r14-18h],rax&lt;br/&gt;
&lt;br/&gt;
// Stack after retired lstore_2:&lt;br/&gt;
00000044`265fec90  00000044`265fec90&lt;br/&gt;
00000044`265fec98  000001d3`16db8f63 &amp;lt;&amp;lt;-- bcp (bci:99) // Method jdk/jfr/internal/JVM.commit:(J)J&lt;br/&gt;
00000044`265feca0  00000000`00000005&lt;br/&gt;
00000044`265feca8  000001d3`16f74e00&lt;br/&gt;
00000044`265fecb0  000001d3`16f38f90&lt;br/&gt;
00000044`265fecb8  000001d3`7ffb0e90&lt;br/&gt;
00000044`265fecc0  000001d3`16db9070 &amp;lt;&amp;lt;-- Method: jdk/jfr/internal/event/EventWriter.endEvent()Z&lt;br/&gt;
00000044`265fecc8  00000000`00000000&lt;br/&gt;
00000044`265fecd0  00000044`265fed00&lt;br/&gt;
00000044`265fecd8  00000044`265fed50 &amp;lt;&amp;lt;-- rbp&lt;br/&gt;
00000044`265fece0  000001d3`010289f6&lt;br/&gt;
00000044`265fece8  00000000`00000000 &amp;lt;&amp;lt;--lstore_2 stored the current value located in rax, expecting it to hold the return value from JVM::commit(J)J. With the suggested fix, it is now null because the buffer lease was returned.&lt;br/&gt;
00000044`265fecf0  00000000`00000000&lt;br/&gt;
00000044`265fecf8  deaddeaf`00002013&lt;br/&gt;
00000044`265fed00  000001d3`9f843ee0&lt;br/&gt;
00000044`265fed08  00000044`265fed08&lt;br/&gt;
00000044`265fed10  000001d3`16f1f31b&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5106809">JDK-8313263</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5107151">JDK-8313537</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5106007">JDK-8312526</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5105488">JDK-8312086</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32cez:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="374"><![CDATA[jfr]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>