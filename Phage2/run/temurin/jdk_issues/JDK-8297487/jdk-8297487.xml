<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:26:29 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8297487] G1 Remark: no need to keep alive oop constants of nmethods on stack</title>
                <link>https://bugs.openjdk.org/browse/JDK-8297487</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The stackwalks to keep alive oops of nmethods found on stack during G1 remark seem redundant as nmethod entry barriers do the job already: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/f26bd4e0e8b68de297a9ff93526cd7fac8668320/src/hotspot/share/gc/shared/barrierSetNMethod.cpp#L85&quot;&gt;https://github.com/openjdk/jdk/blob/f26bd4e0e8b68de297a9ff93526cd7fac8668320/src/hotspot/share/gc/shared/barrierSetNMethod.cpp#L85&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Objects in the constant pool of a nmethod are weakly referenced. So G1 requires nmethod entry barriers to conservatively keep alive the constant objects for SATB during concurrent marking (see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8288970)&quot;&gt;https://bugs.openjdk.org/browse/JDK-8288970)&lt;/a&gt;.</description>
                <environment></environment>
        <key id="5088137">JDK-8297487</key>
            <summary>G1 Remark: no need to keep alive oop constants of nmethods on stack</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rrich">Richard Reingruber</assignee>
                                    <reporter username="rrich">Richard Reingruber</reporter>
                        <labels>
                            <label>gc-g1</label>
                            <label>gc-g1-marking</label>
                    </labels>
                <created>Wed, 23 Nov 2022 01:03:54 -0800</created>
                <updated>Tue, 14 Feb 2023 06:56:01 -0800</updated>
                            <resolved>Tue, 10 Jan 2023 04:54:34 -0800</resolved>
                                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14552487" author="rrich" created="Wed, 18 Jan 2023 10:35:10 -0800"  >I think it is possible to start a new G1 concurrent marking cycle without arming all nmethod barriers. This would have the effect that oop constants in nmethods are not kept alive then. Without tracing nmethods on stack during remark methods could get unloaded.&lt;br/&gt;
&lt;br/&gt;
This can happen if the decision to start concurrent marking is undone (G1ConcurrentMarkThread::start_undo_mark). In this case G1ConcurrentMark::remark() is not reached where CodeCache::on_gc_marking_cycle_finish() would be called. When the next G1 marking cycle is started G1CollectedHeap::start_codecache_marking_cycle_if_inactive() is called but nmethods are not armed because the code cache cycle was not finished and CodeCache::is_gc_marking_cycle_active() returns true.&lt;br/&gt;
&lt;br/&gt;
Need to verify this with proper testing.</comment>
                            <comment id="14550745" author="eosterlund" created="Thu, 12 Jan 2023 07:21:33 -0800"  >Method handle / continuation intrinsics are not unloaded. You are right though, that CodeCache::arm_all_nmethods() is called after weak_refs_work(). And it also does walk the stacks to disarm all on-stack nmethods, but without marking the nmethods as on-stack. So there is some kind of discrepancy there, but I&amp;#39;m not sure yet how it manifests exactly.</comment>
                            <comment id="14550730" author="rrich" created="Thu, 12 Jan 2023 06:51:31 -0800"  >Erik, thanks for having a look into the issues. Sounds plausible what you are saying.&lt;br/&gt;
Isn&amp;#39;t the nmethod unloading done during `weak_refs_work()`, though, before `CodeCache::arm_all_nmethods()` is called?&lt;br/&gt;
Method handle / continuation intrinsics are nmethods without entry barriers (if I&amp;#39;m not mistaken). If so, could this be a problem too?&lt;br/&gt;
Thanks, Richard.</comment>
                            <comment id="14550687" author="thartmann" created="Thu, 12 Jan 2023 05:46:14 -0800"  >FTR, I replied to Richard&amp;#39;s questions in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299956&quot; title=&quot;[BACKOUT] 8297487: G1 Remark: no need to keep alive oop constants of nmethods on stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299956&quot;&gt;&lt;strike&gt;JDK-8299956&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14550663" author="eosterlund" created="Thu, 12 Jan 2023 04:51:53 -0800"  >Hmm. [~rrich] I think I see what happened here. The MarkingCodeBlobClosure would also nm-&amp;gt;mark_as_maybe_on_stack for the CodeCache unloading support. And G1 remark pauses bump the global epoch. Therefore, without the MarkingCodeBlobClosure, we end up in a situation where the on-stack nmethods are armed and haven&amp;#39;t been labelled as on-stack. This could mean that the GC ends up nuking nmethods because it doesn&amp;#39;t realize they are on-stack. I forgot about this because ZGC doesn&amp;#39;t re-arm nmethods when marking terminates, the way that G1 does.</comment>
                            <comment id="14550375" author="rrich" created="Wed, 11 Jan 2023 07:43:47 -0800"  >Hi Tobias,&lt;br/&gt;
I don&amp;#39;t see a connection between the crash logs attached to the BACKOUT (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299956&quot; title=&quot;[BACKOUT] 8297487: G1 Remark: no need to keep alive oop constants of nmethods on stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299956&quot;&gt;&lt;strike&gt;JDK-8299956&lt;/strike&gt;&lt;/a&gt;) and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297487&quot; title=&quot;G1 Remark: no need to keep alive oop constants of nmethods on stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297487&quot;&gt;&lt;strike&gt;JDK-8297487&lt;/strike&gt;&lt;/a&gt;. Also this change was very thoroughly tested on all platforms, fastdebug/release without any failures.&lt;br/&gt;
I tried to reproduce with `time make test TEST=test/langtools/tools/javac` but so far without success.&lt;br/&gt;
I checked out the original commit of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297487&quot; title=&quot;G1 Remark: no need to keep alive oop constants of nmethods on stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297487&quot;&gt;&lt;strike&gt;JDK-8297487&lt;/strike&gt;&lt;/a&gt; for this.&lt;br/&gt;
Can you help and explain how you reproduced the issue?&lt;br/&gt;
Did the BACKOUT actually help at all?&lt;br/&gt;
Thanks, Richard.</comment>
                            <comment id="14550292" author="thartmann" created="Wed, 11 Jan 2023 03:33:47 -0800"  >This caused a regression. I will back the change out with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8299956&quot; title=&quot;[BACKOUT] 8297487: G1 Remark: no need to keep alive oop constants of nmethods on stack&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8299956&quot;&gt;&lt;strike&gt;JDK-8299956&lt;/strike&gt;&lt;/a&gt;. Please file a REDO according to &lt;a href=&quot;https://openjdk.org/guide/#backing-out-a-change&quot;&gt;https://openjdk.org/guide/#backing-out-a-change&lt;/a&gt; if appropriate.</comment>
                            <comment id="14549911" author="dukebot" created="Tue, 10 Jan 2023 04:54:33 -0800"  >Changeset: eab1e626&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-10 10:32:32 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/eab1e6260d5622722b3e930b8457a64c6da28ccc&quot;&gt;https://git.openjdk.org/jdk/commit/eab1e6260d5622722b3e930b8457a64c6da28ccc&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14539906" author="roboduke" created="Wed, 23 Nov 2022 06:03:33 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11314&quot;&gt;https://git.openjdk.org/jdk/pull/11314&lt;/a&gt;&lt;br/&gt;
Date: 2022-11-23 10:05:56 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="5080329">JDK-8291302</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="5094124">JDK-8302462</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5091115">JDK-8299956</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5077637">JDK-8288970</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5078872">JDK-8290025</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zcxf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17002"><![CDATA[Fix failed]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>