<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:27:14 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8310194] Generational ZGC: Lock-order asserts in JVMTI IterateThroughHeap</title>
                <link>https://bugs.openjdk.org/browse/JDK-8310194</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>We see this lock order problem:&lt;br/&gt;
&lt;br/&gt;
assert(false) failed: Attempting to acquire lock ObjectSynchronizer Weak alloc lock/oopstorage out of order with lock Service_lock/service -- possible deadlock&lt;br/&gt;
&lt;br/&gt;
V  [libjvm.so+0x13fcc3c]  Mutex::check_rank(Thread*)+0x36c  (mutex.cpp:447)&lt;br/&gt;
V  [libjvm.so+0x13fdee0]  Mutex::lock_without_safepoint_check()+0x50  (mutex.cpp:145)&lt;br/&gt;
V  [libjvm.so+0x14819b9]  OopStorage::allocate()+0x29  (mutexLocker.hpp:199)&lt;br/&gt;
V  [libjvm.so+0x18a8bd0]  WeakHandle::WeakHandle(OopStorage*, oop)+0x20  (weakHandle.cpp:37)&lt;br/&gt;
V  [libjvm.so+0x144e4f2]  ObjectMonitor::ObjectMonitor(oop)+0x62  (objectMonitor.cpp:261)&lt;br/&gt;
V  [libjvm.so+0x17337f5]  ObjectSynchronizer::inflate(Thread*, oop, ObjectSynchronizer::InflateCause)+0x675  (synchronizer.cpp:1425)&lt;br/&gt;
V  [libjvm.so+0x1736036]  ObjectSynchronizer::FastHashCode(Thread*, oop)+0x146  (synchronizer.cpp:1001)&lt;br/&gt;
V  [libjvm.so+0x146491f]  oopDesc::slow_identity_hash()+0x6f  (oop.cpp:112)&lt;br/&gt;
V  [libjvm.so+0x11bf2c5]  JvmtiTagMapTable::remove(oop)+0x265  (oop.inline.hpp:366)&lt;br/&gt;
V  [libjvm.so+0x11b6e0f]  CallbackWrapper::~CallbackWrapper()+0xef  (jvmtiTagMap.cpp:248)&lt;br/&gt;
V  [libjvm.so+0x11b290c]  IterateThroughHeapObjectClosure::do_object(oop)+0x59c  (jvmtiTagMap.cpp:1089)&lt;br/&gt;
V  [libjvm.so+0x1999518]  ZHeapIteratorContext::mark_and_push(oop) const [clone .part.0]+0x58  (zHeapIterator.cpp:81)&lt;br/&gt;
V  [libjvm.so+0x199c6d4]  ZHeapIteratorUncoloredRootOopClosure::do_oop(oop*)+0x154  (zHeapIterator.cpp:161)&lt;br/&gt;
V  [libjvm.so+0x19bda57]  ZNMethod::nmethod_oops_do_inner(nmethod*, OopClosure*)+0x47  (zNMethod.cpp:264)&lt;br/&gt;
V  [libjvm.so+0x19bdc1e]  ZNMethod::nmethod_oops_do(nmethod*, OopClosure*)+0x8e  (zNMethod.cpp:254)&lt;br/&gt;
V  [libjvm.so+0x1196195]  JvmtiDeferredEventQueue::oops_do(OopClosure*, CodeBlobClosure*)+0x45  (jvmtiImpl.cpp:1027)&lt;br/&gt;
V  [libjvm.so+0x15e5dd9]  ServiceThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)+0x59  (serviceThread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x1796ac6]  Thread::oops_do(OopClosure*, CodeBlobClosure*)+0x76  (thread.cpp:431)&lt;br/&gt;
V  [libjvm.so+0x19fad72]  ZJavaThreadsIterator::apply(ThreadClosure*)+0x102  (zRootsIterator.cpp:136)&lt;br/&gt;
V  [libjvm.so+0x19fb135]  ZRootsIteratorStrongUncolored::apply(ThreadClosure*, NMethodClosure*)+0x35  (zRootsIterator.cpp:96)&lt;br/&gt;
V  [libjvm.so+0x1997bed]  ZHeapIterator::push_strong_roots(ZHeapIteratorContext const&amp;amp;)+0x10d  (zHeapIterator.cpp:376)&lt;br/&gt;
V  [libjvm.so+0x199a37c]  ZHeapIterator::object_iterate(ObjectClosure*, unsigned int)+0x7c  (zHeapIterator.cpp:388)&lt;br/&gt;
V  [libjvm.so+0x199476e]  ZHeap::object_iterate(ObjectClosure*, bool)+0x5e  (zHeap.cpp:297)&lt;br/&gt;
V  [libjvm.so+0x11b787c]  VM_HeapIterateOperation::doit()+0x5c  (jvmtiTagMap.cpp:877)&lt;br/&gt;
V  [libjvm.so+0x18758e9]  VM_Operation::evaluate()+0x139  (vmOperations.cpp:71)&lt;br/&gt;
V  [libjvm.so+0x189868b]  VMThread::evaluate_operation(VM_Operation*)+0x10b  (vmThread.cpp:281)&lt;br/&gt;
V  [libjvm.so+0x18991ff]  VMThread::inner_execute(VM_Operation*)+0x3bf  (vmThread.cpp:435)&lt;br/&gt;
V  [libjvm.so+0x18993e4]  VMThread::loop()+0x84  (vmThread.cpp:502)&lt;br/&gt;
V  [libjvm.so+0x18994e7]  VMThread::run()+0x87  (vmThread.cpp:175)&lt;br/&gt;
V  [libjvm.so+0x179739a]  Thread::call_run()+0xba  (thread.cpp:217)&lt;br/&gt;
&lt;br/&gt;
We think that this lock ordering problem is limited to an assert and will not cause deadlocks.&lt;br/&gt;
&lt;br/&gt;
There are multiple alternatives to fix this:&lt;br/&gt;
1) Don&amp;#39;t inflate monitors during safepoints&lt;br/&gt;
2) Don&amp;#39;t take the Service_lock while safepointed&lt;br/&gt;
3) Split Service_lock and create a new lock for the deferred JVMTI events. This lock will have another rank which doesn&amp;#39;t conflict with the oopstorage lock.&lt;br/&gt;
4) Don&amp;#39;t apply non-GC closures while iterating over the root set&lt;br/&gt;
&lt;br/&gt;
We think that (4) is the best approach since it makes the code more robust and prevents similar lock order bugs.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5103371">JDK-8310194</key>
            <summary>Generational ZGC: Lock-order asserts in JVMTI IterateThroughHeap</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stefank">Stefan Karlsson</assignee>
                                    <reporter username="stefank">Stefan Karlsson</reporter>
                        <labels>
                            <label>genzgc</label>
                            <label>hgupdate-sync</label>
                            <label>jvmti</label>
                    </labels>
                <created>Fri, 16 Jun 2023 02:13:45 -0700</created>
                <updated>Wed, 12 Jul 2023 13:19:44 -0700</updated>
                            <resolved>Tue, 20 Jun 2023 06:48:40 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14592209" author="roboduke" created="Tue, 27 Jun 2023 01:25:41 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21/pull/69&quot;&gt;https://git.openjdk.org/jdk21/pull/69&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-27 08:20:27 +0000</comment>
                            <comment id="14590599" author="dukebot" created="Tue, 20 Jun 2023 06:48:39 -0700"  >Changeset: 4e4e586d&lt;br/&gt;
Author:    Stefan Karlsson &amp;lt;&lt;a href=&apos;mailto:stefank@openjdk.org&apos;&gt;stefank@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-20 13:46:49 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4e4e586dac3f4be15a6488a6b72aa9e2cd5d43db&quot;&gt;https://git.openjdk.org/jdk/commit/4e4e586dac3f4be15a6488a6b72aa9e2cd5d43db&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14589900" author="roboduke" created="Fri, 16 Jun 2023 05:12:21 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14518&quot;&gt;https://git.openjdk.org/jdk/pull/14518&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-16 11:52:51 +0000</comment>
                            <comment id="14589890" author="stefank" created="Fri, 16 Jun 2023 04:27:43 -0700"  >It turns out that Singlegen ZGC already do (4), so this bug is limited to Generational ZGC.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5104302">JDK-8311025</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5104680">JDK-8311353</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22711">21</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31xqb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>