<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:56:41 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8299614] Shenandoah: STW mark should keep nmethod/oops referenced from stack chunk alive</title>
                <link>https://bugs.openjdk.org/browse/JDK-8299614</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>#&lt;br/&gt;
#  Internal Error (/home/nicgas01/jdk/src/hotspot/share/code/codeCache.inline.hpp:49), pid=674258, tid=674369&lt;br/&gt;
#  assert(cb != __null) failed: must be&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (21.0) (slowdebug build 21-internal-adhoc.nicgas01.jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 21-internal-adhoc.nicgas01.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x130a680]  CodeCache::find_blob_and_oopmap(void*, int&amp;amp;)+0x11c&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
(Full log file attached.)&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;ve seen this failure intermittently on AArch64 when running the jtreg tests with Shenandoah but it&amp;#39;s easy to reproduce if you run the Skynet test directly with a small heap size. E.g.&lt;br/&gt;
&lt;br/&gt;
$ java -Xmx256m -XX:+UseShenandoahGC  --enable-preview Skynet 100&lt;br/&gt;
&lt;br/&gt;
This seems to be related to method unloading since if you run with -Xlog:codecache=debug there&amp;#39;s a log line like the following corresponding to the PC value which asserts in CodeCache::find_blob_and_oopmap() moments later:&lt;br/&gt;
&lt;br/&gt;
[20.239s][debug][codecache] *flushing  nmethod 591/0x0000ffffe1138990. Live blobs:1510/Free CodeCache:117454Kb &lt;br/&gt;
&lt;br/&gt;
If I run it with -XX:-MethodFlushing I don&amp;#39;t see the assertion failure.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5090707">JDK-8299614</key>
            <summary>Shenandoah: STW mark should keep nmethod/oops referenced from stack chunk alive</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="ngasson">Nick Gasson</reporter>
                        <labels>
                            <label>aarch64-related</label>
                            <label>amazon-interest</label>
                            <label>gc-shenandoah</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                    </labels>
                <created>Wed, 4 Jan 2023 08:11:15 -0800</created>
                <updated>Tue, 19 Sep 2023 00:17:35 -0700</updated>
                            <resolved>Tue, 12 Sep 2023 23:05:30 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14611427" author="roboduke" created="Fri, 15 Sep 2023 01:20:57 -0700"  >[jdk21u-fix-request] Approval Request from Aleksey Shipil&amp;#xEB;v&lt;br/&gt;
</comment>
                            <comment id="14611426" author="roboduke" created="Fri, 15 Sep 2023 01:20:23 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/163&quot;&gt;https://git.openjdk.org/jdk21u/pull/163&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-15 08:13:31 +0000</comment>
                            <comment id="14610745" author="dukebot" created="Tue, 12 Sep 2023 23:05:29 -0700"  >Changeset: ece9bdfc&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-09-13 06:04:10 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ece9bdfc838a5c419c789319ff794f1ae29b0256&quot;&gt;https://git.openjdk.org/jdk/commit/ece9bdfc838a5c419c789319ff794f1ae29b0256&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14610179" author="roboduke" created="Mon, 11 Sep 2023 11:26:36 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15669&quot;&gt;https://git.openjdk.org/jdk/pull/15669&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-11 18:21:28 +0000</comment>
                            <comment id="14610121" author="shade" created="Mon, 11 Sep 2023 08:58:38 -0700"  >I think I understand. When doing marking, we need to mark nmethod oops in stackChunks. This happens via extension in OopClosures. In Shenandoah, the salient part is ShenandoahMarkRefsSuperClosure::do_nmethod, that calls into nmethod barriers. But, nmethod barriers only act when armed. So concurrent mark arms the nmethod barriers at very beginning. But STW mark (degenerated/full GC) does not! So if we have oops referenced only from the stackChunk-reachable nmethod, we miss them during mark.&lt;br/&gt;
&lt;br/&gt;
Then class unloading comes in and discovers an nmethod with &amp;quot;dead&amp;quot; oop and forces its unloading. Then GC code comes in and iterates over all objects, which includes the stackChunk stack walking, which PC references the nmethod that is now unloaded. This we see as the failing assert while looking up CodeBlob from PC.&lt;br/&gt;
&lt;br/&gt;
It means this is a Shenandoah+Loom specific bug.&lt;br/&gt;
&lt;br/&gt;
This patch seems to fix the reproducer:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
diff --git a/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp b/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp&lt;br/&gt;
index eaf5b8f27ad..1c12a6fc67e 100644&lt;br/&gt;
--- a/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp&lt;br/&gt;
+++ b/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp&lt;br/&gt;
@@ -89,6 +89,9 @@ ShenandoahSTWMark::ShenandoahSTWMark(bool full_gc) :&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;void ShenandoahSTWMark::mark() {&lt;br/&gt;
+  // Arm all nmethods, so we visit nmethod oops&lt;br/&gt;
+  ShenandoahCodeRoots::arm_nmethods();&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;// Weak reference processing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ShenandoahHeap* const heap = ShenandoahHeap::heap();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ShenandoahReferenceProcessor* rp = heap-&amp;gt;ref_processor();&lt;br/&gt;
```</comment>
                            <comment id="14610062" author="shade" created="Mon, 11 Sep 2023 05:11:20 -0700"  >I think there is an interaction with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8290025&quot; title=&quot;Remove the Sweeper&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8290025&quot;&gt;&lt;strike&gt;JDK-8290025&lt;/strike&gt;&lt;/a&gt;. If I pass -XX:-ClassUnloading, the reproducer starts to pass. This patch also makes it pass (although it is probably too pessimistic):&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
diff --git a/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp b/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp&lt;br/&gt;
index 8bbc742a556..907066d5413 100644&lt;br/&gt;
--- a/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp&lt;br/&gt;
+++ b/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp&lt;br/&gt;
@@ -158,6 +158,7 @@ void ShenandoahSTWRootScanner::roots_do(T* oops, uint worker_id) {&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;if (_unload_classes) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread_roots.oops_do(oops, &amp;amp;blobs_cl, worker_id);&lt;br/&gt;
+    _code_roots.code_blobs_do(&amp;amp;blobs_cl, worker_id);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_cld_roots.always_strong_cld_do(&amp;amp;clds, worker_id);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_thread_roots.oops_do(oops, nullptr, worker_id);&lt;br/&gt;
```</comment>
                            <comment id="14610049" author="shade" created="Mon, 11 Sep 2023 04:30:00 -0700"  >Easily reproducible on current mainline with:&lt;br/&gt;
&lt;br/&gt;
% macosx-aarch64-server-fastdebug/images/jdk/bin/java -Xmx256m -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive -Xlog:gc -Xlog:gc+start Skynet.java 100&lt;br/&gt;
&lt;br/&gt;
[0.002s][info][gc] Min heap equals to max heap, disabling ShenandoahUncommit&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahPacing&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahLoadRefBarrier&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahSATBBarrier&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahCASBarrier&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahCloneBarrier&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahNMethodBarrier&lt;br/&gt;
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahStackWatermarkBarrier&lt;br/&gt;
[0.010s][info][gc] Using Shenandoah&lt;br/&gt;
[1.330s][info][gc] Failed to allocate TLAB, 256K&lt;br/&gt;
[1.330s][info][gc] Cancelling GC: Allocation Failure&lt;br/&gt;
[1.330s][info][gc] Trigger: Handle Allocation Failure&lt;br/&gt;
[1.331s][info][gc,start] GC(0) Pause Degenerated GC (Outside of Cycle)&lt;br/&gt;
[thread 27139 also had an error]#&lt;br/&gt;
[thread 33027 also had an error]&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/code/codeCache.inline.hpp:49), pid=39848, tid=15107&lt;br/&gt;
#  assert(cb != nullptr) failed: must be&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, bsd-aarch64)&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /Users/shipilev/Work/shipilev-jdk/test/jdk/java/lang/Thread/virtual/stress/hs_err_pid39848.log&lt;br/&gt;
</comment>
                            <comment id="14609927" author="serb" created="Sat, 9 Sep 2023 19:11:14 -0700"  >I can reproduce the crash of this test, but in a different place:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackChunkFrameStream&amp;lt;(ChunkFrames)1&amp;gt;::handle_deopted() const+0x7a</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5110563">JDK-8316495</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102201" name="hs_err_pid674258.log" size="307897" author="ngasson" created="Wed, 4 Jan 2023 08:10:47 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zshn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17352"><![CDATA[b15]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>