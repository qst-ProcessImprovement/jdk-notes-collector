<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 15:34:22 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8300002] Performance regression caused by non-inlined hot methods due to post call noop instructions</title>
                <link>https://bugs.openjdk.org/browse/JDK-8300002</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Turning on --enable-preview (Loom) causes a set of performance regressions due to different inline tree.&lt;br/&gt;
&lt;br/&gt;
Some microbenchmarks:&lt;br/&gt;
org.openjdk.bench.java.lang.StringBuilders.fromLatin1String&lt;br/&gt;
regression from 9 ns/op - 18 ns/op&lt;br/&gt;
&lt;br/&gt;
org.openjdk.bench.java.lang.StringBuilders.fromLatin1StringBuilder&lt;br/&gt;
regression from 15 ns/op -&amp;gt; 25 ns/op&lt;br/&gt;
&lt;br/&gt;
org.openjdk.bench.java.lang.reflect.Clazz.getMethodDifferentClassLoader&lt;br/&gt;
regression from ~240 ns/op -&amp;gt; 280 ns/op&lt;br/&gt;
and many others.&lt;br/&gt;
&lt;br/&gt;
The reason for the performance regression is the fact that C2 generates post call noop instructions (required for Loom) which increases the instruction size of generated methods and some methods became higher than InlineSmallCode threshold.&lt;br/&gt;
&lt;br/&gt;
Some typical non-inlined hot methods:&lt;br/&gt;
java.lang.AbstractStringBuilder::&amp;lt;init&amp;gt;&lt;br/&gt;
Class::getMethod&lt;br/&gt;
etc.</description>
                <environment></environment>
        <key id="5091217">JDK-8300002</key>
            <summary>Performance regression caused by non-inlined hot methods due to post call noop instructions</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="skuksenko">Sergey Kuksenko</assignee>
                                    <reporter username="skuksenko">Sergey Kuksenko</reporter>
                        <labels>
                            <label>loom</label>
                            <label>oracle-triage-11</label>
                            <label>oracle-triage-17</label>
                            <label>oracle-triage-21</label>
                            <label>perf-regression</label>
                    </labels>
                <created>Wed, 11 Jan 2023 13:48:23 -0800</created>
                <updated>Wed, 19 Apr 2023 16:22:09 -0700</updated>
                            <resolved>Tue, 17 Jan 2023 16:20:25 -0800</resolved>
                                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                                <comments>
                            <comment id="14552003" author="dukebot" created="Tue, 17 Jan 2023 16:20:06 -0800"  >Changeset: 89a032dc&lt;br/&gt;
Author:    Sergey Kuksenko &amp;lt;&lt;a href=&apos;mailto:skuksenko@openjdk.org&apos;&gt;skuksenko@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-18 00:16:34 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/89a032dc057d04c996632ad317a0303cf3560852&quot;&gt;https://git.openjdk.org/jdk/commit/89a032dc057d04c996632ad317a0303cf3560852&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14550544" author="roboduke" created="Wed, 11 Jan 2023 19:30:14 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11958&quot;&gt;https://git.openjdk.org/jdk/pull/11958&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-12 02:52:17 +0000</comment>
                            <comment id="14550539" author="dlong" created="Wed, 11 Jan 2023 18:39:08 -0800"  >ILW = performance regression; seen in micro-benchmarks; no workaround = MMH = P3</comment>
                            <comment id="14550503" author="skuksenko" created="Wed, 11 Jan 2023 13:58:42 -0800"  >Tuning InlineSmallCode threshold can&amp;#39;t help.&lt;br/&gt;
Even small changes in InlineSmallCode threshold cause a chaotic effect on our complete set of benchmarks.&lt;br/&gt;
&lt;br/&gt;
For the current state of inline heuristics would be better to use another strategy.&lt;br/&gt;
InlineSmallCode threshold should cut off inline of large/medium methods. At the same moment, adding post call noop instructions doesn&amp;#39;t increase the real complexity of the method and shouldn&amp;#39;t change inline behavior.&lt;br/&gt;
&lt;br/&gt;
Suggestion: count the total size of post call noop instructions and adjust the inlining heuristic (subtract the total noop size from the instructions size).  </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5098950">JDK-8306485</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5093386">JDK-8301819</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5093301">JDK-8301743</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zvmz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>