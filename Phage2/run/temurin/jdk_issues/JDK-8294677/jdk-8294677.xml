<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:11:44 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8294677] chunklevel::MAX_CHUNK_WORD_SIZE too small for some applications</title>
                <link>https://bugs.openjdk.org/browse/JDK-8294677</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
Failed to compile if a test has lots of function blocks if running on JDK 17, but JDK 8 works.&lt;br/&gt;
&lt;br/&gt;
REGRESSION : Last worked in version 8&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home&lt;br/&gt;
export PATH=${JAVA_HOME}/bin:${PATH}&lt;br/&gt;
&lt;br/&gt;
git clone &lt;a href=&quot;https://github.com/delta-io/delta.git&quot;&gt;https://github.com/delta-io/delta.git&lt;/a&gt;&lt;br/&gt;
cd delta&lt;br/&gt;
git checkout 6a30e958de4322100b2ccfa13fa29ae155369a07&lt;br/&gt;
build/sbt clean  &amp;quot;core/testOnly *.DeltaErrorsSuite&amp;quot;&lt;br/&gt;
&lt;br/&gt;
ACTUAL -&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (metaspaceArena.cpp:93), pid=45644, tid=6147&lt;br/&gt;
#  guarantee(requested_word_size &amp;lt;= chunklevel::MAX_CHUNK_WORD_SIZE) failed: Requested size too large (528698) - max allowed size per allocation is 524288.&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (17.0+35) (build 17+35-LTS-2724)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17+35-LTS-2724, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)&lt;br/&gt;
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /Users/yumwang/opensource/delta/core/hs_err_pid45644.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
Exception in thread &amp;quot;Thread-9&amp;quot; java.io.EOFException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;| =&amp;gt; cat java.base/java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3192)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1693)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.scalatest.tools.Framework$ScalaTestRunner$Skeleton$1$React.react(Framework.scala:839)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.scalatest.tools.Framework$ScalaTestRunner$Skeleton$1.run(Framework.scala:828)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.Thread.run(Thread.java:833)&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
&lt;a href=&quot;https://github.com/delta-io/delta/blob/2499f5408c63de39914a789cf8bb57137224fb3a/core/src/test/scala/org/apache/spark/sql/delta/DeltaErrorsSuite.scala#L146&quot;&gt;https://github.com/delta-io/delta/blob/2499f5408c63de39914a789cf8bb57137224fb3a/core/src/test/scala/org/apache/spark/sql/delta/DeltaErrorsSuite.scala#L146&lt;/a&gt;&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
&lt;a href=&quot;https://github.com/delta-io/delta/pull/1391/files#diff-7fb91cd0f8dfcccf78ab6ff32c97945a15df962a6572f6236575addc3067d824R146&quot;&gt;https://github.com/delta-io/delta/pull/1391/files#diff-7fb91cd0f8dfcccf78ab6ff32c97945a15df962a6572f6236575addc3067d824R146&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5083989">JDK-8294677</key>
            <summary>chunklevel::MAX_CHUNK_WORD_SIZE too small for some applications</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stuefe">Thomas Stuefe</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>dcsswa</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>metaspace</label>
                            <label>regression</label>
                            <label>reproducer-no</label>
                            <label>sap-interest</label>
                            <label>webbug</label>
                    </labels>
                <created>Thu, 22 Sep 2022 17:28:00 -0700</created>
                <updated>Tue, 21 Feb 2023 00:18:19 -0800</updated>
                            <resolved>Mon, 23 Jan 2023 22:36:45 -0800</resolved>
                                    <version>17</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14557100" author="stuefe" created="Thu, 2 Feb 2023 23:20:42 -0800"  >Fix Request 17u&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
This fixes an issue where the VM would fail to load a generated class.&lt;br/&gt;
The risk is small. It increases the maximum size of metaspace chunks from 4M to 16M. As a side effect, this may subtly change the geometry of non-class metaspace mappings on 32-bit (less of them, but larger) but this should be benign.&lt;br/&gt;
Patch does not apply cleanly; changes are very minor.&lt;br/&gt;
Tests:&lt;br/&gt;
- manually ran hotspot_metaspace on x64 and x86&lt;br/&gt;
- SAP nightlies&lt;br/&gt;
- GHAs&lt;br/&gt;
- I also manually tested x64 to check that we don&amp;#39;t have a memory usage regression.&lt;br/&gt;
</comment>
                            <comment id="14556496" author="roboduke" created="Wed, 1 Feb 2023 02:52:21 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1142&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1142&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-01 10:43:30 +0000</comment>
                            <comment id="14553915" author="dukebot" created="Mon, 23 Jan 2023 22:36:44 -0800"  >Changeset: 2292ce13&lt;br/&gt;
Author:    Thomas Stuefe &amp;lt;&lt;a href=&apos;mailto:stuefe@openjdk.org&apos;&gt;stuefe@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-24 06:35:26 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/2292ce137c16accf0622600d5a096403b8a8058d&quot;&gt;https://git.openjdk.org/jdk/commit/2292ce137c16accf0622600d5a096403b8a8058d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14553107" author="roboduke" created="Fri, 20 Jan 2023 07:39:24 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12115&quot;&gt;https://git.openjdk.org/jdk/pull/12115&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-20 15:15:01 +0000</comment>
                            <comment id="14552972" author="stuefe" created="Thu, 19 Jan 2023 23:31:46 -0800"  >I will write a simple bandaid patch that increases root chunk size to 16M. That can be easily downported. Since that is not a full solution to the problem, I also opened &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300729,&quot;&gt;https://bugs.openjdk.org/browse/JDK-8300729,&lt;/a&gt; a proposal to have limitless metaspace allocations.</comment>
                            <comment id="14551182" author="stuefe" created="Sat, 14 Jan 2023 06:36:51 -0800"  >I have a VM with - as a test - increased Root chunk size of 32MB. Such a change would be minimally invasive and it fixes the problem here with Delta.&lt;br/&gt;
&lt;br/&gt;
However, understanding more about the problem, I think StackMapTables can get really big for very large and inefficiently generated methods. Therefore another option - possibly in addition to increasing the root chunk size - would be to allow side allocations per malloc. I dislike this on principle, since it makes the allocator and things like &amp;quot;Metaspace::contains()&amp;quot; more complex. Therefore lets see if the increased root chunk size already does the trick.&lt;br/&gt;
&lt;br/&gt;
A little mental calculation:&lt;br/&gt;
A method with 64k of byte codes, consisting of almost exclusively stores into the local var array, having a stack map table entry for every bytecode (I am still unsure about the &amp;quot;block&amp;quot; term in the class file spec), and each entry being expressed in full, could come to a stack map table size of several GB. 64k byte codes -&amp;gt; 64kish stack map table entries, each repeatedly describing an ever growing var array of max 64k size... &lt;br/&gt;
&lt;br/&gt;
Of course, such a class would be absurd, and would it be loadable, it would eat up tons of memory.</comment>
                            <comment id="14551174" author="stuefe" created="Sat, 14 Jan 2023 05:11:22 -0800"  >The generated code contains two functions, both seem from the bytecode-like very large switch constructs. They both scrape at the very end of method size (37k resp. 56k bytecodes). &lt;br/&gt;
&lt;br/&gt;
They accumulate an ever growing local var array, in the thousands range. I&amp;#39;m pretty sure this is unintended. &lt;br/&gt;
&lt;br/&gt;
e.g. &lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
grep store DeltaErrorsSuiteBase-javap.txt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;143: astore        7    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;148: astore        8    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;164: astore        9    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;201: astore        6    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;244: astore        11   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;249: astore        12   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;265: astore        13   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;302: astore        10   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;383: astore        14   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;390: astore        16   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;395: astore        17   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;411: astore        18   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;448: astore        15   &lt;br/&gt;
...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37041: astore_w      1148&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37084: astore_w      1145&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37134: astore_w      1150&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37157: astore_w      1151&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37183: astore_w      1152&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37226: astore_w      1149&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37311: astore_w      1153&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37322: astore_w      1155&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37329: astore_w      1156&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37355: astore_w      1157&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37398: astore_w      1154&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37448: astore_w      1159&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37455: astore_w      1160&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37481: astore_w      1161&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37524: astore_w      1158&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37574: astore_w      1163&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37597: astore_w      1164&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37623: astore_w      1165&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;37666: astore_w      1162&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Also not optimal is the way the stackmap table is present. There are a lot of function blocks, hence a lot of stackmap entries (&amp;gt;1000). All of them are full entries (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.4&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.4&lt;/a&gt;). Unfortunately, since the operand stack seems to never be empty, or only 1-element-sized, none of the &amp;quot;same_frame_&amp;quot; presentations can be used, which means that on each StackMapTable entry the whole insane local var array is repeated.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14551170" author="stuefe" created="Sat, 14 Jan 2023 02:08:09 -0800"  >Seems rare but another occurrence found here: &lt;a href=&quot;https://github.com/rakudo/rakudo/issues/4952&quot;&gt;https://github.com/rakudo/rakudo/issues/4952&lt;/a&gt; . &lt;br/&gt;
&lt;br/&gt;
In both cases (here and there) gigantic generated classes are involved with insane stack maps.&lt;br/&gt;
&lt;br/&gt;
In case of delta, I boiled it down to a single class, &amp;quot;org/apache/spark/sql/delta/DeltaErrorsSuiteBase.class&amp;quot;, that is 6.8MB and about 10x the size of any other large class. There is one StackMapTable with 1600~ entries, and the entries are very large themselves.&lt;br/&gt;
&lt;br/&gt;
See class and javap output attached.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll check what the best way to deal with this is.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14551005" author="simonis" created="Fri, 13 Jan 2023 05:00:18 -0800"  >This issue is a direct consequence of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8251158&quot; title=&quot;Implementation of JEP 387: Elastic Metaspace&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8251158&quot;&gt;&lt;strike&gt;JDK-8251158&lt;/strike&gt;&lt;/a&gt; which limited the maximum allocation size in Metaspace to MAX_CHUNK_WORD_SIZE (currently 4M / 524288 words). It seems that some class files can have larger stackmap tables (see attached hs_err files).&lt;br/&gt;
&lt;br/&gt;
The problem is easily reproducible (see CUSTOMER SUBMITTED WORKAROUND in the initial report):&lt;br/&gt;
```&lt;br/&gt;
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home&lt;br/&gt;
export PATH=${JAVA_HOME}/bin:${PATH}&lt;br/&gt;
&lt;br/&gt;
git clone &lt;a href=&quot;https://github.com/delta-io/delta.git&quot;&gt;https://github.com/delta-io/delta.git&lt;/a&gt;&lt;br/&gt;
cd delta&lt;br/&gt;
git checkout 6a30e958de4322100b2ccfa13fa29ae155369a07&lt;br/&gt;
build/sbt clean  &amp;quot;core/testOnly *.DeltaErrorsSuite&amp;quot;&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
Looks like we have to increase MAX_CHUNK_WORD_SIZE and/or make it configurable through a command line options to avoid such issues in the future.&lt;br/&gt;
</comment>
                            <comment id="14532351" author="mseledtsov" created="Tue, 25 Oct 2022 11:17:01 -0700"  >ILW = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5093401">JDK-8301827</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5094301">JDK-8302617</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5092036">JDK-8300729</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5026801">JDK-8251158</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5093345">JDK-8301786</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102318" name="DeltaErrorsSuiteBase-javap.txt.tar.gz" size="1272388" author="stuefe" created="Sat, 14 Jan 2023 02:11:39 -0800"/>
                            <attachment id="102317" name="DeltaErrorsSuiteBase.class" size="6833995" author="stuefe" created="Sat, 14 Jan 2023 02:08:24 -0800"/>
                            <attachment id="102302" name="hs_err_pid30425.log" size="253274" author="simonis" created="Fri, 13 Jan 2023 04:48:03 -0800"/>
                            <attachment id="102303" name="hs_err_pid7192.log" size="183130" author="simonis" created="Fri, 13 Jan 2023 04:48:15 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ynwz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>