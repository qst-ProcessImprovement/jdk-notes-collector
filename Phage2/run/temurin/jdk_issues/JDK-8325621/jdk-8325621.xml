<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:04:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8325621] Improve jspawnhelper version checks</title>
                <link>https://bugs.openjdk.org/browse/JDK-8325621</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>jspawnhelper is invoked by JDK ProcessBuilder/Runtime.exec to invoke a process with posix_spawn. There is the internal protocol between JDK invocation code and jspawnhelper, which changes sometimes, see e.g.  &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310265&quot; title=&quot;(process) jspawnhelper should not use argv[0]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310265&quot;&gt;&lt;strike&gt;JDK-8310265&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
We expect that only JDK invokes jspawnhelper. But there are two corner cases.&lt;br/&gt;
&lt;br/&gt;
First, someone could call jspawnhelper directly. There is a warning message printed in some cases, for example when jspawnhelper is invoked without arguments: &amp;quot;This command is not for general use and should only be run as the result of a call to ProcessBuilder.start() or Runtime.exec() in a java application&amp;quot;. Quick googling shows that projects still ignore this warning. See for example Zimbra (&lt;a href=&quot;https://wiki.zimbra.com/wiki/Jspawnhelper):&quot;&gt;https://wiki.zimbra.com/wiki/Jspawnhelper):&lt;/a&gt; &amp;quot;One example of legitimate use [sic! -Aleksey] of jspawnhelper is by zmprov, the command line utility to provision accounts on Zimbra.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Second, there is a minuscule chance of system misconfiguration when jspawnhelper from another JDK would be executed instead of one shipping with invoking JDK. Current code figures out the jspawnhelper path from `java.home` property, which looks safe-ish, but it would be even better to make sure. There is also the report from Ubuntu: &lt;a href=&quot;https://bugs.launchpad.net/ubuntu/+source/openjdk-17/+bug/2055280&quot;&gt;https://bugs.launchpad.net/ubuntu/+source/openjdk-17/+bug/2055280&lt;/a&gt; -- that unattended upgrade replaced the JDK under the running JVM, which effectively replaced the old jspawnhelper with an incompatible one. This is arguably the upgrade process problem, as JDK is not guaranteed to work when its contents are overwritten, but we want to catch that error consistently.&lt;br/&gt;
&lt;br/&gt;
I think we can make jspawnhelper checks a bit better by handshaking on explicit JDK/VM version. Something like `VERSION_STRING` already defined by the build system can be compiled into the `jspawnhelper` and checked against.</description>
                <environment></environment>
        <key id="5121194">JDK-8325621</key>
            <summary>Improve jspawnhelper version checks</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="crakoczy">Chad Rakoczy</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                    </labels>
                <created>Mon, 12 Feb 2024 03:05:43 -0800</created>
                <updated>Wed, 13 Aug 2025 12:34:32 -0700</updated>
                            <resolved>Thu, 14 Mar 2024 06:27:33 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14762455" author="shade" created="Thu, 20 Mar 2025 03:09:05 -0700"  >Note: I filed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8352489&quot; title=&quot;Relax jspawnhelper version checks to informative&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8352489&quot;&gt;JDK-8352489&lt;/a&gt; to (at least temporarily) relax the version checks to informative.</comment>
                            <comment id="14698377" author="JIRAUSER20910" created="Wed, 14 Aug 2024 13:37:52 -0700"  >@Alexey Shipilev: I agree - we should address the issue in unattended-upgrades[1]/needrestart[2] rather than try to make openjdk gracefully handle overwrites. There is a bug filed against unattended-upgrades[3] and some activity on it might help to prioritise it.&lt;br/&gt;
&lt;br/&gt;
I have done some testing with needrestart - it handles Java systemd services, but fails to notify if the Java process is running in background in the terminal session and does not do anything if the runtime is removed.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://launchpad.net/ubuntu/+source/needrestart&quot;&gt;https://launchpad.net/ubuntu/+source/needrestart&lt;/a&gt; &lt;br/&gt;
[2] &lt;a href=&quot;https://launchpad.net/ubuntu/+source/unattended-upgrades&quot;&gt;https://launchpad.net/ubuntu/+source/unattended-upgrades&lt;/a&gt;&lt;br/&gt;
[3] &lt;a href=&quot;https://bugs.launchpad.net/ubuntu/+source/openjdk-17/+bug/2055280&quot;&gt;https://bugs.launchpad.net/ubuntu/+source/openjdk-17/+bug/2055280&lt;/a&gt;</comment>
                            <comment id="14698352" author="manc" created="Wed, 14 Aug 2024 12:14:15 -0700"  >I agree that in-place overwrite of JDK binary while Java applications are running is problematic and should be avoided. The ideal approach is ask all package managers and JDK installers to avoid or fix this problem before installing the JDK containing this change.&lt;br/&gt;
&lt;br/&gt;
The question is how to safely communicate and roll out this change, without suddenly breaking running Java applications when the package managers upgrade the JDK in the old way that they have been doing for perhaps decades.&lt;br/&gt;
Should we publish a release note highlighting this compatibility risk? Are there channels or precedence to notify maintainers of supported OS distributions about this potential breaking change?</comment>
                            <comment id="14698179" author="shade" created="Wed, 14 Aug 2024 02:21:59 -0700"  >Of course, I don&amp;#39;t see that email in my inbox, so I cannot reply there :(&lt;br/&gt;
&lt;br/&gt;
Yes, jspawnhelper checks would detect the case when JDK was overwritten while JDK was running. This is the expected behavior for this change: it fails fast, instead of giving the cryptically misbehaving JVM. Note that we started doing this _because_ there were cryptic bugs after jspawnhelper bugfixes, and the upgrade overwriting the JDK contents with incompatible jspawnhelper.&lt;br/&gt;
&lt;br/&gt;
The upgrades 22.0.1 -&amp;gt; 22.0.2 would still yield not very helpful message about the incorrect number of arguments, but going forward, the overwrite would clearly trigger:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
Incorrect Java version: 21.0.4-internal-adhoc.shipilev.openjdk-jdk21u-dev&lt;br/&gt;
jspawnhelper version 21.0.5-internal-adhoc.shipilev.openjdk-jdk21u-dev&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
JDK cannot generally survive overwrite without breaking, even it &amp;quot;appeared&amp;quot; to work well before. The JDK libraries, symbols, etc would also be overwritten, which can result in much subtler bugs when incompatible code is loaded. Upgrade process that either overwrites the JDK contents for running JVMs, or does not suggest to restart JDKs after upgrade is the root issue here, not the jspawnhelper checks themselves. On other words, version checking only highlights the problem with upgrades processes. Package managers should prompt users to restart their Java processes after in-place upgrade, and unattended upgrade should not attempt to upgrade JDK without users knowing about it.&lt;br/&gt;
&lt;br/&gt;
Technically, we can revert these version checks and instead just silently accept the overwrite like before. I don&amp;#39;t think we should get back to that behavior, though. It does not solve the actual issue, and just sweeps it under the rug. The running Java service is now subtly broken after the overwrite, you just don&amp;#39;t know about it, and might be just lucky it does not affect correctness. So I think there is some work needed on distro side. Vladimir Petko (Canonical) was in this thread from the start. Vladimir, what&amp;#39;s your thinking here?</comment>
                            <comment id="14698070" author="darcy" created="Tue, 13 Aug 2024 17:39:56 -0700"  >&amp;quot;compatibility impact of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8325621&quot; title=&quot;Improve jspawnhelper version checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8325621&quot;&gt;&lt;strike&gt;JDK-8325621&lt;/strike&gt;&lt;/a&gt; (Improve jspawnhelper version checks)&amp;quot;&lt;br/&gt;
&lt;a href=&quot;https://mail.openjdk.org/pipermail/core-libs-dev/2024-August/127583.html&quot;&gt;https://mail.openjdk.org/pipermail/core-libs-dev/2024-August/127583.html&lt;/a&gt;</comment>
                            <comment id="14681902" author="roboduke" created="Sun, 16 Jun 2024 13:20:07 -0700"  >[jdk17u-fix-request] Approval Request from Chad Rakoczy&lt;br/&gt;
Clean backport to update jspawnhelper to check that JDK version and jspawnhelper version are the same. Updates test to include check for version. GHA tests pass including the updated test. Risk is low: touches the production code paths but only passes an additional argument to jspawnhelper.</comment>
                            <comment id="14681850" author="roboduke" created="Fri, 14 Jun 2024 17:17:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2592&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2592&lt;/a&gt;&lt;br/&gt;
Date: 2024-06-15 00:13:47 +0000</comment>
                            <comment id="14670552" author="roboduke" created="Thu, 2 May 2024 12:21:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/181&quot;&gt;https://git.openjdk.org/jdk22u/pull/181&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-02 19:14:54 +0000</comment>
                            <comment id="14670551" author="roboduke" created="Thu, 2 May 2024 12:18:05 -0700"  >[jdk22u-fix-request] Approval Request from Chad Rakoczy&lt;br/&gt;
Clean backport to update jspawnhelper to check that JDK version and jspawnhelper version are the same. Updates test to include check for version. GHA tests pass including the updated test. Risk is low: touches the production code paths but only passes an additional argument to jspawnhelper</comment>
                            <comment id="14670332" author="goetz" created="Thu, 2 May 2024 01:15:37 -0700"  >[21u]&lt;br/&gt;
Please backport to 22 first. Removing the lable in the meantime.</comment>
                            <comment id="14670248" author="roboduke" created="Wed, 1 May 2024 15:09:45 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/547&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/547&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-01 22:05:45 +0000</comment>
                            <comment id="14670246" author="roboduke" created="Wed, 1 May 2024 15:08:47 -0700"  >[jdk21u-fix-request] Approval Request from Chad Rakoczy&lt;br/&gt;
Clean backport to update jspawnhelper to check that JDK version and jspawnhelper version are the same. Updates test to include check for version. GHA tests pass including the updated test. This has been backported to JDK22. Risk is low: touches the production code paths but only passes an additional argument to jspawnhelper.</comment>
                            <comment id="14657418" author="dukebot" created="Thu, 14 Mar 2024 06:27:31 -0700"  >Changeset: a232e8fb&lt;br/&gt;
Author:    Chad Rakoczy &amp;lt;&lt;a href=&apos;mailto:chadrako@amazon.com&apos;&gt;chadrako@amazon.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-03-14 13:26:03 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/a232e8fb4e6e9e2e9a5285bf01c93b8d1d995f04&quot;&gt;https://git.openjdk.org/jdk/commit/a232e8fb4e6e9e2e9a5285bf01c93b8d1d995f04&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14656321" author="roboduke" created="Mon, 11 Mar 2024 10:50:04 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/18204&quot;&gt;https://git.openjdk.org/jdk/pull/18204&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-11 17:46:14 +0000</comment>
                            <comment id="14654389" author="JIRAUSER20910" created="Mon, 4 Mar 2024 12:25:48 -0800"  >Yes, if the fixed width is used to transfer the version then it straightforward and does not add any complexity/failure modes. &lt;br/&gt;
&lt;br/&gt;
To help the user with the diagnostics, maybe it would make sense to print the version encoded in jspawnhelper when it is called without args?&lt;br/&gt;
</comment>
                            <comment id="14654361" author="rriggs" created="Mon, 4 Mar 2024 09:16:35 -0800"  >Actually, using the major/minor version number is better, using fixed fields and easier reading/writing.</comment>
                            <comment id="14654323" author="rriggs" created="Mon, 4 Mar 2024 07:26:05 -0800"  >Including the version string in the handshake is about as straightforward as it can get and does not add any new failure modes or complex code.</comment>
                            <comment id="14654023" author="JIRAUSER20910" created="Fri, 1 Mar 2024 14:40:10 -0800"  >The original requirements for the jspawnhelper state that it has to be as simple as possible in order to be reliable. Returning a version in a keep-alive response is not a complex change, but I was thinking if we can avoid changing jspawnhelper altogether. Renaming the jspawnhelper will require changes in DefaultImageBuilder to rename the file to the expected name and write the property file (if we go with the append a timestamp approach) and this is definitely far more complex than just sending a version string. &lt;br/&gt;
&lt;br/&gt;
Though considering the error handling (since the requirements state that the execute-twice approach is for rare cases when normal fork/exec might crash in rare cases): &lt;br/&gt;
&amp;nbsp;- jspawnhelper does not send anything at all and times out - we can just raise &amp;quot;jspawnhelper timed out&amp;quot; without further details.&lt;br/&gt;
&amp;nbsp;- jspawnhelper sends some binary junk (e.g. due to the build error) - The message becomes garbled potentially corrupting the logs.&lt;br/&gt;
&amp;nbsp;- jspawnhelper keeps sending data - we need to limit size of the version string&lt;br/&gt;
&amp;nbsp;- jspawnhelper crashes mid transfer of the version string - the &amp;quot;expected&amp;quot; part of the message becomes truncated potentially corrupting the log or lacks information, so we can just state that &amp;quot;jspawnhelper failed to start.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Regarding the message, in the case of file not found, ProcessBuilder can check {java.home}/lib for the binaries named &amp;quot;jspawnhelper*&amp;quot; and warn the user in the format above &amp;quot;Expected jspawnhelper for Java 21.0.1+13, but jspawnhelper for Java 21.0.1+14 was found&amp;quot;. With timestamp it will look something like &lt;br/&gt;
&amp;quot;Expected jspawnhelper for Java 21.0.1+13 built on 1 Jan 2023, but jspawnhelper for Java 21.0.1+14 built on 2 Jan 2024 was found instead.&amp;quot; &lt;br/&gt;
This has less error handling issues to care about and will provide reasonable information in most cases.&lt;br/&gt;
&lt;br/&gt;
Error cases here:&lt;br/&gt;
&amp;nbsp;- lib directory becomes is not listable - we can raise explicit error message for this&lt;br/&gt;
&amp;nbsp;- files in lib were deleted and no jspawnhelper* binary found - same&lt;br/&gt;
&amp;nbsp;- wrong permissions - same&lt;br/&gt;
&amp;nbsp;- ??? other cases?</comment>
                            <comment id="14653823" author="shade" created="Fri, 1 Mar 2024 01:21:22 -0800"  >That might work too. I see two wrinkles with that approach: 1) we would need to change build system to accommodate that change; 2) the &amp;quot;file not found&amp;quot; looks like a less understandable failure mode than printing out the &amp;quot;Incompatible JDK version, expected FOO, but got BAR. Check A, B, C.&amp;quot; from the jspawnhelper itself.</comment>
                            <comment id="14653820" author="JIRAUSER20910" created="Fri, 1 Mar 2024 01:15:55 -0800"  >I am wondering if this has to be a handshake - maybe it is possible to make jspawnhelper file name build or version-specific? E.g. jspawnhelper&amp;lt;timestamp&amp;gt; or jspawnhelper&amp;lt;version&amp;gt; .&lt;br/&gt;
&lt;br/&gt;
This will not protect from malicious replacement (e.g. solarwinds-style attack), but will provide a clear message to the user that the expected file is now missing from the file system.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5129043">JDK-8331949</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129308">JDK-8332133</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5132028">JDK-8334407</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="5153505">JDK-8352489</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5103462">JDK-8310265</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5121109">JDK-8325567</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5161322">JDK-8359273</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5164761">JDK-8362384</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34y7f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17352"><![CDATA[b15]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="190"><![CDATA[java.lang]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>