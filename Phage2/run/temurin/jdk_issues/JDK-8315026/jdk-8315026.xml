<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 10:11:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8315026] ProcessHandle implementation listing processes on AIX should use getprocs64</title>
                <link>https://bugs.openjdk.org/browse/JDK-8315026</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>We see rather often failures in java/lang/ProcessHandle/TreeTest.java on AIX in TreeTest.test5.&lt;br/&gt;
The reason is: Previously the implementation based on the /proc file system lead to double pids in the child list; at least intermittent. Using the API getprocs64() instead I was able to eliminate those double pids (and increase the performance by a factor of 4). Otherwise we would have to add an algorithm to filter out the doubles after creating the raw list.&lt;br/&gt;
&lt;br/&gt;
Here is a java callstack of the error situation:&lt;br/&gt;
test TreeTest.test5(): failure&lt;br/&gt;
java.lang.AssertionError: expected direct children expected [2] but found [3]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.Assert.fail(Assert.java:99)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.Assert.failNotEquals(Assert.java:1037)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.Assert.assertEqualsImpl(Assert.java:140)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.Assert.assertEquals(Assert.java:122)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.Assert.assertEquals(Assert.java:907)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at TreeTest.test5(TreeTest.java:447)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.TestRunner.privateRun(TestRunner.java:764)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.TestRunner.run(TestRunner.java:585)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.SuiteRunner.run(SuiteRunner.java:286)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.TestNG.runSuites(TestNG.java:1069)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.testng.TestNG.run(TestNG.java:1037)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.Thread.run(Thread.java:1570)</description>
                <environment></environment>
        <key id="5108875">JDK-8315026</key>
            <summary>ProcessHandle implementation listing processes on AIX should use getprocs64</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jkern">Joachim Kern</assignee>
                                    <reporter username="mbaesken">Matthias Baesken</reporter>
                        <labels>
                            <label>jdk21u-fix-SQE-ok-next</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Fri, 25 Aug 2023 05:22:38 -0700</created>
                <updated>Fri, 20 Oct 2023 04:40:07 -0700</updated>
                            <resolved>Fri, 13 Oct 2023 01:31:14 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14618003" author="roboduke" created="Fri, 13 Oct 2023 02:02:38 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/250&quot;&gt;https://git.openjdk.org/jdk21u/pull/250&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-13 08:56:55 +0000</comment>
                            <comment id="14618002" author="roboduke" created="Fri, 13 Oct 2023 02:01:45 -0700"  >[jdk21u-fix-request] Approval Request from JoKern65&lt;br/&gt;
Backport of test fix for AIX. No risk, clean backport.</comment>
                            <comment id="14617993" author="dukebot" created="Fri, 13 Oct 2023 01:31:13 -0700"  >Changeset: 4d904204&lt;br/&gt;
Author:    Joachim Kern &amp;lt;&lt;a href=&apos;mailto:jkern@openjdk.org&apos;&gt;jkern@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Matthias Baesken &amp;lt;&lt;a href=&apos;mailto:mbaesken@openjdk.org&apos;&gt;mbaesken@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-13 08:29:48 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4d9042043ecade75d50c25574a445e6b8ef43618&quot;&gt;https://git.openjdk.org/jdk/commit/4d9042043ecade75d50c25574a445e6b8ef43618&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14616138" author="roboduke" created="Thu, 5 Oct 2023 03:10:41 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16051&quot;&gt;https://git.openjdk.org/jdk/pull/16051&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-05 10:02:05 +0000</comment>
                            <comment id="14609792" author="rriggs" created="Fri, 8 Sep 2023 07:52:22 -0700"  >I was looking for a portable localized solution.&lt;br/&gt;
Replacing the ProcessHandleImpl_aix.c:: unix_getChildren function is a bit more work.&lt;br/&gt;
Adding AIX specific code is fine, if you have the time and inclination.</comment>
                            <comment id="14609677" author="mbaesken" created="Fri, 8 Sep 2023 00:48:28 -0700"  >Hi Roger , the AIX API function getprocs64()  Joachim mentioned  seems to be faster and also has the potential to get rid of the stupid duplicates . &lt;br/&gt;
(we do not notice duplicates on Linux in our test runs, only AIX shows those).</comment>
                            <comment id="14609269" author="rriggs" created="Wed, 6 Sep 2023 09:46:41 -0700"  >My first inclination would be to fix the test to ignore the duplicates if there is a mismatch in the count.&lt;br/&gt;
&lt;br/&gt;
The description of ProcessHandle.getAllProcesses() does describe the resulting stream as a snapshot, so uniqueness is implied.&lt;br/&gt;
&lt;br/&gt;
I hesitate to turn the order-n method to get the children into order n^2. Unless there is a short cut so it doesn&amp;#39;t happen all the time.&lt;br/&gt;
For example, if the /proc directory normally has pids sorted.&lt;br/&gt;
Keeping the native code straightforward would be a plus, but checking a new pid against those already recorded would be pretty efficient and avoid adding the duplicate in the first place. (ProcessHandleImpl_unix.c:unix_getChildren)&lt;br/&gt;
</comment>
                            <comment id="14609185" author="JIRAUSER20807" created="Wed, 6 Sep 2023 06:00:24 -0700"  >Unfortunately I do not know any web page explaining the procsinfo(64) struct. This should only be implemented by someone who can compile a testversion. And this person will have the /usr/include/procinfo.h header.</comment>
                            <comment id="14609179" author="mbaesken" created="Wed, 6 Sep 2023 05:39:10 -0700"  >Joachim, that sounds indeed worth a try. here is some docu&lt;br/&gt;
&lt;a href=&quot;https://www.ibm.com/docs/en/aix/7.2?topic=g-getprocs-subroutine&quot;&gt;https://www.ibm.com/docs/en/aix/7.2?topic=g-getprocs-subroutine&lt;/a&gt;&lt;br/&gt;
The procsinfo(64) struct is mentioned there, holding the info about the processes; is there some docu/web page about the struct ? I found only /usr/include/procinfo.h  where the structs are located and some comments are contained in the header .</comment>
                            <comment id="14609154" author="JIRAUSER20807" created="Wed, 6 Sep 2023 04:48:41 -0700"  >I would use the API getprocs64() instead. It is designed to iterate over the complete process list providing the necessary information. You can get a chunk of count procsinfo64 structures with one API call which reduces the amount of single calls. If you start the iteration with pid=0 you automatically receive the next chunk with any further call until the last pid is reached. The function does not provide a snapshot, but returns the actual next count of pids starting with last pid+1 of the last call. Maybe this is more robust. It is worth a try.</comment>
                            <comment id="14609082" author="mbaesken" created="Wed, 6 Sep 2023 00:27:14 -0700"  >Hi Roger , so should I add some code to the test to remove the duplicates ?&lt;br/&gt;
We could also consider doing so in the native JDK code and not in the test (at least on AIX where we see the issue in practise).</comment>
                            <comment id="14608918" author="rriggs" created="Tue, 5 Sep 2023 09:18:43 -0700"  >Getting the children from /proc isn&amp;#39;t/can&amp;#39;t be synchronized to guarantee a clean snapshot.&lt;br/&gt;
So its possible tge directory entries for the subprocesses are re-ordered when processes are created and deleted.&lt;br/&gt;
And that happens concurrently with reading the directory.&lt;br/&gt;
Either the test could wait a bit longer for the set of children to stabilize or &lt;br/&gt;
the test could gather into a unique set before testing.</comment>
                            <comment id="14608887" author="mbaesken" created="Tue, 5 Sep 2023 07:11:27 -0700"  >unix_getChildren  reads the pids and parent-pids from the file system /proc. Maybe this behaves a bit different on AIX ?</comment>
                            <comment id="14608873" author="mbaesken" created="Tue, 5 Sep 2023 05:44:23 -0700"  >After adding more output with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8315213&quot; title=&quot;java/lang/ProcessHandle/TreeTest.java test enhance output of children&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8315213&quot;&gt;&lt;strike&gt;JDK-8315213&lt;/strike&gt;&lt;/a&gt; , we see that a child process 8258030 shows up twice for some reason :&lt;br/&gt;
&lt;br/&gt;
Spawning 2 x 2 x 2 processes, pid: 10879436&lt;br/&gt;
&amp;nbsp;children:  [8258030, 8258030, 15139186]                     &amp;lt;===========================  see the double occurance of 8258030&lt;br/&gt;
Duration: PT3.153272S&lt;br/&gt;
&amp;nbsp;.....&lt;br/&gt;
test TreeTest.test5(): failure&lt;br/&gt;
java.lang.AssertionError: expected direct children expected [2] but found [3]&lt;br/&gt;
	at org.testng.Assert.fail(Assert.java:99)&lt;br/&gt;
	at org.testng.Assert.failNotEquals(Assert.java:1037)&lt;br/&gt;
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)&lt;br/&gt;
	at org.testng.Assert.assertEquals(Assert.java:122)&lt;br/&gt;
	at org.testng.Assert.assertEquals(Assert.java:907)&lt;br/&gt;
	at TreeTest.test5(TreeTest.java:452)&lt;br/&gt;
&lt;br/&gt;
Not sure the proc shows up twice on AIX, I am not aware  of seeing that on other platforms .</comment>
                            <comment id="14607266" author="mbaesken" created="Tue, 29 Aug 2023 00:53:30 -0700"  >I created &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8315213&quot;&gt;https://bugs.openjdk.org/browse/JDK-8315213&lt;/a&gt;  and created a PR for enhanced output.</comment>
                            <comment id="14606970" author="rriggs" created="Mon, 28 Aug 2023 09:06:48 -0700"  >Yes, that&amp;#39;s fine by default, it should normally be short. It could be condition on an separate if (count != totalChildren).</comment>
                            <comment id="14606926" author="mbaesken" created="Mon, 28 Aug 2023 07:35:12 -0700"  >Hi Roger, I enhanced the output as suggested&lt;br/&gt;
--- a/test/jdk/java/lang/ProcessHandle/TreeTest.java&lt;br/&gt;
+++ b/test/jdk/java/lang/ProcessHandle/TreeTest.java&lt;br/&gt;
@@ -444,6 +444,11 @@ public static void test5() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Assert.assertEquals(0, count, &amp;quot;Extra processes in descendants&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+            List&amp;lt;ProcessHandle&amp;gt; subprocesses = getChildren(p1Handle);&lt;br/&gt;
+            printf(&amp;quot; children:  %s%n&amp;quot;,&lt;br/&gt;
+                    subprocesses.stream().map(p -&amp;gt; p.pid())&lt;br/&gt;
+                    .collect(Collectors.toList()));&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Assert.assertEquals(getChildren(p1Handle).size(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;factor, &amp;quot;expected direct children&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count = getDescendants(p1Handle).size();&lt;br/&gt;
@@ -451,7 +456,7 @@ public static void test5() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Assert.assertTrue(count &amp;gt;= totalChildren,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;expected at least &amp;quot; + totalChildren + &amp;quot;, actual: &amp;quot; + count);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-            List&amp;lt;ProcessHandle&amp;gt; subprocesses = getDescendants(p1Handle);&lt;br/&gt;
+            subprocesses = getDescendants(p1Handle);&lt;br/&gt;
&lt;br/&gt;
Do you think it makes sense to  have the enhanced output in the test by default  ?&lt;br/&gt;
</comment>
                            <comment id="14606915" author="rriggs" created="Mon, 28 Aug 2023 06:32:59 -0700"  >Can you add code to prints the direct descendants to before the failing assert; it would help to know what processes remain.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5112450">JDK-8318162</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5109087">JDK-8315213</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5112722">JDK-8318415</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17024"><![CDATA[ppc]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="18900"><![CDATA[aix]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32vl7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="190"><![CDATA[java.lang]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>