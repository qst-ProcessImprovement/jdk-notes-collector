<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 11:55:44 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8322477] order of subclasses in the permits clause can differ between compilations</title>
                <link>https://bugs.openjdk.org/browse/JDK-8322477</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>short version is that the order of subclasses in the permits clause of sealed classes or interfaces can vary between compilations, thus producing non-deterministic output.&lt;br/&gt;
&lt;br/&gt;
reported by: &lt;a href=&apos;mailto:pbielicki@gmail.com&apos;&gt;pbielicki@gmail.com&lt;/a&gt;, see [1]&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://mail.openjdk.org/pipermail/compiler-dev/2023-December/025188.html&quot;&gt;https://mail.openjdk.org/pipermail/compiler-dev/2023-December/025188.html&lt;/a&gt;</description>
                <environment></environment>
        <key id="5117518">JDK-8322477</key>
            <summary>order of subclasses in the permits clause can differ between compilations</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="vromero">Vicente Arturo Romero Zaldivar</assignee>
                                    <reporter username="vromero">Vicente Arturo Romero Zaldivar</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                    </labels>
                <created>Tue, 19 Dec 2023 08:34:10 -0800</created>
                <updated>Thu, 7 Mar 2024 02:39:22 -0800</updated>
                            <resolved>Wed, 10 Jan 2024 09:55:09 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14653928" author="roboduke" created="Fri, 1 Mar 2024 07:41:24 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/310&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/310&lt;/a&gt;&lt;br/&gt;
Date: 2024-03-01 15:36:14 +0000</comment>
                            <comment id="14653927" author="goetz" created="Fri, 1 Mar 2024 07:37:58 -0800"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.4-oracle.&lt;br/&gt;
Medium to low risk. Change to javac, good repro case.&lt;br/&gt;
Simple resolves needed.&lt;br/&gt;
Test passes and fails without the fix. SAP nightly testing passes.</comment>
                            <comment id="14639801" author="shade" created="Fri, 12 Jan 2024 04:32:41 -0800"  >Vicente, you need a PR against jdk21u-dev to do a backport :) Bots would tell you all the boxes you would need to check.</comment>
                            <comment id="14639518" author="vromero" created="Thu, 11 Jan 2024 07:52:39 -0800"  >Fix Request JDK 21u&lt;br/&gt;
&lt;br/&gt;
Clean backport to resolve non-deterministic code generation. The patch is simple enough to consider it safe for a backport. All langtools tests pass.</comment>
                            <comment id="14639156" author="dukebot" created="Wed, 10 Jan 2024 09:55:08 -0800"  >Changeset: 5ba69e17&lt;br/&gt;
Author:    Vicente Romero &amp;lt;&lt;a href=&apos;mailto:vromero@openjdk.org&apos;&gt;vromero@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-10 17:52:50 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/5ba69e17340cf44194c080a38219c6e150418fcf&quot;&gt;https://git.openjdk.org/jdk/commit/5ba69e17340cf44194c080a38219c6e150418fcf&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14638782" author="vromero" created="Tue, 9 Jan 2024 13:28:21 -0800"  >reproductor: javac-permitted-ordering-bug-master.zip provided by a colleague of the reporter and downloaded from &lt;a href=&quot;https://github.com/octylFractal/javac-permitted-ordering-bug&quot;&gt;https://github.com/octylFractal/javac-permitted-ordering-bug&lt;/a&gt; is a minimal test case that shows the issue.</comment>
                            <comment id="14637819" author="vromero" created="Fri, 5 Jan 2024 11:41:12 -0800"  >Adding some info obtained by the reporter with a customized JDK.&lt;br/&gt;
&lt;br/&gt;
The customized JDK was basically printing some logs whenever a permitted subclass was being added to one of the two interfaces for which this issue as observed, see attached files: *.GradleExecGraphNodeExecutionInfo and GradleExecGraph.Execution. The order of permitted subclasses for both was consistently observed to differ between compilations: in one case same order as in the source file and in another case this order was swapped. Both interfaces had only two subclasses, both being records.&lt;br/&gt;
&lt;br/&gt;
See log1.txt and log2.txt as examples of the logs obtained</comment>
                            <comment id="14637786" author="roboduke" created="Fri, 5 Jan 2024 09:48:06 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17284&quot;&gt;https://git.openjdk.org/jdk/pull/17284&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-05 17:42:33 +0000</comment>
                            <comment id="14636584" author="jpai" created="Fri, 29 Dec 2023 06:52:18 -0800"  >I had a look at this one today but I haven&amp;#39;t been able to reproduce it. The original reporter noted a specific OS version where this apparently is reproduced consistently. I don&amp;#39;t yet have access to it, will try to get something next week.&lt;br/&gt;
&lt;br/&gt;
But I was just curious and had some time at hand, so I had a look at how javac generates this PermittedSubclasses attribute in the generated class bytecode. Based on that, my unproven theory is that the code in src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java has a potential issue that the order of generated permitted subclasses is dependent on &amp;quot;insertion order&amp;quot; into an internal list. The specific part of code which looks susceptible is this block &lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java#L912&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java#L912&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
What happens there is that the PermittedSubClasses of a super type is being populated when processing a sub type and the super type&amp;#39;s PermittedSubClasses list order is decided by appending to the list the current sub type &lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java#L922&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java#L922&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
supClass.permitted = supClass.permitted.append(sym);&lt;br/&gt;
&lt;br/&gt;
So in theory, if we have a class hierarchy as follows:&lt;br/&gt;
----&lt;br/&gt;
package myapp;&lt;br/&gt;
&lt;br/&gt;
public sealed interface Parent&amp;lt;T extends Runnable&amp;gt; {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;record ChildOne (external.Foo x) implements Parent&amp;lt;external.Foo&amp;gt; {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;record ChildTwo (external.Bar y) implements Parent&amp;lt;external.Bar&amp;gt; {}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
package external;&lt;br/&gt;
&lt;br/&gt;
public class Foo implements Runnable {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
package external;&lt;br/&gt;
&lt;br/&gt;
public class Bar implements Runnable {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
If this class hierarchy is being compiled along with numerous other classes, perhaps it&amp;#39;s possible that in some setups ChildTwo compilation reaches this above code in  TypeEnter first and then ChildOne, thus on those setups it would generate a (ordered) list of PermittedSubClasses for the myapp.Parent type which would hold [ChildTwo, ChildOne] (in that order). While on some other setups perhaps ChildOne first reaches that code in TypeEnter and then ChildTwo which then leads to the PermittedSubClasses of the myapp.Parent type to be [ChildOne, ChildTwo] (in that order). So in essence, perhaps we shouldn&amp;#39;t rely on insertion order there to decide this attribute value?&lt;br/&gt;
&lt;br/&gt;
Why this happens on that specific kernel version, I don&amp;#39;t have a conclusive answer. Perhaps the file system file listing order has changed maybe? Which could then lead to a changed order in finding some dependent source files for completing the compilation of of those child types (ChildOne or ChildTwo), thus leading to a different sub type compilation completing first and creating that list of PermittedSubClasses for its (common) super type?&lt;br/&gt;
</comment>
                            <comment id="14635546" author="vromero" created="Tue, 19 Dec 2023 08:44:16 -0800"  >the attached GradleExecGraphNodeExecutionInfo.java is the class for which when compiled, intermittently and only as part of a big project, non-deterministic output is produced. See that the permits clause in this case is not explicit and thus it is inferred by the compiler</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5121631">JDK-8326002</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5123512">JDK-8327558</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="107810" name="GradleExecGraph.java" size="1097" author="vromero" created="Fri, 5 Jan 2024 11:19:36 -0800"/>
                            <attachment id="107709" name="GradleExecGraphNodeExecutionInfo.java" size="2017" author="vromero" created="Tue, 19 Dec 2023 08:41:47 -0800"/>
                            <attachment id="107708" name="classes.zip" size="1330" author="vromero" created="Tue, 19 Dec 2023 08:39:15 -0800"/>
                            <attachment id="107833" name="javac-permitted-ordering-bug-master.zip" size="2422" author="vromero" created="Tue, 9 Jan 2024 13:25:34 -0800"/>
                            <attachment id="107811" name="log1.txt" size="34550" author="vromero" created="Fri, 5 Jan 2024 11:44:18 -0800"/>
                            <attachment id="107812" name="log2.txt" size="20506" author="vromero" created="Fri, 5 Jan 2024 11:44:18 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34blv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>