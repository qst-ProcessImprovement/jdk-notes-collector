<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:47:09 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8325587] Shenandoah: ShenandoahLock should allow blocking in VM</title>
                <link>https://bugs.openjdk.org/browse/JDK-8325587</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>On a sample run (log attached), the time to perform HandshakeForDeflation is observed to require more than 193 seconds.  Similar very long handshake times are observed approximately once every 4 times I run this particular workload.  The host has 16 vCPUs.&lt;br/&gt;
```&lt;br/&gt;
[921.732s][info ][handshake      ] Handshake &amp;quot;HandshakeForDeflation&amp;quot;, Targeted threads: 2017, Executed by requesting thread: 16, Total completion time: 193294197991 ns&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
The reproducer is a specific configuration of the public Extremem GC benchmark, which can be downloaded from &lt;a href=&quot;https://github.com/corretto/heapothesys&quot;&gt;https://github.com/corretto/heapothesys&lt;/a&gt;&lt;br/&gt;
```&lt;br/&gt;
echo Run TradiShen tip with memory size 26g with 4s customer period&lt;br/&gt;
&amp;gt;&amp;amp;2 echo Run TradiShen tip with memory size 26g with 4s customer period&lt;br/&gt;
~/github/jdk.2-1-2024/build/linux-x86_64-server-release/jdk/bin/java \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-XX:+UnlockExperimentalVMOptions \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-XX:+UseTransparentHugePages \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-XX:-ShenandoahPacing \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-XX:+AlwaysPreTouch -XX:+DisableExplicitGC -Xms26g -Xmx26g \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-XX:+UseShenandoahGC \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-Xlog:&amp;quot;gc*=info,ergo&amp;quot; \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-Xlog:vmthread=trace -Xlog:handshake*=debug \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-Xlog:safepoint=trace -Xlog:safepoint=debug -Xlog:safepoint=info \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-XX:+UnlockDiagnosticVMOptions \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-jar ~/github/heapothesys/Extremem/target/extremem-1.0-SNAPSHOT.jar \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dInitializationDelay=45s -dDictionarySize=16000000 -dNumCustomers=28000000 \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dNumProducts=64000 -dCustomerThreads=2000 -dCustomerPeriod=4s -dCustomerThinkTime=1s \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dKeywordSearchCount=4 -dServerThreads=5 -dServerPeriod=5s -dProductNameLength=10 \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dBrowsingHistoryQueueCount=5 \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dSalesTransactionQueueCount=5 \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dProductDescriptionLength=64 -dProductReplacementPeriod=25s -dProductReplacementCount=5 \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dCustomerReplacementPeriod=30s -dCustomerReplacementCount=1000 -dBrowsingExpiration=1m \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dPhasedUpdates=true \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dPhasedUpdateInterval=60s \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-dSimulationDuration=20m -dResponseTimeMeasurements=100000&lt;br/&gt;
```&lt;br/&gt;
An annotated log of an instrumented execution shows that the outer loop of VM_handshakeAllThreads::doit() executes 186 times.  The last iteration finally succeeds to perform:&lt;br/&gt;
```&lt;br/&gt;
[921.726s][debug][handshake,task ] Operation: HandshakeForDeflation for thread 0x00007f24bc104630, is_vm_thread: true, completed in 44 ns&lt;br/&gt;
```&lt;br/&gt;
on a thread that had identified as _not_safe on previous iteration.&lt;br/&gt;
&lt;br/&gt;
I am not yet sufficiently confident to conclude whether this a problem with the implementation of doit(), or is the fault of the HandshakeForDeflation implementation which must be self-identifying as _not_safe for too long.</description>
                <environment>&lt;p&gt;Tip:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0.753s&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;info&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;gc,init&amp;#93;&lt;/span&gt; Version: 23-internal-adhoc.kdnilsen.jdk.2-1-2024 (release)&lt;br/&gt;
```&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;commit dafc3632766ca5a268d88c742f416da29cecdea9 (HEAD -&amp;gt; master, origin/master, origin/HEAD)&lt;br/&gt;
Merge: 441487cb21a d3c3194ac34&lt;br/&gt;
Author: Kelvin Nilsen &amp;lt;kdnilsen@amazon.com&amp;gt;&lt;br/&gt;
Date: &#160; Thu Feb 1 20:31:26 2024 -0700&lt;/p&gt;

&lt;p&gt;&#160; &#160; Merge branch &apos;openjdk:master&apos; into master&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;</environment>
        <key id="5121139">JDK-8325587</key>
            <summary>Shenandoah: ShenandoahLock should allow blocking in VM</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="shade">Aleksey Shipilev</assignee>
                                    <reporter username="kdnilsen">Kelvin Nilsen</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>gc-shenandoah</label>
                            <label>genshen</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                    </labels>
                <created>Sat, 10 Feb 2024 08:49:25 -0800</created>
                <updated>Tue, 3 Sep 2024 01:47:09 -0700</updated>
                            <resolved>Wed, 21 Feb 2024 03:50:29 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14699164" author="roboduke" created="Mon, 19 Aug 2024 08:44:26 -0700"  >[jdk17u-fix-request] Approval Request from Xiaolong Peng&lt;br/&gt;
Backport of 8325587: Shenandoah: ShenandoahLock should allow blocking in VM, not a clean backport, fixed the conflicts and code style issues, ran hotspot_gc_shenandoah test suite and all tests with -XX:+UseShenandoahGC; overall risk should be low.</comment>
                            <comment id="14697980" author="roboduke" created="Tue, 13 Aug 2024 10:23:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2797&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2797&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-13 16:54:05 +0000</comment>
                            <comment id="14672467" author="roboduke" created="Fri, 10 May 2024 00:37:31 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/192&quot;&gt;https://git.openjdk.org/jdk22u/pull/192&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-10 07:33:03 +0000</comment>
                            <comment id="14672466" author="roboduke" created="Fri, 10 May 2024 00:37:19 -0700"  >[jdk22u-fix-request] Approval Request from Liang Mao&lt;br/&gt;
Clean backport of fixing rare long hand shake while mutator threads in heavy contention on ShenandoahLock. Risk is quite low.</comment>
                            <comment id="14672153" author="roboduke" created="Wed, 8 May 2024 22:57:42 -0700"  >[jdk21u-fix-request] Approval Request from Liang Mao&lt;br/&gt;
Clean backport of fixing rare long hand shake while mutator threads in heavy contention on ShenandoahLock. Risk is quite low.</comment>
                            <comment id="14672151" author="roboduke" created="Wed, 8 May 2024 22:56:07 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/560&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/560&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-09 05:51:03 +0000</comment>
                            <comment id="14651237" author="dukebot" created="Wed, 21 Feb 2024 03:50:27 -0800"  >Changeset: 492e8bf5&lt;br/&gt;
Author:    Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-02-21 11:48:59 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/492e8bf563135d27b46fde198880e62d5f1940e8&quot;&gt;https://git.openjdk.org/jdk/commit/492e8bf563135d27b46fde198880e62d5f1940e8&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14649408" author="roboduke" created="Wed, 14 Feb 2024 10:30:11 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17813&quot;&gt;https://git.openjdk.org/jdk/pull/17813&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-12 17:40:00 +0000</comment>
                            <comment id="14648357" author="shade" created="Mon, 12 Feb 2024 09:29:18 -0800"  >It is really ShenandoahLock problem for yielding indefinitely on acquisition without declaring that is actually blocked in VM. We just happen to see it as long handshake in this instance, but I think the impact of this is more widespread. For example, I suspect TTSP would be affected when all these yielding threads should actually get scheduled back to roll to safepoint.&lt;br/&gt;
&lt;br/&gt;
I have a patch, and am currently testing it:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/17813&quot;&gt;https://github.com/openjdk/jdk/pull/17813&lt;/a&gt;</comment>
                            <comment id="14648348" author="rehn" created="Mon, 12 Feb 2024 08:50:50 -0800"  >I also had I look, I see the same thing, I used &amp;quot;-XX:HandshakeTimeout=10000&amp;quot; to capture it. (hs_err + core)&lt;br/&gt;
&lt;br/&gt;
@kdnilsen&lt;br/&gt;
When you ask the VM thread to perform a handshake all, the vm thread may not return until it is performed by all threads (or by the vm thread on behalf of the other).&lt;br/&gt;
So there is nothing the vm thread can do but wait. If you want the vm thread to perform the handshake on behalf of this thread, you signal that by being *safe*.&lt;br/&gt;
*safe* implies that your stack is walkable and you will perform a check that you may become unsafe before doing so. E.g. if the vm thread is working on your stack, you have to wait.&lt;br/&gt;
(ThreadBlockInVM signals this)&lt;br/&gt;
&lt;br/&gt;
@shipilev&lt;br/&gt;
Yes, this is a bit complex as becoming &amp;quot;safe&amp;quot; allows other things to happen, so one need to be careful :)&lt;br/&gt;
Let me know if I can help reviewing, or something else!&lt;br/&gt;
</comment>
                            <comment id="14648339" author="kdnilsen" created="Mon, 12 Feb 2024 08:28:45 -0800"  >Is it the case that a single thread waits the very long delay, or are the threads just repeatedly colliding with the handshake request?  If the latter, would it make sense for the &amp;quot;unsafe&amp;quot; handshake request to leave a &amp;quot;breadcrumb&amp;quot; with the thread, so that the thread performs the handshake the next time it &amp;quot;leaves the VM&amp;quot;?&lt;br/&gt;
</comment>
                            <comment id="14648320" author="shade" created="Mon, 12 Feb 2024 07:55:00 -0800"  >This workload seems to be special, since many threads allocate (and run out of memory, and try to acquire under the lock) at the same time. There are about 2K runnable threads. So the chance there is a straggler Java thread that is spinning for a long time for the long acquisition.&lt;br/&gt;
&lt;br/&gt;
Introducing `ThreadBlockInVM tbim(JavaThread::cast(Thread::current())));` near sleep/yield path in `ShenandoahLock::lock` seems to eliminate these hiccups. Now handshake &amp;quot;knows&amp;quot; the straggler Java threads are blocked in VM. The clean fix is a bit hairy and would require more work.</comment>
                            <comment id="14648298" author="shade" created="Mon, 12 Feb 2024 07:07:06 -0800"  >Caught one of those threads in gdb:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
Thread 1803 (Thread 0x7fdc72328700 (LWP 33906)):&lt;br/&gt;
#0  0x00007fe217af6dfb in nanosleep () from /lib64/libpthread.so.0&lt;br/&gt;
#1  0x00007fe216a8ea06 in os::naked_short_nanosleep (ns=&amp;lt;optimized out&amp;gt;) at src/hotspot/os/posix/os_posix.cpp:889&lt;br/&gt;
#2  os::naked_short_sleep (ms=ms@entry=1) at src/hotspot/os/posix/os_posix.cpp:895&lt;br/&gt;
#3  0x00007fe216d06525 in Thread::SpinAcquire (adr=adr@entry=0x7fe2100c9718, LockName=LockName@entry=0x7fe216f3d9d2 &amp;quot;Shenandoah Heap Lock&amp;quot;) at src/hotspot/share/runtime/thread.cpp:574&lt;br/&gt;
#4  0x00007fe216ba0306 in ShenandoahLock::lock (this=&amp;lt;optimized out&amp;gt;) at src/hotspot/share/gc/shenandoah/shenandoahLock.hpp:50&lt;br/&gt;
#5  ShenandoahLocker::ShenandoahLocker (lock=&amp;lt;optimized out&amp;gt;, this=&amp;lt;synthetic pointer&amp;gt;) at src/hotspot/share/gc/shenandoah/shenandoahLock.hpp:82&lt;br/&gt;
#6  ShenandoahHeap::allocate_memory_under_lock (in_new_region=@0x7fdc7232755f: false, req=..., this=0x7fe2100c9660) at src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:1004&lt;br/&gt;
#7  ShenandoahHeap::allocate_memory (this=0x7fe2100c9660, req=...) at src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:933&lt;br/&gt;
#8  0x00007fe216ba06c9 in ShenandoahHeap::allocate_new_tlab (this=&amp;lt;optimized out&amp;gt;, min_size=256, requested_size=332, actual_size=0x7fdc72327670) at src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:899&lt;br/&gt;
#9  0x00007fe2169cd32f in MemAllocator::mem_allocate_inside_tlab_slow (this=0x7fdc723276c0, allocation=...) at src/hotspot/share/gc/shared/memAllocator.cpp:306&lt;br/&gt;
#10 0x00007fe2169cd5c1 in MemAllocator::mem_allocate_slow (allocation=..., this=0x7fdc723276c0) at src/hotspot/share/gc/shared/memAllocator.cpp:343&lt;br/&gt;
#11 MemAllocator::mem_allocate (allocation=..., this=0x7fdc723276c0) at src/hotspot/share/gc/shared/memAllocator.cpp:361&lt;br/&gt;
#12 MemAllocator::allocate (this=this@entry=0x7fdc723276c0) at src/hotspot/share/gc/shared/memAllocator.cpp:368&lt;br/&gt;
#13 0x00007fe21668a036 in CollectedHeap::obj_allocate (this=&amp;lt;optimized out&amp;gt;, __the_thread__=0x7fe088a54500, size=&amp;lt;optimized out&amp;gt;, klass=&amp;lt;optimized out&amp;gt;) at src/hotspot/share/gc/shared/collectedHeap.inline.hpp:36&lt;br/&gt;
#14 InstanceKlass::allocate_instance (this=this@entry=0x7fe0cf008000, __the_thread__=__the_thread__@entry=0x7fe088a54500) at src/hotspot/share/oops/instanceKlass.cpp:1509&lt;br/&gt;
#15 0x00007fe216b31b49 in OptoRuntime::new_instance_C (klass=0x7fe0cf008000, current=0x7fe088a54500) at src/hotspot/share/opto/runtime.cpp:235&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
This suggests that thread is trying to acquire ShenandoahLock, and is unable to do so promptly. `HandshakeState::possibly_can_process_handshake` thinks this thread is running in VM, and not blocked in VM.</comment>
                            <comment id="14648291" author="shade" created="Mon, 12 Feb 2024 06:38:35 -0800"  >Reproduced locally. It seems some threads are in VM, so `HandshakeState::possibly_can_process_handshake` returns `false`, `HandshakeState::try_process` returns `false`, and the handshake walk repeats over and over again.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5130002">JDK-8332658</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5132857">JDK-8335164</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5138323">JDK-8339461</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5122479">JDK-8326717</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128334">JDK-8331405</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5128342">JDK-8331411</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="108241" name="stall.of.interest.out.gz" size="4026131" author="kdnilsen" created="Sat, 10 Feb 2024 08:49:10 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34xv7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>