<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:43:19 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8323782] Race: Thread::interrupt vs. AbstractInterruptibleChannel.begin</title>
                <link>https://bugs.openjdk.org/browse/JDK-8323782</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>There is a race interrupting a thread B that begins a blocking NIO operation, e.g. socket accept.&lt;br/&gt;
&lt;br/&gt;
Thread A.........................Thread B&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enters ServerSocketChannelImpl::accept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enters AbstractInterruptibleChannel::begin&lt;br/&gt;
enters B.interrupt&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reads B.nioBlocker -&amp;gt; null&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writes B.nioBlocker = AbstractInterruptibleChannel.interruptor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reads  B.interrupted -&amp;gt; false&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writes B.interrupted = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;leaves AbstractInterruptibleChannel::begin&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[...]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enters Net.accept &lt;br/&gt;
&lt;br/&gt;
Result: B successfully calls accept and remains there even though it was interrupted.&lt;br/&gt;
&lt;br/&gt;
How to reproduce:&lt;br/&gt;
&lt;br/&gt;
- apply decide_race_in_thread_interrupt.patch (attached)&lt;br/&gt;
&lt;br/&gt;
- run ThreadInterruptRace.java (also attached) like this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java ThreadInterruptRace.java dosleep&lt;br/&gt;
&lt;br/&gt;
The issue was found analyzing failures of jck test api/java_net/ServerSocket/AcceptInterruptibleTests_PlatformThreads&lt;br/&gt;
&lt;br/&gt;
Potential fix: write `interrupted` field before reading `nioBlocker` in Thread::interrupt&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5118976">JDK-8323782</key>
            <summary>Race: Thread::interrupt vs. AbstractInterruptibleChannel.begin</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rrich">Richard Reingruber</assignee>
                                    <reporter username="rrich">Richard Reingruber</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk22u-fix-SQE-ok</label>
                            <label>jdk22u-fix-request</label>
                            <label>jdk22u-fix-yes</label>
                    </labels>
                <created>Tue, 16 Jan 2024 01:41:34 -0800</created>
                <updated>Mon, 8 Jul 2024 10:25:41 -0700</updated>
                            <resolved>Fri, 16 Feb 2024 00:42:56 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14679394" author="roboduke" created="Thu, 6 Jun 2024 00:57:50 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/578&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/578&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-16 08:48:45 +0000</comment>
                            <comment id="14679383" author="clanger" created="Thu, 6 Jun 2024 00:09:04 -0700"  >[~rrich], the reviewed PR is missing. The old one is closed. Removing the fix request label until PR is ready.</comment>
                            <comment id="14679221" author="rrich" created="Wed, 5 Jun 2024 08:09:54 -0700"  >Fix request (21u)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d like to do the backport because jdk 22 is affected by the issue. The included test hangs without the change.&lt;br/&gt;
Besides it will reduce the noise in jck tests we&amp;#39;re doing regularily (the test api/java_net/ServerSocket/AcceptInterruptibleTests_PlatformThreads fails sometimes because of the issue).&lt;br/&gt;
&lt;br/&gt;
The backport applies cleanly. It is being tested since 3 weeks in our CI testing (see below) without issues. So I consider it to be low risk.&lt;br/&gt;
&lt;br/&gt;
Tested with the included test.&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests (also with ParallelGC).&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le. </comment>
                            <comment id="14663538" author="roboduke" created="Mon, 8 Apr 2024 02:24:42 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22u/pull/130&quot;&gt;https://git.openjdk.org/jdk22u/pull/130&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-05 16:34:11 +0000</comment>
                            <comment id="14663535" author="rrich" created="Mon, 8 Apr 2024 02:17:31 -0700"  >Fix request (22u)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d like to do the backport because jdk 22 is affected by the issue. The included test hangs without the change.&lt;br/&gt;
Besides it will reduce the noise in jck tests we&amp;#39;re doing regularily (the test api/java_net/ServerSocket/AcceptInterruptibleTests_PlatformThreads fails sometimes because of the issue).&lt;br/&gt;
&lt;br/&gt;
The original fix does not apply due to renaming of a local variable. Also the context differs because there&amp;#39;s no postInterrupt method to be called.&lt;br/&gt;
Nevertheless I&amp;#39;d consider the risk low because of the small size of the fix.&lt;br/&gt;
&lt;br/&gt;
Tested with the included test.&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests (also with ParallelGC).&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le.</comment>
                            <comment id="14663280" author="rrich" created="Fri, 5 Apr 2024 08:50:20 -0700"  >You are right. I&amp;#39;ll do the jdk 22 backport first. </comment>
                            <comment id="14663265" author="coffeys" created="Fri, 5 Apr 2024 08:02:12 -0700"  >[~rrich] is there any reason why the jdk22u backport isn&amp;#39;t being done first here ? From an OpenJDK quality perspective, I think it&amp;#39;s reasonable that end users expect the same level of quality on later JDK releases.</comment>
                            <comment id="14663262" author="roboduke" created="Fri, 5 Apr 2024 07:41:53 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/451&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/451&lt;/a&gt;&lt;br/&gt;
Date: 2024-04-04 14:21:17 +0000</comment>
                            <comment id="14649892" author="dukebot" created="Fri, 16 Feb 2024 00:42:55 -0800"  >Changeset: 4018b2b1&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-02-16 08:40:13 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/4018b2b19629ddb8cd7a56e064dfef371f23e5fa&quot;&gt;https://git.openjdk.org/jdk/commit/4018b2b19629ddb8cd7a56e064dfef371f23e5fa&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14641073" author="roboduke" created="Wed, 17 Jan 2024 01:38:48 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17444&quot;&gt;https://git.openjdk.org/jdk/pull/17444&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-16 10:57:46 +0000</comment>
                            <comment id="14640795" author="alanb" created="Tue, 16 Jan 2024 13:22:28 -0800"  >[~rrich] I&amp;#39;ve attached an update test that extends the test to virtual threads. The issue here is specific to platform threads but the test can do both.</comment>
                            <comment id="14640670" author="rrich" created="Tue, 16 Jan 2024 09:08:30 -0800"  >Thanks. I&amp;#39;ve added your test to the draft pr. I&amp;#39;ll flag it ready for review once it&amp;#39;s been tested locally.&lt;br/&gt;
EDIT: LotsOfInterrupts.java reproduces the issue without patching the JDK. It doesn&amp;#39;t take long until the test hangs using REPEAT_COUNT.</comment>
                            <comment id="14640665" author="alanb" created="Tue, 16 Jan 2024 08:54:27 -0800"  >I&amp;#39;ve attached test/jdk/java/nio/channels/Selector/LotsOfInterrupts.java that we can include. There are several other tests for interrupting channel and Selectors in this tree.</comment>
                            <comment id="14640576" author="rrich" created="Tue, 16 Jan 2024 06:13:29 -0800"  >Your patch looks good. I&amp;#39;ve drafted and tested a very similar one but I&amp;#39;ve missed the checkAccess() call before changing the interrupted state.</comment>
                            <comment id="14640570" author="alanb" created="Tue, 16 Jan 2024 05:59:53 -0800"  >I&amp;#39;ve attached Thread.patch with the changes that I did some initial testing with. The tests for this area are in tier2. Also looks like this issue does go back to JDK 8 and maybe JDK 1.4, meaning it has always set read blocker before setting the interrupt status. So a good find!</comment>
                            <comment id="14640492" author="rrich" created="Tue, 16 Jan 2024 02:12:47 -0800"  >It should be sufficient just to set `interrupted` before reading `nioBlocker` even without acquiring a lock because the interruptee sets `nioBlocker` before reading `interrupted`.&lt;br/&gt;
(see also Dekker synchronization)</comment>
                            <comment id="14640489" author="alanb" created="Tue, 16 Jan 2024 02:05:06 -0800"  >This is a good fine, this issue seems to go back many releases. I will do some testing to unconditionally set the interrupt status while holding interruptLock, right now it is only done holding the locking when there is a blocker set.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5127236">JDK-8330553</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131304">JDK-8333777</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="107915" name="LotsOfInterrupts.java" size="3055" author="alanb" created="Tue, 16 Jan 2024 13:21:15 -0800"/>
                            <attachment id="107906" name="Thread.patch" size="1364" author="alanb" created="Tue, 16 Jan 2024 05:57:15 -0800"/>
                            <attachment id="107900" name="ThreadInterruptRace.java" size="2875" author="rrich" created="Tue, 16 Jan 2024 01:47:00 -0800"/>
                            <attachment id="107901" name="decide_race_in_thread_interrupt.patch" size="1902" author="rrich" created="Tue, 16 Jan 2024 01:47:16 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34klv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="190"><![CDATA[java.lang]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>