<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 09:39:35 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8311981] Test gc/stringdedup/TestStringDeduplicationAgeThreshold.java#ZGenerational timed out</title>
                <link>https://bugs.openjdk.org/browse/JDK-8311981</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>[31.351s][debug][stringdedup,phases,start] Idle start&lt;br/&gt;
[31.353s][info ][gc                      ] Allocation Stall (main) 5.679ms&lt;br/&gt;
[31.361s][info ][gc,reloc                ] GC(10) y: Using tenuring threshold: 4 (Computed)&lt;br/&gt;
[31.361s][info ][gc,phases               ] GC(10) y: Concurrent Select Relocation Set 12.333ms&lt;br/&gt;
[31.368s][info ][gc,phases               ] GC(10) y: Pause Relocate Start 0.033ms&lt;br/&gt;
];&lt;br/&gt;
&amp;nbsp;stderr: []&lt;br/&gt;
&amp;nbsp;exitValue = 134&lt;br/&gt;
&lt;br/&gt;
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]&lt;br/&gt;
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)&lt;br/&gt;
	at gc.stringdedup.TestStringDeduplicationTools.testAgeThreshold(TestStringDeduplicationTools.java:487)&lt;br/&gt;
	at gc.stringdedup.TestStringDeduplicationAgeThreshold.main(TestStringDeduplicationAgeThreshold.java:107)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1570)&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: java.lang.RuntimeException&lt;br/&gt;
&lt;br/&gt;
The exit 134 is presumably an abort triggered from the timeout. There is no hs_err file produced.</description>
                <environment></environment>
        <key id="5105367">JDK-8311981</key>
            <summary>Test gc/stringdedup/TestStringDeduplicationAgeThreshold.java#ZGenerational timed out</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>-Xcomp</label>
                            <label>amazon-interest</label>
                            <label>genzgc</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-hard</label>
                            <label>release-note=yes</label>
                            <label>tier4</label>
                    </labels>
                <created>Wed, 12 Jul 2023 17:32:16 -0700</created>
                <updated>Wed, 23 Aug 2023 15:28:05 -0700</updated>
                            <resolved>Mon, 14 Aug 2023 14:21:18 -0700</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                                                            <comments>
                            <comment id="14605922" author="roboduke" created="Tue, 22 Aug 2023 18:27:27 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/83&quot;&gt;https://git.openjdk.org/jdk21u/pull/83&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-23 01:22:16 +0000</comment>
                            <comment id="14605918" author="dholmes" created="Tue, 22 Aug 2023 18:01:16 -0700"  >JDK 21u Fix request&lt;br/&gt;
&lt;br/&gt;
This is an important fix for Generational ZGC so we should get it in 21u as soon as possible. The fix seems stable and was analyzed to have low-risk.&lt;br/&gt;
&lt;br/&gt;
Thanks.</comment>
                            <comment id="14603910" author="dukebot" created="Mon, 14 Aug 2023 14:21:17 -0700"  >Changeset: f142470d&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-08-14 21:18:57 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/f142470deaebbf9cff7f6f28842972393506b7c4&quot;&gt;https://git.openjdk.org/jdk/commit/f142470deaebbf9cff7f6f28842972393506b7c4&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14603370" author="stefank" created="Fri, 11 Aug 2023 00:19:04 -0700"  >I tagged this with release-note=yes for the JDK21 build.</comment>
                            <comment id="14603346" author="dholmes" created="Thu, 10 Aug 2023 22:16:12 -0700"  >Once this has baked for a little while I will backport to 21u.</comment>
                            <comment id="14603345" author="roboduke" created="Thu, 10 Aug 2023 22:16:04 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15240&quot;&gt;https://git.openjdk.org/jdk/pull/15240&lt;/a&gt;&lt;br/&gt;
Date: 2023-08-11 05:09:31 +0000</comment>
                            <comment id="14603344" author="dholmes" created="Thu, 10 Aug 2023 21:51:33 -0700"  >By making `has_operation` non-blocking and just return true if the lock cannot be acquired, we introduce a potential spurious &amp;quot;true&amp;quot; from SafepointMechanism::should_process(). I&amp;#39;ve examined all the callers to see the effects of this and have determined it is functionally harmless:&lt;br/&gt;
&lt;br/&gt;
- ObjectSynchronizer::chk_for_block_req&lt;br/&gt;
&lt;br/&gt;
We check for a real handshake/safepoint operation via ThreadBlockInVM.&lt;br/&gt;
&lt;br/&gt;
- ~ThreadBlockInVMPreprocess&lt;br/&gt;
&lt;br/&gt;
We will execute the `_pr` callback and then check for a real operation to process. There are 3 callbacks that we need to consider:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- ThreadBlockInVMPreprocess&amp;lt;InFlightMutexRelease&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;This is the desired behaviour in the deadlock case as `_pr` will release the inflight mutex.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- ThreadBlockInVMPreprocess&amp;lt;ExitOnSuspend&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- ThreadBlockInVMPreprocess&amp;lt;ClearSuccOnSuspend&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;In both cases we only act if the target is suspended, which indicates there must have been a suspend handshake operation.&lt;br/&gt;
&lt;br/&gt;
- Handshake::execute&lt;br/&gt;
&lt;br/&gt;
Another case of executing a TBIVM.&lt;br/&gt;
&lt;br/&gt;
- CodeInstaller::initialize_buffer&lt;br/&gt;
&lt;br/&gt;
Executes a ThreadToNativeFromVM to check for an operation.&lt;br/&gt;
&lt;br/&gt;
- BytecodeInterpreter RETURN_SAFEPOINT macro&lt;br/&gt;
&lt;br/&gt;
Similar to the TBIVM and TTNFVM this call a JRT_ENTRY that performs the safepoint/handshake check. Functionally harmless as before, but you wouldn&amp;#39;t want a lot of false positives here.&lt;br/&gt;
&lt;br/&gt;
- ZeroInterpreter::native_entry&lt;br/&gt;
&lt;br/&gt;
Will call JavaThread::check_special_condition_for_native_trans to check for safepint etc. &lt;br/&gt;
&lt;br/&gt;
- ZeroInterpreter::getter_entry&lt;br/&gt;
- ZeroInterpreter::setter_entry&lt;br/&gt;
- ZeroInterpreter::empty_entry&lt;br/&gt;
&lt;br/&gt;
Calls normal_entry to force a slow path that checks for safepoints etc.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14602452" author="dholmes" created="Mon, 7 Aug 2023 17:54:39 -0700"  >From internal discussions:&lt;br/&gt;
&lt;br/&gt;
David&amp;quot;&lt;br/&gt;
My initial thought is thread 16 is in the wrong. We shouldn&amp;#39;t being trying to do the handshake op when holding the lock. I thought we did something to avoid that.&lt;br/&gt;
&lt;br/&gt;
Stefan:&lt;br/&gt;
Yeah. I see this code:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (SafepointMechanism::should_process(_thread, _allow_suspend)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_pr(_thread);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SafepointMechanism::process_if_requested(_thread, _allow_suspend, false /* check_async_exception */);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
where the _pr(_thread) code is a call to InFlightMutexRelease::operator():&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void operator()(JavaThread* current) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_in_flight_mutex-&amp;gt;release_for_safepoint();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_in_flight_mutex = nullptr;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
So, I think we release the monitor before calling process_if_requested. Unfortunately, that doesn&amp;#39;t help because this problem happens with the should_process call. (edited) &lt;br/&gt;
&lt;br/&gt;
Patricio:&lt;br/&gt;
I think one possible fix would be to change has_operation(bool allow_suspend, bool check_async_exception) to use a trylock instead and if it fails just return true, which will force to take the processing path and release the lock (in this case the VMOperation_lock).</comment>
                            <comment id="14602451" author="dholmes" created="Mon, 7 Aug 2023 17:52:34 -0700"  >We have determined that this is a bug in the handshake logic and so I&amp;#39;m moving to runtime and taking this bug.</comment>
                            <comment id="14602241" author="stefank" created="Mon, 7 Aug 2023 04:53:35 -0700"  >This is a deadlock between the VMOperation_lock, HandshakeState lock and the ZGC relocation code.&lt;br/&gt;
Young Generation GC Thread:&lt;br/&gt;
&amp;nbsp;- Requested to start the Relocation phase via a VMOperation GC Pause&lt;br/&gt;
&amp;nbsp;- The VMThread completed that VMOperation GC Pause&lt;br/&gt;
&amp;nbsp;- The thread is just about to return from wait()ing on the VMThread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- but it is stuck in the wait() because it can&amp;#39;t acquire VMOperation_lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the lock is held by Thread 16&lt;br/&gt;
&lt;br/&gt;
Thread 16: performing class loading&lt;br/&gt;
&amp;nbsp;- Needed to deoptimize and handshake all threads&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Tried to publish a handshake VMOpration&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Took the VMOperation_lock!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Failed to publish the VMop because another VMOp is active&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Called wait()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- About to exit wait and calls ~ThreadBlockInVMPreprocess&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- which checked SafepointMechanism::should_process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- which called HandshakeState::has_operation which *tried* and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;failed to take its own HandshakeState lock ...&lt;br/&gt;
&lt;br/&gt;
VMThread running an unrelated VM operation:&lt;br/&gt;
&amp;nbsp;- &amp;quot;Handshaked&amp;quot; Thread 16&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Took Thread 16&amp;#39;s HandshakeState lock!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Started StackWatermark processing thread 16&amp;#39;s oops&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Needs to relocate an object, but couldn&amp;#39;t because there&amp;#39;s no more memory ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- delegated the relocation to the GC threads&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- waits for the GC threads to relocate objects&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the GC threads will not make progress while Young Generation GC Thread is blocked&lt;br/&gt;
&lt;br/&gt;
Stack traces:&lt;br/&gt;
Young Generation GC Thread:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;__lll_lock_wait ()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;__pthread_mutex_cond_lock ()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;pthread_cond_wait@@GLIBC_2.3.2 ()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PlatformMonitor::wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Monitor::wait_without_safepoint_check&lt;br/&gt;
&amp;lt;&amp;lt;&amp;lt; Acquiring VMOperationLock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MonitorLocker::wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::wait_until_executed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::execute&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VM_ZOperation::pause&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZGenerationYoung::pause_relocate_start&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZGenerationYoung::collect&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZDriverMinor::gc&lt;br/&gt;
&lt;br/&gt;
Thread 16 (LWP 2216049):&lt;br/&gt;
&amp;nbsp;&amp;nbsp;__lll_lock_wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;pthread_mutex_lock &lt;br/&gt;
&amp;nbsp;&amp;nbsp;PlatformMutex::lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mutex::lock_without_safepoint_check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mutex::lock_without_safepoint_check&lt;br/&gt;
&amp;lt;&amp;lt;&amp;lt; Acquiring HandshakeState lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MutexLocker::MutexLocker&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HandshakeState::has_operation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;SafepointMechanism::should_process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;SafepointMechanism::should_process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ThreadBlockInVMPreprocess&amp;lt;InFlightMutexRelease&amp;gt;::~ThreadBlockInVMPreprocess&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Monitor::wait&lt;br/&gt;
&amp;lt;&amp;lt;&amp;lt; VMOperation lock&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MonitorLocker::wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::wait_until_executed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::execute&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Handshake::execute&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Deoptimization::deoptimize_all_marked&lt;br/&gt;
&amp;nbsp;&amp;nbsp;DeoptimizationScope::deoptimize_marked&lt;br/&gt;
&amp;nbsp;&amp;nbsp;InstanceKlass::add_to_hierarchy&lt;br/&gt;
&lt;br/&gt;
VMThread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;pthread_cond_wait@@GLIBC_2.3.2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PlatformMonitor::wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZConditionLock::wait&lt;br/&gt;
&amp;lt;&amp;lt;&amp;lt; Waits for Young Generation GC Thread&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZRelocateQueue::add_and_wait&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZRelocate::relocate_object&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZUncoloredRoot::barrier&amp;lt;void (*)(zaddress)&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZUncoloredRoot::process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;InterpreterOopMap::iterate_oop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;frame::oops_interpreted_do&lt;br/&gt;
&amp;nbsp;&amp;nbsp;frame::oops_interpreted_do&lt;br/&gt;
&amp;nbsp;&amp;nbsp;frame::oops_do&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ZStackWatermark::process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermarkFramesIterator::process_one&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermark::start_processing_impl&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermark::start_processing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermark::start_processing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;StackWatermarkSet::start_processing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HandshakeOperation::prepare&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HandshakeState::try_process&lt;br/&gt;
&amp;lt;&amp;lt;&amp;lt; HandshakeState lock (of Thread 16)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HandshakeState::try_process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VM_HandshakeAllThreads::doit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VM_Operation::evaluate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::evaluate_operation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::inner_execute&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VMThread::loop&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5108736">JDK-8314902</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5106659">JDK-8313153</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                                              <subtask id="5107869">JDK-8314151</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22711">21</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17005"><![CDATA[windows]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32a1v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>