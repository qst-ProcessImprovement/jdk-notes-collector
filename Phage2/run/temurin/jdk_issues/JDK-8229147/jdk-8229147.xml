<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:42:14 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8229147] Linux os::create_thread() overcounts guardpage size with newer glibc (&gt;=2.27)</title>
                <link>https://bugs.openjdk.org/browse/JDK-8229147</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>This issue was brought up by Florian Weimer (thanks!) during the code review for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225035&quot; title=&quot;Thread stack size issue caused by large TLS size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225035&quot;&gt;&lt;strike&gt;JDK-8225035&lt;/strike&gt;&lt;/a&gt;. Please see &lt;a href=&quot;https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2019-July/035322.html&quot;&gt;https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2019-July/035322.html&lt;/a&gt; for detailed discussion.&lt;br/&gt;
&lt;br/&gt;
According to glibc bug &amp;quot;guard size is subtracted from thread stack size instead of adding it on top&amp;quot;, &lt;a href=&quot;https://sourceware.org/bugzilla/show_bug.cgi?id=22637:&quot;&gt;https://sourceware.org/bugzilla/show_bug.cgi?id=22637:&lt;/a&gt; &lt;br/&gt;
&lt;br/&gt;
&amp;quot;Previously if user requested S stack and G guard when creating a thread, the total mapping was S and the actual available stack was S - G - static_tls, which is not what the user requested.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;This patch fixes the guard size accounting by pretending the user requested S+G stack.  This way all later logic works out except  when reporting the user requested stack size (pthread_getattr_np) or when computing the minimal stack size (__pthread_get_minstack).&amp;quot;&lt;br/&gt;
&lt;br/&gt;
With glibc 2.27 and new versions, the allocated thread stack size is user_requested_size+guard_size.  Linux os::create_thread() adds an extra guard page size to the requested stack size in the default case: &lt;br/&gt;
&lt;br/&gt;
bool os::create_thread(Thread* thread, ThreadType thr_type,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size_t req_stack_size) {&lt;br/&gt;
...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stack_adjust_size += guard_size;&lt;br/&gt;
&lt;br/&gt;
With glibc 2.27 and new versions, the above is no longer needed for the default case.</description>
                <environment></environment>
        <key id="4997318">JDK-8229147</key>
            <summary>Linux os::create_thread() overcounts guardpage size with newer glibc (&gt;=2.27)</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="jiangli">Jiangli Zhou</reporter>
                        <labels>
                            <label>8bpr-critical-approved</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                    </labels>
                <created>Mon, 5 Aug 2019 12:08:05 -0700</created>
                <updated>Mon, 27 Nov 2023 02:22:38 -0800</updated>
                            <resolved>Wed, 26 Apr 2023 15:50:26 -0700</resolved>
                                    <version>8</version>
                    <version>9</version>
                    <version>10</version>
                    <version>11</version>
                    <version>12</version>
                    <version>13</version>
                    <version>14</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                                                                <comments>
                            <comment id="14594846" author="roboduke" created="Mon, 10 Jul 2023 12:53:46 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2035&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2035&lt;/a&gt;&lt;br/&gt;
Date: 2023-07-10 19:47:08 +0000</comment>
                            <comment id="14594837" author="lucy" created="Mon, 10 Jul 2023 12:28:16 -0700"  >Fix Request (11u)&lt;br/&gt;
Should get back ported for parity with 11.0.21-oracle. &lt;br/&gt;
Fix didn&amp;#39;t apply at all, os/linux/os_linux.cpp was too different in particular.&lt;br/&gt;
I managed to create a working version by massaging and applying the changes manually.&lt;br/&gt;
&lt;br/&gt;
There is some risk involved. It is not caused by the intentional change of behavior but by potential collateral damage. &lt;br/&gt;
&lt;br/&gt;
Tests (SAP nightly test suite) do not indicate any issues.&lt;br/&gt;
All the additional commits were as well tested overnight with no issues found.&lt;br/&gt;
Reviews received.&lt;br/&gt;
</comment>
                            <comment id="14591630" author="mdoerr" created="Fri, 23 Jun 2023 04:54:59 -0700"  >Fix Request (17u):&lt;br/&gt;
Should get backported for parity with 17.0.9-oracle. Doesn&amp;#39;t apply cleanly, but resolution is trivial (already reviewed).</comment>
                            <comment id="14591388" author="roboduke" created="Thu, 22 Jun 2023 07:41:43 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1489&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1489&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-22 14:34:18 +0000</comment>
                            <comment id="14577166" author="dukebot" created="Wed, 26 Apr 2023 15:50:25 -0700"  >Changeset: 9ebcda21&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-26 22:47:54 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/9ebcda2165c42e3f7b82a9ae8074badb69c0d270&quot;&gt;https://git.openjdk.org/jdk/commit/9ebcda2165c42e3f7b82a9ae8074badb69c0d270&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14575627" author="roboduke" created="Thu, 20 Apr 2023 22:01:42 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13571&quot;&gt;https://git.openjdk.org/jdk/pull/13571&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-21 04:57:28 +0000</comment>
                            <comment id="14574409" author="dholmes" created="Mon, 17 Apr 2023 23:44:44 -0700"  >Logging output for unfixed JVM on system that doesn&amp;#39;t need the workaround:&lt;br/&gt;
&lt;br/&gt;
JavaThread&lt;br/&gt;
&lt;br/&gt;
[0.034s][info ][os,thread] Thread &amp;quot;Unknown thread&amp;quot; started (pthread id: 140469474424576, attributes: stacksize: 1024k, guardsize: 0k, detached). &lt;br/&gt;
[0.035s][debug][os,thread] Thread 20670 stack dimensions: 0x00007fc1990ff000-0x00007fc199200000 (1028k).&lt;br/&gt;
&lt;br/&gt;
Non-JavaThread&lt;br/&gt;
&lt;br/&gt;
[0.036s][info ][os,thread] Thread &amp;quot;VM Periodic Task Thread&amp;quot; started (pthread id: 140469473371904, attributes: stacksize: 1024k, guardsize: 4k, detached). &lt;br/&gt;
[0.037s][debug][os,thread] Thread 20671 stack dimensions: 0x00007fc198fff000-0x00007fc1990ff000 (1024k).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Logging output for fixed JVM on system that doesn&amp;#39;t need the workaround:&lt;br/&gt;
&lt;br/&gt;
JavaThread&lt;br/&gt;
&lt;br/&gt;
[0.109s][info ][os,thread] Thread &amp;quot;Unknown thread&amp;quot; started (pthread id: 140491082020608, attributes: stacksize: 1024k, guardsize: 0k, detached). &lt;br/&gt;
[0.109s][debug][os,thread] Thread 21021 stack dimensions: 0x00007fc6a0f9b000-0x00007fc6a109c000 (1028k).&lt;br/&gt;
&lt;br/&gt;
Non-JavaThread&lt;br/&gt;
&lt;br/&gt;
[0.110s][info ][os,thread] Thread &amp;quot;VM Periodic Task Thread&amp;quot; started (pthread id: 140491080967936, attributes: stacksize: 1024k, guardsize: 4k, detached). &lt;br/&gt;
[0.110s][debug][os,thread] Thread 21022 stack dimensions: 0x00007fc6a0e9b000-0x00007fc6a0f9b000 (1024k).&lt;br/&gt;
&lt;br/&gt;
Output with and without the fix is the same, as expected.</comment>
                            <comment id="14574407" author="dholmes" created="Mon, 17 Apr 2023 23:39:44 -0700"  >Logging output for unfixed JVM on system that needs the workaround:&lt;br/&gt;
&lt;br/&gt;
JavaThread:&lt;br/&gt;
&lt;br/&gt;
[0.093s][info ][os,thread] Thread &amp;quot;Unknown thread&amp;quot; started (pthread id: 140690812233472, attributes: stacksize: 1024k, guardsize: 0k, detached).&lt;br/&gt;
[0.093s][debug][os,thread] Thread 4057 stack dimensions: 0x00007ff521d2e000-0x00007ff521e2f000 (1028k).&lt;br/&gt;
&lt;br/&gt;
Non-JavaThread&lt;br/&gt;
&lt;br/&gt;
[0.094s][info ][os,thread] Thread &amp;quot;VM Periodic Task Thread&amp;quot; started (pthread id: 140690811180800, attributes: stacksize: 1024k, guardsize: 4k, detached).&lt;br/&gt;
[0.094s][debug][os,thread] Thread 4058 stack dimensions: 0x00007ff521c2e000-0x00007ff521d2e000 (1024k).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Logging output for fixed JVM on system that needs the workaround:&lt;br/&gt;
&lt;br/&gt;
JavaThread:&lt;br/&gt;
&lt;br/&gt;
[0.090s][info ][os,thread] Thread &amp;quot;Unknown thread&amp;quot; started (pthread id: 140394173683456, attributes: stacksize: 1024k, guardsize: 0k, detached).&lt;br/&gt;
[0.090s][debug][os,thread] Thread 4094 stack dimensions: 0x00007fb010c9d000-0x00007fb010d9e000 (1028k).&lt;br/&gt;
&lt;br/&gt;
Non-JavaThread:&lt;br/&gt;
&lt;br/&gt;
[0.091s][info ][os,thread] Thread &amp;quot;VM Periodic Task Thread&amp;quot; started (pthread id: 140394172630784, attributes: stacksize: 1024k, guardsize: 4k, detached).&lt;br/&gt;
[0.091s][debug][os,thread] Thread 4095 stack dimensions: 0x00007fb010b9d000-0x00007fb010c9d000 (1024k).&lt;br/&gt;
&lt;br/&gt;
Output with and without the fix is the same, as expected.</comment>
                            <comment id="14574385" author="dholmes" created="Mon, 17 Apr 2023 19:04:51 -0700"  >Just to add to the confusion here there seems to be a long time bug in reporting the stack information for JavaThreads when there are no guard pages:&lt;br/&gt;
&lt;br/&gt;
[0.283s][info ][os,thread] Thread started (pthread id: 140139373582080, attributes: stacksize: 1024k, guardsize: 0k, detached). &lt;br/&gt;
[0.287s][info ][os,thread] Thread is alive (tid: 10252, pthread id: 140139373582080).&lt;br/&gt;
[0.287s][debug][os,thread] Thread 10252 stack dimensions: 0x00007f74bd84d000-0x00007f74bd94e000 (1028k).&lt;br/&gt;
&lt;br/&gt;
The stack size on the final line is 4K too big ie one page - but we have no adjustment being made in this case.&lt;br/&gt;
&lt;br/&gt;
EDIT: This is not a VM bug this is a glibc issue (MULTI_PAGE_ALIASING) whereby glibc will add one page to the stacksize on x64 if it is a multiple of 64K.</comment>
                            <comment id="14574027" author="dholmes" created="Sun, 16 Apr 2023 21:48:50 -0700"  >I&amp;#39;m re-opening this due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303838&quot; title=&quot;Stack bottom and size computed incorrectly in current_stack_region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303838&quot;&gt;&lt;strike&gt;JDK-8303838&lt;/strike&gt;&lt;/a&gt; (which will get closed as a duplicate).</comment>
                            <comment id="14571848" author="dholmes" created="Tue, 4 Apr 2023 18:19:25 -0700"  >Thanks - that confirmed I do have the fix. Which is unfortunate because now I need to be able to find a system that doesn&amp;#39;t have it to test on. :(</comment>
                            <comment id="14571694" author="fweimer" created="Tue, 4 Apr 2023 07:04:21 -0700"  >I assume you are using an RPM-based distribution? There should be an entry for bug #1527904  in `rpm -q --changelog glibc`, corresponding to that patch. Usually, you can download the source RPM with `yumdownloader  --source glibc`, and unpack the source RPM with `rpm2cpio glibc-2.17-317.el7.src.rpm | cpio -i`.</comment>
                            <comment id="14571566" author="dholmes" created="Mon, 3 Apr 2023 23:55:31 -0700"  >[~fweimer] How do I check the glibc patches?</comment>
                            <comment id="14571550" author="fweimer" created="Mon, 3 Apr 2023 22:38:07 -0700"  >Check if it has glibc-rh1527904-3.patch for &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=1527904&quot;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1527904&lt;/a&gt; (glibc: PTHREAD_STACK_MIN is too small on x86-64). The part about this upstream change having been backported widely was correct. 8-)</comment>
                            <comment id="14571512" author="dholmes" created="Mon, 3 Apr 2023 16:01:21 -0700"  >[~fweimer] I ran the test on my system with glibc 2.17 and it showed no change in the minstack value.</comment>
                            <comment id="14571192" author="fweimer" created="Mon, 3 Apr 2023 02:12:16 -0700"  >Sorry, the sense of my previous comment was wrong. Commit 630f4cc3aa019ede55976ea561f1a7af2f068639 (&amp;quot;[BZ #22637] Fix stack guard size accounting&amp;quot;) in glibc made the return value of __pthread_get_minstack independent of the attribute guard size, and this is the same commit that introduced the guard size accounting change.&lt;br/&gt;
&lt;br/&gt;
Does this answer your question?</comment>
                            <comment id="14570215" author="dholmes" created="Tue, 28 Mar 2023 22:31:24 -0700"  >[~fweimer] I&amp;#39;m looking at this issue again. Could you clarify how __pthread_get_minstack can be used here. AFAICS the value returned by that function is independent of the attr object that is passed in to it, so the guard size set in that object has no affect on the result. ?? Thanks.&lt;br/&gt;
&lt;br/&gt;
To be clear, I thought this was what was being suggested:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;pthread_attr_init(&amp;amp;attr);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;size_t min_stack = __pthread_get_minstack(&amp;amp;attr);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;pthread_attr_setguardsize(&amp;amp;attr, 16K );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;size_t min_stack2 = __pthread_get_minstack(&amp;amp;attr);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;tty-&amp;gt;print_cr(&amp;quot;OS: minstack changed by &amp;quot; SIZE_FORMAT, min_stack2 - min_stack);&lt;br/&gt;
</comment>
                            <comment id="14392185" author="mseledtsov" created="Thu, 7 Jan 2021 13:43:14 -0800"  >Runtime Triage: This is not on our current list of priorities. We will consider this feature if we receive additional customer requirements.</comment>
                            <comment id="14282908" author="mseledtsov" created="Tue, 6 Aug 2019 11:01:52 -0700"  >ILW = MLM = P4</comment>
                            <comment id="14282649" author="fweimer" created="Tue, 6 Aug 2019 05:05:55 -0700"  >You can detect the glibc behavior by calling __pthread_get_minstack on the thread attribute before and after setting the guard size, and comparing the results. If the value changes, glibc has the OLD behavior. (EDIT: incorrectly said &#8220;new behavior&#8221; before)&lt;br/&gt;
&lt;br/&gt;
The guard size accounting change has been widely backported, to provide slightly larger stacks for compatibility with x86 CPUs with AVX-512 support. Checking glibc versions would be very misleading here. </comment>
                            <comment id="14282507" author="jiangli" created="Mon, 5 Aug 2019 15:30:35 -0700"  >Yes, it&amp;#39;s one page wasting per thread. </comment>
                            <comment id="14282491" author="dholmes" created="Mon, 5 Aug 2019 14:36:41 -0700"  >Introducing a glibc version runtime check is unpleasant and may impact startup. We have the version info as a string but it will need to be parsed to do an actual value check.&lt;br/&gt;
&lt;br/&gt;
Is it just one page we are wasting?</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5102597">JDK-8309539</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103606">JDK-8310385</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103728">JDK-8310499</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103983">JDK-8310741</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5106386">JDK-8312879</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5095792">JDK-8303838</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5077260">JDK-8288631</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                                        </outwardlinks>
                                                                <inwardlinks description="relates to">
                                                        </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2k2qb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>