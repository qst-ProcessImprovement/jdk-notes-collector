<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 18:49:38 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8306705] com/sun/jdi/PopAndInvokeTest.java fails with NativeMethodException</title>
                <link>https://bugs.openjdk.org/browse/JDK-8306705</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
com/sun/jdi/PopAndInvokeTest.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
----------System.out:(18/1082)----------&lt;br/&gt;
vmOpts: &amp;#39;-Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-aarch64/jdk-19_linux-aarch64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/741e9afd-8c02-45c3-b2e2-9db1450d0832-S43793/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c3c67266-0d6b-489e-b298-99eac7c63975/runs/526c12d3-0a58-4a90-bbe8-db640a8ad765/testoutput/test-support/jtreg_open_test_jdk_jdk_jdi/tmp -ea -esa&amp;#39;&lt;br/&gt;
javaOpts: &amp;#39;-XX:+CreateCoredumpOnCrash -XX:+UseZGC&amp;#39;&lt;br/&gt;
JVM version:21-ea&lt;br/&gt;
JDI version: 21.0&lt;br/&gt;
JVM description: Java Debug Interface (Reference Implementation) version 21.0 &lt;br/&gt;
Java Debug Wire Protocol (Reference Implementation) version 21.0&lt;br/&gt;
JVM Debug Interface version 21.0&lt;br/&gt;
JVM version 21-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;debuggee: Howdy!&lt;br/&gt;
Debugger: Popped back to the call to A()&lt;br/&gt;
Debugger: Doing invoke&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;debuggee: invokee&lt;br/&gt;
Debugger: invoke done&lt;br/&gt;
Debugger: Resuming debuggee&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;debuggee: in A&lt;br/&gt;
Debugger: Suspending debuggee&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;debuggee: in waiter&lt;br/&gt;
Debugger: Popping frame for waiter&lt;br/&gt;
----------System.err:(16/883)----------&lt;br/&gt;
[1ms] run args: [PopAndInvokeTarg]&lt;br/&gt;
com.sun.jdi.NativeMethodException&lt;br/&gt;
	at jdk.jdi/com.sun.tools.jdi.StackFrameImpl.pop(StackFrameImpl.java:401)&lt;br/&gt;
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.popFrames(ThreadReferenceImpl.java:560)&lt;br/&gt;
	at PopAndInvokeTest.runOnce(PopAndInvokeTest.java:165)&lt;br/&gt;
	at PopAndInvokeTest.runTests(PopAndInvokeTest.java:114)&lt;br/&gt;
	at TestScaffold.startTests(TestScaffold.java:434)&lt;br/&gt;
	at PopAndInvokeTest.main(PopAndInvokeTest.java:91)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1592)&lt;br/&gt;
&lt;br/&gt;
JavaTest Message: Test threw exception: com.sun.jdi.NativeMethodException&lt;br/&gt;
JavaTest Message: shutting down test&lt;br/&gt;
&lt;br/&gt;
result: Failed. Execution failed: `main&amp;#39; threw exception: com.sun.jdi.NativeMethodException&lt;br/&gt;
&lt;br/&gt;
Please note this is not the same failure mode as:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305632&quot; title=&quot;Test com/sun/jdi/PopAndInvokeTest.java fails with OpaqueFrameException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305632&quot;&gt;&lt;strike&gt;JDK-8305632&lt;/strike&gt;&lt;/a&gt; Test com/sun/jdi/PopAndInvokeTest.java fails with OpaqueFrameException&lt;br/&gt;
&lt;br/&gt;
which occurs with Loom.</description>
                <environment></environment>
        <key id="5099218">JDK-8306705</key>
            <summary>com/sun/jdi/PopAndInvokeTest.java fails with NativeMethodException</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cjplummer">Chris Plummer</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>noreg-self</label>
                            <label>tier6</label>
                    </labels>
                <created>Sun, 23 Apr 2023 06:28:54 -0700</created>
                <updated>Thu, 20 Jul 2023 16:45:39 -0700</updated>
                            <resolved>Wed, 26 Apr 2023 10:34:13 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-svc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14577096" author="dukebot" created="Wed, 26 Apr 2023 10:34:11 -0700"  >Changeset: 38cc0391&lt;br/&gt;
Author:    Chris Plummer &amp;lt;&lt;a href=&apos;mailto:cjplummer@openjdk.org&apos;&gt;cjplummer@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-04-26 17:32:05 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/38cc0391f3f7272167f92a4c2faa9fae21a26ef9&quot;&gt;https://git.openjdk.org/jdk/commit/38cc0391f3f7272167f92a4c2faa9fae21a26ef9&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14576813" author="roboduke" created="Tue, 25 Apr 2023 14:13:53 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13657&quot;&gt;https://git.openjdk.org/jdk/pull/13657&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-25 21:07:34 +0000</comment>
                            <comment id="14576794" author="cjplummer" created="Tue, 25 Apr 2023 13:24:40 -0700"  >I had a hard time reproducing this, so I decided to force the issue by putting the println in the loop rather than just doing one println before the loop, and also got rid of the sleep() on the debugger side of the test. It reproduces quite frequently now, although takes about 500 printlns to reproduce. Note in an earlier attempt I did 40 printlns before the loop and it reproduced 1 out of 400 runs, so it is possible to get it to reproduce with far fewer printlns, but the timing of the test make it normally require a lot.&lt;br/&gt;
&lt;br/&gt;
Some of the failures end up being timeouts during test shutdown. Stack traces show the debuggee blocked in a println(). This is likely because the popFrames() call succeeded in popping frames while deep in the println() call stack, and this resulted in not properly releasing locks or related resource that now cannot be acquired.</comment>
                            <comment id="14576358" author="cjplummer" created="Mon, 24 Apr 2023 14:34:37 -0700"  >Recently &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8305511&quot; title=&quot;Remove ignore from com/sun/jdi/PopAndInvokeTest.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8305511&quot;&gt;&lt;strike&gt;JDK-8305511&lt;/strike&gt;&lt;/a&gt; removed the &amp;quot;@ignore 6951287 &amp;quot;, allowing this test to run. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6951287&quot; title=&quot;testcase failing com/sun/jdi/PopAndInvokeTest.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6951287&quot;&gt;&lt;strike&gt;JDK-6951287&lt;/strike&gt;&lt;/a&gt; at first appears to be a different issue:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;com.sun.jdi.InternalException: Unexpected JDWP Error: 32&lt;br/&gt;
&lt;br/&gt;
But error 32 is OPAQUE_FRAME, and the current JDI implementation for ThreadReferenceImpl.popFrames(), which is implemented by StackFrameImpl.pop() has:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case JDWP.Error.OPAQUE_FRAME:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (thread.isVirtual()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new OpaqueFrameException();  // can only happen with virtual threads&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new NativeMethodException(); // can only happen with platform threads&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
So the old failure mode for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6951287&quot; title=&quot;testcase failing com/sun/jdi/PopAndInvokeTest.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6951287&quot;&gt;&lt;strike&gt;JDK-6951287&lt;/strike&gt;&lt;/a&gt; would currently produce the NativeMethodException we are seeing in this CR. However, this code is all new with the virtual threads support. Previously StackFrameImpl.pop() just allowed OPAQUE_FRAME to be handled by the default JDI error handler, which did not handle OPAQUE_FRAME at all, thus previously to changes for virtual thread support we would have indeed seen the &amp;quot;Unexpected JDWP Error: 32&amp;quot; message for this failure. It appears that the virtual thread support fixed this issues for getting &amp;quot;Unexpected JDWP Error: 32&amp;quot; instead of NativeMethodException&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6951287&quot; title=&quot;testcase failing com/sun/jdi/PopAndInvokeTest.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6951287&quot;&gt;&lt;strike&gt;JDK-6951287&lt;/strike&gt;&lt;/a&gt; was closed as a dup of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6417053&quot; title=&quot;InternalException: Unexpected JDWP Error: 32 when popping frames&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6417053&quot;&gt;&lt;strike&gt;JDK-6417053&lt;/strike&gt;&lt;/a&gt;, which was itself closed as CNR even though &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6417053&quot; title=&quot;InternalException: Unexpected JDWP Error: 32 when popping frames&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6417053&quot;&gt;&lt;strike&gt;JDK-6417053&lt;/strike&gt;&lt;/a&gt; clearly explained that there is a bug in not properly  throwing NativeMethodException():&lt;br/&gt;
&lt;br/&gt;
--------------------------&lt;br/&gt;
JDWP Error 32 is JDWP_ERROR_OPAQUE_FRAME. It is returned if&lt;br/&gt;
a frame-to-be-popped, or the frame being popped to is a frame&lt;br/&gt;
for a native method. I presume that is the case in this bug.&lt;br/&gt;
&lt;br/&gt;
The JDI spec for ThreadReference.popFrames says it throws&lt;br/&gt;
NativeMethodException if one of the frames that would be&lt;br/&gt;
popped is that of a native method or if the frame previous to&lt;br/&gt;
&amp;lt;i&amp;gt;frame&amp;lt;/i&amp;gt; is native.&lt;br/&gt;
&lt;br/&gt;
The problem is that the JDI code (in StackFrameImpl.java::pop) does not check for&lt;br/&gt;
this JDWP error and throw a NativeMethodException. &lt;br/&gt;
--------------------------&lt;br/&gt;
&lt;br/&gt;
So the bug of not throwing NativeMethodException has now been fixed, and this test is now failing with NativeMethodException. The question is whether this NativeMethodException failure is a test bug or some other issue. It looks like a test bug to me. There appears to be a race condition. The debuggee has:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void waiter() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (waiting) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;waiting = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;    debuggee: in waiter&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
And the debugger waits for &amp;quot;waiting == true&amp;quot; (checked via JDI calls) before suspending and doing the popFrames(). The problem is the println() after setting &amp;quot;waiting = true&amp;quot;. The debugger side can detect that &amp;quot;waiting == true&amp;quot; before the println() is complete, and the println() involves native code. I think the println() just needs be moved to before setting  &amp;quot;waiting = true&amp;quot;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4259599">JDK-6417053</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5097947">JDK-8305632</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i318pv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="370"><![CDATA[debugger]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>