<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 15:21:08 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8299544] Improve performance of CRC32C intrinsics (non-AVX-512) for small inputs</title>
                <link>https://bugs.openjdk.org/browse/JDK-8299544</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When comparing performance of JDK built-in CRC32C intrinsics with the native implementation, we noticed that JDK performs notably worse on smaller array sizes (up to 1024 bytes).&lt;br/&gt;
&lt;br/&gt;
The main reason is that the algorithm based on the &amp;quot;Fast CRC Computation for iSCSI Polynomial Using CRC32 Instruction&amp;quot; paper [1], processes input buffer in chunks of 6144, 2064, and 648 bytes [2], and the rest of the buffer is processed sequentially with 4-byte variant of CRC32 instruction [3].&lt;br/&gt;
&lt;br/&gt;
Experiments show that CRC32C computation performance can be improved for smaller inputs without performance impact for larger inputs, if the smallest chunk size is reduced from 648 to 216 bytes. Actually, the original paper [1] suggests the algorithms CRC_216 / CRC_240 for processing blocks of 216 and 240 bytes respectively. The value 648 might have resulted from an &amp;quot;x3&amp;quot; mistake (the algorithm accumulates 3 checksums per iteration).&lt;br/&gt;
&lt;br/&gt;
Additionally, when processing the tail (less than 216 bytes), we can use 8-byte variant of CRC32 instruction instead of 4-byte variant to speed up the algorithm even further.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/crc-iscsi-polynomial-crc32-instruction-paper.pdf&quot;&gt;https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/crc-iscsi-polynomial-crc32-instruction-paper.pdf&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/92dfc735f2297441a99b3e39464fb8f77a354d55/src/hotspot/cpu/x86/crc32c.h#L29-L50&quot;&gt;https://github.com/openjdk/jdk/blob/92dfc735f2297441a99b3e39464fb8f77a354d55/src/hotspot/cpu/x86/crc32c.h#L29-L50&lt;/a&gt;&lt;br/&gt;
[3] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/92dfc735f2297441a99b3e39464fb8f77a354d55/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L8231-L8236&quot;&gt;https://github.com/openjdk/jdk/blob/92dfc735f2297441a99b3e39464fb8f77a354d55/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L8231-L8236&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The proposed PR includes the following changes:&lt;br/&gt;
&lt;br/&gt;
1) CRC32C_LOW is decreased from 8*27 to 8*9 (which corresponds to 216 bytes).&lt;br/&gt;
2) CRC32C_MIDDLE is decreased from 8*86 to 8*74 to compensate for performance drop for mid-size arrays. The value 74 has been chosen empirically. According to experiments, values from 70 to 75 yield the best results, while with higher or lower values, there is a degradation for certain array sizes.&lt;br/&gt;
3) On x86_64, CRC32 r32, [m32] instruction is replaced with CRC32 r64, [m64] in the tail loop.&lt;br/&gt;
4) Unconditional JMP is replaced with a conditional jump at the end of the loop.&lt;br/&gt;
5) The hot tail loop is aligned.&lt;br/&gt;
&lt;br/&gt;
Notes:&lt;br/&gt;
&amp;nbsp;- The changes are only for x86 architecture.&lt;br/&gt;
&amp;nbsp;- If the hardware supports AVX-512 extensions + VPCLMULQDQ instruction (introduced with Ice Lake), another version of CRC32C intrinsics is generated, and the changes do not have effect.&lt;br/&gt;
&lt;br/&gt;
=== Performance ===&lt;br/&gt;
&lt;br/&gt;
Performance was validated with the attached JMH benchmark: CrcBench.java&lt;br/&gt;
&lt;br/&gt;
Tested hardware:&lt;br/&gt;
&amp;nbsp;- Intel Xeon Platinum 8259CL&lt;br/&gt;
&amp;nbsp;- Intel Xeon Platinum 8124M&lt;br/&gt;
&amp;nbsp;- Intel Core i7-1280P&lt;br/&gt;
&amp;nbsp;- AMD EPYC 7251&lt;br/&gt;
&lt;br/&gt;
In general, for arrays smaller than 648 bytes, the new version demonstrated 1.5x - 3.5x higher throughput.&lt;br/&gt;
For arrays larger than 32 KB, performance remained the same.&lt;br/&gt;
For mid-size arrays, the new version appeared better overall, but a minor performance drop (&amp;lt;5%) was observed on certain array sizes, e.g. 724 bytes. This is explained by the reduction of the algorithm&amp;#39;s smallest chunk size from 648 to 216 bytes.&lt;br/&gt;
&lt;br/&gt;
See the attached table for details.</description>
                <environment></environment>
        <key id="5090616">JDK-8299544</key>
            <summary>Improve performance of CRC32C intrinsics (non-AVX-512) for small inputs</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="apangin">Andrei Pangin</assignee>
                                    <reporter username="apangin">Andrei Pangin</reporter>
                        <labels>
                            <label>intrinsic</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                    </labels>
                <created>Tue, 3 Jan 2023 06:24:30 -0800</created>
                <updated>Tue, 4 Jul 2023 23:30:42 -0700</updated>
                            <resolved>Fri, 6 Jan 2023 11:05:27 -0800</resolved>
                                    <version>17</version>
                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14581645" author="JIRAUSER19902" created="Mon, 15 May 2023 11:10:39 -0700"  >Fix Request (17u) There are many usages of CRC32C on small inputs, and this improvement helps.</comment>
                            <comment id="14581642" author="roboduke" created="Mon, 15 May 2023 10:59:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1345&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1345&lt;/a&gt;&lt;br/&gt;
Date: 2023-05-15 17:53:20 +0000</comment>
                            <comment id="14549327" author="dukebot" created="Fri, 6 Jan 2023 11:05:19 -0800"  >Changeset: 8c70bf3f&lt;br/&gt;
Author:    Andrei Pangin &amp;lt;&lt;a href=&apos;mailto:apangin@openjdk.org&apos;&gt;apangin@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Sandhya Viswanathan &amp;lt;&lt;a href=&apos;mailto:sviswanathan@openjdk.org&apos;&gt;sviswanathan@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-01-06 19:00:20 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/8c70bf3fff6f01b637f9e72a0b4c617051dbfafd&quot;&gt;https://git.openjdk.org/jdk/commit/8c70bf3fff6f01b637f9e72a0b4c617051dbfafd&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14548545" author="roboduke" created="Tue, 3 Jan 2023 18:42:57 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/11838&quot;&gt;https://git.openjdk.org/jdk/pull/11838&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-04 02:36:25 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5101028">JDK-8308190</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5103375">JDK-8310197</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="102192" name="CrcBench.java" size="1275" author="apangin" created="Tue, 3 Jan 2023 18:22:16 -0800"/>
                            <attachment id="102207" name="crc32c-perf-curve.png" size="88816" author="apangin" created="Thu, 5 Jan 2023 07:07:56 -0800"/>
                            <attachment id="102208" name="crc32c-perf-graph.png" size="36454" author="apangin" created="Thu, 5 Jan 2023 07:07:56 -0800"/>
                            <attachment id="102209" name="crc32c-perf-table.png" size="75388" author="apangin" created="Thu, 5 Jan 2023 07:07:56 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2zrxf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>