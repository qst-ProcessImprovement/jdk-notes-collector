<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 13:41:25 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8224980] FLAG_SET_ERGO silently ignores invalid values</title>
                <link>https://bugs.openjdk.org/browse/JDK-8224980</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>If code tries to set a flag with a value that violates its constraint, the setting will be ignored and no warning is reported.&lt;br/&gt;
&lt;br/&gt;
This can be seen by applying the following patch:&lt;br/&gt;
diff --git a/src/hotspot/share/runtime/flags/jvmFlag.cpp b/src/hotspot/share/runtime/flags/jvmFlag.cpp&lt;br/&gt;
--- a/src/hotspot/share/runtime/flags/jvmFlag.cpp&lt;br/&gt;
+++ b/src/hotspot/share/runtime/flags/jvmFlag.cpp&lt;br/&gt;
@@ -1444,7 +1444,7 @@&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;void JVMFlag::printError(bool verbose, const char* msg, ...) {&lt;br/&gt;
-  if (verbose) {&lt;br/&gt;
+  if (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_list listPointer;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_start(listPointer, msg);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jio_vfprintf(defaultStream::error_stream(), msg, listPointer);&lt;br/&gt;
&lt;br/&gt;
And running:&lt;br/&gt;
test/hotspot/jtreg/runtime/CommandLine/OptionsValidation&lt;br/&gt;
&lt;br/&gt;
The failing test shows that with the following command line:&lt;br/&gt;
$ ../build/release/images/jdk/bin/java -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:SharedArchiveFile=TestOptionsWithRanges.jsa -Xshare:dump -XX:SharedBaseAddress=0&lt;br/&gt;
&lt;br/&gt;
We try to set NonNMethodCodeHeapSize to 0:&lt;br/&gt;
uintx NonNMethodCodeHeapSize=0 is outside the allowed range [ 4096 ... 18446744073709551615 ]&lt;br/&gt;
&lt;br/&gt;
And if we check -XX:+PrintFlagsFinal | grep NonNMethodCodeHeapSize we see that the flag has not been set:&lt;br/&gt;
uintx NonNMethodCodeHeapSize=0 is outside the allowed range [ 4096 ... 18446744073709551615 ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;uintx NonNMethodCodeHeapSize                   = 5242880                                {pd product} {default}&lt;br/&gt;
&lt;br/&gt;
The code that tries to set the flag to a value outside its range is here:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (SegmentedCodeCache) {                                                                                                                                                                   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Use multiple code heaps                                                                                                                                                                &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;initialize_heaps();                                                                                                                                                                       &lt;br/&gt;
&amp;nbsp;&amp;nbsp;} else {                                                                                                                                                                                    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Use a single code heap                                                                                                                                                                 &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FLAG_SET_ERGO(NonNMethodCodeHeapSize, 0);                                                                                                                                                 &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FLAG_SET_ERGO(ProfiledCodeHeapSize, 0);                                                                                                                                                   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FLAG_SET_ERGO(NonProfiledCodeHeapSize, 0);                                                                                                                                                &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ReservedCodeSpace rs = reserve_heap_memory(ReservedCodeCacheSize);                                                                                                                        &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add_heap(rs, &amp;quot;CodeCache&amp;quot;, CodeBlobType::All);                                                                                                                                             &lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
The code that swallows the warning is here:&lt;br/&gt;
static JVMFlag::Error apply_constraint_and_check_range_size_t(const JVMFlag* flag, size_t new_value, bool verbose) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JVMFlag::Error status = JVMFlag::SUCCESS;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JVMFlagRange* range = JVMFlagRangeList::find(flag);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (range != NULL) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;status = range-&amp;gt;check_size_t(new_value, verbose);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (status == JVMFlag::SUCCESS) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVMFlagConstraint* constraint = JVMFlagConstraintList::find_if_needs_check(flag);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (constraint != NULL) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;status = constraint-&amp;gt;apply_size_t(new_value, verbose);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return status;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
JVMFlag::Error JVMFlag::size_tAtPut(JVMFlag* flag, size_t* value, JVMFlag::Flags origin) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (flag == NULL) return JVMFlag::INVALID_FLAG;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!flag-&amp;gt;is_size_t()) return JVMFlag::WRONG_FORMAT;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;JVMFlag::Error check = apply_constraint_and_check_range_size_t(flag, *value, !JVMFlagConstraintList::validated_after_ergo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (check != JVMFlag::SUCCESS) return check;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;size_t old_value = flag-&amp;gt;get_size_t();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;trace_flag_changed&amp;lt;EventUnsignedLongFlagChanged, u8&amp;gt;(flag, old_value, *value, origin);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;check = flag-&amp;gt;set_size_t(*value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*value = old_value;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;flag-&amp;gt;set_origin(origin);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return check;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
!JVMFlagConstraintList::validated_after_ergo() starts to return false in the middle of the JVM initialization. This value is passed to the verbose parameter, and check_size_t(...) calls printError(...) with verbose set to false&lt;br/&gt;
&lt;br/&gt;
void JVMFlag::printError(bool verbose, const char* msg, ...) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (verbose) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_list listPointer;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_start(listPointer, msg);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jio_vfprintf(defaultStream::error_stream(), msg, listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_end(listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Since the check returned an error size_tAtPut returns at this line:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (check != JVMFlag::SUCCESS) return check;&lt;br/&gt;
&lt;br/&gt;
and the setting of the flag is silently ignored.&lt;br/&gt;
&lt;br/&gt;
If found one problematic instance of this, maybe there are more?</description>
                <environment></environment>
        <key id="4991817">JDK-8224980</key>
            <summary>FLAG_SET_ERGO silently ignores invalid values</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="iklam">Ioi Lam</assignee>
                                    <reporter username="stefank">Stefan Karlsson</reporter>
                        <labels>
                            <label>cmd</label>
                    </labels>
                <created>Wed, 29 May 2019 06:06:36 -0700</created>
                <updated>Wed, 26 Jul 2023 07:44:21 -0700</updated>
                            <resolved>Wed, 15 Feb 2023 19:46:28 -0800</resolved>
                                    <version>13</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14560531" author="dukebot" created="Wed, 15 Feb 2023 19:46:26 -0800"  >Changeset: 573c316c&lt;br/&gt;
Author:    Ioi Lam &amp;lt;&lt;a href=&apos;mailto:iklam@openjdk.org&apos;&gt;iklam@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-16 03:44:48 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/573c316c5764ccd8d483f1f187fd6eb21ceeea63&quot;&gt;https://git.openjdk.org/jdk/commit/573c316c5764ccd8d483f1f187fd6eb21ceeea63&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14559809" author="roboduke" created="Mon, 13 Feb 2023 20:53:54 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12549&quot;&gt;https://git.openjdk.org/jdk/pull/12549&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-14 04:03:36 +0000</comment>
                            <comment id="14373472" author="iklam" created="Sun, 11 Oct 2020 22:57:12 -0700"  >Tentative proposal:&lt;br/&gt;
&lt;br/&gt;
Change JVMFlag::printError from:&lt;br/&gt;
&lt;br/&gt;
void JVMFlag::printError(bool verbose, const char* msg, ...) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (verbose) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_list listPointer;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_start(listPointer, msg);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jio_vfprintf(defaultStream::error_stream(), msg, listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_end(listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
to:&lt;br/&gt;
&lt;br/&gt;
void JVMFlag::printError(JVMFlag::Flags origin, const char* msg, ...) {&lt;br/&gt;
&amp;nbsp;if (JVMFlagLimit::_validating_phase == JVMFlagConstraintPhase::AtParse) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// This is the stage where the VM is parsing options from the command-line,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// config files, etc. Print warnings message to alert the user.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_list listPointer;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_start(listPointer, msg);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jio_vfprintf(defaultStream::error_stream(), msg, listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;va_end(listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log_info(arguments)(..msg.....);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (origin) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case JVMFlag::DEFAULT:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case JVMFlag::COMMAND_LINE:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case JVMFlag::ENVIRON_VAR:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case JVMFlag::CONFIG_FILE:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case JVMFlag::JIMAGE_RESOURCE:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(0, &amp;quot;origin %d should not be used after AtParse phase&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVMFlag::MANAGEMENT:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVMFlag::ATTACH_ON_DEMAND:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVMFlag::INTERNAL:          // whitebox&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The caller should handle the error.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JVMFlag::ERGONOMIC:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// This is called by FLAG_SET_ERGO(). The caller typically does not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// check for error result. Let&amp;#39;s make sure this never happens.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fatal(&amp;quot;FLAG_SET_ERGO cannot be used to set an invalid value&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ShouldNotReachHere();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14371253" author="iklam" created="Tue, 29 Sep 2020 11:18:14 -0700"  >If we print error messages for the programmatic errors, like:&lt;br/&gt;
&lt;br/&gt;
$ java -Xint -version&lt;br/&gt;
uintx NonNMethodCodeHeapSize=0 is outside the allowed range [ 4096 ... 18446744073709551615 ]&lt;br/&gt;
java version &amp;quot;16-internal&amp;quot; 2021-03-16&lt;br/&gt;
....&lt;br/&gt;
&lt;br/&gt;
That would be confusing to the user who didn&amp;#39;t specify the NonNMethodCodeHeapSize option at all. &lt;br/&gt;
&lt;br/&gt;
If our intention is to catch errors in the code , maybe we should generate a fatal error (so we get an hs_err file) to tell us exactly where the problem is? &lt;br/&gt;
&lt;br/&gt;
void JVMFlag::printError(bool verbose, const char* msg, ...) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;va_list listPointer;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;va_start(listPointer, msg);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (verbose) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jio_vfprintf(defaultStream::error_stream(), msg, listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringStream ss;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ss.vprint(msg, listPointer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fatal(&amp;quot;%s&amp;quot;, ss.as_string(true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;va_end(listPointer);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
$ java -Xint&lt;br/&gt;
# To suppress the following error report, specify this argument&lt;br/&gt;
# after -XX: or in .hotspotrc:  SuppressErrorAt=/jvmFlag.cpp:749&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/jdk2/fro/open/src/hotspot/share/runtime/flags/jvmFlag.cpp:749), pid=3549, tid=3550&lt;br/&gt;
#  fatal error: uintx NonNMethodCodeHeapSize=0 is outside the allowed range [ 4096 ... 18446744073709551615 ]&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# JRE version:  (16.0) (slowdebug build )&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 16-internal+0-adhoc.iklam.open, interpreted mode, sharing, compressed oops, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xb1f712]  JVMFlag::printError(bool, char const*, ...)+0xf4&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/share/apport/apport %p %s %c %d %P&amp;quot; (or dumping to /jdk2/fro/open/src/hotspot/core.3549)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /jdk2/fro/open/src/hotspot/hs_err_pid3549.log&lt;br/&gt;
&lt;br/&gt;
V  [libjvm.so+0xb1f712]  JVMFlag::printError(bool, char const*, ...)+0xf4&lt;br/&gt;
V  [libjvm.so+0xb2819b]  VMPageSizeConstraintFunc(unsigned long, bool)+0x78&lt;br/&gt;
V  [libjvm.so+0xb21e1a]  FlagAccessImpl_uintx::typed_check_constraint(void*, unsigned long, bool) const+0x2c&lt;br/&gt;
V  [libjvm.so+0xb25a4e]  TypedFlagAccessImpl&amp;lt;unsigned long, 4, EventUnsignedLongFlagChanged&amp;gt;::check_constraint_and_set(JVMFlag*, void*, JVMFlag::Flags, bool) const+0x9c&lt;br/&gt;
V  [libjvm.so+0xb24ba5]  RangedFlagAccessImpl&amp;lt;unsigned long, 4, EventUnsignedLongFlagChanged&amp;gt;::set_impl(JVMFlag*, void*, JVMFlag::Flags) const+0xfb&lt;br/&gt;
V  [libjvm.so+0xb219d6]  FlagAccessImpl::set(JVMFlag*, void*, JVMFlag::Flags) const+0x32&lt;br/&gt;
V  [libjvm.so+0xb1fb6d]  JVMFlagAccess::set_impl(JVMFlag*, int, void*, JVMFlag::Flags)+0x87&lt;br/&gt;
V  [libjvm.so+0xb1fd24]  JVMFlagAccess::set_impl(JVMFlagsEnum, int, void*, JVMFlag::Flags)+0xaa&lt;br/&gt;
V  [libjvm.so+0x45eedc]  JVMFlag::Error JVMFlagAccess::set&amp;lt;unsigned long, 4&amp;gt;(JVMFlagsEnum, unsigned long, JVMFlag::Flags)+0x28&lt;br/&gt;
V  [libjvm.so+0x6c752a]  Flag_NonNMethodCodeHeapSize_set(unsigned long, JVMFlag::Flags)+0x23&lt;br/&gt;
V  [libjvm.so+0x6c4644]  CodeCache::initialize()+0x13c&lt;br/&gt;
V  [libjvm.so+0x6c46fe]  codeCache_init()+0x9&lt;br/&gt;
V  [libjvm.so+0x9be02b]  init_globals()+0x26&lt;br/&gt;
V  [libjvm.so+0x10b88e5]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x36b&lt;br/&gt;
V  [libjvm.so+0xac6823]  JNI_CreateJavaVM_inner(JavaVM_**, void**, void*)+0xda&lt;br/&gt;
V  [libjvm.so+0xac6b2b]  JNI_CreateJavaVM+0x32&lt;br/&gt;
C  [libjli.so+0x371a]  JavaMain+0x8a&lt;br/&gt;
C  [libjli.so+0x7b09]  ThreadJavaMain+0x9&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14268603" author="mseledtsov" created="Tue, 4 Jun 2019 11:05:45 -0700"  >ILW = MML = P4</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="4785913">JDK-8085866</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4785913">JDK-8085866</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2j5ib:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>