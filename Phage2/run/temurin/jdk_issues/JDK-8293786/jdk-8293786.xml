<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:09:17 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8293786] HttpClient will not send more than 64 kb of data from the 2nd request in http2</title>
                <link>https://bugs.openjdk.org/browse/JDK-8293786</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
Java 17 Windows 10&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
HttpClient will not send more than 64kb of data in an POST/PUT request from the 2nd request onwards regardless of how many window updates frames we send from the server side.&lt;br/&gt;
&lt;br/&gt;
It hangs indefinitely after sending 64kb of data without sending any data frames afterwards&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
Create an HttpClient which uses http2&lt;br/&gt;
&lt;br/&gt;
1) Send an initial request of any type[GET/PUT/POST etc] all these requests work on the 1st try so that the server can send back a 101 upgrade response to fully transform the connection to http2&lt;br/&gt;
&lt;br/&gt;
2) Upload a byte array or anything greater than 64 kb[65535 bytes] &lt;br/&gt;
&lt;br/&gt;
3) Observe output on server . Server never receives a Data frame with THE END_STREAM flag hence it never processes the full request and hence cannot send a response which causes the client to hang forever&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
Client should send Data frames till all 100 kb of data is uploaded with the final frame having the END_STREAM flag set&lt;br/&gt;
ACTUAL -&lt;br/&gt;
Client only sends data frames up to the 64kb mark after which it pauses forever&lt;br/&gt;
&lt;br/&gt;
HEADER TABLE SIZE=16384&lt;br/&gt;
ENABLE PUSH=1&lt;br/&gt;
MAX CONCURRENT STREAMS=100&lt;br/&gt;
INITIAL WINDOW SIZE=16777216&lt;br/&gt;
MAX FRAME SIZE=16384&lt;br/&gt;
======================&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=1000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=2000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=3000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=4000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=5000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=6000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=7000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=8000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=9000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=10000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=11000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=12000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=13000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=14000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=15000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=16000&lt;br/&gt;
Data Frame,Stream=3,Size=384,Total Bytes Received=16384&lt;br/&gt;
Data Frame,Stream=3,Size=616,Total Bytes Received=17000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=18000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=19000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=20000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=21000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=22000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=23000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=24000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=25000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=26000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=27000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=28000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=29000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=30000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=31000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=32000&lt;br/&gt;
Data Frame,Stream=3,Size=768,Total Bytes Received=32768&lt;br/&gt;
Data Frame,Stream=3,Size=232,Total Bytes Received=33000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=34000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=35000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=36000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=37000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=38000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=39000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=40000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=41000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=42000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=43000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=44000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=45000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=46000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=47000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=48000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=49000&lt;br/&gt;
Data Frame,Stream=3,Size=152,Total Bytes Received=49152&lt;br/&gt;
Data Frame,Stream=3,Size=848,Total Bytes Received=50000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=51000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=52000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=53000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=54000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=55000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=56000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=57000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=58000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=59000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=60000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=61000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=62000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=63000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=64000&lt;br/&gt;
Data Frame,Stream=3,Size=1000,Total Bytes Received=65000&lt;br/&gt;
Data Frame,Stream=3,Size=535,Total Bytes Received=65535&lt;br/&gt;
&lt;br/&gt;
// HANGS HERE DOES NOT SEND ANY MORE DATA FRAMES EVEN THOUGH ACTUAL PAYLOAD IS 100 KB //&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
Source code is divided into 2 applications which needs to be run on separate JVM&amp;#39;s&lt;br/&gt;
&lt;br/&gt;
Server Source Code&lt;br/&gt;
&lt;br/&gt;
final class PUT_Server &lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;private static final int &lt;br/&gt;
&amp;nbsp;WINDOW_SIZE=1000,    //initial window size sent as setting frame to server&lt;br/&gt;
&amp;nbsp;WINDOW_INC=1000;     //make it -1 to make server send window updates equal to data frame payload length&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;private static byte[] encodeFrame(byte type,byte flags,int streamID,byte[] data)throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try(ByteArrayOutputStream output=new ByteArrayOutputStream())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)((data.length&amp;gt;&amp;gt;16)&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)((data.length&amp;gt;&amp;gt;8)&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)(data.length&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write(type);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write(flags);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)(((streamID&amp;gt;&amp;gt;24)&amp;amp;0xFF)&amp;amp;0b01111111));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)((streamID&amp;gt;&amp;gt;16)&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)((streamID&amp;gt;&amp;gt;8)&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write((byte)(streamID&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write(data);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;return output.toByteArray();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;} &lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;private static void writeOK(OutputStream output,int streamID)throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//we respond with a Header Frame[status=200] &amp;amp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;encodeFrame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0x1,                    //type headers 0x1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0x4,                    //flags = END_HEADERS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;streamID,                     //stream&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new byte[]{(byte)0b10001000}  //indexed header for status 200  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//we respond with a Data Frame with text OK&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;encodeFrame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0x0,                    //type Data 0x0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)(0x1),                  //flags = END_STREAM &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;streamID,                     //stream &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;OK&amp;quot;.getBytes()               //Payload data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;public static void main(String[] args)throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try(ServerSocket server=new ServerSocket(1000))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;try(Socket client=server.accept())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try(InputStream input=client.getInputStream();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OutputStream output=client.getOutputStream())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int length,bytesReceived=0,windowInc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[] data=new byte[100*1024];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Frame frame=new Frame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[] connection_preface=&amp;quot;PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n&amp;quot;.getBytes(&amp;quot;UTF-8&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int stage=1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while((length=input.read(data))&amp;gt;0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(stage==1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;We dont care about the request client sends&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but respond with an 101 switching protocol&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/     &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;HTTP/1.1 101 Switching Protocols\r\n&amp;quot;+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;Connection:Upgrade\r\n&amp;quot;+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;Upgrade:h2c\r\n\r\n&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;).getBytes(&amp;quot;UTF-8&amp;quot;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//write our custom settings frame with specific initial window size&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;encodeFrame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0x4,                                     //type settings 0x4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0  ,                                     //no flags&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0,                                            //stream 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new byte[]                    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0x4,                                   //setting type initial window&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)(((WINDOW_SIZE&amp;gt;&amp;gt;24)&amp;amp;0xFF)&amp;amp;0b01111111), //encoded window size&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)((WINDOW_SIZE&amp;gt;&amp;gt;16)&amp;amp;0xFF),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)((WINDOW_SIZE&amp;gt;&amp;gt;8)&amp;amp;0xFF),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)(WINDOW_SIZE&amp;amp;0xFF)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}                &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//write 200 ok response&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeOK(output,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//stage 2 is where we process the client preface and its setting frame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stage=2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if(stage==2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//decode frames after connection preface&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame.decode(new ByteArrayInputStream(data,connection_preface.length,length-connection_preface.length));    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//settings frame without the ACK flag&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(frame.type==0x4 &amp;amp;&amp;amp; frame.flags==0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int i=0;i&amp;lt;=frame.payload.length-6;i+=6)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;short option=(short)((frame.payload[i] &amp;amp; 0xFF) &amp;lt;&amp;lt; 8 | &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(frame.payload[i+1] &amp;amp; 0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int value=((frame.payload[i+2] &amp;amp; 0xFF)  &amp;lt;&amp;lt; 24) |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((frame.payload[i+3] &amp;amp; 0xFF) &amp;lt;&amp;lt; 16) |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((frame.payload[i+4] &amp;amp; 0xFF) &amp;lt;&amp;lt; 8) |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(frame.payload[i+5] &amp;amp; 0xFF); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Initial Window Size&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch(option)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0x1:System.out.println(&amp;quot;HEADER TABLE SIZE=&amp;quot;+value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0x2:System.out.println(&amp;quot;ENABLE PUSH=&amp;quot;+value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0x3:System.out.println(&amp;quot;MAX CONCURRENT STREAMS=&amp;quot;+value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0x4:System.out.println(&amp;quot;INITIAL WINDOW SIZE=&amp;quot;+value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0x5:System.out.println(&amp;quot;MAX FRAME SIZE=&amp;quot;+value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0x6:System.out.println(&amp;quot;MAX HEADER LIST SIZE=&amp;quot;+value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;======================&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//decode normally remaining data in the next stage without skipping&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stage=3;     &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(stage==3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{       &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame.decode(new ByteArrayInputStream(data,0,length));    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(frame.type==0x0)      //Data frame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bytesReceived+=frame.payload.length;      &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Data Frame,Stream=&amp;quot;+frame.streamID+&amp;quot;,Size=&amp;quot;+frame.payload.length+&amp;quot;,Total Bytes Received=&amp;quot;+bytesReceived);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//window increment use frame payload length if WINDOW_INC  &amp;lt; 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;windowInc=WINDOW_INC&amp;lt;=0?frame.payload.length:WINDOW_INC;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//write window update frame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output.write&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;encodeFrame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0x8,                                          //type Window Increment 0x8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)0,                                            //no flags&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;frame.streamID,                                     //stream &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new byte[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)(((windowInc&amp;gt;&amp;gt;24)&amp;amp;0xFF) &amp;amp; 0b01111111),       //encoded size[first byte reserved]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)((windowInc&amp;gt;&amp;gt;16)&amp;amp;0xFF),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)((windowInc&amp;gt;&amp;gt;8)&amp;amp;0xFF),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(byte)(windowInc&amp;amp;0xFF)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//end of data received test successfull&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(frame.flags==0x1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;End Received Test Successfull&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//write 200 ok and end test&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeOK(output,frame.streamID);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;private static class Frame&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private int length,type,flags,streamID;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private byte[] payload;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private void decode(InputStream input)throws Exception&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//9 bytes containing all header info about the frame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[] frameInfo=new byte[9];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;input.read(frameInfo);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;length=((frameInfo[0]&amp;amp;0xFF)&amp;lt;&amp;lt;16) | &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((frameInfo[1]&amp;amp;0xFF)&amp;lt;&amp;lt;8) | &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((frameInfo[2]&amp;amp;0xFF));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;type=frameInfo[3];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;flags=frameInfo[4];&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;streamID=(((frameInfo[5] &amp;amp; 0xFF) &amp;amp; 0b01111111)&amp;lt;&amp;lt;24) | &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((frameInfo[6] &amp;amp; 0xFF)&amp;lt;&amp;lt;16) | &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((frameInfo[7] &amp;amp; 0xFF)&amp;lt;&amp;lt;8) |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(frameInfo[8] &amp;amp; 0xFF);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//payload of frame&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;payload=new byte[length];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;input.read(payload);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Client Source Code&lt;br/&gt;
&lt;br/&gt;
final class PUT_Client&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;private static void debug(HttpResponse response)throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;==========Status Code=============&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;&amp;quot;+response.statusCode());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Thread=&amp;quot;+Thread.currentThread().getName());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;===========Headers=========&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;response.headers().map().forEach((header,values)-&amp;gt;System.out.println(header+&amp;quot;=&amp;gt;&amp;quot;+values));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;===========Body=============&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(response.body().toString());&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;public static void main(String[] args)throws Exception&lt;br/&gt;
&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpRequest.Builder builder=HttpRequest.newBuilder();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpClient client=HttpClient.newHttpClient();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//1st GET request to allow connection to upgrade o http 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpResponse response=client.send&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;builder.uri(URI.create(&amp;quot;&lt;a href=&quot;http://localhost:1000/Test.txt&quot;&gt;http://localhost:1000/Test.txt&lt;/a&gt;&amp;quot;))        &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.GET()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.timeout(Duration.ofSeconds(5))                        &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.version(HttpClient.Version.HTTP_2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.build(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpResponse.BodyHandlers.ofString()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;debug(response);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;**********************************************&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//2nd request to put data of size 100kb[it never uploads the full 100kb only upto the 64kb mark]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;byte[] data=new byte[100*1024];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;response=client.send&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;builder.uri(URI.create(&amp;quot;&lt;a href=&quot;http://localhost:1000/Test.txt&quot;&gt;http://localhost:1000/Test.txt&lt;/a&gt;&amp;quot;))        &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.PUT(HttpRequest.BodyPublishers.ofByteArray(data))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.timeout(Duration.ofSeconds(20))                        &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.version(HttpClient.Version.HTTP_2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;.build(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpResponse.BodyHandlers.ofString()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;debug(response);&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
Upload remaining data as separate requests&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : always&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5083307">JDK-8293786</key>
            <summary>HttpClient will not send more than 64 kb of data from the 2nd request in http2</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ccleary">Conor Cleary</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcsaw</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Tue, 13 Sep 2022 09:12:48 -0700</created>
                <updated>Tue, 5 Aug 2025 02:08:03 -0700</updated>
                            <resolved>Mon, 8 May 2023 07:52:26 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>18</version>
                    <version>19</version>
                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14805868" author="roboduke" created="Mon, 4 Aug 2025 12:54:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3795&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3795&lt;/a&gt;&lt;br/&gt;
Date: 2025-08-03 14:51:21 +0000</comment>
                            <comment id="14805867" author="goetz" created="Mon, 4 Aug 2025 12:45:20 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I would like to fix this issue along with the large http2 remake of 17.&lt;br/&gt;
Medium to lower risk, small change. &lt;br/&gt;
Resolved one import in a test file, clean anyways.&lt;br/&gt;
Tests pass. SAP nightly testing passed.</comment>
                            <comment id="14579798" author="dukebot" created="Mon, 8 May 2023 07:52:25 -0700"  >Changeset: ad90fb6d&lt;br/&gt;
Author:    Conor Cleary &amp;lt;&lt;a href=&apos;mailto:ccleary@openjdk.org&apos;&gt;ccleary@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-05-08 14:49:43 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/ad90fb6da38da066dfc7a5439196887bbcda766f&quot;&gt;https://git.openjdk.org/jdk/commit/ad90fb6da38da066dfc7a5439196887bbcda766f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14561798" author="roboduke" created="Tue, 21 Feb 2023 13:11:11 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12694&quot;&gt;https://git.openjdk.org/jdk/pull/12694&lt;/a&gt;&lt;br/&gt;
Date: 2023-02-21 17:31:29 +0000</comment>
                            <comment id="14528736" author="jpai" created="Mon, 10 Oct 2022 06:17:25 -0700"  >I&amp;#39;ve attached an unpolished version of a jtreg test case which reproduces this issue. File is named PutTest.java.</comment>
                            <comment id="14523609" author="tongwan" created="Wed, 14 Sep 2022 00:33:48 -0700"  >The observations on Windows 10:&lt;br/&gt;
JDK 11: Failed, received data is less than 100KB&lt;br/&gt;
JDK 17: Failed.&lt;br/&gt;
JDK 18: Failed.&lt;br/&gt;
JDK 19ea+32: Failed.&lt;br/&gt;
JDK 20ea+4: Failed.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5167500">JDK-8364715</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="100752" name="PUT_Client.java" size="2215" author="tongwan" created="Wed, 14 Sep 2022 00:21:39 -0700"/>
                            <attachment id="100753" name="PUT_Server.java" size="11439" author="tongwan" created="Wed, 14 Sep 2022 00:21:39 -0700"/>
                            <attachment id="101008" name="PutTest.java" size="4709" author="jpai" created="Mon, 10 Oct 2022 06:16:27 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yjpf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="193"><![CDATA[java.net]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>