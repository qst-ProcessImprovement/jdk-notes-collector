<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 12:26:37 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8307788] vmTestbase/gc/gctests/LargeObjects/large003/TestDescription.java timed out</title>
                <link>https://bugs.openjdk.org/browse/JDK-8307788</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test timed out in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/gc/gctests/LargeObjects/large003/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(8/549)----------&lt;br/&gt;
command: main -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields false -aggregationDepth 3 -t 1&lt;br/&gt;
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields false -aggregationDepth 3 -t 1 &lt;br/&gt;
started: Tue May 09 16:43:25 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
Timeout information:&lt;br/&gt;
--- Timeout information end.&lt;br/&gt;
finished: Tue May 09 16:55:27 UTC 2023&lt;br/&gt;
elapsed time (seconds): 721.933&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(280/11592)*----------&lt;br/&gt;
Stress time: 30 seconds&lt;br/&gt;
Stress iterations factor: 1&lt;br/&gt;
Stress threads factor: 1&lt;br/&gt;
Stress runs factor: 1&lt;br/&gt;
Max memory: 1037959168&lt;br/&gt;
Sleep time: 500&lt;br/&gt;
Iterations: 0&lt;br/&gt;
Number of threads: 1&lt;br/&gt;
Run GC thread: false&lt;br/&gt;
Run mem diag thread: false&lt;br/&gt;
Run forever: false&lt;br/&gt;
Loading classes that have number of fields under limitation (less than 65535)&lt;br/&gt;
Starting Thread[#17,gc.gctests.LargeObjects.large001.large001$&lt;a href=&apos;mailto:Worker@151dd4a1&apos;&gt;Worker@151dd4a1&lt;/a&gt;,5,MainThreadGroup]&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.private_int_schild@25de2e93&apos;&gt;nsk.share.gc.newclass.private_int_schild@25de2e93&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.private_int_schild: false&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.protected_short_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.protected_short_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.protected_short_schild@73c9b352&apos;&gt;nsk.share.gc.newclass.protected_short_schild@73c9b352&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.protected_short_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.protected_short_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.protected_short_schild: false&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.public_long_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.public_long_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.public_long_schild@2829028d&apos;&gt;nsk.share.gc.newclass.public_long_schild@2829028d&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.static_combination_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.static_combination_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.static_combination_schild: false&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.transient_combination_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.transient_combination_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.transient_combination_schild@216fd47b&apos;&gt;nsk.share.gc.newclass.transient_combination_schild@216fd47b&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.transient_combination_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.transient_combination_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.transient_combination_schild: false&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.volatile_combination_schild@7bf78a56&apos;&gt;nsk.share.gc.newclass.volatile_combination_schild@7bf78a56&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.volatile_combination_schild: false&lt;br/&gt;
No unexpected exceptions/errors are thrown&lt;br/&gt;
----------System.err:(1/16)----------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
----------rerun:(40/6796)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-21+22-1837\windows-x64-debug.jdk\jdk-21\fastdebug\bin\java&amp;#39; timed out (timeout set to 480000ms, elapsed time including timeout handling was 721917ms).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Please note that the test PASSed while the timeout handler was running.</description>
                <environment></environment>
        <key id="5100546">JDK-8307788</key>
            <summary>vmTestbase/gc/gctests/LargeObjects/large003/TestDescription.java timed out</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dholmes">David Holmes</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                            <label>tier4</label>
                            <label>tier5</label>
                    </labels>
                <created>Tue, 9 May 2023 12:04:56 -0700</created>
                <updated>Sun, 2 Jun 2024 23:51:45 -0700</updated>
                            <resolved>Wed, 24 Jan 2024 21:27:27 -0800</resolved>
                                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14676677" author="JIRAUSER20917" created="Tue, 28 May 2024 01:37:22 -0700"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.5-oracle.&lt;br/&gt;
No risk, only tests change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test pass.  SAP nightly testing passed.</comment>
                            <comment id="14676283" author="roboduke" created="Mon, 27 May 2024 01:04:16 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2495&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2495&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-27 07:58:22 +0000</comment>
                            <comment id="14676282" author="roboduke" created="Mon, 27 May 2024 01:03:39 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/604&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/604&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-27 07:57:58 +0000</comment>
                            <comment id="14676280" author="roboduke" created="Mon, 27 May 2024 01:03:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2726&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2726&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-27 07:58:42 +0000</comment>
                            <comment id="14646100" author="roboduke" created="Thu, 1 Feb 2024 15:29:30 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22/pull/103&quot;&gt;https://git.openjdk.org/jdk22/pull/103&lt;/a&gt;&lt;br/&gt;
Date: 2024-02-01 23:25:25 +0000</comment>
                            <comment id="14643643" author="dukebot" created="Wed, 24 Jan 2024 21:27:25 -0800"  >Changeset: 929af9ed&lt;br/&gt;
Author:    David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-01-25 05:26:13 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/929af9ed037bcc098043d7b7b8d303744a6d4360&quot;&gt;https://git.openjdk.org/jdk/commit/929af9ed037bcc098043d7b7b8d303744a6d4360&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14642448" author="roboduke" created="Mon, 22 Jan 2024 14:01:57 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17524&quot;&gt;https://git.openjdk.org/jdk/pull/17524&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-22 21:56:31 +0000</comment>
                            <comment id="14642126" author="dholmes" created="Sun, 21 Jan 2024 20:17:24 -0800"  >I discussed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292818&quot; title=&quot;replace 96-bit representation for field metadata with variable-sized streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292818&quot;&gt;&lt;strike&gt;JDK-8292818&lt;/strike&gt;&lt;/a&gt; with [~fparain] and while we see slows downs in these extreme cases, regular benchmarking does not show any adverse effect. For fastdebug in particular there are a lot of assertions used to validate the initial changes, which are probably no longer needed now this change has &amp;quot;baked&amp;quot; for some time, but it is also not worth the effort of changing just for a couple of tests. To that end I propose just increasing the timeout values for these tests.</comment>
                            <comment id="14639356" author="dholmes" created="Wed, 10 Jan 2024 21:30:50 -0800"  >I rebuilt to the point before the integration of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292818&quot; title=&quot;replace 96-bit representation for field metadata with variable-sized streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292818&quot;&gt;&lt;strike&gt;JDK-8292818&lt;/strike&gt;&lt;/a&gt; and got:&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 32.112 seconds&lt;br/&gt;
&lt;br/&gt;
with fastdebug and&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 30.973 seconds&lt;br/&gt;
&lt;br/&gt;
with product. I then added &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292818&quot; title=&quot;replace 96-bit representation for field metadata with variable-sized streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292818&quot;&gt;&lt;strike&gt;JDK-8292818&lt;/strike&gt;&lt;/a&gt; and rebuilt and got:&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 232.562 seconds&lt;br/&gt;
&lt;br/&gt;
with debug and&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 113.844 seconds&lt;br/&gt;
&lt;br/&gt;
with product. So we can see that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292818&quot; title=&quot;replace 96-bit representation for field metadata with variable-sized streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292818&quot;&gt;&lt;strike&gt;JDK-8292818&lt;/strike&gt;&lt;/a&gt; has caused a 3x slowdown in product accessing extreme numbers of fields, and a 7x slowdown in fastdebug - resulting in the test timeouts.&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14637971" author="dholmes" created="Mon, 8 Jan 2024 00:07:28 -0800"  >Here is the result of running one test in JDK 20:&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;build: 0.005 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;driver: 11.147 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;build: 0.0 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 32.537 seconds&lt;br/&gt;
TEST RESULT: Passed. Execution successful&lt;br/&gt;
&lt;br/&gt;
and the same result in JDK 21:&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;build: 0.005 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;driver: 13.913 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;build: 0.0 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 233.456 seconds&lt;br/&gt;
TEST RESULT: Passed. Execution successful&lt;br/&gt;
&lt;br/&gt;
That is a 7x slowdown and we see similar in current mainline&lt;br/&gt;
&lt;br/&gt;
TEST: vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&amp;nbsp;&amp;nbsp;build: 0.005 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;driver: 13.743 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;build: 0.001 seconds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;main: 204.07 seconds&lt;br/&gt;
TEST RESULT: Passed. Execution successful</comment>
                            <comment id="14632984" author="dholmes" created="Sun, 10 Dec 2023 22:17:37 -0800"  >Test vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java failed again</comment>
                            <comment id="14626419" author="dholmes" created="Tue, 14 Nov 2023 22:51:29 -0800"  >We have not seen this test fail in a while now, but the last reported failure was after &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8317692&quot; title=&quot;jcmd GC.heap_dump performance regression after JDK-8292818&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8317692&quot;&gt;&lt;strike&gt;JDK-8317692&lt;/strike&gt;&lt;/a&gt; was integrated.</comment>
                            <comment id="14615448" author="dholmes" created="Tue, 3 Oct 2023 01:25:56 -0700"  >There has been a report elsewhere that &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292818&quot; title=&quot;replace 96-bit representation for field metadata with variable-sized streams&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8292818&quot;&gt;&lt;strike&gt;JDK-8292818&lt;/strike&gt;&lt;/a&gt; results in an extreme slowdown in GC.heap-dump due to the way fields are accessed:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Further analysis showed that the functions in InstanceKlass to get the access flags of a field (identified by its index) now requires an iteration of the fields. As FieldStream from reflectionUtils.hpp accesses such data through the InstanceKlass with a given field index, this results in quadratic complexity for each object that gets dumped.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Could that be relevant here?&lt;br/&gt;
</comment>
                            <comment id="14606773" author="dcubed" created="Sat, 26 Aug 2023 07:03:00 -0700"  >Here are log file snippets from the jdk-22+13-897-tier4 sightings:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/gc/gctests/LargeObjects/large005/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(8/539)----------&lt;br/&gt;
command: main -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields true -aggregationDepth 3 -t 1&lt;br/&gt;
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields true -aggregationDepth 3 -t 1 &lt;br/&gt;
started: Sat Aug 26 03:18:31 GMT 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
Timeout information:&lt;br/&gt;
--- Timeout information end.&lt;br/&gt;
finished: Sat Aug 26 03:29:53 GMT 2023&lt;br/&gt;
elapsed time (seconds): 681.954&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(275/10747)----------&lt;br/&gt;
Stress time: 30 seconds&lt;br/&gt;
Stress iterations factor: 1&lt;br/&gt;
Stress threads factor: 1&lt;br/&gt;
Stress runs factor: 1&lt;br/&gt;
Max memory: 2147483648&lt;br/&gt;
Sleep time: 500&lt;br/&gt;
Iterations: 0&lt;br/&gt;
Number of threads: 1&lt;br/&gt;
Run GC thread: false&lt;br/&gt;
Run mem diag thread: false&lt;br/&gt;
Run forever: false&lt;br/&gt;
Loading classes that have number of fields under limitation (less than 65535)&lt;br/&gt;
Starting Thread[#20,gc.gctests.LargeObjects.large001.large001$&lt;a href=&apos;mailto:Worker@381e912b&apos;&gt;Worker@381e912b&lt;/a&gt;,5,MainThreadGroup]&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.private_int_schild@70ddedc4&apos;&gt;nsk.share.gc.newclass.private_int_schild@70ddedc4&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.volatile_combination_schild: false&lt;br/&gt;
No unexpected exceptions/errors are thrown&lt;br/&gt;
----------System.err:(1/15)----------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
----------rerun:(33/8185)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-22+13-897/macosx-x64-debug.jdk/jdk-22/fastdebug/bin/java&amp;#39; timed out (timeout set to 480000ms, elapsed time including timeout handling was 681771ms).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
vmTestbase/gc/gctests/LargeObjects/large004/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(8/539)----------&lt;br/&gt;
command: main -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields true -aggregationDepth 1 -t 1&lt;br/&gt;
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields true -aggregationDepth 1 -t 1 &lt;br/&gt;
started: Sat Aug 26 03:08:03 GMT 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
Timeout information:&lt;br/&gt;
--- Timeout information end.&lt;br/&gt;
finished: Sat Aug 26 03:18:31 GMT 2023&lt;br/&gt;
elapsed time (seconds): 628.439&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(1208/81336)----------&lt;br/&gt;
Stress time: 30 seconds&lt;br/&gt;
Stress iterations factor: 1&lt;br/&gt;
Stress threads factor: 1&lt;br/&gt;
Stress runs factor: 1&lt;br/&gt;
Max memory: 2147483648&lt;br/&gt;
Sleep time: 500&lt;br/&gt;
Iterations: 0&lt;br/&gt;
Number of threads: 1&lt;br/&gt;
Run GC thread: false&lt;br/&gt;
Run mem diag thread: false&lt;br/&gt;
Run forever: false&lt;br/&gt;
Loading classes that have number of fields under limitation (less than 65535)&lt;br/&gt;
Starting Thread[#20,gc.gctests.LargeObjects.large001.large001$&lt;a href=&apos;mailto:Worker@381e912b&apos;&gt;Worker@381e912b&lt;/a&gt;,5,MainThreadGroup]&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.private_int_schild@70ddedc4&apos;&gt;nsk.share.gc.newclass.private_int_schild@70ddedc4&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.volatile_combination_schild: false&lt;br/&gt;
No unexpected exceptions/errors are thrown&lt;br/&gt;
----------System.err:(1/15)----------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
----------rerun:(33/8185)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-22+13-897/macosx-x64-debug.jdk/jdk-22/fastdebug/bin/java&amp;#39; timed out (timeout set to 480000ms, elapsed time including timeout handling was 628347ms).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
vmTestbase/gc/gctests/LargeObjects/large003/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(8/541)----------&lt;br/&gt;
command: main -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields false -aggregationDepth 3 -t 1&lt;br/&gt;
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit gc.gctests.LargeObjects.large001.large001 -largeClassesPath classes -isOverLimitFields false -aggregationDepth 3 -t 1 &lt;br/&gt;
started: Sat Aug 26 02:53:49 GMT 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
Timeout information:&lt;br/&gt;
--- Timeout information end.&lt;br/&gt;
finished: Sat Aug 26 03:04:41 GMT 2023&lt;br/&gt;
elapsed time (seconds): 651.218&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(275/10747)----------&lt;br/&gt;
Stress time: 30 seconds&lt;br/&gt;
Stress iterations factor: 1&lt;br/&gt;
Stress threads factor: 1&lt;br/&gt;
Stress runs factor: 1&lt;br/&gt;
Max memory: 2147483648&lt;br/&gt;
Sleep time: 500&lt;br/&gt;
Iterations: 0&lt;br/&gt;
Number of threads: 1&lt;br/&gt;
Run GC thread: false&lt;br/&gt;
Run mem diag thread: false&lt;br/&gt;
Run forever: false&lt;br/&gt;
Loading classes that have number of fields under limitation (less than 65535)&lt;br/&gt;
Starting Thread[#20,gc.gctests.LargeObjects.large001.large001$&lt;a href=&apos;mailto:Worker@381e912b&apos;&gt;Worker@381e912b&lt;/a&gt;,5,MainThreadGroup]&lt;br/&gt;
0: Loading class: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Class loaded: nsk.share.gc.newclass.private_int_schild&lt;br/&gt;
0: Instance of the class: &lt;a href=&apos;mailto:nsk.share.gc.newclass.private_int_schild@70ddedc4&apos;&gt;nsk.share.gc.newclass.private_int_schild@70ddedc4&lt;/a&gt;&lt;br/&gt;
Added field objC  .... 3&lt;br/&gt;
Added field objC  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Added field objP  .... 2&lt;br/&gt;
Added field objC  .... 1&lt;br/&gt;
Added field objP  .... 1&lt;br/&gt;
0: Testing non-null after GC force for: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Unloading class: nsk.share.gc.newclass.volatile_combination_schild&lt;br/&gt;
0: Result of uloading class nsk.share.gc.newclass.volatile_combination_schild: false&lt;br/&gt;
No unexpected exceptions/errors are thrown&lt;br/&gt;
----------System.err:(1/15)----------&lt;br/&gt;
STATUS:Passed.&lt;br/&gt;
----------rerun:(33/8186)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-22+13-897/macosx-x64-debug.jdk/jdk-22/fastdebug/bin/java&amp;#39; timed out (timeout set to 480000ms, elapsed time including timeout handling was 650804ms).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Default timeout value of 120 seconds/2 minutes with a default timeoutFactor &lt;br/&gt;
of 4 means a total timeout of 480 seconds/8 minutes. The run executed &lt;br/&gt;
for 681.954 (large005), 628.439 (large004) and 651.218 (large003) seconds.&lt;br/&gt;
The tests did manage to pass while the timeout handler was running. </comment>
                            <comment id="14581840" author="tschatzl" created="Tue, 16 May 2023 01:50:23 -0700"  >Moving to runtime to investigate further. This does not look like gc is responsible for the very slow execution/timeouts, but a runtime call that is very slow. Options include raising the timeout (locally run, the test always seems to timeout - I think within CI we already increase the timeout), changing the test to do less work, or speeding up the runtime call somehow.&lt;br/&gt;
&lt;br/&gt;
The issue is also independent of GC and operating environment.</comment>
                            <comment id="14581833" author="tschatzl" created="Tue, 16 May 2023 01:41:35 -0700"  >Getting fields of the (large) objects in question takes a long time; I measured 25-30s(!) to retrieve 65k fields of an object. Annotating that method as follows:&lt;br/&gt;
&lt;br/&gt;
oop Reflection::new_field(fieldDescriptor* fd, TRAPS) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Ticks values[7];&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[0] = Ticks::now();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Symbol*  field_name = fd-&amp;gt;name();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;oop name_oop = StringTable::intern(field_name, CHECK_NULL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[1] = Ticks::now();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Handle name = Handle(THREAD, name_oop);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Symbol*  signature  = fd-&amp;gt;signature();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;InstanceKlass* holder = fd-&amp;gt;field_holder();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Handle type = new_type(signature, holder, CHECK_NULL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[2] = Ticks::now();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Handle rh  = java_lang_reflect_Field::create(CHECK_NULL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[3] = Ticks::now();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_clazz(rh(), fd-&amp;gt;field_holder()-&amp;gt;java_mirror());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_slot(rh(), fd-&amp;gt;index());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_name(rh(), name());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_type(rh(), type());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (fd-&amp;gt;is_trusted_final()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_trusted_final(rh());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Note the ACC_ANNOTATION bit, which is a per-class access flag, is never set here.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_modifiers(rh(), fd-&amp;gt;access_flags().as_int() &amp;amp; JVM_RECOGNIZED_FIELD_MODIFIERS);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_override(rh(), false);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[4] = Ticks::now();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (fd-&amp;gt;has_generic_signature()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Symbol*  gs = fd-&amp;gt;generic_signature();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Handle sig = java_lang_String::create_from_symbol(gs, CHECK_NULL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_signature(rh(), sig());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[5] = Ticks::now();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typeArrayOop an_oop = Annotations::make_java_array(fd-&amp;gt;annotations(), CHECK_NULL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java_lang_reflect_Field::set_annotations(rh(), an_oop);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;values[6] = Ticks::now();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;LogTarget(Info, gc) lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;LogStream ls(&amp;amp;lt);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (uint i = 1; i &amp;lt; 7; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ls.print(&amp;quot;%zu &amp;quot;, (values[i] - values[i-1]).nanoseconds() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ls.cr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return rh();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
gives following example output:&lt;br/&gt;
&lt;br/&gt;
[10.182s][info][gc          ] 3286 151 501 250 20 60 &lt;br/&gt;
[10.183s][info][gc          ] 2244 150 571 261 20 60 &lt;br/&gt;
[10.183s][info][gc          ] 2164 140 521 251 20 70 &lt;br/&gt;
[10.184s][info][gc          ] 2364 141 511 260 20 60 &lt;br/&gt;
[10.184s][info][gc          ] 2174 150 501 270 20 81 &lt;br/&gt;
[10.185s][info][gc          ] 2525 140 511 251 20 60 &lt;br/&gt;
&lt;br/&gt;
(These are times in ns).&lt;br/&gt;
&lt;br/&gt;
String interning seems to take most of the time, followed by java_lang_reflect_Field::create().</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5117342">JDK-8322315</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5120923">JDK-8325412</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5129882">JDK-8332629</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5130656">JDK-8333240</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5120093">JDK-8324755</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5119437">JDK-8324205</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31ghf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17335"><![CDATA[b07]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>