<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Tue Sep 30 14:19:09 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8296344] Remove dependency on G1 for writing the CDS archive heap </title>
                <link>https://bugs.openjdk.org/browse/JDK-8296344</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Currently the dumping of the CDS archive heap has complex interaction with G1. Each time a Java object needs to be archived, we allocate a copy of this object using G1CollectedHeap::archive_mem_allocate(). The problems are:&lt;br/&gt;
&lt;br/&gt;
- The complex interface makes it difficult to implement heap archiving for other collectors.&lt;br/&gt;
&lt;br/&gt;
- When the G1 heap is fragmented, we may not be able to allocate the archived objects in the desired address range, resulting in a suboptimal archive.&lt;br/&gt;
&lt;br/&gt;
Proposal:&lt;br/&gt;
&lt;br/&gt;
Since we don&amp;#39;t use the archived objects at dump time, they don&amp;#39;t need to be stored inside the dumptime heap. Instead of asking G1 to give us real memory from the dump time heap for storing the archived objects, we manage a buffer ourselves when copying the objects.&lt;br/&gt;
&lt;br/&gt;
The goal is to generate a CDS heap image that has the same format as generated by the previous dumping algorithm. I.e.,&lt;br/&gt;
&lt;br/&gt;
- The archive heap is divided in &amp;#39;open&amp;#39; and &amp;#39;closed&amp;#39; parts.&lt;br/&gt;
- At runtime, the archive heap can be mapped with the existing G1CollectedHeap::alloc_archive_regions() API&lt;br/&gt;
&lt;br/&gt;
(Note: a follow-up RFE will simplify the runtime mapping code and consolidate all archived objects into a single block. No more &amp;#39;open&amp;#39; and &amp;#39;close&amp;#39; parts -- see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298048&quot; title=&quot;Combine CDS archive heap into a single block&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8298048&quot;&gt;&lt;strike&gt;JDK-8298048&lt;/strike&gt;&lt;/a&gt;).&lt;br/&gt;
&lt;br/&gt;
=================================================&lt;br/&gt;
Algorithm:&lt;br/&gt;
&lt;br/&gt;
- Identify the java heap objects that need to be archived =&amp;gt; remember these objects in a hashtable. Each object is associated with an &amp;#39;open&amp;#39; or &amp;#39;closed&amp;#39; attribute.&lt;br/&gt;
&lt;br/&gt;
- Allocate a GrowableArray as a temporary buffer. The GrowableArray is divided into multiple 1MB blocks.&lt;br/&gt;
&lt;br/&gt;
- Start at position 0 of the buffer: copy the all the &amp;#39;open&amp;#39; objects in the hashtable sequentially into the GrowableArray&lt;br/&gt;
&lt;br/&gt;
- Advance to the next position P in the buffer, where P is aligned with G1&amp;#39;s region size (HeapRegion::GrainBytes)&lt;br/&gt;
&lt;br/&gt;
- Copy the all the &amp;#39;closed&amp;#39; objects in the hashtable sequentially into the GrowableArray&lt;br/&gt;
&lt;br/&gt;
- When the objects are being copied, add appropriate fillers such that no objects cross 1MB boundaries. (**)&lt;br/&gt;
&lt;br/&gt;
- After all the objects are copied, calculate the requested addresses of the copied objects. We do so by &amp;quot;moving&amp;quot; the GrowableArray such that it will be flushed against the end of the current  G1 heap.&lt;br/&gt;
&lt;br/&gt;
- E.g., if all the copied objects can fit in 2 G1 regions, then the lowest copied object Foo would sit at the lowest address of the second G1 region from the top of the heap. This is called the &amp;quot;requested address&amp;quot; of Foo. By default, we want to map Foo at this address at runtime.&lt;br/&gt;
&lt;br/&gt;
- Relocate all the oop fields in the copied objects according to their requested addresses.&lt;br/&gt;
&lt;br/&gt;
- Write the contents of the GrowableArray into the CDS archive, separating the &amp;quot;open&amp;quot; portion from the &amp;quot;closed&amp;quot; portion.&lt;br/&gt;
=================================================&lt;br/&gt;
&lt;br/&gt;
(**) The size of G1 regions depends on the max heap size, but is never smaller than 1MB. By ensuring that no objects in the archive heap cross 1MB boundaries, we can always map the archive regardless of the runtime G1 region size. (This 1MB value may need to be reconsidered when we support archive heap mapping in other region-based collectors.)&lt;br/&gt;
&lt;br/&gt;
The benefit is less CDS-specific code in G1. It also makes it possible to dump the archive heap with non-G1 collectors (see follow-up RFE &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298614&quot; title=&quot;Support CDS heap dumping for SerialGC and ParallelGC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8298614&quot;&gt;&lt;strike&gt;JDK-8298614&lt;/strike&gt;&lt;/a&gt;).</description>
                <environment></environment>
        <key id="5086765">JDK-8296344</key>
            <summary>Remove dependency on G1 for writing the CDS archive heap </summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="iklam">Ioi Lam</assignee>
                                    <reporter username="iklam">Ioi Lam</reporter>
                        <labels>
                            <label>archive-heap</label>
                            <label>cds</label>
                    </labels>
                <created>Thu, 3 Nov 2022 16:18:04 -0700</created>
                <updated>Wed, 22 Feb 2023 12:29:30 -0800</updated>
                            <resolved>Tue, 14 Feb 2023 21:13:45 -0800</resolved>
                                    <version>20</version>
                                    <fixVersion>21</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14560177" author="dukebot" created="Tue, 14 Feb 2023 21:13:44 -0800"  >Changeset: bdcbafb2&lt;br/&gt;
Author:    Ioi Lam &amp;lt;&lt;a href=&apos;mailto:iklam@openjdk.org&apos;&gt;iklam@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-02-15 05:12:39 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/bdcbafb2196f0360466ee789b969f2db954ca85f&quot;&gt;https://git.openjdk.org/jdk/commit/bdcbafb2196f0360466ee789b969f2db954ca85f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14555916" author="roboduke" created="Mon, 30 Jan 2023 21:50:05 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/12304&quot;&gt;https://git.openjdk.org/jdk/pull/12304&lt;/a&gt;&lt;br/&gt;
Date: 2023-01-31 05:34:20 +0000</comment>
                            <comment id="14546740" author="iklam" created="Mon, 19 Dec 2022 22:50:46 -0800"  >Here&amp;#39;s a second prototype where I removed the extra pass for copying the objects:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/compare/master...iklam:jdk:NEW-8296344-remove-cds-heap-dump-dependency-on-G1--STEP2&quot;&gt;https://github.com/openjdk/jdk/compare/master...iklam:jdk:NEW-8296344-remove-cds-heap-dump-dependency-on-G1--STEP2&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
(only the last 2 commits are relevant to this RFE).</comment>
                            <comment id="14541760" author="iklam" created="Wed, 30 Nov 2022 20:41:26 -0800"  >Hi [~asmehra] I&amp;#39;ve updated the Description with more details about the proposed design. I also implemented a prototype:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/compare/master...iklam:jdk:8296344-remove-cds-heap-dump-dependency-on-G1&quot;&gt;https://github.com/openjdk/jdk/compare/master...iklam:jdk:8296344-remove-cds-heap-dump-dependency-on-G1&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
(Only the last commit &amp;quot;8296344: Remove dependency on G1 for writing the CDS archive heap&amp;quot; are for this RFE. The other commits are pre-requisites that I will push in different RFEs).&lt;br/&gt;
&lt;br/&gt;
The current prototype (as of Nov 30, 2022) makes an extra pass to copy the objects inside a Java bytearray, before copying them into the GrowableArray as stated in the Description. This is suboptimal and confusing. This extra pass will be removed after some of the pre-requisites RFE are integrated. See &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8298600&quot; title=&quot;Prerequisites for JDK-8296344: Remove dependency on G1 for writing the CDS archive heap&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8298600&quot;&gt;&lt;strike&gt;JDK-8298600&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14537457" author="JIRAUSER20510" created="Mon, 14 Nov 2022 19:54:02 -0800"  >I am posting few questions regarding this work to better understand its scope and get more clarity for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8296263:&quot;&gt;https://bugs.openjdk.org/browse/JDK-8296263:&lt;/a&gt;&lt;br/&gt;
1. Is it the goal of this RFE to allow archived heap written by any collector to be used by any other collector? For instance writing archive heap with Serial and using it with G1&lt;br/&gt;
2. It was mentioned elsewhere (&lt;a href=&quot;https://github.com/openjdk/jdk/pull/10970#issuecomment-1306207433&quot;&gt;https://github.com/openjdk/jdk/pull/10970#issuecomment-1306207433&lt;/a&gt;) that the region boundary for the archived objects need to be recorded. I guess it would be recorded in one of the CDS headers (probably CDSFileMapRegion).&lt;br/&gt;
If the archive heap is written using non-region based collectors, would the objects be still region-aligned? I guess it depends on the answer to previous question. If we want to allow archived heap to be usable by different collectors then the objects need to be region-aligned. Then the next question would be what would be region boundary for non-region based collectors?</comment>
                            <comment id="14535250" author="iklam" created="Mon, 7 Nov 2022 10:49:23 -0800"  >This REF makes it easier to implement &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8251330&quot; title=&quot;Reorder CDS archived heap to speed up relocation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8251330&quot;&gt;&lt;strike&gt;JDK-8251330&lt;/strike&gt;&lt;/a&gt;: &amp;quot;Reorder CDS archived heap to avoid oopmaps for objects when possible&amp;quot;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5020563">JDK-8246297</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5088662">JDK-8297914</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5089488">JDK-8298601</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5089501">JDK-8298612</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5027080">JDK-8251330</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5087940">JDK-8297313</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5088818">JDK-8298048</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5089487">JDK-8298600</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5086580">JDK-8296263</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5094509">JDK-8302781</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5094468">JDK-8302746</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2z4gr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17338"><![CDATA[b10]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>