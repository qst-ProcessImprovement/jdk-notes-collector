Title: [JDK-6956385] URLConnection.getLastModified() leaks file handles for jar:file and file: URLs
Priority: P4
Type: Bug
Component: core-libs
Description: FULL PRODUCT VERSION :
java version "1.6.0_20"
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)
ADDITIONAL OS VERSION INFORMATION :
Ubuntu 7.04
Linux coconut 2.6.20-16-server #2 SMP Fri Aug 31 01:01:45 UTC 2007 i686 GNU/Linux
also reproduced on:
Windows 7 Professional 64-bit
Microsoft Windows [Version 6.1.7600]
A DESCRIPTION OF THE PROBLEM :
Using the getLastModified() call on a URLConnection for jar:file: or file: URLs causes file handles to remain open. When performing many of these calls in quick succession, the operating system can easily hit the open file handles limit. E.g., on an Ubuntu Linux install, the system-wide open file limit is 1024 by default, out of which a large portion may already be consumed by other processes.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Open a jar:file: URL connection. E.g. run getClass().getResource("META-INF/MANIFEST.MF").openConnection(). This returns a sun.net.www.protocol.jar.JarURLConnection.
On this URL connection, run getLastModified().
This runs, in sequence,
java.net.URLConnection.getHeaderFieldDate(),
sun.net.www.protocol.jar.JarURLConnection.getHeaderField(),
sun.net.www.protocol.file.FileURLConnection.getHeaderField(),
sun.net.www.protocol.file.FileURLConnection.initializeHeaders(),
sun.net.www.protocol.file.FileURLConnection.connect().
This last call, opens a FileInputStream which is not closed, further on.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The getLastModified() call does not cause a file handle to be opened, or closes it  before returning.
ACTUAL -
A file handle remains open.
REPRODUCIBILITY :
This bug can be reproduced always.
---------- BEGIN SOURCE ----------
// NOTE: This code snippet should be run on a platform where the 'lsof' command is available (e.g. Linux).
// The problem is present on Windows, but it is not as easy to show the number of open files to expose the problem.
private void exposeFileHandleLeakOnJarUrlConnection() throws InterruptedException, IOException {
URL jarUrl = LastModifiedBugExposer.class.getResource("/META-INF/MANIFEST.MF");
printNumberOfOpenFiles("jar");
for (int i = 0; i
OS: windows_7

-----
Title: [JDK-8051591] Test javax/swing/JTabbedPane/8007563/Test8007563.java fails
Priority: P3
Type: Bug
Component: client-libs
Description: Testsuite name: Regression
Test name(s):javax/swing/JTabbedPane/8007563/Test8007563.java
JDK tested: jdk1.8_20b21, jdk1.8b132,jdk1.8.0_20b17,jdk1.8.0_20b18
OS tested:osx
Is it a regression? No
Regression introduced in release/build: No
Failed in : jdk1.8_20b21, jdk1.8.0b132,jdk1.8.0_20b17,jdk1.8.0_20b18,jdk1.8.0_20b23,jdk1.8.0_20b26,jdk 1.9.0b28
Is it platform specific? No
L&F: Metal
java.lang.Error: [Mac OS X opaque=true, CDE/Motif opaque=true, Nimbus opaque=true, Metal opaque=true]
at Test8007563.main(Test8007563.java:54)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:483)
at com.sun.javatest.regtest.MainWrapper$MainThread.run(MainWrapper.java:94)
at java.lang.Thread.run(Thread.java:745)
OS: linux

-----
Title: [JDK-8136895] Writer not closed with disk full error, file resource leaked
Priority: P4
Type: Bug
Component: core-libs
Description: FULL PRODUCT VERSION :
java version "1.8.0_45"
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)
ADDITIONAL OS VERSION INFORMATION :
Linux  3.2.45-0.6.acc.624.45.283.amzn1acc.x86_64 #1 SMP Fri Nov 21 22:39:25 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
A DESCRIPTION OF THE PROBLEM :
When writing to a file and a disk full condition occurs, the file is not properly closed and the handle is leaked even though a try-with-resources is used.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
use Files.newBufferedWriter() in a try with resources construct.  Write until disk full.  Check to see if file has been properly closed by checking open files.
You can check open files on Linux like this:
sudo lsof -a +L1 /
(grep for the filename)
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
File should not be open, because the try with resources construct should have closed the file.
ACTUAL -
File remains open as reported by:  sudo lsof -a +L1 /
ERROR MESSAGES/STACK TRACES THAT OCCUR :
This exception is generated:
java.io.IOException: No space left on device
at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
at sun.nio.ch.IOUtil.write(IOUtil.java:65)
at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:210)
at java.nio.channels.Channels.writeFullyImpl(Channels.java:78)
at java.nio.channels.Channels.writeFully(Channels.java:101)
at java.nio.channels.Channels.access$000(Channels.java:61)
at java.nio.channels.Channels$1.write(Channels.java:174)
at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:282)
at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
at java.io.OutputStreamWriter.write(OutputStreamWriter.java:207)
at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:129)
at java.io.BufferedWriter.write(BufferedWriter.java:230)
at java.io.Writer.write(Writer.java:157)
[... snip application level info ...]
Suppressed: java.io.IOException: No space left on device
at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
at sun.nio.ch.IOUtil.write(IOUtil.java:65)
at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:210)
at java.nio.channels.Channels.writeFullyImpl(Channels.java:78)
at java.nio.channels.Channels.writeFully(Channels.java:101)
at java.nio.channels.Channels.access$000(Channels.java:61)
at java.nio.channels.Channels$1.write(Channels.java:174)
at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
at sun.nio.cs.StreamEncoder.implClose(StreamEncoder.java:316)
at sun.nio.cs.StreamEncoder.close(StreamEncoder.java:149)
at java.io.OutputStreamWriter.close(OutputStreamWriter.java:233)
at java.io.BufferedWriter.close(BufferedWriter.java:266)
[... snip application level info ...]
... 4 more
REPRODUCIBILITY :
This bug can be reproduced always.
---------- BEGIN SOURCE ----------
Run this junit test.  Set the path to a disk with limited space to save time.  When disk is full, the IOException will be printed.  Then, while the test continues to sleep, before termination, check for open files.
-----------------------------------
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.junit.Test;
public class DiskFullTest {
@Test
public void diskFullTest() throws IOException, InterruptedException {
StringBuffer text = new StringBuffer();
for (int i = 0;  i
OS: generic

-----
Title: [JDK-8180450] secondary_super_cache does not scale well
Priority: P3
Type: Bug
Component: hotspot
Description: On some workloads, updates to the Klass::secondary_super_cache field
cause excessive cache line invalidation traffic, with noticeable slowdowns.
Specifically, the cache itself may become unstable (which is a normal corner case for one-element caches) and at that point a multi-threaded application may begin "hammering" on the cache line from multiple threads, causing an explosion of coherence traffic.
One customer reported this as happening when multiple threads were traversing heterogeneous sequences of objects, testing the same classes against more than one interface, with rapid variation between the interfaces.
In such a case, two interfaces could compete to use the single SSC slot on each class that occurs in the object sequence.  The competition would turn into frequent updating of the SSC slots by multiple threads, causing cache lines to ping-pong between processors.
To fix this, the SSC has to have some sort of limit on its update rate, or be replaced by a mechanism that scales better.
The simplest fix is probably to put an "update count" profile counter somewhere, and consult that counter just before updating the SSC.  If the counter is too high (evidence of a high contention rate), don't update the SSC.  The trade-off is between linear searches of the Klass::secondary_supers array (which is stable and therefore replicated across caches) versus time spent waiting to acquire write access to the SSC (which may be hundreds of cycles).  Linear search will easily win in those cases, except of course for very dense dynamic query mixes over very complex interface graphs, which is a corner case we can leave for the future.
The obvious place to put the update count is next to the SSC, on the same cache line.  When the miss count overflows past some selected threshold, the SSC is left unchanged.  On balance the extra footprint of a 32-bit field per Klass seems acceptable.
Such a counter should be allowed to decay, so that temporary bursts in type test complexity do not shut down the SSC forever.
Another possible fix would be a thread-local update counter for the SSC, under JavaThread::current.  In that case, only Java code could use the extra fix to avoid cache contention, but that is probably acceptable also.  This fix would be significantly more complex, but would have the benefit that only "offending" threads would throttle themselves.
Similarly, the counter could be placed in the MethodData object which carries the profile of the instruction which is causing the SSC contention.  (This instruction could be instanceof, checkcast, aastore, or a call to an intrinsic method that emulates one of those.)  This fix would be even more complex than the thread-based fix, and would probably be overkill given the relatively small importance of the problem.
If the secondary_supers lists ever grow in length to more than a few tens of elements, additional mechanisms may be needed for quickly testing the subtype relation.  Probably a tree walk would be sufficient.  Sometimes unified caches (global or thread-local) are proposed, or perhaps unified numbering schemes, but those, also, seem overkill for this problem.

-----
Title: [JDK-8183348] Better cleanup for jdk/test/sun/security/pkcs12/P12SecretKey.java
Priority: P4
Type: Bug
Component: security-libs
Description: P12SecretKey.java creates test*.test files in the default system temp directory:
cat -n jdk/test/sun/security/pkcs12/P12SecretKey.java
[...]
66          File ksFile = File.createTempFile("test", ".test");
These files are not cleaned up at the end of the run.
The preferred approach would be to create temporary test directories and files under the jtreg property user.dir instead, if it is defined.
OS: generic

-----
Title: [JDK-8200566] DistributionPointFetcher fails to fetch CRLs if the DistributionPoints field contains more than one DistributionPoint and the first one fails
Priority: P4
Type: Bug
Component: security-libs
Description: FULL PRODUCT VERSION :
ADDITIONAL OS VERSION INFORMATION :
Microsoft Windows [Version 10.0.14393]
The codepath is such that this affects other OSes, as well.
A DESCRIPTION OF THE PROBLEM :
I've created a Certificate which contain two CRLDistributionPoint in the CRLDistributionPoints field. These are two separate HTTP web servers, which provide the same CRL.
I see the following happen when I use the PKIX CertPathValidator:
If the first listed endpoint is unavailable (causing an IOException either by blocking the port in the firewall or shutting down the software), then revocation checking will fail even though the CRL is available on the next CRL DistributionPoint.
From what I can determine, the cause is that the for-loop in: http://hg.openjdk.java.net/jdk/jdk/file/71c04702a3d5/src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java#l134
will exit early with an exception and never check the second CRL DistributionPoint.
The result of the failure is stored in the CRL cache. If the underlying URICertStore is called within the CRL Check Interval, then the same method (which otherwise throws the exception) will return an empty collection instead and the second DistributionPoint is checked as expected.
This was observed in JRE 8u144 but the same for-loop is present in the latest JDK.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a certificate with multiple HTTP Endpoints stored in different DistributionPoint fields
2. Make the CRL available on the second HTTP Endpoint and ensure that the first endpoint is unavailable.
3. Setup the PKIX CerthPathValidator
4. Validate the created Certificate against the PKIX CertPathValidator
5. Validate the created Certificate a second time (within 30 second) against the PKIX CertPathValidator.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Both validation checks should succeed.
ACTUAL -
The first validation check fails with an "Unable to determine revocation status due to network error".
The second validation check fetches the CRL from the second distribution point and succeeds the revocation checking.
REPRODUCIBILITY :
This bug can be reproduced always.
CUSTOMER SUBMITTED WORKAROUND :
Only specify one CRL DistributionPoint in certificates.
OS: generic

-----
Title: [JDK-8202100] Merge vm/share/InMemoryJavaCompiler w/ jdk/test/lib/compiler/InMemoryJavaCompiler
Priority: P4
Type: Enhancement
Component: hotspot

-----
Title: [JDK-8210471] GZIPInputStream constructor could leak an un-end()ed Inflater
Priority: P3
Type: Bug
Component: core-libs
Description: Colleague Tobias Thierer writes:
=====
When the constructor GZIPInputStream(InputStream,int) throws an exception (eg. when encountering invalid data), the Inflater constructed earlier is not end()ed before it becomes eligible for garbage collection. This means that the Inflater's zsref is not reliably cleared (relies on finalization alone).
The patch below fixes this problem in the case of Exception; in the case of  Error, it still leaves the Inflater in un-end()ed state.
--- a/src/java.base/share/classes/java/util/zip/GZIPInputStream.java    Thu Jun 21 08:58:59 2018 -0300
+++ b/src/java.base/share/classes/java/util/zip/GZIPInputStream.java    Thu Sep 06 14:15:23 2018 +0100
@@ -77,7 +77,12 @@
public GZIPInputStream(InputStream in, int size) throws IOException {
super(in, new Inflater(true), size);
usesDefaultInflater = true;
-        readHeader(in);
+        try {
+            readHeader(in);
+        } catch (Exception e) {
+            inf.end();
+            throw e;
+        }
}
/**

-----
Title: [JDK-8211400] nsk.share.gc.Memory::getArrayLength returns wrong value
Priority: P4
Type: Bug
Component: hotspot
Description: nsk.share.gc.Memory::getArrayLength estimates array size as '(memory - extraSize) / (objectSize + referenceSize)'. this formula is incorrect, since array doesn't use reference for each element.
the correct formula is '(memory - extraSize) / objectSize'
nsk.share.gc.Memory::getArraySize should be fixed correspondingly

-----
Title: [JDK-8220213] com/sun/jndi/dns/ConfigTests/Timeout.java failed intermittent
Priority: P4
Type: Bug
Component: core-libs
Description: ----------System.err:(15/852)----------
java.lang.RuntimeException: Failed: timeout in 7749 ms, expected7750ms
at Timeout.handleException(Timeout.java:108)
at TestBase.launch(TestBase.java:84)
at TestBase.run(TestBase.java:50)
at Timeout.main(Timeout.java:61)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
at java.base/java.lang.Thread.run(Thread.java:835)
JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Failed: timeout in 7749 ms, expected7750ms
OS: linux, windows

-----
Title: [JDK-8249831] Test sun/security/mscapi/nonUniqueAliases/NonUniqueAliases.java is marked with @ignore
Priority: P4
Type: Sub-task
Component: security-libs
Description: sun/security/mscapi/nonUniqueAliases/NonUniqueAliases.java has '@ignore Uses certutil.exe that isn't guaranteed to be installed'
canonically, @ignore should be followed by the id of the bug which describes the problem and will be used to eventually fix it.
the more appropriate solutions for a situation when tests do not meet special requirements is to throw jtreg.SkippedException

-----
Title: [JDK-8253440] serviceability/sa/TestJhsdbJstackLineNumbers.java failed with "Didn't find enough line numbers"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK16 CI:
serviceability/sa/TestJhsdbJstackLineNumbers.java
Here's a snippet from the log file:
Output and diagnostic info for process 1083748 was saved into 'pid-1083748-output.log'
- LingeredAppWithBusyWork.busywork(int[]) @bci=2, line=64 (Interpreted frame)
c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-16+17-754\\windows-x64-debug.jdk\\jdk-16\\fastdebug\\bin\\jhsdb.exe jstack --pid 1093388
[2020-09-21T15:42:53.761647500Z] Gathering output for process 1131356
[2020-09-21T15:42:56.819483300Z] Waiting for completion for process 1131356
[2020-09-21T15:42:56.819483300Z] Waiting for completion finished for process 1131356
Output and diagnostic info for process 1131356 was saved into 'pid-1131356-output.log'
- LingeredAppWithBusyWork.busywork(int[]) @bci=49, line=72 (Interpreted frame)
c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-16+17-754\\windows-x64-debug.jdk\\jdk-16\\fastdebug\\bin\\jhsdb.exe jstack --pid 1093388
[2020-09-21T15:42:56.835089900Z] Gathering output for process 1137008
[2020-09-21T15:42:59.942666700Z] Waiting for completion for process 1137008
[2020-09-21T15:42:59.942666700Z] Waiting for completion finished for process 1137008
Output and diagnostic info for process 1137008 was saved into 'pid-1137008-output.log'
- LingeredAppWithBusyWork.busywork(int[]) @bci=5, line=64 (Interpreted frame)
Found Line Numbers: [64, 69, 71, 72]
LingeredApp stdout: [];
LingeredApp stderr: []
LingeredApp exitValue = 0
LingeredAppWithBusyWork finished
----------System.err:(14/1030)----------
java.lang.RuntimeException: Failed: Didn't find enough line numbers: [64, 69, 71, 72]
at TestJhsdbJstackLineNumbers.runTest(TestJhsdbJstackLineNumbers.java:165)
at TestJhsdbJstackLineNumbers.main(TestJhsdbJstackLineNumbers.java:186)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Failed: Didn't find enough line numbers: [64, 69, 71, 72]
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed: Didn't find enough line numbers: [64, 69, 71, 72]
----------rerun:(49/5913)*----------
OS: windows

-----
Title: [JDK-8256211] assert fired in java/net/httpclient/DependentPromiseActionsTest (infrequent)
Priority: P4
Type: Bug
Component: core-libs
Description: The assertion that fires is at DependentPromiseActionsTest.java:366:
assert subscriberType == SubscriberType.LAZZY || !responseCF.isDone();
[2 s, 962 ms, 175524 ns] testAsStringAsync(https://localhost:62490/https2/fixed/y, true, SemaphoreStaller)
try stalling in BODY_HANDLER
Http2TestContext::handle Http2TestExchangeImpl: Http2TestExchangeImpl@7adafea8
HTTP_FixedLengthHandler received request to https://localhost:62490/https2/fixed/y
TestServer: [2 s, 966 ms, 259293 ns]  Pushing promise: https://localhost:62490/https2/fixed/y/before/promise-1
TestServer: [2 s, 966 ms, 894323 ns]  Pushing promise: https://localhost:62490/https2/fixed/y/after/promise-2
TestServer: [2 s, 967 ms, 343972 ns]  Pushing promise: https://localhost:62490/https2/fixed/y/after/promise-3
Found expected frame: java.net.http/jdk.internal.net.http.PrivilegedExecutor$PrivilegedRunnable.lambda$run$0(PrivilegedExecutor.java:60)
Found expected frame: java.net.http/jdk.internal.net.http.PrivilegedExecutor$PrivilegedRunnable.lambda$run$0(PrivilegedExecutor.java:60)
test DependentPromiseActionsTest.testAsStringAsync("https://localhost:62490/https2/fixed/y", true, SemaphoreStaller): failure
java.lang.AssertionError
at DependentPromiseActionsTest.testDependent(DependentPromiseActionsTest.java:366)
at DependentPromiseActionsTest.testDependent(DependentPromiseActionsTest.java:336)
at DependentPromiseActionsTest.testAsStringAsync(DependentPromiseActionsTest.java:295)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
at org.testng.TestRunner.privateRun(TestRunner.java:773)
at org.testng.TestRunner.run(TestRunner.java:623)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
at org.testng.SuiteRunner.run(SuiteRunner.java:259)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
at org.testng.TestNG.run(TestNG.java:1018)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:831)

-----
Title: [JDK-8258483] [TESTBUG] gtest CollectorPolicy.young_scaled_initial_ergo_vm fails if heap is too small
Priority: P4
Type: Bug
Component: hotspot
Description: If gtests are started with a small heap, this gtest fails:
```
thomas@mainframe:/shared/projects/openjdk/jdk-jdk/output-fastdebug$ ./hotspot/variant-server/libjvm/gtest/gtestLauncher -Xmx128m  -jdk:./images/jdk   --gtest_filter=CollectorPolicy.young_scaled_initial_ergo_vm
Note: Google Test filter = CollectorPolicy.young_scaled_initial_ergo_vm
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from CollectorPolicy
[ RUN      ] CollectorPolicy.young_scaled_initial_ergo_vm
[0,118s][warning][gc,ergo] Inconsistency between generation sizes and heap size, resizing the generations to fit the heap.
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:124: Failure
Expected equality of these values:
expected
Which is: 34930688
NewSize
Which is: 54525952
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:80: Failure
Expected: checker-execute() doesn't generate new fatal failures in the current thread.
Actual: it does.
[  FAILED  ] CollectorPolicy.young_scaled_initial_ergo_vm (0 ms)
[----------] 1 test from CollectorPolicy (119 ms total)
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (119 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] CollectorPolicy.young_scaled_initial_ergo_vm
```
It would be nice if the test would just be ignored if it cannot be run under these circumstances.

-----
Title: [JDK-8267174] Many test files have the wrong Copyright header
Priority: P4
Type: Bug
Component: infrastructure
Description: There are approximately 580 test files in the jdk repo with some erroneous license text.
The extra text that must be removed from those test files is:
'''  Oracle designates this particular file as subject to the "Classpath" exception as provided by Oracle in the LICENSE file that accompanied this code. '''
To find those files, one may use the following query in the root of the open repo:
```
grep -rl '"Classpath" exception' * | grep "^test/"
```

-----
Title: [JDK-8270269] Desktop.browse method fails if earlier CoInitialize call as COINIT_MULTITHREADED
Priority: P3
Type: Bug
Component: client-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Windows / Window 10/ JDK 16 and JDK 17ea
A DESCRIPTION OF THE PROBLEM :
Desktop.browse native peer implementation attempts to CoInitializeEx as COINIT_APARTMENTTHREADED and will fail if there has been a prior call (eg. via JNI)  to CoInitialize as COINIT_MULTITHREADED. This problem is new in JDK 16/17ea - see awt_Desktop.cpp:88 in JDK source for point of failure.
REGRESSION : Last worked in version 15
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a native /JNI call that calls CoInitializeEx(NULL, COINIT_MULTITHREADED) and call the native prior to calling Dekstop.getDesktop().browse(url).
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
URL will open in system assigned browser (JDK 15 and earlier)
ACTUAL -
Exception in thread "main" java.io.IOException: Failed to open https://www.google.com. Error message: CoInitializeEx() failed.
at java.desktop/sun.awt.windows.WDesktopPeer.ShellExecute(WDesktopPeer.java:115)
at java.desktop/sun.awt.windows.WDesktopPeer.browse(WDesktopPeer.java:101)
at java.desktop/java.awt.Desktop.browse(Desktop.java:530)
....
---------- BEGIN SOURCE ----------
// approximate example cpp and java since not sure what is expected for
// a native/java bug  test case
---- native ---
void Demo::initCom() {
HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
if (hr != S_FALSE)
EXIT_ON_ERROR(hr);    // some sort of handling
}
-- java ---
public static void main(String [] args) throws URISyntaxException, IOException {
Demo.initCom();
Desktop desktop = Desktop.getDesktop();
desktop.browse(new URI("https://www.google.com"));
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
No workaround found.
FREQUENCY : always
OS: windows

-----
Title: [JDK-8276995] Bug in jdk.jfr.event.gc.collection.TestSystemGC
Priority: P4
Type: Bug
Component: hotspot
Description: A DESCRIPTION OF THE PROBLEM :
In jdk.jfr.event.gc.collection.TestSystemGC the following line is repeated 3 times:
Events.assertField(event1, "invokedConcurrent").isEqual(concurrent);
The 2nd and 3rd occurrences should check 'event2' and 'event3' instead of 'event1'.
OS: generic

-----
Title: [JDK-8279016] JFR Leak Profiler is broken with Shenandoah
Priority: P3
Type: Enhancement
Component: hotspot
Description: The JFR leak profiler associates an Edge* with an object by putting the Edge* into an array, and storing the index to the Edge* into the object's mark-word, and setting the lowest two bits of that mark-word.
However, in Shenandoah, a similar scheme is used to indicate forwarding objects: the lowest two bits in object's mark are set, and the reference to the forwarding object in the upper bits of the header. We may go through the load-reference-barrier of an object that has an associated Edge* in BFSClosure::do_oop(), which would decode the assumed forwarding pointer, get the index instead of the reference, and eventually crash, when trying to dereference anything from there.
Notice that JDK-8275415 changed the association scheme from full Edge* in the mark-word to the index, but the general problem was pre-existing.
As an aside, in Shenandoah, we distinguish forwarding pointers from JVMTI heap-walk 'marked' objects by checking for the upper mark-bits to be NULL. JFR breaks this scheme (which is rather brittle in itself) by putting the Edge* association in the mark-word too.
We may want to consider something similar to: https://github.com/openjdk/lilliput/pull/18
OS: generic

-----
Title: [JDK-8280991] [XWayland] No displayChanged event after setDisplayMode call
Priority: P3
Type: Bug
Component: client-libs
Description: After setDisplayMode call window gets scaled correctly to requested resolution, however root window does not receive ConfigureNotify event, so java is unaware that screen size has changed. So this is the reason of failure of following tests:
FAIL: java/awt/FullScreen/FullscreenWindowProps/FullscreenWindowProps.java
FAIL: java/awt/FullScreen/NoResizeEventOnDMChangeTest/NoResizeEventOnDMChangeTest.java
Root cause:
"""
This is using XRandR which is also an X11 only protocol. Similarly to point #1, Xwayland is not the display server in Wayland, it's just a Wayland client and the Wayland compositor is the actual display server.
As Wayland clients are not allowed to change the resolution in Wayland (this is by design, it's not an oversight), XRandR in Xwayland is just an emulation, mostly read-only, it doesn't actually change the resolution.
For legacy games which relied on XRandR to adjust the screen size to their capacity, Xwayland will emulate that using a viewport to scale the (fullscreen, unreparented) window so it appears as if the resolution was changed, as you noticed, but the actual screen size doesn't change and therefore the root window is not resized and hence won't get a configure notify.
Also worth noting that the XRandR emulation is per window/X11 client, whereas the root window is shared between all X11 clients, but maybe we could send a fake ConfigureNotify event to the given client, I would need to check if that's doable.
"""
This MR (https://gitlab.freedesktop.org/xorg/xserver/-/merge_requests/731) adds notification, however it has several issues:
There is no event when you are trying to change to native resolution from another.
XRRScreenChangeNotifyEvent always has native resolution reported. (we are not using it though)
It might be a minor one, but on X11 session there is no events reported if you are trying to change to the same resolution.
Reported as https://gitlab.freedesktop.org/xorg/xserver/-/issues/1305
OS: linux

-----
Title: [JDK-8281511] java/net/ipv6tests/UdpTest.java fails with checkTime failed
Priority: P4
Type: Bug
Component: core-libs
Description: the test2 scenario fails due to the calculated timeout of a receive being greater than the imposed quasi realtime upper bound.
Test2 starting
checkTime: got = 10699 start = 4000 end = 4000
----------System.err:(13/669)----------
java.lang.RuntimeException: checkTime failed: got 10699, expected between 4000 and 4000
at Tests.checkTime(Tests.java:164)
at Tests.checkTime(Tests.java:155)
at UdpTest.test2(UdpTest.java:147)
at UdpTest.main(UdpTest.java:88)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.base/java.lang.Thread.run(Thread.java:833)
OS: windows

-----
Title: [JDK-8282726] java/net/vthread/BlockingSocketOps.java timeout/hang intermittently on Windows
Priority: P4
Type: Bug
Component: core-libs
Description: The following tests timeout periodically, usually Windows Server 2016 and 2019 :
java/net/vthread/BlockingSocketOps.java
java/nio/channels/vthread/BlockingChannelOps.java
com/sun/jdi/BadHandshakeTest.java

-----
Title: [JDK-8286204] [Accessibility,macOS,VoiceOver] VoiceOver reads the spinner value 10 as 1 when user iterates to 10 for the first time on macOS
Priority: P3
Type: Bug
Component: client-libs
Description: Step to reproduce
-------------------------
1) Enable VoiceOver on the MacOS
2) Run the attached test. You will a Frame with spinner.
3) Press Up arrow to increase the vale of the spinner. As you press the Up arrow spinner value are increasing and Voice Over should read the value correctly. Once the value is increased to 10 VoiceOver reads the 10 as 1 for the first time and once again pressing the Up arrow for the second time Voice Over reads the value as 10.
If you see the same then the bug is reproduced.
I have attached the screen recording about this issue.
OS: os_x

-----
Title: [JDK-8286789] Test forceEarlyReturn002.java timed out
Priority: P4
Type: Bug
Component: core-svc
Description: Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 36 80 00 00                  .......6...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout refired 480 times
OS: windows

-----
Title: [JDK-8286875] ProgrammableUpcallHandler::on_entry/on_exit access thread fields from native
Priority: P4
Type: Bug
Component: core-libs
Description: ProgrammableUpcallHandler::on_entry modifies:
context-new_handles = JNIHandleBlock::allocate_block(thread);
thread-clear_pending_exception();
Before transitioning to Java. Which means there can be a concurrent safepoint/handshake.
ProgrammableUpcallHandler::on_exit modify and access same fields here:
JNIHandleBlock::release_block(context-new_handles, thread);
assert(!thread-has_pending_exception(), "Upcall can not throw an exception");
After transitioning back to native.
E.g. _free_handle_block, _pending_exception.
This have two issues:
- Is it safe today? I traced some code and FAICT it is.
- These fields are now only allowed to be modified in a safepoint/handshake if target thread is waiting for the safepoint/handshake or by the thread it self. (I.e. it is not enough that thread is safepoint safe, it must actively be waiting for the safepoint/handshake)
Is this a restriction that we want, and am I correct in saying that is safe?

-----
Title: [JDK-8294155] Exception thrown before awaitAndCheck hangs PassFailJFrame
Priority: P4
Type: Bug
Component: client-libs
Description: If an exception is thrown before awaitAndCheck is called, the test will hang eventually. Clicking the Pass/Fail buttons doesn't close the UI since it's inside awaitAndCheck. This needs to be addressed when redesigning the framework.

-----
Title: [JDK-8295804] javax/swing/JFileChooser/JFileChooserSetLocationTest.java failed with "setLocation() is not working properly"
Priority: P4
Type: Bug
Component: client-libs
Description: The following test failed in the JDK20 CI:
javax/swing/JFileChooser/JFileChooserSetLocationTest.java
Here's a snippet from the log file:
#section:main
----------messages:(7/293)----------
command: main JFileChooserSetLocationTest
reason: User specified action: run main JFileChooserSetLocationTest
started: Fri Oct 21 16:14:49 UTC 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Fri Oct 21 16:14:59 UTC 2022
elapsed time (seconds): 9.573
----------configuration:(3/40)----------
Boot Layer
add modules: java.desktop
----------System.out:(28/929)----------
Testing javax.swing.plaf.metal.MetalLookAndFeel
createDialog and set location to (75, 75)
verify 75==75; 75==75
Test passed
createDialog and set location to (512, 217)
verify 512==507; 217==217
Test passed
createDialog and set location to (512, 217)
verify 512==507; 217==217
Test passed
Test Passed, All cases passed for javax.swing.plaf.metal.MetalLookAndFeel
Testing javax.swing.plaf.nimbus.NimbusLookAndFeel
createDialog and set location to (75, 75)
verify 75==75; 75==75
Test passed
createDialog and set location to (512, 218)
verify 512==512; 218==218
Test passed
createDialog and set location to (512, 218)
verify 512==512; 218==218
Test passed
Test Passed, All cases passed for javax.swing.plaf.nimbus.NimbusLookAndFeel
Testing com.sun.java.swing.plaf.motif.MotifLookAndFeel
createDialog and set location to (75, 75)
verify 75==75; 75==75
Test passed
createDialog and set location to (512, 222)
verify 512==512; 222==211
----------System.err:(12/812)----------
java.lang.RuntimeException: Test Failed, setLocation() is not working properly
at JFileChooserSetLocationTest.verify(JFileChooserSetLocationTest.java:184)
at JFileChooserSetLocationTest.main(JFileChooserSetLocationTest.java:136)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1591)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Failed, setLocation() is not working properly
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test Failed, setLocation() is not working properly
----------rerun:(43/5324)*----------
There is another unresolved bug for this same test, but that bug is
tracking a different failure mode:
JDK-8289895 JFileChooserSetLocationTest.java always fails in a single Windows machine
OS: linux

-----
Title: [JDK-8297692] Avoid sending per-region GCPhaseParallel JFR events in G1ScanCollectionSetRegionClosure
Priority: P4
Type: Enhancement
Component: hotspot
Description: In G1ScanCollectionSetRegionClosure::do_heap_region(...) we send JFR events on a per-region basis which lead to a lot of events. The reason we don't send the event for the whole iteration is because the closure includes two phases: OptScanHR and CodeRoots/OptCodeRoots.
We can solve this in at least two different ways, we could add a new phase that is named to signal it does both things or we could create a new event that can include two different durations for the two included phases.

-----
Title: [JDK-8303770] Remove Baltimore root certificate expiring in May 2025
Priority: P3
Type: Task
Component: security-libs
Description: baltimorecybertrustca [jdk]
Expiry Date: 2025-05-12
CN=Baltimore CyberTrust Root, OU=CyberTrust, O=Baltimore, C=IE

-----
Title: [JDK-8305010] Test vmTestbase/nsk/jvmti/scenarios/sampling/SP05/sp05t003/TestDescription.java timed out: thread not suspended
Priority: P4
Type: Bug
Component: hotspot
Description: ----------System.out:(9/534)----------
The following fake exception stacktrace is for failure analysis.
nsk.share.Fake_Exception_for_RULE_Creation: (sp05t003.cpp:220) jvmti-ResumeThread(threadsList[i])
at nsk_lvcomplain(nsk_tools.cpp:172)
# ERROR: sp05t003.cpp, 220: jvmti-ResumeThread(threadsList[i])
#   jvmti error: code=13, name=JVMTI_ERROR_THREAD_NOT_SUSPENDED
# ERROR: agent_tools.cpp, 324: No status sync occured for timeout: 300000 ms
# ERROR: sp05t003.cpp, 195: nsk_jvmti_waitForSync(timeout)
#   verified assertion is FALSE
Timeout refired 480 times
OS: generic

-----
Title: [JDK-8307318] Test serviceability/sa/ClhsdbCDSJstackPrintAll.java failed: ArrayIndexOutOfBoundsException
Priority: P3
Type: Bug
Component: hotspot
Description: stderr: [Error: java.lang.ArrayIndexOutOfBoundsException: -1 2
java.lang.ArrayIndexOutOfBoundsException: -1 2
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ResolvedIndyArray.getAt(ResolvedIndyArray.java:60)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPoolCache.getIndyEntryAt(ConstantPoolCache.java:91)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.implNameAndTypeRefIndexAt(ConstantPool.java:315)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.implGetSignatureRefAt(ConstantPool.java:288)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getSignatureRefAt(ConstantPool.java:280)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doMethod(GenerateOopMap.java:1730)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interp1(GenerateOopMap.java:1385)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpBB(GenerateOopMap.java:802)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpAll(GenerateOopMap.java:1108)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doInterpretation(GenerateOopMap.java:981)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.computeMap(GenerateOopMap.java:2198)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapForCacheEntry.computeMap(OopMapForCacheEntry.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.fill(OopMapCacheEntry.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.Method.getMaskFor(Method.java:257)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpretedVFrame.getLocals(InterpretedVFrame.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.ui.classbrowser.HTMLGenerator.genHTMLForJavaStackTrace(HTMLGenerator.java:1936)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$45.doit(CommandProcessor.java:1660)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

-----
Title: [JDK-8307824] Clean up Finalizable.java and finalize terminology in vmTestbase/nsk/share
Priority: P4
Type: Enhancement
Component: hotspot
Description: These test used finalize() with classes Finalizable/Finalizer/FinalzableObject and the method finalizeAtExit().
There is no longer finalize(), and these classes should be renamed.

-----
Title: [JDK-8308033] The jcmd thread dump related tests should test virtual threads
Priority: P4
Type: Bug
Component: core-svc
Description: There are a few jcmd tests that verify stack dumps. They fail with the virtual thread test factory because virtual threads are not included in stack dumps. Need to fix them when jcmd has corresponding options, or avoid running them with virtual threads.
Tests:
sun/tools/jcmd/JcmdOutputEncodingTest.java
serviceability/dcmd/thread/PrintConcurrentLocksTest.java
serviceability/dcmd/thread/PrintTest.java
serviceability/dcmd/thread/ThreadDumpToFileTest.java
+

-----
Title: [JDK-8308966] Add intrinsic for float/double modulo for x86 AVX2 and AVX512
Priority: P4
Type: Enhancement
Component: hotspot
Description: Adding an intrinsic for float/double modulus operations for x86.  This addresses a performance degradation and removes dependence on x87 floating point for platforms that support AVX.
OS: generic

-----
Title: [JDK-8309667] TLS handshake fails because of ConcurrentModificationException in PKCS12KeyStore.engineGetEntry
Priority: P4
Type: Bug
Component: security-libs
Description: Many HTTPClient tests are occasionally failing with the following stack trace:
javax.net.ssl.SSLHandshakeException: No available authentication scheme
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:130)
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:365)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:321)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.onProduceCertificate(CertificateMessage.java:967)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.produce(CertificateMessage.java:956)
at java.base/sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:437)
at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.goServerHello(ClientHello.java:1245)
at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.consume(ClientHello.java:1181)
at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:839)
at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:800)
at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:393)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:476)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:447)
at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:201)
at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1506)
at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1421)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:426)
at jdk.httpclient.test.lib.http2.Http2TestServerConnection.handshake(Http2TestServerConnection.java:317)
at jdk.httpclient.test.lib.http2.Http2TestServerConnection.(Http2TestServerConnection.java:165)
at jdk.httpclient.test.lib.http2.Http2TestServer.createConnection(Http2TestServer.java:389)
at jdk.httpclient.test.lib.http2.Http2TestServer$AcceptedConnection.startConnection(Http2TestServer.java:306)
The failing tests include:
java/net/httpclient/ManyRequests.java
java/net/httpclient/ManyRequests2.java
java/net/httpclient/LargeResponseTest.java
Additional logging revealed that the handshake failures were caused by this exception:
java.util.ConcurrentModificationException
at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1605)
at java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1628)
at java.base/java.util.AbstractCollection.addAll(AbstractCollection.java:337)
at java.base/java.util.HashSet.(HashSet.java:121)
at java.base/java.security.KeyStore$PrivateKeyEntry.(KeyStore.java:569)
at java.base/sun.security.pkcs12.PKCS12KeyStore.engineGetEntry(PKCS12KeyStore.java:1338)
at java.base/sun.security.util.KeyStoreDelegator.engineGetEntry(KeyStoreDelegator.java:174)
at java.base/java.security.KeyStore.getEntry(KeyStore.java:1576)
at java.base/sun.security.ssl.X509KeyManagerImpl.getEntry(X509KeyManagerImpl.java:271)
at java.base/sun.security.ssl.X509KeyManagerImpl.getPrivateKey(X509KeyManagerImpl.java:117)
at java.base/sun.security.ssl.X509Authentication.createServerPossession(X509Authentication.java:300)
at java.base/sun.security.ssl.X509Authentication.createPossession(X509Authentication.java:195)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.choosePossession(CertificateMessage.java:1056)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.onProduceCertificate(CertificateMessage.java:965)
which in turn is caused by PKCS12KeyStore.getAttributes updating the same HashSet over and over again in multiple threads.

-----
Title: [JDK-8309841] Jarsigner should print a warning if an entry is removed
Priority: P3
Type: Enhancement
Component: security-libs
Description: If an entry is removed after a JAR file is signed, running `jarsigner -verify` on the file does not show any error info.

-----
Title: [JDK-8309978] [x64] Fix useless padding
Priority: P4
Type: Enhancement
Component: hotspot
Description: Due to typo in IntelJccErratum::compute_padding() useless padding could be generated:
030     B2: #   out( B4 B3 )
OS: generic

-----
Title: [JDK-8310066] Improve test coverage for JVMTI GetThreadState on carrier and mounted vthread
Priority: P4
Type: Enhancement
Component: hotspot
Description: This is follow-up for JDK-8307153/JDK-8309612
Current GetThreadState test coverage for carrier thread + mounted virtual thread is limited -  serviceability/jvmti/vthread/ThreadStateTest tests only JVMTI_THREAD_STATE_RUNNABLE state
Need to improve the test (or implement new one) to test other states, including "suspended" and "interrupted" bits (it's unclear if "interrupted" makes sense for carrier thread)
OS: generic

-----
Title: [JDK-8310525] DynamicLauncher for JDP test needs to try harder to find a free port
Priority: P4
Type: Enhancement
Component: core-svc
Description: test/jdk/sun/management/jdp/DynamicLauncher.java uses Utils.getFreePort() to find a free port for JMX.  It limits itself to 3 attempts.  This is not always enough, and the test fails.
Some other tests may simply pick a port number, and increment it and keep trying even hundreds of times.

-----
Title: [JDK-8310643] Misformatted copyright messages in FFM
Priority: P5
Type: Bug
Component: core-libs
Description: Many of the copyright messages in the FFM API and implementation classes are not well formatted. We should have the same messages in all files. This includes test files as well.

-----
Title: [JDK-8312246] NPE when HSDB visits bad oop
Priority: P4
Type: Bug
Component: hotspot
Description: During investigation of a customer core file with graphic SA, it printed in stack memory:
````
Error while performing oopsDo for frame sp: 0x00007f2c602378f0, unextendedSP: 0x00007f2c602378f0, fp: 0x00007f2c60237938, pc: 0x00007f2c47e2b88a
java.lang.NullPointerException: Cannot invoke "sun.jvm.hotspot.gc.g1.HeapRegion.isFree()" because "region" is null
at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34$1.addAnnotation(HSDB.java:1099)
at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34$1.visitAddress(HSDB.java:1059)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpreterFrameClosure.offsetDo(Frame.java:675)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.iterateOop(OopMapCacheEntry.java:38)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.oopsInterpretedDo(Frame.java:591)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.oopsDo(Frame.java:442)
at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34.run(HSDB.java:1052)
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.WorkerThread$MainLoop.run(WorkerThread.java:70)
at java.base/java.lang.Thread.run(Thread.java:1570
﻿﻿````
The reproducer is attached.
1. Compile and launch it with G1 enabled.
2. Attach HSDB
3. Select "main" thread
4. Click "Stack Memory" icon on "Java Threads" toolbar.
The fix is trivial (will create PR soon):
diff --git a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
index 9cc51934d08..e59c3da379e 100644
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
@@ -1096,7 +1096,9 @@ public class HSDB implements ObjectHistogramPanel.Listener, SAListener {
G1CollectedHeap heap = (G1CollectedHeap)collHeap;
HeapRegion region = heap.hrm().getByAddress(handle);
-                          if (region.isFree()) {
+                          if (region == null) {
+                              anno = "NOTG1REGION";
+                          } else if (region.isFree()) {
anno = "Free ";
bad = false;
} else if (region.isYoung()) {

-----
Title: [JDK-8312475] org.jline.util.PumpReader signed byte problem
Priority: P4
Type: Bug
Component: tools
Description: SonarCloud reports a problem in PumpReader here:
https://github.com/openjdk/jdk/blob/354c6605e32790ca421869636d8bf5456fc51717/src/jdk.internal.le/share/classes/jdk/internal/org/jline/utils/PumpReader.java#L417
@Override
public int read() throws IOException {
if (!buffer.hasRemaining() && !readUsingBuffer()) {
return EOF;
}
return buffer.get(); //

-----
Title: [JDK-8313290] Misleading exception message from STS.Subtask::get when task forked after shutdown
Priority: P4
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Ubuntu 22.04
openjdk 21-ea 2023-09-19
OpenJDK Runtime Environment (build 21-ea+32-2482)
OpenJDK 64-Bit Server VM (build 21-ea+32-2482, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
When using a StructuredTaskScope after shutdown, I get a misleading error message when calling Subtask.get(): "IllegalStateException: Owner did not join after forking subtasks".
See example code below. In the code, join() is called right before Subtask.get(), so the error message is clearly not incorrect (in addition to not being helpful).
I'd expect an exception that indicates that the StructuredTaskScope is already shutdown.
Obviously, this is a rather unlikely usage pattern (shutdown() + fork()), but there might be more meaningful cases where this occurs, and then a better exception message might be helpful.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See example code.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
An exception that indicates that the StructuredTaskScope is shutdown.
ACTUAL -
Exception in thread "main" java.lang.IllegalStateException: Owner did not join after forking subtasks
at java.base/java.util.concurrent.StructuredTaskScope.newIllegalStateExceptionNoJoin(StructuredTaskScope.java:439)
at java.base/java.util.concurrent.StructuredTaskScope.ensureJoinedIfOwner(StructuredTaskScope.java:477)
at java.base/java.util.concurrent.StructuredTaskScope$SubtaskImpl.get(StructuredTaskScope.java:927)
at com.example.Test.main(Test.java:17)
---------- BEGIN SOURCE ----------
import java.util.concurrent.ExecutionException;
import java.util.concurrent.StructuredTaskScope;
public class Test {
public static void main(String[] args) {
try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {
scope.shutdown();
StructuredTaskScope.Subtask subtask = scope.fork(() - "result");
scope.join().throwIfFailed();
subtask.get(); // IllegalStateException: Owner did not join after forking subtasks
} catch (InterruptedException | ExecutionException e) {
throw new RuntimeException(e);
}
}
}
---------- END SOURCE ----------
FREQUENCY : always
OS: generic

-----
Title: [JDK-8313430] [JVMCI] fatal error: Never compilable: in JVMCI shutdown
Priority: P4
Type: Bug
Component: hotspot
Description: VM shutdown involves calling Java code which can schedule further compilations by the CompileBroker. With UseJVMCICompiler, all compilations started once VM shutdown has begun are abandoned since they are unnecessary and can even delay VM shutdown from completing.
The implementation of -XX:+AbortVMOnCompilationFailure should ignore such abandoned compilations to prevent crashes such as:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (compileBroker.cpp:2096), pid=303361, tid=303384
#  fatal error: Never compilable: in JVMCI shutdown
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (build 21-internal-LTS-2023-07-18-1316304.gergo...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-internal-LTS-2023-07-18-1316304.gergo..., mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6452d9]  CompileBroker::handle_compile_error(CompilerThread*, CompileTask*, ciEnv*, int, char const*) [clone .part.0]+0x29
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /home/gergo/galahad-ee/galahad-ee/build/linux-x64/test-support/jtreg_open_test_hotspot_jtreg_compiler_intrinsics_TestRotate_java/scratch/core.303361)
#

-----
Title: [JDK-8313654] Test WaitNotifySuspendedVThreadTest.java timed out
Priority: P4
Type: Bug
Component: hotspot
Description: Possibly a different manifestation of JDK-8313570
----------System.out:(9/354)----------
setting event callbacks ...
setBreakpoint: started
setBreakpoint: finished
Main thread: suspending virtual and carrier threads
Main thread: calling monitor.notifyAll()
Main thread: resuming virtual thread
Main thread: before monitor_completed.wait()
Breakpoint: before monitor.wait(): methBreakpoint in virtual thread
Timeout refired 1200 times
----------System.err:(0/0)----------
----------rerun:(51/7397)*----------

-----
Title: [JDK-8314056] Remove runtime platform check from frem/drem
Priority: P4
Type: Enhancement
Component: hotspot
Description: This fix adds about 4% performance by removing the runtime platform type check and moving code to stubGenerator.
OS: generic

-----
Title: [JDK-8314136] Test java/net/httpclient/CancelRequestTest.java failed: WARNING: tracker for HttpClientImpl(42) has outstanding operations
Priority: P4
Type: Bug
Component: core-libs
Description: step [0] found in HttpClientImpl(41) in 245 ms
Sending: https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1
[22 s, 73 ms, 871125 ns]  Interrupting main from: Thread[#81,pool-1-thread-7,5,MainThreadGroup] (https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1)
https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1: got result or exception
https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1: Got expected exception: java.lang.InterruptedException
next iteration
Waiting for HTTP operations to terminate...
gracedelay: 1000 ms, iterations: 100, wait/iteration: 10ms
WARNING: tracker for HttpClientImpl(42) has outstanding operations:
Pending HTTP Requests: 1
Pending HTTP/1.1 operations: 1
Pending HTTP/2 streams: 0
Pending WebSocket operations: 0
Pending TCP connections: 0
Pending Subscribers: 0
Total pending operations: 1
Facade referenced: true
Selector alive: true
AssertionError: Found some subscribers for testPostInterrupt(https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1)
step [1] in HttpClientImpl(42) after 100 iterations and 7274 ms, waited 1000 ms
test CancelRequestTest.testPostInterrupt("https://127.0.0.1:52305/https1/x/new/interruptThread", false): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(42) has outstanding operations:
Pending HTTP Requests: 1
Pending HTTP/1.1 operations: 1
Pending HTTP/2 streams: 0
Pending WebSocket operations: 0
Pending TCP connections: 0
Pending Subscribers: 0
Total pending operations: 1
Facade referenced: true
Selector alive: true
at ReferenceTracker.check(ReferenceTracker.java:251)
at CancelRequestTest.testPostInterrupt(CancelRequestTest.java:579)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1570)

-----
Title: [JDK-8314236] Overflow in Collections.rotate
Priority: P4
Type: Bug
Component: core-libs
Description: An integer overflow/wraparound in Collections.rotate() can lead to IndexOutOfBoundsException. Reproducer:
// need something like -Xmx16g
Collections.rotate(new ArrayList(Collections.nCopies((1https://github.com/openjdk/jdk/pull/15270

-----
Title: [JDK-8314319] LogCompilation doesn't reset lateInlining when it encounters a failure.
Priority: P4
Type: Bug
Component: hotspot
Description: here is the stacktrace.
➜  LogCompilation git:(master) ✗ java -jar ./target/LogCompilation-1.0-SNAPSHOT.jar jit.xml
java.lang.InternalError: Unexpected method mismatch during late inlining (method at call site: java.util.LinkedHashMap$LinkedHashIterator::hasNext (13 bytes), method being parsed: java.util.AbstractCollection::addAll (42 bytes)) at 29018:56
at com.sun.hotspot.tools.compiler.LogParser.reportInternalError(LogParser.java:643)
at com.sun.hotspot.tools.compiler.LogParser.reportInternalError(LogParser.java:623)
at com.sun.hotspot.tools.compiler.LogParser.startElement(LogParser.java:1224)
at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:518)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1407)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2726)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:605)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:542)
at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:889)
at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:825)
at java.xml/com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1224)
at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:637)
at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.parse(SAXParserImpl.java:326)
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:706)
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:684)
at com.sun.hotspot.tools.compiler.LogCompilation.main(LogCompilation.java:145)
Exception in thread "main" java.lang.InternalError: only nmethods should have a null compilation, here's a class com.sun.hotspot.tools.compiler.UncommonTrapEvent
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:723)
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:684)
at com.sun.hotspot.tools.compiler.LogCompilation.main(LogCompilation.java:145)
OS: generic

-----
Title: [JDK-8314840] 3 gc/epsilon tests ignore external vm options
Priority: P4
Type: Sub-task
Component: hotspot
Description: Tests
gc/epsilon/TestDieDefault.java
gc/epsilon/TestDieWithHeapDump.java
gc/epsilon/TestDieWithOnError.java
ignore vm flags and should be fixed or marked as flagless.

-----
Title: [JDK-8314842] zgc/genzgc tests ignore vm flags
Priority: P4
Type: Sub-task
Component: hotspot
Description: Tests
gc/z/TestSmallHeap.java
gc/z/TestPageCacheFlush.java
gc/z/TestAllocateHeapAt.java
gc/x/TestSmallHeap.java
gc/x/TestPageCacheFlush.java
gc/x/TestAllocateHeapAt.java
silently ignore vm flags.
Although, they have requires ZGC/genZGC they still ignores any other flags

-----
Title: [JDK-8315128] jdk/jfr/event/runtime/TestResidentSetSizeEvent.java fails with "The size should be less than or equal to peak"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
jdk/jfr/event/runtime/TestResidentSetSizeEvent.java
Here's a snippet from the log file:
#section:main
----------messages:(7/432)----------
command: main -Xms16m -Xmx128m -Xlog:gc jdk.jfr.event.runtime.TestResidentSetSizeEvent true
reason: User specified action: run main/othervm -Xms16m -Xmx128m -Xlog:gc jdk.jfr.event.runtime.TestResidentSetSizeEvent true
started: Mon Aug 28 14:18:39 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.management
finished: Mon Aug 28 14:18:41 GMT 2023
elapsed time (seconds): 2.128
----------configuration:(3/50)----------
Boot Layer
add modules: jdk.jfr jdk.management
----------System.out:(30/2293)----------
[0.011s][info][gc] Using G1
[0.774s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 9M-2M(18M) 4.672ms
[1.103s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 8M-3M(18M) 3.873ms
[1.284s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 10M-5M(18M) 1.756ms
[1.305s][info][gc] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 10M-10M(18M) 2.698ms
[1.318s][info][gc] GC(4) Pause Young (Concurrent Start) (G1 Evacuation Pause) 11M-12M(18M) 1.016ms
[1.318s][info][gc] GC(5) Concurrent Mark Cycle
[1.326s][info][gc] GC(5) Pause Remark 12M-12M(24M) 1.409ms
[1.328s][info][gc] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 13M-13M(24M) 1.308ms
[1.329s][info][gc] GC(5) Pause Cleanup 13M-13M(24M) 0.056ms
[1.330s][info][gc] GC(5) Concurrent Mark Cycle 11.899ms
[1.333s][info][gc] GC(7) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 15M-15M(24M) 1.235ms
[1.335s][info][gc] GC(8) Pause Young (Mixed) (G1 Evacuation Pause) 16M-16M(49M) 1.144ms
[1.349s][info][gc] GC(9) Pause Young (Normal) (G1 Evacuation Pause) 26M-26M(49M) 4.119ms
[1.355s][info][gc] GC(10) Pause Young (Concurrent Start) (G1 Evacuation Pause) 32M-33M(49M) 3.738ms
[1.355s][info][gc] GC(11) Concurrent Mark Cycle
[1.381s][info][gc] GC(12) Pause Young (Normal) (G1 Evacuation Pause) 37M-38M(49M) 2.746ms
[1.383s][info][gc] GC(13) Pause Young (Normal) (G1 Evacuation Pause) 40M-40M(81M) 1.430ms
[1.400s][info][gc] GC(11) Pause Remark 51M-51M(87M) 3.852ms
[1.415s][info][gc] GC(14) Pause Young (Normal) (G1 Evacuation Pause) 51M-52M(87M) 4.638ms
[1.428s][info][gc] GC(11) Pause Cleanup 54M-54M(87M) 0.283ms
[1.429s][info][gc] GC(11) Concurrent Mark Cycle 74.393ms
[1.438s][info][gc] GC(15) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 62M-62M(87M) 5.704ms
[1.456s][info][gc] GC(16) Pause Young (Mixed) (G1 Evacuation Pause) 69M-69M(87M) 4.723ms
[1.459s][info][gc] GC(17) Pause Young (Concurrent Start) (G1 Evacuation Pause) 73M-74M(87M) 2.501ms
[1.459s][info][gc] GC(18) Concurrent Mark Cycle
[1.488s][info][gc] GC(18) Pause Remark 75M-75M(127M) 1.388ms
[1.513s][info][gc] GC(18) Pause Cleanup 75M-75M(127M) 0.102ms
[1.524s][info][gc] GC(18) Concurrent Mark Cycle 64.673ms
[1.660s][info][gc] GC(19) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 77M-75M(127M) 2.872ms
----------System.err:(14/1064)----------
java.lang.RuntimeException: The size should be less than or equal to peak: expected that 88915968
OS: os_x

-----
Title: [JDK-8315484] java/awt/dnd/RejectDragDropActionTest.java timed out
Priority: P4
Type: Bug
Component: client-libs
Description: The following test timed out in the JDK22 CI:
java/awt/dnd/RejectDragDropActionTest.java
Here's a snippet from the log file:
#section:main
----------messages:(9/348)----------
command: main RejectDragDropActionTest
reason: User specified action: run main RejectDragDropActionTest
started: Thu Aug 31 19:09:45 UTC 2023
Mode: othervm
Additional options from @modules: --add-modules java.desktop
Timeout information:
--- Timeout information end.
finished: Thu Aug 31 19:15:17 UTC 2023
elapsed time (seconds): 332.739
----------configuration:(3/43)----------
Boot Layer
add modules: java.desktop
----------System.out:(1/37)----------
Timeout signalled after 240 seconds
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(50/5513)*----------
result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-22+14-966\windows-x64.jdk\jdk-22\bin\java' timed out (timeout set to 240000ms, elapsed time including timeout handling was 332717ms).
Default timeout value of 120 seconds/2 minutes with a default timeoutFactor
of 2 means a total timeout of 240 seconds/4 minutes. The run executed
for 332.739 seconds. The test did manage to pass while the timeout handler
was running. I think this test needs a slightly longer default timeout value.
Perhaps use timeout=180.
OS: windows

-----
Title: [JDK-8315669] Open source several Swing PopupMenu related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these Swing PopupMenu related tests:
javax/swing/JPopupMenu/4236750/bug4236750.java
javax/swing/JPopupMenu/4321273/bug4321273.java
javax/swing/JPopupMenu/4711693/bug4711693.java
javax/swing/JPopupMenu/4962731/bug4962731.java
javax/swing/JPopupMenu/4966109/bug4966109.java
javax/swing/JPopupMenu/5091257/bug5091257.java
OS: generic

-----
Title: [JDK-8315742] Open source several Swing Scroll related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these Swing Scroll related tests:
javax/swing/JScrollBar/4495822/bug4495822.java
javax/swing/JScrollBar/4696826/bug4696826.java
javax/swing/JScrollBar/4842792/bug4842792.java
javax/swing/JScrollPane/4247092/bug4247092.java
javax/swing/JScrollPane/4264640/bug4264640.java
javax/swing/JScrollPane/4467063/bug4467063.java
OS: generic

-----
Title: [JDK-8315827] Kitchensink.java and RenaissanceStressTest.java  time out with jvmti module errors
Priority: P2
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
applications/kitchensink/Kitchensink.java
Here's a snippet from the log file:
[2023-09-06T21:41:51.523634106Z] Gathering output for process 2528074
[2023-09-06T21:41:57.709835799Z] Waiting for completion for process 2528074
[2023-09-06T21:41:57.710031639Z] Waiting for completion finished for process 2528074
[stress.process.out] [512.838s][error][jvmti] _VTMS_transition_count: 1
[stress.process.out]
[stress.process.out] [512.838s][error][jvmti] _VTMS_transition_disable_for_one_count: 0
[stress.process.out]
[stress.process.out] [512.838s][error][jvmti] _VTMS_transition_disable_for_all_count: 1
[stress.process.out]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] main(main) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait0(long):-1
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait(long):375
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Thread.join(long):2045
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Thread.join():2121
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.modules.StressModule.joinModule():278
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.modules.StressModule.allJoin():349
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.Main.run(java.lang.String[]):97
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.Main.main(java.lang.String[]):156
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Reference Handler(Reference Handler) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Reference.waitForReferencePendingList():-1
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Reference.processPendingReferences():246
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Reference$ReferenceHandler.run():208
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Finalizer(Finalizer) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait0(long):-1
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait(long):375
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait():348
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.NativeReferenceQueue.await():48
[stress.process.out] [512.839s][error][jvmti]   java.lang.ref.Reference java.lang.ref.ReferenceQueue.remove0():158
[stress.process.out] [512.839s][error][jvmti]   java.lang.ref.Reference java.lang.ref.NativeReferenceQueue.remove():89
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Finalizer$FinalizerThread.run():173
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Signal Dispatcher(Signal Dispatcher) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Attach Listener(Attach Listener) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Service Thread(Service Thread) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Monitor Deflation Thread(Monitor Deflation Thread) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[2023-09-06T21:42:57.717213657Z] Gathering output for process 2528384
[2023-09-06T21:42:57.726416155Z] Waiting for completion for process 2528384
[2023-09-06T21:42:57.726596555Z] Waiting for completion finished for process 2528384
I'm starting this bug in hotspot/test so [~lmesnik] can take a look.
OS: linux

-----
Title: [JDK-8315871] Opensource five more Swing regression tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opensource and cleanup five Swing regression tests:
javax/swing/AncestorNotifier/4817630/bug4817630.java
javax/swing/BoxLayout/4191948/bug4191948.java
javax/swing/ComponentInputMap/4248723/bug4248723.java
javax/swing/DefaultBoundedRangeModel/4297953/bug4297953.java
javax/swing/DefaultButtonModel/4097723/bug4097723.java

-----
Title: [JDK-8315876] Open source several Swing CSS related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several Swing CSS related tests

-----
Title: [JDK-8315951] Open source several Swing HTMLEditorKit related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several Swing Text related tests

-----
Title: [JDK-8315981] Opensource five more random Swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opensource following tests:
javax/swing/DefaultListCellRenderer/4180943/bug4180943.java
javax/swing/DefaultListModel/4466250/bug4466250.java
javax/swing/DefaultListSelectionModel/4140619/bug4140619.java
javax/swing/DefaultListSelectionModel/4177723/bug4177723.java
javax/swing/ImageIcon/4827074/bug4827074.java

-----
Title: [JDK-8316061] Open source several Swing RootPane and Slider related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these Swing PopupMenu related tests:
javax/swing/JRootPane/4207333/bug4207333.java
javax/swing/JRootPane/4224113/bug4224113.java
javax/swing/JRootPane/4627806/bug4627806.java
javax/swing/JSlider/4200901/bug4200901.java
javax/swing/JSlider/4203754/bug4203754.java
OS: generic

-----
Title: [JDK-8316324] Opensource five miscellaneous Swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and opensource five tests:
javax/swing/plaf/motif/InternalFrame/4150591/bug4150591.java
javax/swing/InputVerifier/4774166/bug4774166.java
javax/swing/JButton/4385611/bug4385611.java
javax/swing/JButton/DefaultButtonLeak/DefaultButtonLeak.java
javax/swing/JComponent/4706883/bug4706883.java

-----
Title: [JDK-8316388] Opensource five Swing component related regression tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opensource five tests:
javax/swing/JDesktopPane/4132993/bug4132993.java
javax/swing/JDesktopPane/4773378/bug4773378.java
javax/swing/JEditorPane/4325606/bug4325606.java
javax/swing/JEditorPane/4330998/bug4330998.java
javax/swing/JEditorPane/4694598/bug4694598.java

-----
Title: [JDK-8316452] java/lang/instrument/modules/AppendToClassPathModuleTest.java ignores VM flags
Priority: P4
Type: Sub-task
Component: core-svc
Description: Test
java/lang/instrument/modules/AppendToClassPathModuleTest.java
should be update to accept VM flags or mark it as vm.flagless.

-----
Title: [JDK-8316497] ColorConvertOp - typo for non-ICC conversions needs one-line fix
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
There is a very simple typo in java/awt/image/ColorConvertOp.java - which has been there since - probably - forever, but at least Java 8. Line 288 has
color = srcColorSpace.fromCIEXYZ(dstColor);
it should be
color = dstColorSpace.fromCIEXYZ(dstColor);
This is immediately obvious if you look at it, and is such a simple fix. Clearly the conversion will currently be at best incorrect, but will most-likely crash.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8316580] HttpClient with StructuredTaskScope does not close when a task fails
Priority: P4
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
MacBook Pro 2019 - 2,4 GHz 8-Core Intel Core i9
macOs Ventura 13.5.2 (22G91) - latest
JDK 21 x64 from https://www.oracle.com/java/technologies/downloads/#jdk21-mac - latest GA 20.9.2023
OpenJDK 21 build 35 from https://jdk.java.net/21/
A DESCRIPTION OF THE PROBLEM :
I created a simple Http GET performance testing tool using HttpClient with StructuredTaskScope.
When the tool sends over 65 concurrent requests without delay to a localhost port which does not have anything listening, HttpClient is not able to release locks and the program does not exit. With low amount of requests this happens randomly and increasing request count makes the issue happen always. If there is something responding from the port, the tool exits normally.
If I check the thread dump, the main thread is stuck on
jdk.internal.net.http.HttpClientFacade.close
"main" #1 [10243] prio=5 os_prio=31 cpu=401.70ms elapsed=4.47s tid=0x00007fdde1809c00 nid=10243 in Object.wait()  [0x000070000eec7000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait0(java.base@21/Native Method)
- waiting on  (a jdk.internal.net.http.HttpClientImpl$SelectorManager)
at java.lang.Object.wait(java.base@21/Object.java:366)
at java.lang.Thread.join(java.base@21/Thread.java:2072)
- locked  (a jdk.internal.net.http.HttpClientImpl$SelectorManager)
at java.lang.Thread.join(java.base@21/Thread.java:2200)
at jdk.internal.net.http.HttpClientImpl.awaitTermination(java.net.http@21/HttpClientImpl.java:628)
at java.net.http.HttpClient.close(java.net.http@21/HttpClient.java:900)
at jdk.internal.net.http.HttpClientFacade.close(java.net.http@21/HttpClientFacade.java:192)
at test.examples.HttpGetBurstBugWithStructuredScope.runBurst(HttpGetBurstBugWithStructuredScope.java:24)
at test.examples.HttpGetBurstBugWithStructuredScope.main(HttpGetBurstBugWithStructuredScope.java:15)
If I use CountdownLatch to manage exiting, the program does not get stuck.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the HttpGetBurstBugWithStructuredScope. Adjust requestCount to test for the threshold where error happens or does not happen. Ensure that using an url with a working server exists the tool normally.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
HttpClient should be able to close normally.
ACTUAL -
HttpGetBurstBugWithStructuredScope does not exit. main thread shows HttpClientFacade.close() in thread dump
---------- BEGIN SOURCE ----------
package test.examples;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.StructuredTaskScope;
public class HttpGetBurstBugWithStructuredScope {
public static void main(String[] args) {
new HttpGetBurstBugWithStructuredScope().runBurst(
"http://localhost:62057/greet",
200
);
}
void runBurst(String url, int reqCount) {
final var dest = URI.create(url);
try (final var virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
try (final var httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(1)).executor(virtualThreadExecutor).build()) {
try (final var scope = new StructuredTaskScope.ShutdownOnFailure()) {
launchAndProcessRequests(scope, httpClient, reqCount, dest);
} finally {
System.out.println("StructuredTaskScope closed");
}
} finally {
System.out.println("HttpClient closed");
}
} finally {
System.out.println("ThreadExecutor closed");
}
}
private static void launchAndProcessRequests(
StructuredTaskScope.ShutdownOnFailure scope,
HttpClient httpClient,
int reqCount,
URI dest) {
for (int counter = 0; counter
getUrlAndAssert200(httpClient, dest)
);
}
try {
scope.join();
} catch (InterruptedException e) {
throw new RuntimeException("scope.join() was interrupted", e);
}
try {
scope.throwIfFailed();
} catch (ExecutionException e) {
throw new RuntimeException("something threw an exception in StructuredTaskScope", e);
}
}
private static String getUrlAndAssert200(HttpClient httpClient, URI url) {
final var response = executeRequest(httpClient, url);
String res = response.body();
int statusCode = response.statusCode();
if (statusCode != 200) {
throw new RuntimeException(url.toString() + " returned status " + statusCode);
}
return res;
}
private static HttpResponse executeRequest(HttpClient httpClient, URI url) {
try {
var request = HttpRequest.newBuilder(url).GET().build();
return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
} catch (InterruptedException e) {
throw new RuntimeException(e);
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
package test.examples;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class HttpGetBurstBug {
public static void main(String[] args) {
new HttpGetBurstBug().runBurst(
"http://localhost:62057/greet",
2000
);
}
void runBurst(String url, int reqCount) {
final var dest = URI.create(url);
try {
try (final var virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
try (final var httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(1)).executor(virtualThreadExecutor).build()) {
launchAndProcessRequests(virtualThreadExecutor, httpClient, reqCount, dest);
}
} finally {
System.out.println("HttpClient closed");
}
} finally {
System.out.println("Successfully closed");
}
}
private static void launchAndProcessRequests(
ExecutorService virtualThreadExecutor,
HttpClient httpClient,
int reqCount,
URI dest) {
final var latch = new CountDownLatch(reqCount);
for (int counter = 0; counter  {
try {
getUrlAndAssert200(httpClient, dest);
} catch (Exception e) {
System.err.println("http get failed: " + e.getMessage());
} finally {
latch.countDown();
}
}
);
}
try {
latch.await();
System.out.println("latch.await() completed");
} catch (InterruptedException e) {
throw new RuntimeException("latch.await() was interrupted", e);
}
}
private static String getUrlAndAssert200(HttpClient httpClient, URI url) {
final var response = executeRequest(httpClient, url);
String res = response.body();
int statusCode = response.statusCode();
if (statusCode != 200) {
throw new RuntimeException(url.toString() + " returned status " + statusCode);
}
return res;
}
private static HttpResponse executeRequest(HttpClient httpClient, URI url) {
try {
var request = HttpRequest.newBuilder(url).GET().build();
return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
} catch (InterruptedException e) {
throw new RuntimeException(e);
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}
FREQUENCY : always
OS: os_x

-----
Title: [JDK-8316629] j.text.DateFormatSymbols setZoneStrings() exception is unhelpful
Priority: P4
Type: Bug
Component: core-libs
Description: setZoneStrings() takes a multi dimensional array of String as input. If any of the rows have a length less than 5, an IllegalArgumentException is thrown.
Currently, the exception is thrown without any indication of what went wrong
OS: generic

-----
Title: [JDK-8317264] Pattern.Bound has `static` fields that should be `static final`.
Priority: P4
Type: Bug
Component: core-libs
Description: static final class Bound extends Node {
static int LEFT = 0x1;
static int RIGHT= 0x2;
static int BOTH = 0x3;
static int NONE = 0x4;
The fields are never reassigned and the lack of `final` seems to be an oversight.
OS: generic

-----
Title: [JDK-8318509] x86 count_positives intrinsic broken for -XX:AVX3Threshold=0
Priority: P4
Type: Bug
Component: hotspot
Description: The code emitted for the count_positives intrinsic is broken when running under the diagnostic option: -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+AVX3Threshold=0: the len register is repurposed and overwritten, but the tail logic then wrongly assumes len still holds the original value. This means the value returned can be almost arbitrary, with random crashes etc as a result. This bug was introduced by changes in JDK-8281146 and went undetected due lack of coverage by tests.
The proposed fix is to reconstitute the tail part of len from tmp1 before  jumping into the tail block.

-----
Title: [JDK-8318636] Add jcmd to print annotated process memory map
Priority: P4
Type: Enhancement
Component: hotspot
Description: Analysts and supporters often use /proc/xx/maps to make sense of the memory footprint of a process.
Interpreting the memory map correctly can help when used as a complement to other tools (e.g. NMT). There even exist tools out there that attempt to annotate the process memory map with JVM information.
That, however, can be much more easily and accurately done within the JVM. At least for mappings originating from hotspots, we have the relevant information in NMT.
OS: linux

-----
Title: [JDK-8318700] MacOS Zero cannot run gtests due to wrong JVM path
Priority: P4
Type: Bug
Component: hotspot
Description: If you run any of the current gtests with macos-aarch64-zero, it would fail as:
```
% CONF=macosx-aarch64-zero-fastdebug make exploded-test TEST=gtest:Atomic
Using exact match for CONF=macosx-aarch64-zero-fastdebug (other matches are possible)
Building target 'exploded-test' in configuration 'macosx-aarch64-zero-fastdebug'
Updating support/modules_libs/java.base/zero/libjvm.dylib due to 1 file(s)
Test selection 'gtest:Atomic', will run:
* gtest:Atomic/zero
Running test 'gtest:Atomic/zero'
Note: Google Test filter = Atomic*
[==========] Running 16 tests from 6 test suites.
[----------] Global test environment set-up.
[----------] 3 tests from AtomicAddTest
[ RUN      ] AtomicAddTest.int32_vm
Error occurred during initialization of VM
Failed setting boot class path.
Finished running test 'gtest:Atomic/zero'
Test report is stored in build/macosx-aarch64-zero-fastdebug/test-results/gtest_Atomic_zero
```
The reason seems to be that the BSD specific code adds either `client` or `server` to the JDK path, while zero is actually in `zero`. This breaks VM code that expects libjvm.dylib to be found.

-----
Title: [JDK-8318811] Compiler directives parser swallows a character after line comments
Priority: P4
Type: Bug
Component: hotspot
Description: Currently, the following valid compiler directive file:
```
[{
match: "*::*",
c2: { Exclude: true } // c1 only for startup
}]
```
will be rejected by the parser:
```
Syntax error on line 4 byte 2: Expected value separator or object end (one of ',}').
At ']'.
}]
Parsing of compiler directives failed
```
This is because `JSON::skip_line_comment()`, in contradiction to its specification, does **not** "*return the first token after the line comment without consuming it*" but does consumes it.
The fix is trivial:
```
--- a/src/hotspot/share/utilities/json.cpp
+++ b/src/hotspot/share/utilities/json.cpp
@@ -580,7 +580,7 @@ u_char JSON::skip_line_comment() {
return 0;
}
next();
-  return next();
+  return peek();
}
```

-----
Title: [JDK-8318915] Enhance checks in BigDecimal.toPlainString()
Priority: P3
Type: Enhancement
Component: core-libs
Description: For some instances of `BigDecimal`, invoking `toPlainString()` might wrongly result in a `NegativeArraySizeException` when it should, in fact, throw an `OutOfMemoryError` to indicate that the resulting `String` would be too large, that is, consisting of more than `Integer.MAX_VALUE` characters.

-----
Title: [JDK-8319439] Move BufferNode from PtrQueue files to new files
Priority: P4
Type: Enhancement
Component: hotspot
Description: The BufferNode class is currently defined in PtrQueue.hpp/cpp.  There are already some uses that don't use/depend on PtrQueue at all, and there may be more in the future.  It would be better if that class was separated out into its own set of files that PtrQueue and others would then use.

-----
Title: [JDK-8319572] Test jdk/incubator/vector/LoadJsvmlTest.java ignores VM flags
Priority: P4
Type: Sub-task
Component: hotspot
Description: Test
jdk/incubator/vector/LoadJsvmlTest.java
ignores VM flags and should be updated or marked as flagless.

-----
Title: [JDK-8319690] [AArch64] C2 compilation hits offset_ok_for_immed: assert "c2 compiler bug"
Priority: P4
Type: Bug
Component: hotspot
Description: Fails only with debug, in product we simply "legitimize_address", which inserts a LEA instruction to handle the offset that seems to require more bits than expected.
I reproduced it like this:
/scratch/empeter/jdk-22/fastdebug/bin/java --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.util=ALL-UNNAMED -Xcomp -XX:-TieredCompilation -XX:MaxHeapSize=805306368 -XX:MaxRAMPercentage=6.250000 "-XX:CompileCommand=compileonly,Test*::" -XX:CompileCommand=printcompilation,Test*::* Test.java
CompileCommand: compileonly Test*. bool compileonly = true
CompileCommand: PrintCompilation Test*.* bool PrintCompilation = true
2676  105    b        Test:: (7 bytes)
2681  107    b        Test$A:: (44 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/afbc6042-3a24-4198-9369-18c663a3f74c-S45433/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/10db9974-e79d-49fb-b2a8-fc7dc441748b/runs/b6e6453a-891d-4130-a6a2-b2df8c26912c/workspace/open/src/hotspot/cpu/aarch64/aarch64.ad:2741), pid=134414, tid=134428
#  assert(Address::offset_ok_for_immed(addr.offset(), exact_log2(size_in_memory))) failed: c2 compiler bug
#
# JRE version: Java(TM) SE Runtime Environment (22.0+22) (fastdebug build 22-ea+22-1754)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+22-1754, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x424248]  loadStore(C2_MacroAssembler, void (MacroAssembler::*)(Register, Address const&), Register, int, Register, int, int, int, int) [clone .constprop.1]+0x1f8
#
# Core dump will be written. Default location: /scratch/empeter/jdk-fork1/build/linux-aarch64-slowdebug/jdk/bin/core.134414
#
# An error report file with more information is saved as:
# /scratch/empeter/jdk-fork1/build/linux-aarch64-slowdebug/jdk/bin/hs_err_pid134414.log
#
# Compiler replay data is saved as:
# /scratch/empeter/jdk-fork1/build/linux-aarch64-slowdebug/jdk/bin/replay_pid134414.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

-----
Title: [JDK-8320687] sun.jvmstat.monitor.MonitoredHost.getMonitoredHost() throws unexpected exceptions when invoked concurrently
Priority: P4
Type: Bug
Component: core-svc
Description: When multiple threads concurrently invoke on sun.jvmstat.monitor.MonitoredHost.getMonitoredHost() method, it has been noticed that it sometimes throws unexpected exceptions like:
On one occasion:
Caused by: java.lang.IllegalArgumentException: Could not find MonitoredHost for scheme: local
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:177)
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:133)
on a different occasion:
Caused by: java.util.NoSuchElementException
at java.base/java.util.ServiceLoader$2.next(ServiceLoader.java:1314)
at java.base/java.util.ServiceLoader$2.next(ServiceLoader.java:1302)
at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1397)
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:170)
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:133)
This is because the method internally uses a shared instance of java.util.ServiceLoader. ServiceLoader is not a thread safe class (as noted in its class javadoc)

-----
Title: [JDK-8320948] NPE due to unreported compiler error
Priority: P3
Type: Bug
Component: tools
Description: ADDITIONAL SYSTEM INFORMATION :
17.0.7 / Linux
A DESCRIPTION OF THE PROBLEM :
When trying to compile attached project compiler blows up with NullPointerException.
An exception has occurred in the compiler (17.0.7). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke "com.sun.tools.javac.code.Type.getTag()" because "type" is null
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Full project to reproduce issue can be found here https://github.com/ghostbuster91/javac-npe-generic
Compile it by calling `./gradlew compileJava`. The issue is not specific to the build tool.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Error informing that the second parameter is missing should be reported; as below:
error: constructor Builder in class Builder cannot be applied to given types;
return new Builder(Person.make(Entity.combineAll(entities)));
^
required: Person,String
found:    Person
reason: actual and formal argument lists differ in length
1 error
ACTUAL -
$ ./gradlew clean compileJava
Task :clean
Task :compileJava FAILED
An exception has occurred in the compiler (17.0.7). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke "com.sun.tools.javac.code.Type.getTag()" because "type" is null
at jdk.compiler/com.sun.tools.javac.jvm.Code.typecode(Code.java:243)
at jdk.compiler/com.sun.tools.javac.jvm.Items$Item.coerce(Items.java:271)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:879)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:902)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitNewClass(Gen.java:1967)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewClass.accept(JCTree.java:1852)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitReturn(Gen.java:1843)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1709)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2420)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
at org.gradle.internal.compiler.java.IncrementalCompileTask.call(IncrementalCompileTask.java:92)
at org.gradle.api.internal.tasks.compile.AnnotationProcessingCompileTask.call(AnnotationProcessingCompileTask.java:94)
at org.gradle.api.internal.tasks.compile.ResourceCleaningCompilationTask.call(ResourceCleaningCompilationTask.java:57)
at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:55)
at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:39)
at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors(NormalizingJavaCompiler.java:98)
at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:52)
at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:38)
at org.gradle.api.internal.tasks.compile.AnnotationProcessorDiscoveringCompiler.execute(AnnotationProcessorDiscoveringCompiler.java:51)
at org.gradle.api.internal.tasks.compile.AnnotationProcessorDiscoveringCompiler.execute(AnnotationProcessorDiscoveringCompiler.java:37)
at org.gradle.api.internal.tasks.compile.ModuleApplicationNameWritingCompiler.execute(ModuleApplicationNameWritingCompiler.java:46)
at org.gradle.api.internal.tasks.compile.ModuleApplicationNameWritingCompiler.execute(ModuleApplicationNameWritingCompiler.java:36)
at org.gradle.jvm.toolchain.internal.DefaultToolchainJavaCompiler.execute(DefaultToolchainJavaCompiler.java:57)
at org.gradle.api.tasks.compile.JavaCompile.lambda$createToolchainCompiler$3(JavaCompile.java:202)
at org.gradle.api.internal.tasks.compile.CleaningJavaCompiler.execute(CleaningJavaCompiler.java:53)
at org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory.lambda$createRebuildAllCompiler$0(IncrementalCompilerFactory.java:52)
at org.gradle.api.internal.tasks.compile.incremental.SelectiveCompiler.execute(SelectiveCompiler.java:70)
at org.gradle.api.internal.tasks.compile.incremental.SelectiveCompiler.execute(SelectiveCompiler.java:44)
at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:66)
at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:52)
at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler$1.call(CompileJavaBuildOperationReportingCompiler.java:64)
at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler$1.call(CompileJavaBuildOperationReportingCompiler.java:48)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler.execute(CompileJavaBuildOperationReportingCompiler.java:48)
at org.gradle.api.tasks.compile.JavaCompile.performCompilation(JavaCompile.java:220)
at org.gradle.api.tasks.compile.JavaCompile.performIncrementalCompilation(JavaCompile.java:161)
at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:146)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:125)
at org.gradle.api.internal.project.taskfactory.IncrementalTaskAction.doExecute(IncrementalTaskAction.java:45)
at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:51)
at org.gradle.api.internal.project.taskfactory.IncrementalTaskAction.execute(IncrementalTaskAction.java:26)
at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:29)
at org.gradle.api.internal.tasks.execution.TaskExecution$3.run(TaskExecution.java:248)
at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)
at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)
at org.gradle.api.internal.tasks.execution.TaskExecution.executeAction(TaskExecution.java:233)
at org.gradle.api.internal.tasks.execution.TaskExecution.executeActions(TaskExecution.java:216)
at org.gradle.api.internal.tasks.execution.TaskExecution.executeWithPreviousOutputFiles(TaskExecution.java:199)
at org.gradle.api.internal.tasks.execution.TaskExecution.execute(TaskExecution.java:166)
at org.gradle.internal.execution.steps.ExecuteStep.executeInternal(ExecuteStep.java:105)
at org.gradle.internal.execution.steps.ExecuteStep.access$000(ExecuteStep.java:44)
at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:59)
at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:56)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:56)
at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:44)
at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:67)
at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:37)
at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:41)
at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:74)
at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:55)
at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:50)
at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:28)
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.executeDelegateBroadcastingChanges(CaptureStateAfterExecutionStep.java:100)
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:72)
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:50)
at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:40)
at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:29)
at org.gradle.internal.execution.steps.BuildCacheStep.executeWithoutCache(BuildCacheStep.java:179)
at org.gradle.internal.execution.steps.BuildCacheStep.lambda$execute$1(BuildCacheStep.java:70)
at org.gradle.internal.Either$Right.fold(Either.java:175)
at org.gradle.internal.execution.caching.CachingState.fold(CachingState.java:59)
at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:68)
at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:46)
at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:36)
at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:25)
at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:36)
at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:22)
at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:91)
at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$2(SkipUpToDateStep.java:55)
at java.base/java.util.Optional.orElseGet(Optional.java:364)
at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:55)
at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:37)
at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:65)
at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:36)
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:37)
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:27)
at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:77)
at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:38)
at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:94)
at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:49)
at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:71)
at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:45)
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.executeWithNonEmptySources(SkipEmptyWorkStep.java:177)
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:86)
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:53)
at org.gradle.internal.execution.steps.RemoveUntrackedExecutionStateStep.execute(RemoveUntrackedExecutionStateStep.java:32)
at org.gradle.internal.execution.steps.RemoveUntrackedExecutionStateStep.execute(RemoveUntrackedExecutionStateStep.java:21)
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:38)
at org.gradle.internal.execution.steps.LoadPreviousExecutionStateStep.execute(LoadPreviousExecutionStateStep.java:36)
at org.gradle.internal.execution.steps.LoadPreviousExecutionStateStep.execute(LoadPreviousExecutionStateStep.java:23)
at org.gradle.internal.execution.steps.CleanupStaleOutputsStep.execute(CleanupStaleOutputsStep.java:75)
at org.gradle.internal.execution.steps.CleanupStaleOutputsStep.execute(CleanupStaleOutputsStep.java:41)
at org.gradle.internal.execution.steps.AssignWorkspaceStep.lambda$execute$0(AssignWorkspaceStep.java:32)
at org.gradle.api.internal.tasks.execution.TaskExecution$4.withWorkspace(TaskExecution.java:293)
at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:30)
at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:21)
at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:37)
at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:27)
at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:47)
at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:34)
at org.gradle.internal.execution.impl.DefaultExecutionEngine$1.execute(DefaultExecutionEngine.java:64)
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:146)
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:135)
at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)
at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:74)
at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:42)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:337)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:324)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:317)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:303)
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:463)
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:380)
at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
FAILURE: Build failed with an exception.
* What went wrong:
Execution failed for task ':compileJava'.
Compilation failed; see the compiler error output for details.
CUSTOMER SUBMITTED WORKAROUND :
This only occurs if the second parameter is missing. Filling the second parameter in the Builder:13 fixes the issue.
The issue goes away if we provide generic type parameter for the Entity.combineAll function call in Builder.13
FREQUENCY : always
OS: generic

-----
Title: [JDK-8321204] C2: assert(false) failed: node should be in igvn hash table
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
serviceability/jvmti/vthread/premain/AgentWithVThreadTest.java
Here's a snippet from the log file:
2566  CastPP  === 277 75  [[ 332 ]]  #java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * extra types: {0:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap):NotNull *} strong dependency  Oop:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * !orig=[330] !jvms: ConcurrentHashMap::transfer @ bci:119 (line 2451)
2567  CastPP  === 572 96  [[ 2528 ]]  #narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable) * extra types: {0:narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull * (speculative=narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * (inline_depth=2))} strong dependency !orig=[2525] !jvms: ConcurrentHashMap::transfer @ bci:286 (line 2479)
2568  CastPP  === 572 75  [[ 2528 ]]  #java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * extra types: {0:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap):NotNull *} strong dependency  Oop:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * !orig=[2524] !jvms: ConcurrentHashMap::transfer @ bci:286 (line 2479)
2571  CastPP  === 572 122  [[ 2528 ]]  #narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable) * extra types: {0:narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull * (speculative=narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * (inline_depth=2))} strong dependency !orig=[2184] !jvms: ConcurrentHashMap::transfer @ bci:835 (line 2556)
erroneous node:
1669  CheckCastPP  === 787 122  [[ 1680 1672 ]]  #narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable) * (speculative=narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * (inline_depth=2)) !jvms: ConcurrentHashMap::setTabAt @ bci:16 (line 769) ConcurrentHashMap::transfer @ bci:524 (line 2513)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9727/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1d6ddd57-1d54-42e6-9e30-de0cf9cd6984/runs/351ce9aa-3534-44ef-9871-1a02b65a033e/workspace/open/src/hotspot/share/opto/compile.cpp:4929), pid=554535, tid=554551
#  assert(false) failed: node should be in igvn hash table
#
# JRE version: Java(TM) SE Runtime Environment (22.0+27) (fastdebug build 22-ea+27-2156)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+27-2156, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x8c6908]  Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]+0x9c8
#
# Core dump will be written. Default location: Core dumps may be processed with "/opt/core.sh %p" (or dumping to /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10314/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2cdc390-4963-4503-ae56-73d3c828108d/runs/58798190-eb32-4a2e-b757-88d1782b5ddc/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/3/core.554535)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10314/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2cdc390-4963-4503-ae56-73d3c828108d/runs/58798190-eb32-4a2e-b757-88d1782b5ddc/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/3/hs_err_pid554535.log
[thread 554558 also had an error]
------ Timeout during error reporting after 120 s. ------
# [ timer expired, abort... ]
----------System.out:(1/53)----------
Here's the crashing thread's stack:
---------------  T H R E A D  ---------------
Current thread (0x0000ffff84304bf0):  JavaThread "C2 CompilerThread0" daemon [_thread_in_native, id=554551, stack(0x0000ffff55009000,0x0000ffff55207000) (2040K)]
Current CompileTask:
C2:958  559 % !   4       java.util.concurrent.ConcurrentHashMap::transfer @ 96 (849 bytes)
Stack: [0x0000ffff55009000,0x0000ffff55207000],  sp=0x0000ffff55201e20,  free space=2019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8c6908]  Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]+0x9c8  (compile.cpp:4929)
V  [libjvm.so+0x8e04bc]  Compile::Optimize()+0x31c  (compile.cpp:4907)
V  [libjvm.so+0x8e36f0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x14a0  (compile.cpp:857)
V  [libjvm.so+0x739860]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x17c  (c2compiler.cpp:134)
V  [libjvm.so+0x8eef74]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e0  (compileBroker.cpp:2299)
V  [libjvm.so+0x8efb5c]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1958)
V  [libjvm.so+0xd6d8a8]  JavaThread::thread_main_inner()+0xe4  (javaThread.cpp:720)
V  [libjvm.so+0x159c910]  Thread::call_run()+0xac  (thread.cpp:220)
V  [libjvm.so+0x130f6ac]  thread_native_entry(Thread*)+0x12c  (os_linux.cpp:787)
C  [libpthread.so.0+0x7928]  start_thread+0x188

-----
Title: [JDK-8321479] java -D-D crashes
Priority: P3
Type: Bug
Component: hotspot
Description: (I have replaced my personal info with  in error message below)
java -D-D
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (//dev/git/openjdk/jdk2/open/src/hotspot/share/runtime/arguments.cpp:322), pid=95956, tid=8707
#  assert((strncmp(property, "-D", 2) != 0)) failed: Unexpected leading -D
#
# JRE version:  (22.0) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-12-06-1614439...., mixed mode, sharing, tiered, compressed class ptrs, unknown gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
...
#
Abort trap: 6

-----
Title: [JDK-8321931] memory_swap_current_in_bytes reports 0 as "unlimited"
Priority: P4
Type: Bug
Component: hotspot
Description: memory_swap_current_in_bytes is not a limit, but reports its value of 0 as "unlimited"
OS: linux

-----
Title: [JDK-8322141] SequenceInputStream.transferTo should not return as soon as Long.MAX_VALUE bytes have been transferred
Priority: P4
Type: Bug
Component: core-libs
Description: Currently the code in SequenceInputStream.transferTo() contains
if (transferred

-----
Title: [JDK-8322475] Extend printing for System.map
Priority: P4
Type: Enhancement
Component: hotspot
Description: Make System.map and System.dump_map drastically more useful by adding:
- the actual memory used per mapping (RSS)
- the actual page size of the mapping
- THP state (used, advised, eligible, forbidden)
- the commit state
- swap state
Also, provide a summary for:
- total RSS
- total size of hugetlb memory
- how much memory uses THPs
- how much memory had been swapped out
- how much memory was committed
OS: linux

-----
Title: [JDK-8323795] jcmd Compiler.codecache should print total size of code cache
Priority: P4
Type: Enhancement
Component: hotspot
Description: CodeHeap 'non-profiled nmethods': size=118592Kb used=29Kb max_used=29Kb free=118562Kb
bounds [0x00007fbe84622000, 0x00007fbe84892000, 0x00007fbe8b9f2000]
CodeHeap 'profiled nmethods': size=118588Kb used=80Kb max_used=80Kb free=118507Kb
bounds [0x00007fbe7c9f2000, 0x00007fbe7cc62000, 0x00007fbe83dc1000]
CodeHeap 'non-nmethods': size=8580Kb used=1258Kb max_used=1834Kb free=7321Kb
bounds [0x00007fbe83dc1000, 0x00007fbe84031000, 0x00007fbe84622000]
total_blobs=474 nmethods=87 adapters=293
compilation: enabled
stopped_count=0, restarted_count=0
full_count=0
It's better to accumulates total size of used/free/size, for example
CodeHeap 'non-profiled nmethods': size=118592Kb used=29Kb max_used=29Kb free=118562Kb
bounds [0x00007fbe84622000, 0x00007fbe84892000, 0x00007fbe8b9f2000]
CodeHeap 'profiled nmethods': size=118588Kb used=80Kb max_used=80Kb free=118507Kb
bounds [0x00007fbe7c9f2000, 0x00007fbe7cc62000, 0x00007fbe83dc1000]
CodeHeap 'non-nmethods': size=8580Kb used=1258Kb max_used=1834Kb free=7321Kb
bounds [0x00007fbe83dc1000, 0x00007fbe84031000, 0x00007fbe84622000]
total_blobs=474 nmethods=87 adapters=293
compilation: enabled
stopped_count=0, restarted_count=0
full_count=0
Total CodeHeap:
size=245760Kb, used=1367Kb, max used=1943Kb, free=244390Kb

-----
Title: [JDK-8324345] Stack overflow during C2 compilation when splitting memory phi
Priority: P3
Type: Bug
Component: hotspot
Description: # Failure analysis
ConnectionGraph::find_inst_mem contains recursive calls that can lead to a native C++ stack overflow in some cases.
# Original description
The C2 crashes without hs_err generation.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Core was generated by `/home/lmesnik/ws/jdk-jck/build/linux-x64/images/jdk/bin/java --enable-preview -'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007fd8678a4e74 in PhiNode::verify_adr_type (this=this@entry=0x7fd7daf45928, recursive=recursive@entry=true) at /home/lmesnik/ws/jdk-jck/open/src/hotspot/share/opto/cfgnode.cpp:1188
1188	  if (VMError::is_error_reported())  return;  // muzzle asserts when debugging an error
[Current thread is 1 (Thread 0x7fd84496d640 (LWP 605955))]
With instrumentation mentioned in comments:
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9922/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bb2a42a8-b515-4ca4-871f-d848b5f874f4/runs/4c895d9f-7833-4a7a-bd1d-cca0ad6bce55/workspace/open/src/hotspot/share/opto/cfgnode.cpp:1162), pid=947068, tid=947140
# assert(count &)+0x327
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb592b] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0x38b
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb592b] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0x38b
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8

-----
Title: [JDK-8324678] Replace NULL with nullptr in HotSpot gtests
Priority: P4
Type: Enhancement
Component: hotspot
Description: Umbrella issue to cover the replacement of NULL with nullptr in the HotSpot gtests.  There are presently about 500 occurrences in about 75 files.
Because of the number of files and occurrences, this should be broken up into more manageable chunks by sub-tasks.
This addresses a category of NULL uses that wasn't dealt with by JDK-8299837.

-----
Title: [JDK-8324681] Replace NULL with nullptr in HotSpot jtreg test native code files
Priority: P4
Type: Enhancement
Component: hotspot
Description: Umbrella issue to cover the replacement of NULL with nullptr in the native code support files for HotSpot jtreg tests.
Outside of vmTestbase there are about 1700 occurrences in about 200 files.  In vmTestbase there are over 6000 occurrences in about 650 files.
Because of the large number of files and occurrences, this should be broken up into more manageable chunks by sub-tasks.
This addresses a category of NULL uses that wasn't dealt with by JDK-8299837.

-----
Title: [JDK-8324799] Use correct extension for C++ test headers
Priority: P4
Type: Enhancement
Component: hotspot
Description: There are a number of header files in test/hotspot/jtreg that have ".h" extensions but are actually C++ code, or are at least only included by C++ files.  Rename them, to follow normal HotSpot style.
Also rename uses of NULL to nullptr in the renamed headers, as that change is not included in the in-progress JDK-8324681.  The PR for that RFE only changed properly named C++ files.

-----
Title: [JDK-8324880] Rename get_stack_trace.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Renames the file test/hotspot/jtreg/serviceability/jvmti/thread/GetStackTrace/get_stack_trace.h to get_stack_trace.hpp, and rename uses of NULL in this file.
This file is only included from .cpp files.

-----
Title: [JDK-8325055] Rename Injector.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/Injector.h to Injector.hpp.  Note that this file contains no occurrences of NULL.
This file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325180] Rename jvmti_FollowRefObjects.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_FollowRefObjects.h to jvmti_FollowRefObjects.hpp, and replaces uses of NULL in the file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325347] Rename native_thread.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/native/native_thread.h to native_thread.hpp. Also replace uses of NULL in that file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325367] Rename nsk_list.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/native/nsk_list.h to nsk_list.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325435] [macos] Menu or JPopupMenu not closed when main window is resized
Priority: P4
Type: Bug
Component: client-libs
Description: Please check the attached example program. Open a menu or JPopupmenu and then resize the whole windows by using the lower right corner.
The Menu / JPopupmenu stays while resizing.
This can be observed at least on macOS 14 and 13 .
This differs from Windows where the Menu closes when resizing the Window.
OS: os_x

-----
Title: [JDK-8325456] Rename nsk_mutex.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/native/nsk_mutex.h to nsk_mutex.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325458] Rename mlvmJvmtiUtils.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/vm/mlvm/share/mlvmJvmtiUtils.h to mlvmJvmtiUtils.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325680] Uninitialised memory in deleteGSSCB of GSSLibStub.c:179
Priority: P3
Type: Bug
Component: security-libs
Description: Uninitialised memory in deleteGSSCB of GSSLibStub.c:179

-----
Title: [JDK-8325682] Rename nsk_strace.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/stress/strace/nsk_strace.h to nsk_strace.hpp, and replace uses of NULL in the file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325910] Rename jnihelper.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/stress/jni/jnihelper.h to jnihelper.hpp. Also replace uses of NULL in that file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8326090] Rename jvmti_aod.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/aod/jvmti_aod.h to jvmti_aod.hpp, and replace uses of NULL in the file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8326389] [test] improve assertEquals failure output
Priority: P4
Type: Bug
Component: infrastructure
Description: Currently assertEquals has in the failure case sometimes confusing output like :
java.lang.RuntimeException: VM output should contain exactly one RTM locking statistics entry for method compiler.rtm.locking.TestRTMTotalCountIncrRate$Test::lock: expected 0 to equal 1
at jdk.test.lib.Asserts.fail(Asserts.java:634)
at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
(I don't think we really expected that for some reason 0 equals 1)
This should be improved.
OS: generic

-----
Title: [JDK-8326524] Rename agent_common.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_common/agent_common.h to agent_common.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8326586] Improve Speed of System.map
Priority: P4
Type: Enhancement
Component: hotspot
Description: System.map performs a NMT-region lookup by address; since these lookups are usually in order, we can optimize the lookup.

-----
Title: [JDK-8327071] [Testbug] g-tests for cgroup leave files in /tmp on linux
Priority: P4
Type: Bug
Component: hotspot
Description: After each run of the g-tests for cgroups on Linux there are three new files left in /tmp.
cgroups-test-jdk.pid.cgroupTest.SubSystemFileLineContentsSingleLine
cgroups-test-jdk.pid.cgroupTest.SubSystemFileLineContentsMultipleLinesSuccessCases
cgroups-test-jdk.pid.cgroupTest.SubSystemFileLineContentsMultipleLinesErrorCases
OS: linux

-----
Title: [JDK-8327169] serviceability/dcmd/vm/SystemMapTest.java and SystemDumpMapTest.java may fail after JDK-8326586
Priority: P3
Type: Bug
Component: hotspot
Description: The following test failed in the JDK23 CI:
serviceability/dcmd/vm/SystemMapTest.java
Here's a snippet from the log file:
---------------- stderr ----------------
----------------------------------------
test SystemMapTest.jmx(): failure
java.lang.RuntimeException: '.*0x\\p{XDigit}+ - 0x\\p{XDigit}+ +\\d+.*JAVAHEAP.*' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:371)
at SystemMapTest.run(SystemMapTest.java:57)
at SystemMapTest.jmx(SystemMapTest.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:329)
===============================================
serviceability/dcmd/vm/SystemMapTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
----------System.err:(774/73858)----------
The test task's JVM args for this run are:
-Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations
This failure first showed up in jdk-23+13-925-tier5 which only contains the fix for:
JDK-8326586 Improve Speed of System.map
so I've tagged this bug as a regression.
OS: linux

-----
Title: [JDK-8327370] (ch) sun.nio.ch.Poller.register throws AssertionError
Priority: P3
Type: Bug
Component: core-libs
Description: java.lang.AssertionError
at java.base/sun.nio.ch.Poller.register(Poller.java:192)
at java.base/sun.nio.ch.Poller.poll(Poller.java:171)
at java.base/sun.nio.ch.Poller.poll(Poller.java:137)
at java.base/sun.nio.ch.DatagramChannelImpl.park(DatagramChannelImpl.java:494)
at java.base/sun.nio.ch.SelChImpl.park(SelChImpl.java:116)
at java.base/sun.nio.ch.DatagramChannelImpl.untrustedReceive(DatagramChannelImpl.java:646)
at java.base/sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:599)
From the traces I managed to obtain after adding a debug message to the AssertionError, it seems that a terminated virtual thread is still registered with the poller at the time a runnable VirtualThread tries to register.
OS: os_x

-----
Title: [JDK-8327461] KeyStore getEntry is not thread-safe
Priority: P4
Type: Bug
Component: security-libs
Description: When the KeyStore is concurrently modified, keyStore.getEntry might fail or return a non-matching private key / certificate pair. This is because PKCS12KeyStore.engineGetEntry calls engineGetKey and engineGetCertificateChain without any synchronization with engineSetEntry.
This is a problem for the PKIX KeyManager (sun.security.ssl.X509KeyManagerImpl), which retrieves the entries from the KeyStore on every handshake. Currently this only impacts the handshakes that are running at the same time as the keystore update, but in JDK-8322767 we are exploring caching the entries on first use, and caching the incorrect entries would affect all handshakes until the next keystore update.
To reproduce:
- Create a PKCS12 key store, and 2 KeyStore.PrivateKeyEntry instances, one with EC key/certificate, one with RSA key/certificate.
- create one thread that calls setEntry in a loop using the same alias, but alternating between the entries:
- in another thread call getEntry in a loop
see the attached reproducer (incomplete, needs keys).
The code quickly fails with the following exception:
Exception in thread "main" java.lang.IllegalArgumentException: private key algorithm does not match algorithm of public key in end entity certificate (at index 0)
at java.base/java.security.KeyStore$PrivateKeyEntry.(KeyStore.java:552)
at java.base/sun.security.pkcs12.PKCS12KeyStore.engineGetEntry(PKCS12KeyStore.java:1338)
at java.base/sun.security.util.KeyStoreDelegator.engineGetEntry(KeyStoreDelegator.java:174)
at java.base/java.security.KeyStore.getEntry(KeyStore.java:1576)
Reproducer:
public static final String TEST = "test";
private static void test(KeyStore ks, KeyStore.PrivateKeyEntry ec,
KeyStore.PrivateKeyEntry rsa,
KeyStore.PasswordProtection protParam)
throws Exception {
ks.setEntry(TEST, ec, protParam);
new Thread(()-{while(true) {
try {
ks.setEntry(TEST, ec, protParam);
ks.setEntry(TEST, rsa, protParam);
} catch (KeyStoreException e) {
e.printStackTrace();
System.exit(1);
}
}
}).start();
while(true) {
ks.getEntry(TEST, protParam);
}
}

-----
Title: [JDK-8328107] Shenandoah/C2: TestVerifyLoopOptimizations test failure
Priority: P3
Type: Bug
Component: hotspot
Description: Running the following test:
make run-test TEST=compiler/loopopts/TestVerifyLoopOptimizations.java TEST_VM_OPTS="-XX:+UseShenandoahGC"
fails with:
#  Internal Error (/home/admin/src/openjdk/jdk/src/hotspot/share/opto/loopnode.hpp:470), pid=2362836, tid=2362881
#  assert(cle != nullptr) failed: loopexit is null
Current CompileTask:
C2:18095 3693    b  4       java.lang.invoke.LambdaMetafactory::metafactory (71 bytes)
Stack: [0x0000fffee79e6000,0x0000fffee7be4000],  sp=0x0000fffee7bde510,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11e7a94]  IdealLoopTree::verify_tree(IdealLoopTree*) const+0x6d4  (loopnode.hpp:470)
V  [libjvm.so+0x11e78a8]  IdealLoopTree::verify_tree(IdealLoopTree*) const+0x4e8  (loopnode.cpp:5149)
V  [libjvm.so+0x11ea728]  PhaseIdealLoop::verify() const+0x2d8  (loopnode.cpp:4926)
V  [libjvm.so+0x11eb30c]  PhaseIdealLoop::build_and_optimize()+0xa4c  (loopnode.cpp:4725)
V  [libjvm.so+0x930094]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x304  (loopnode.hpp:1115)
V  [libjvm.so+0x929b5c]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0x68  (compile.cpp:2189)
V  [libjvm.so+0x1653c94]  ShenandoahBarrierC2Support::expand(Compile*, PhaseIterGVN&)+0xd0  (shenandoahSupport.cpp:58)
V  [libjvm.so+0x1582554]  ShenandoahBarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const+0x14  (shenandoahBarrierSetC2.cpp:750)
V  [libjvm.so+0x92ba7c]  Compile::Optimize()+0xcdc  (compile.cpp:2465)
V  [libjvm.so+0x92e75c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15a8  (compile.cpp:861)
V  [libjvm.so+0x77a838]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x174  (c2compiler.cpp:142)
V  [libjvm.so+0x93b364]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xab0  (compileBroker.cpp:2305)
V  [libjvm.so+0x93bf74]  CompileBroker::compiler_thread_loop()+0x634  (compileBroker.cpp:1964)
V  [libjvm.so+0xdf3f70]  JavaThread::thread_main_inner()+0xec  (javaThread.cpp:721)
V  [libjvm.so+0x179d104]  Thread::call_run()+0xb0  (thread.cpp:221)
V  [libjvm.so+0x13debb8]  thread_native_entry(Thread*)+0x138  (os_linux.cpp:864)
It only seems to happen with Shenandoah, not with other GCs. Also, I can easily reproduce the problem on linux-x86_64 and linux-aarch64, but not on macosx-aarch64.
The assert seems to have started occuring with JDK-8309622, but I don't think this is the root cause of the problem.
OS: generic

-----
Title: [JDK-8328301] Convert Applet test ManualHTMLDataFlavorTest.java to main program
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/datatransfer/HTMLDataFlavors/ManualHTMLDataFlavorTest.java
is an applet-based manual test that can be converted to a main program

-----
Title: [JDK-8328482] Convert and Open source few manual applet test to main based
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these manual applet test to main based:
java/awt/Frame/MegaIconTest/MegaIconTest.html
java/awt/Frame/FrameMaximizedTest/FrameMaximizedTest.html
java/awt/Frame/FrameMinimizeTest/FrameMinimizeTest.html
java/awt/Frame/SizeMinimizedTest/SizeMinimizedTest.html
OS: generic

-----
Title: [JDK-8328484] Convert and Opensource few JFileChooser applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: JFileChooser closed manual applet based tests to be converted to main-based manual test and opensourced
javax/swing/JFileChooser/FileSelectionTests/FileSelectionTests.html
javax/swing/JFileChooser/ShowHiddenFiles/ShowHiddenFiles.html
javax/swing/JFileChooser/EnterEmptyDirectory/EnterEmptyDirectory.html

-----
Title: [JDK-8328648] Remove applet usage from JFileChooser tests bug4150029
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JFileChooser tests
open/test/jdk/javax/swing/JFileChooser/4150029/bug4150029.java

-----
Title: [JDK-8328670] Automate and open source few closed manual applet test
Priority: P4
Type: Bug
Component: client-libs
Description: Few closed manual applet based tests to be converted to automated one and open sourced
java/awt/swing/event/KeyEvent/MenuShortCut/JActionCommandTest.html
javax/swing/JInternalFrame/4199401/Ctrli.html

-----
Title: [JDK-8328673] Convert closed text/html/CSS manual applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: COnvert closed text/html/CSS manual applet test to main using PassFailJFrame manual framework

-----
Title: [JDK-8328864] NullPointerException in sun.security.jca.ProviderList.getService()
Priority: P4
Type: Bug
Component: security-libs
Description: Consider this trivial application code:
import java.security.*;
public class KeyStoreTest {
public static void main(final String[] args) throws Exception {
final KeyStore ks = KeyStore.getInstance("PKCS12");
System.out.println("Got keystore " + ks);
}
}
When compiled and run without any additional security properties as follows, it works fine:
java KeyStoreTest
Got keystore java.security.KeyStore@6b884d57
Now create a file "/tmp/app-security.properties"  file with the following contents (it sets a security property)
jdk.security.provider.preferred=KeyStore.PKCS12:JipherJCE
and run that program as follows by passing "/tmp/app-security.properties" to -Djava.security.properties:
java -Djava.security.properties=/tmp/app-security.properties KeyStoreTest
This time it throws a NullPointerException:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.security.Provider.getService(String, String)" because "p" is null
at java.base/sun.security.jca.ProviderList.getService(ProviderList.java:376)
at java.base/sun.security.jca.GetInstance.getInstance(GetInstance.java:157)
at java.base/java.security.Security.getImpl(Security.java:658)
at java.base/java.security.KeyStore.getInstance(KeyStore.java:870)
at KeyStoreTest.main(KeyStoreTest.java:7)
I ran this on Java 22 but is applicable for lower Java versions too.

-----
Title: [JDK-8329261] G1: interpreter post-barrier x86 code asserts index size of wrong buffer
Priority: P4
Type: Bug
Component: hotspot
Description: The following assertion within G1BarrierSetAssembler::g1_write_barrier_post() in src/hotspot/cpu/x86/gc/g1/g1BarrierSetAssembler_x86.cpp:
// Generated code assumes that buffer index is pointer sized.
STATIC_ASSERT(in_bytes(SATBMarkQueue::byte_width_of_index()) == sizeof(intptr_t));
refers to the size of the index of the SATBMarkQueue buffer, which is unused in the post-barrier. It should probably refer instead to G1DirtyCardQueue::byte_width_of_index().
This issue was found by [~kbarrett].

-----
Title: [JDK-8329729] java/util/Properties/StoreReproducibilityTest.java times out
Priority: P4
Type: Bug
Component: core-libs
Description: In our CI, we have been seeing several instances where the java/util/Properties/StoreReproducibilityTest.java test has been timing  out. In such runs, the test does run to completion but appears to be taking 20 or more minutes to complete thus leading to a jtreg timeout.
#section:driver
----------messages:(10/344)----------
command: driver StoreReproducibilityTest
reason: User specified action: run driver StoreReproducibilityTest
started: Thu Apr 04 07:53:19 UTC 2024
Mode: agentvm
Agent id: 161
Timeout signalled after 1200 seconds
Timeout information:
--- Timeout information end.
finished: Thu Apr 04 08:17:12 UTC 2024
elapsed time (seconds): 1432.685
...
result: Error. Agent error: java.lang.Exception: Agent 161 timed out with a timeout of 1200 seconds; check console log for any additional details
test result: Error. Agent error: java.lang.Exception: Agent 161 timed out with a timeout of 1200 seconds; check console log for any additional details

-----
Title: [JDK-8330106] C2: VectorInsertNode::make() shouldn't call ConINode::make() directly
Priority: P4
Type: Bug
Component: hotspot
Description: It should call PhaseValues::intcon() instead.

-----
Title: [JDK-8330158] C2: Loop strip mining uses ABS with min int
Priority: P4
Type: Bug
Component: hotspot
Description: JDK-8328934 exposes more problems with ABS in loop strip mining.
$ make images test TEST=compiler/c2/MinValueStrideCountedLoop.java
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/opto/loopnode.cpp:2355), pid=78229, tid=27907
#  Error: ABS: argument should not allow overflow
Fixing that simple one exposes the next one:
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/opto/loopnode.cpp:2965), pid=32195, tid=27139
#  Error: ABS: argument should not allow overflow

-----
Title: [JDK-8330534] Update nsk/jdwp tests to use driver instead of othervm
Priority: P4
Type: Sub-task
Component: core-svc

-----
Title: [JDK-8330598] java/net/httpclient/Http1ChunkedTest.java fails with java.util.MissingFormatArgumentException: Format specifier '%s'
Priority: P4
Type: Bug
Component: core-libs
Description: ----------messages:(7/696)----------
command: main Http1ChunkedTest
reason: User specified action: run main/othervm Http1ChunkedTest
started: Tue Apr 09 15:57:13 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.net.http,java.logging,jdk.httpserver --add-exports java.base/sun.net.www.http=ALL-UNNAMED --add-exports java.base/sun.net.www=ALL-UNNAMED --add-exports java.base/sun.net=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.common=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.frame=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.hpack=ALL-UNNAMED
finished: Tue Apr 09 15:57:14 UTC 2024
elapsed time (seconds): 1.025
----------configuration:(9/509)----------
Boot Layer
add modules: java.base java.net.http java.logging jdk.httpserver
add exports: java.base/sun.net                          ALL-UNNAMED
java.base/sun.net.www                      ALL-UNNAMED
java.base/sun.net.www.http                 ALL-UNNAMED
java.net.http/jdk.internal.net.http.common ALL-UNNAMED
java.net.http/jdk.internal.net.http.frame  ALL-UNNAMED
java.net.http/jdk.internal.net.http.hpack  ALL-UNNAMED
----------System.out:(2/76)----------
REQ0: http://127.0.0.1:58981/testChunkExt/REQ0
REQ0: Recieving request...
----------System.err:(16/992)----------
java.util.MissingFormatArgumentException: Format specifier '%s'
at java.base/java.util.Formatter.format(Formatter.java:2801)
at java.base/java.io.PrintStream.implFormat(PrintStream.java:1371)
at java.base/java.io.PrintStream.format(PrintStream.java:1350)
at java.base/java.io.PrintStream.printf(PrintStream.java:1249)
at Http1ChunkedTest.test(Http1ChunkedTest.java:100)
at Http1ChunkedTest.main(Http1ChunkedTest.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.util.MissingFormatArgumentException: Format specifier '%s'
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.util.MissingFormatArgumentException: Format specifier '%s'
99:                     if (!received) {
100:                         System.out.printf("%s: Unexpected headers received: dropping request.%n");
101:                         continue;
102:                     }
should be
System.out.printf("%s: Unexpected headers received: dropping request.%n", name);
BUT could be viewed as javac issue i.e. missing args detected as compile time, same as with C compiler
OS: windows

-----
Title: [JDK-8330936] [ubsan] exclude function BilinearInterp and ShapeSINextSpan in libawt java2d from ubsan checks
Priority: P3
Type: Sub-task
Component: client-libs
Description: When running the  :tier4 of the jdk  jtreg  test  (java/awt,  javax/swing,  sun/java2d )  with binaries  compiled with -ftrapv
to catch signed integer overflows, we get reproducibly those signed int overflow  errors (similar to JDK-8330615) .
java/awt/Paint/PgramUserBoundsTest.java
#  SIGILL (0x4) at pc=0x000000010930a686, pid=3989, tid=43267
# Problematic frame:
# C  [libawt.dylib+0x51686]  ShapeSINextSpan+0x616
C  [libawt.so+0xd3e58]  ShapeSINextSpan+0x568  (ShapeSpanIterator.c:1366)
C  [libawt.so+0xd38b0]  Java_sun_java2d_pipe_ShapeSpanIterator_nextSpan+0x50  (ShapeSpanIterator.c:509)
j  sun.java2d.pipe.ShapeSpanIterator.nextSpan([I)Z+0 java.desktop@23.0.0.1-internal
and
java/awt/Scrollbar/AquaLFScrollbarTest/ScrollBarBorderTest.java
#  SIGILL (0x4) at pc=0x000000010c98243d, pid=4021, tid=40963
# Problematic frame:
# C  [libawt.dylib+0x5843d]  BilinearInterp+0x17d
C  [libawt.so+0xe3e97]  BilinearInterp+0x787  (TransformHelper.c:683)
C  [libawt.so+0xe6f84]  Java_sun_java2d_loops_TransformHelper_Transform+0xe64  (TransformHelper.c:499)
j  sun.java2d.loops.TransformHelper.Transform(Lsun/java2d/loops/MaskBlit;Lsun/java2d/SurfaceData;Lsun/java2d/SurfaceData;Ljava/awt/Composite;Lsun/java2d/pipe/Region;Ljava/awt/geom/AffineTransform;IIIIIIIII[III)V+0 java.desktop@23.0.0.1-internal
Seems there is no change to this coding intended in the short term  so I suggest to exclude the 2 functions from ubsan-checking .
OS: generic

-----
Title: [JDK-8331088] Incorrect TraceLoopPredicate output
Priority: P4
Type: Bug
Component: hotspot
Description: This line in PhaseIdealLoop::loop_predication_impl_helper prints the node index of the lower bounds check, not the upper bounds check:
if (TraceLoopPredicate) tty-print_cr("upper bound check if: %d", lower_bound_iff-_idx);

-----
Title: [JDK-8331735] UpcallLinker::on_exit races with GC when copying frame anchor
Priority: P3
Type: Bug
Component: core-libs
Description: A fatal error has been detected by the Java Runtime Environment:
SIGSEGV (0xb) at pc=0x0000ffff67e651a8, pid=1499163, tid=1499236
JRE version: Java(TM) SE Runtime Environment (23.0+22) (build 23-ea+22-1781)
Java VM: Java HotSpot(TM) 64-Bit Server VM (23-ea+22-1781, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Problematic frame:
j  java.awt.Font.getFont2D()Lsun/font/Font2D;+0 java.desktop@23-ea
....
....
[warning][os] Loading hsdis library failed

-----
Title: [JDK-8332252] Clean up vmTestbase/vm/share
Priority: P4
Type: Enhancement
Component: hotspot
Description: There is some code in  vmTestbase/vm/share that is not used. Should be removed.
Some test-specific functionality should be moved into corresponding directories.

-----
Title: [JDK-8332506] SIGFPE In ObjectSynchronizer::is_async_deflation_needed()
Priority: P3
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
Host: Intel(R) Xeon(R) Silver 4215R CPU @ 3.20GHz, 4 cores, 15G, Red Hat Enterprise Linux release 8.8 (Ootpa)
JRE version: OpenJDK Runtime Environment (Red_Hat-21.0.1.0.12-2) (21.0.1+12) (build 21.0.1+12-LTS)
Java VM: OpenJDK 64-Bit Server VM (Red_Hat-21.0.1.0.12-2) (21.0.1+12-LTS, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
Note this a VMWare VM
A DESCRIPTION OF THE PROBLEM :
The JVM seemingly randomly crashed with a SIGFPE Error
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fd1ebb1f331, pid=802111, tid=802127
#
# JRE version: OpenJDK Runtime Environment (Red_Hat-21.0.1.0.12-2) (21.0.1+12) (build 21.0.1+12-LTS)
# Java VM: OpenJDK 64-Bit Server VM (Red_Hat-21.0.1.0.12-2) (21.0.1+12-LTS, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf46331]  ObjectSynchronizer::is_async_deflation_needed()+0x1e1
OS: generic

-----
Title: [JDK-8332631] Update nsk.share.jpda.BindServer to don't use finalization
Priority: P4
Type: Enhancement
Component: hotspot
Description: The BindServer starts several threads and opens streams.
It registers them for cleanup using "Finalizer" in nsk.share.framework.
This fix change BindServer to explicitly close streams and finish threads after test is completed.

-----
Title: [JDK-8332641] Update nsk.share.jpda.Jdb to don't use finalization
Priority: P4
Type: Enhancement
Component: core-svc
Description: The jdb should be update to explicitly close streams after test.

-----
Title: [JDK-8332880] JFR GCHelper class recognizes "Archive" regions as valid
Priority: P4
Type: Bug
Component: hotspot
Description: That class used for testing JFR events still mentions "Archive" regions which have been removed long ago.

-----
Title: [JDK-8332921] Ctrl+C does not call shutdown hooks after JLine upgrade
Priority: P3
Type: Bug
Component: tools
Description: JDK-8327476 broke handling of Ctrl+C. New version of JLine modifies SIGINT handler and therefore breaks normal processing of Ctrl+C.
To provoke the issue, it's enough to call System.console().
I attached SigIntTest.java that demonstrates the problem.
Before commit 0a4eeeaa, the program printed "Shutdown hook called".
Now, it immediately terminates upon pressing Ctrl+C or sending kill -2 to the process.
OS: linux

-----
Title: [JDK-8333013] Update vmTestbase/nsk/share/LocalProcess.java to don't use finalization
Priority: P4
Type: Enhancement
Component: core-svc
Description: The vmTestbase/nsk/share/LocalProcess.java is a wrapper for debuggee process. It extends FinalizableObject to kill the debuggee process.
The debuggee process is used by nsk.jdb tests only, see runTest(...) in vmTestbase/nsk/share/jdb/JdbTest.java:
https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/JdbTest.java#L189
I verfied that process is always already terminated when is cleaned during VM shutdown hook,
So the fix is just to remove the finalization.
I also moved LocalProcess into nsk.share.jdb to reduce visibility of class and hardened checks in runTest.

-----
Title: [JDK-8333117] Remove support of remote and manual debuggee launchers
Priority: P4
Type: Enhancement
Component: hotspot
Description: The nsk/jpda test suites support remote and manual launchers that have never been used.
Need to remove it.

-----
Title: [JDK-8333680] com/sun/tools/attach/BasicTests.java fails with "SocketException: Permission denied: connect"
Priority: P4
Type: Bug
Component: core-svc
Description: In some configurations (for example with active VPN) the test fails due SocketException:
[runApplication] Exception in thread "Attach Listener" java.lang.reflect.InvocationTargetException
[runApplication] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
[runApplication] 	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
[runApplication] 	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:562)
[runApplication] 	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:582)
[runApplication] Caused by: java.net.SocketException: Permission denied: connect
[runApplication] 	at java.base/sun.nio.ch.Net.connect0(Native Method)
[runApplication] 	at java.base/sun.nio.ch.Net.connect(Net.java:589)
[runApplication] 	at java.base/sun.nio.ch.Net.connect(Net.java:578)
[runApplication] 	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
[runApplication] 	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
[runApplication] 	at java.base/java.net.Socket.connect(Socket.java:760)
[runApplication] 	at java.base/java.net.Socket.connect(Socket.java:695)
[runApplication] 	at Agent.agentmain(Agent.java:41)
[runApplication] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
[runApplication] 	... 3 more
The test listens and connects using wildcard addresses.
The test should be updated to use loopback addresses

-----
Title: [JDK-8333805] Replaying compilation with null static final fields results in a crash
Priority: P4
Type: Bug
Component: hotspot
Description: I noticed the JVM sometimes crashes with a seg fault when replaying a compilation and found replay compilation doesn't properly handles null static final fields.

-----
Title: [JDK-8333890] Fatal error in auto-vectorizer with float16 kernel.
Priority: P4
Type: Bug
Component: hotspot
Description: Auto-vectorization of following float16 kernel results into a fatal error.
import java.util.Arrays;
public class float16_mainline_add {
public static short sum(short a, short b) {
return (short)Float.float16ToFloat(Float.floatToFloat16(Float.float16ToFloat(a) + Float.float16ToFloat(b)));
}
public static void micro(short [] r, short [] a, short [] b) {
for (int i = 0; i https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
Command Line: java -XX:+TraceSuperWord -XX:CompileOnly=float16_mainline_add::micro -Xbatch -XX:-TieredCompilation -cp . float16_mainline_add

-----
Title: [JDK-8334644] Automate javax/print/attribute/PageRangesException.java
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/print/attribute/PageRangesException.java test is a manual test that relies on output to the console. Such a test doesn't integrate well with the jtreg framework.
The test can be automatic: it should catch the expected exceptions but it has to throw an exception to fail the test if the expected exception isn't thrown.

-----
Title: [JDK-8334780] Crash: assert(h_array_list.not_null()) failed: invariant
Priority: P4
Type: Bug
Component: hotspot
Description: Test: jdk/jfr/event/gc/detailed/TestPromotionFailedEventWithDefNew.java
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S12578/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d0354406-c0ff-476e-8d2f-031519669c48/runs/4e171abe-b62c-430d-abf3-72ffa822a04b/workspace/open/src/hotspot/share/jfr/support/jfrJdkJfrEvent.cpp:139), pid=7946, tid=8169
#  assert(h_array_list.not_null()) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (24.0+4) (fastdebug build 24-ea+4-288)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-ea+4-288, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xeea73f]  JdkJfrEvent::get_all_klasses(JavaThread*)+0xbef

-----
Title: [JDK-8334895] OpenJDK fails to configure on linux aarch64 when CDS is disabled after JDK-8331942
Priority: P4
Type: Bug
Component: hotspot
Description: The issue was detected when building openjdk-17 in Ubuntu Oracular[1].
The relevant part of the build log:
---
checking if CDS archive is available... no (CDS is disabled)
checking if a default CDS archive should be generated... disabled, from default 'auto'
checking if CDS archive is available... no (CDS is disabled)
checking if compatible cds region alignment enabled... enabled, default
configure: error: Option --enable-compatible-cds-alignment is not available
configure exiting with result code 1
make: *** [debian/rules:1065: stamps/zero-configure] Error 1
dpkg-buildpackage: error: debian/rules binary-arch subprocess returned exit status 2
---
[1] https://launchpadlibrarian.net/736468576/buildlog_ubuntu-oracular-arm64.openjdk-17_17.0.12~5ea-1~ppa2_BUILDING.txt.gz
OS: linux

-----
Title: [JDK-8331942] On Linux aarch64, CDS archives should be using 64K alignment by default
Priority: P4
Type: Enhancement
Component: hotspot
Description: On Linux aarch64, a JVM may encounter with three different page sizes: 4K, 64K and (when run on Mac M1 hardware) 16K.
Since forgetting to specify --enable-compatible-cds-alignment is a common error, one which is only noticed when running the produced JVM on hardware with different page size, it makes sense to enable that option by default on Linux aarch64.

-----
Title: [JDK-8335181] Incorrect handling of HTTP/2 GOAWAY frames in HttpClient
Priority: P3
Type: Bug
Component: core-libs
Description: A DESCRIPTION OF THE PROBLEM :
The setup is
- nginx as reverse proxy with SSL and http/2
- REST API behind nginx
The application performs many requests to that API using HttpClient from JDK, which automatically detects http/2 via ALPN.
nginx closes connection after 1000 requests, configurable with the keepalive_requests directive (applies for both http/1.1 persistent connections and http/2).
If specifically configuring the client as http/1.1 then everything works.
Also happens in java 17.
The stacktrace is
java.io.IOException: /172.30.30.7:51892: GOAWAY received
at java.net.http/jdk.internal.net.http.Http2Connection.handleGoAway(Http2Connection.java:1011)
at java.net.http/jdk.internal.net.http.Http2Connection.handleConnectionFrame(Http2Connection.java:876)
at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:751)
at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:232)
at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:677)
at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1313)
All suggesting to either downgrade to http/1.1 or change the client.
OS: generic

-----
Title: [JDK-8335643] serviceability/dcmd/vm tests fail for ZGC after JDK-8322475
Priority: P4
Type: Bug
Component: hotspot
Description: Two tests fail, presumably after JDK-8322475. The tests are failing when run with "-XX:+UseZGC" (and "-XX:+UseZGC -XX:-ZGenerational"), not yet sure if other modes also trigger the failures.
serviceability/dcmd/vm/SystemMapTest.java
test SystemMapTest.jmx(): failure
java.lang.RuntimeException: '0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*JAVAHEAP.*' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:371)
at SystemMapTest.run(SystemMapTest.java:50)
at SystemMapTest.jmx(SystemMapTest.java:57)
serviceability/dcmd/vm/SystemDumpMapTest.java
Missing patterns in dump:
0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*JAVAHEAP.*
test SystemDumpMapTest.jmx(): failure
java.lang.RuntimeException: java.lang.RuntimeException: Missing patterns
...
OS: linux

-----
Title: [JDK-8335662] [AArch64] C1: guarantee(val < (1ULL << nbits)) failed: Field too big for insn
Priority: P3
Type: Bug
Component: hotspot
Description: The ComplexLockingAndMultiThreading.class (encounters bug) has been produced by fuzzing the class-file, from the ComplexLockingAndMultiThreading.java (this runs just fine).
Reproduces on JDK 22, 23, 24
Probably older versions are affected by the bug, but for JDK21 the class-file format is too new. See more info below.
---------- Summary -------------
Most likely, the locals table exceeds a certain size, and that creates a much larger offset than expected, which the aarch64 backend is not ready to handle.
The size of the table is 4100 = 0x1004. The offset is 32824 = 0x8038.
Most likely, this is an issue in the aarch64 backend, and the encoding must be fixed.
A similar bug that I had found recently, and is fixed already:
JDK-8319690: [AArch64] C2 compilation hits offset_ok_for_immed: assert "c2 compiler bug"
---------- Reproducing -------------
java ComplexLockingAndMultiThreading
debug:
#  Internal Error (/scratch/empeter/jdk-fork1/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:548), pid=2672487, tid=2672502
#  assert(offset_ok_for_immed(offset(), size)) failed: must be, was: 32824, 3
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-05-22-1101113.empeter...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-05-22-1101113.empeter..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Current CompileTask:
C1:139   44 %s!   3       ComplexLockingAndMultiThreading::synchronizedMethod @ 23 (74 bytes)
Stack: [0x0000fffd8cb70000,0x0000fffd8cd70000],  sp=0x0000fffd8cd6bae0,  free space=2030k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x41d548]  Address::encode(Instruction_aarch64*) const+0x348  (assembler_aarch64.hpp:548)
V  [libjvm.so+0x41d988]  Assembler::ld_st2(Register, Address const&, int, int, int)+0x1b8
V  [libjvm.so+0x67ed1c]  LIR_Assembler::osr_entry()+0x2c8
V  [libjvm.so+0x672f08]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8
V  [libjvm.so+0x6737b0]  LIR_Assembler::emit_code(BlockList*)+0x270
V  [libjvm.so+0x61b280]  Compilation::emit_code_body()+0x130
V  [libjvm.so+0x61b880]  Compilation::compile_java_method()+0x370
V  [libjvm.so+0x61c18c]  Compilation::compile_method()+0x1f8
V  [libjvm.so+0x61c7bc]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x27c
V  [libjvm.so+0x61e568]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4
V  [libjvm.so+0x8d1b34]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7d4
V  [libjvm.so+0x8d2674]  CompileBroker::compiler_thread_loop()+0x510
V  [libjvm.so+0xd36900]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x159dae0]  Thread::call_run()+0xac
product:
#  Internal Error (assembler_aarch64.hpp:246), pid=2673045, tid=2673064
#  guarantee(val emanuel@emanuel-oracle:xyz$ javap -c -v -p ComplexLockingAndMultiThreading.class  a.p
emanuel@emanuel-oracle:xyz$ vim a.p
emanuel@emanuel-oracle:xyz$ javap -c -v -p ComplexLockingAndMultiThreading.class.orig.class  b.p
emanuel@emanuel-oracle:xyz$ diff a.p b.p
1c1
Classfile xyz/ComplexLockingAndMultiThreading.class.orig.class
3c3
SHA-256 checksum 8a9e0c859d99f105e28b894cbb328b8ce29afc13f745ed5599045472c8aa7da7
220c220
stack=2, locals=4, args_size=0
----------------------------------------------------------------------------------
A part of the task will be to extract a simpler JASM file that reproduces this bug, and to check if it reproduces on older JDK. I tried it quickly, like below, but it did not work:
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jdis ComplexLockingAndMultiThreading.class  X.jasm
(rename class to X)
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm X.jasm
X.jasm (34:39) Error: Wrong tag: Either Method or InterfaceMethod expected.
MethodHandle REF_invokeStatic:Method X.lambda$main$0:"()V",
^
1 error

-----
Title: [JDK-8335684] Test ThreadCpuTime.java should pause like ThreadCpuTimeArray.java
Priority: P4
Type: Bug
Component: core-svc
Description: test/jdk/java/lang/management/ThreadMXBean/ThreadCpuTime.java
is similar to ThreadCpuTimeArray.java and can have the same problem, where CPU times are sampled immediately after a thread appearing to be blocked.  The same sleep should be added to this test.

-----
Title: [JDK-8335710] serviceability/dcmd/vm/SystemDumpMapTest.java and SystemMapTest.java fail on Linux Alpine after 8322475
Priority: P4
Type: Bug
Component: hotspot
Description: Unfortunately those 2 tests fail now on Linux Alpine (x86_64) :
serviceability/dcmd/vm/SystemDumpMapTest.java
Missing patterns in dump:
0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*\\[vdso\\]
test SystemDumpMapTest.jmx(): failure
java.lang.RuntimeException: java.lang.RuntimeException: Missing patterns
at SystemDumpMapTest.run_test(SystemDumpMapTest.java:100)
at SystemDumpMapTest.run(SystemDumpMapTest.java:106)
at SystemDumpMapTest.jmx(SystemDumpMapTest.java:112)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.RuntimeException: Missing patterns
at SystemDumpMapTest.run_test(SystemDumpMapTest.java:96)
... 31 more
===============================================
serviceability/dcmd/vm/SystemDumpMapTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
serviceability/dcmd/vm/SystemMapTest.java :
test SystemMapTest.jmx(): failure
java.lang.RuntimeException: '0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*\\[vdso\\]' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:371)
at SystemMapTest.run(SystemMapTest.java:46)
at SystemMapTest.jmx(SystemMapTest.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
===============================================
serviceability/dcmd/vm/SystemMapTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
OS: linux_alpine

-----
Title: [JDK-8335836] serviceability/jvmti/StartPhase/AllowedFunctions/AllowedFunctions.java fails with unexpected exit code: 112
Priority: P4
Type: Bug
Component: hotspot
Description: serviceability/jvmti/StartPhase/AllowedFunctions/AllowedFunctions.java failed, but the test did not handle the failure well. At the end of stdout you see:
VMInit event
## GetCurrentThread error: 112
This comes from:
static void check_jvmti_error(jvmtiEnv *jvmti, char* fname, jvmtiError err) {
if (err != JVMTI_ERROR_NONE) {
printf("  ## %s error: %d\n", fname, err);
exit(err);
}
}
So basically if the test gets a JVMTI error, it will call exit() with that error. In this case 112 is JVMTI_ERROR_WRONG_PHASE. However, since no error was reported to JTREG, stderr reports:
STATUS:Passed.
But then I guess during JTREG test cleanup, it detects that the process had an exit code but claimed to have passed, so the end of the log contains:
result: Error. unexpected exit code: 112, doesn't match exit status: "Passed." which was reported by the test process

-----
Title: [JDK-8335860] compiler/vectorization/TestFloat16VectorConvChain.java fails with non-standard AVX/SSE settings
Priority: P4
Type: Bug
Component: hotspot
Description: The test fails with -XX:UseAVX=0 -XX:UseSSE=3
Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method "public static void compiler.vectorization.TestFloat16VectorConvChain.test(short[],short[],short[])" - [Failed IR rules: 1]:
* @IR rule 1: "@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfPlatformAnd={}, applyIfCPUFeatureOr={}, counts={"_#V#VECTOR_CAST_HF2F#_", "_@any", "= 1", "_#V#VECTOR_CAST_F2HF#_", "_@any", " = 1"}, applyIfPlatform={}, failOn={}, applyIfPlatformOr={}, applyIfOr={}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeature={}, applyIfAnd={}, applyIfNot={})"
Phase "PrintIdeal":
- counts: Graph contains wrong number of nodes:
* Constraint 1: "(\\d+(\\s){2}(VectorCastHF2F.*)+(\\s){2}===.*vector[A-Za-z]\\[\\d+\\]:\\{float\\})"
- Failed comparison: [found] 0 = 1 [given]
- No nodes matched!
* Constraint 2: "(\\d+(\\s){2}(VectorCastF2HF.*)+(\\s){2}===.*vector[A-Za-z]\\[\\d+\\]:\\{short\\})"
- Failed comparison: [found] 0 = 1 [given]
- No nodes matched!

-----
Title: [JDK-8336042] Caller/callee param size mismatch in deoptimization causes crash
Priority: P3
Type: Bug
Component: hotspot
Description: For interpreter frames, the caller contains the locals.  Some platforms also align the callee frame, so they compute locals in layout_activation relative to the caller last_sp and not the callee sender_sp.  When calling certain MethodHandle.linkTo* methods, the interpreter pushes 1 extra trailing arg for the MemberName, which is removed before calling the callee taret method.  However, the interpreter takes the snapshot of last_sp before popping the trailing arg, and the return entry point pops the number of args represented by the resolved method in the constant pool.  This is a synthetic method whose signature includes the MemberName.  The deoptimization code in vframeArray::unpack_to_stack has logic to check has_member_arg() on the resolved target method and make the proper adjustments.  However, the adjustment is missing for the oldest/bottom deoptimized frame, causing the computation of the callee locals based on the caller last_sp to be off by one, allowing the last local to overwrite the bottom of the callee frame (on aarch64 this is the return pc).
Instead of the correct logic for the is_bottom frame, there is code that sets caller_was_method_handle based on if the invoke is invokedynamic or invokehandle.  This code dates back to ricochet frames when there could be an arbitrary mismatch between the arg count of the caller's invoke and the callee.  However, this code fails to take into account all cases of calls to has_member_arg() MH linkTo* intrinsics.
In addition, the last_frame_adjust() logic is also broken.  The adjustment can be done when not needed, and the same caller frame can be adjusted multiple times (every time the callee is deoptimized), resulting in unbounded frame/stack size growth.

-----
Title: [JDK-8336499] Failure when creating non-CRT RSA private keys in SunPKCS11
Priority: P4
Type: Bug
Component: security-libs
Description: After JDK-8271566, the CKA_MODULUS and CKA_PRIVATE_EXPONENT attributes were added to the list passed to Java's C_GetAttributeValue wrapper when determining if a private RSA key is CRT or non-CRT [1]. The rationale was to make a single query and have both CKA_MODULUS and CKA_PRIVATE_EXPONENT available beforehand, avoiding a potential second query later. Most PKCS #11 tokens benefit from this saving.
Contrary to the native C_GetAttributeValue PKCS #11 API, its Java counterpart does not return any attribute value if there is an error in one of the attributes queried (e.g. if CKR_ATTRIBUTE_TYPE_INVALID is returned) [2]. If a non-CRT key is created in a token (pre PKCS #11 2.40), the query including all attributes will fail and CKA_MODULUS and CKA_PRIVATE_EXPONENT will not be available. An error will be thrown here [3].
This bug was reported by Bob Du (IBM).
--
[1] - https://git.openjdk.org/jdk/blob/jdk-24%2B6/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L568
[2] - https://git.openjdk.org/jdk/blob/jdk-24%2B6/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_objmgmt.c#L252
[3] - https://git.openjdk.org/jdk/blob/jdk-24%2B6/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L594
OS: generic

-----
Title: [JDK-8336587] failure_handler lldb command times out on macosx-aarch64 core file
Priority: P4
Type: Bug
Component: hotspot
Description: I was looking at the failure_handler output for the lldb command on a macosx-aarch64 core file (it is trying to use lldb to get a back trace of all threads), and noticed it timed out:
----------------------------------------
[2024-07-15 05:15:47] [/usr/bin/lldb, --core, /core.92643, /bin/java, -o, thread backtrace all, -o, quit] timeout=20000 in
----------------------------------------
(lldb) target create "/bin/java" --core "/core.92643"
WARNING: tool timed out: killed process after 20000 ms
----------------------------------------
[2024-07-15 05:16:07] exit code: -2 time: 20163 ms
----------------------------------------
20 seconds is the failure_handler default timeout for all commands. Core files on macosx-aarch64 tend to be very large. This one was over 13gb. On my MBPro it took 30 seconds. I bumped up the timeout to 60 seconds and reproduce the same crash in mach5 (more than once), and it usually took about 55 seconds for the lldb command, but it did succeed with the longer timeout. I think we should change the timeout to event more than 60 seconds just to make sure we won't see timeouts. 120 seconds is probably a good amount

-----
Title: [JDK-8336827] compiler/vectorization/TestFloat16VectorConvChain.java  timeouts on ppc64 platforms after JDK-8335860
Priority: P4
Type: Bug
Component: hotspot
Description: After JDK-8335860, we see a lot of timeouts in test compiler/vectorization/TestFloat16VectorConvChain.java
on the ppc64 based platforms.
The timeouts show up especially with the (fast)debug binaries.
OS: generic

-----
Title: [JDK-8337221] CompileFramework: test library to conveniently compile java and jasm sources for fuzzing
Priority: P4
Type: Enhancement
Component: hotspot
Description: The idea is this:
We should be able to create java and jasm code during a jtreg test, compile and execute it. This can be used to fuzz various compiler optimizations.

-----
Title: [JDK-8337299] vmTestbase/nsk/jdb/stop_at/stop_at002/stop_at002.java failure goes undetected
Priority: P5
Type: Bug
Component: core-svc
Description: vmTestbase/nsk/jdb/stop_at/stop_at002/stop_at002.java is testing to make sure a jdb deferred breakpoint on an inner class works. The breakpoint line number information for the debuggee is wrong, so the test should be failing, but isn't. The debugger side has:
static final String DEBUGGEE_LOCATION1 = DEBUGGEE_CLASS + "$Nested$DeeperNested$DeepestNested:43";
static final String DEBUGGEE_LOCATION2 = DEBUGGEE_CLASS + "$Inner$MoreInner:57";
And the debuggee side has:
flag = input; /*  Unable to set deferred breakpoint nsk.jdb.stop_at.stop_at002.stop_at002a$Nested$DeeperNested$DeepestNested:43 : No code at line 43 in nsk.jdb.stop_at.stop_at002.stop_at002a$Nested$DeeperNested$DeepestNested
However, this is not caught by the test. The test only checks for the failed setting of the deferred breakpoint when executing the jdb "stop at" command. The failure does not actually happen until after the test continues, allowing the class to be loaded and for jdb to actually attempt to set the breakpoint.
So there are two issues with the test: wrong breakpoint line number information, and failure to determine that a deferred breakpoint failed to be setup when the class was loaded.

-----
Title: [JDK-8337681] PNGImageWriter uses much more memory than necessary
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
At some point the JPEGImageWriter was optimized to reduce duplication / copying of rasters and data buffers (see JDK-6266748). However, PNGImageWriter never received a similar optimization, and is making unnecessary copies of raster and data buffers whenever PNG images are written.
See also mailing list discussion: https://mail.openjdk.org/pipermail/client-libs-dev/2024-July/021480.html
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use ImageIO to write PNG files.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Unnecessary copies of rasters and data buffers are not created.
ACTUAL -
Rasters and data buffers are copied, row by row.
---------- BEGIN SOURCE ----------
/*
* Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/*
* @test
* @summary Test that raster use optimization does not cause any regressions.
*/
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.ImageWriter;
import javax.imageio.ImageWriteParam;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.ImageOutputStream;
import javax.imageio.stream.MemoryCacheImageOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
public class RasterReuseWriteTest {
public static void main(String[] args) throws Exception {
test(BufferedImage.TYPE_INT_ARGB);
test(BufferedImage.TYPE_INT_ARGB_PRE);
}
private static void test(int type) throws Exception {
// test writing a BufferedImage without source bands
BufferedImage img1 = createImage(256, 256, type);
byte[] bytes1 = writePng(img1, null);
BufferedImage img2 = ImageIO.read(new ByteArrayInputStream(bytes1));
compare(img1, img2, false);
// test writing a BufferedImage with source bands
BufferedImage img3 = createImage(256, 256, type);
int[] sourceBands = new int[] { 2, 1, 0, 3 }; // swap blue and red
byte[] bytes3 = writePng(img3, sourceBands);
BufferedImage img4 = ImageIO.read(new ByteArrayInputStream(bytes3));
compare(img3, img4, true);
// test writing a non-BufferedImage with source bands and one tile
RenderedImage img5 = toTiledImage(img1, 256);
byte[] bytes5 = writePng(img5, sourceBands);
BufferedImage img6 = ImageIO.read(new ByteArrayInputStream(bytes5));
compare(img5, img6, true);
// test writing a non-BufferedImage with source bands and multiple tiles
RenderedImage img7 = toTiledImage(img1, 128);
byte[] bytes7 = writePng(img7, sourceBands);
BufferedImage img8 = ImageIO.read(new ByteArrayInputStream(bytes7));
compare(img7, img8, true);
}
private static BufferedImage createImage(int w, int h, int type) throws Exception {
BufferedImage img = new BufferedImage(w, h, type);
Graphics2D g2d = img.createGraphics();
g2d.setColor(Color.WHITE);
g2d.fillRect(0, 0, w, h);
g2d.setColor(Color.GREEN);
g2d.drawRect(20, 20, 100, 50);
g2d.setColor(Color.RED);
g2d.drawRect(80, 10, 100, 40);
g2d.setColor(Color.BLUE);
g2d.fillRect(40, 60, 120, 30);
g2d.dispose();
return img;
}
private static byte[] writePng(RenderedImage img, int[] sourceBands) throws Exception {
ImageWriter writer = ImageIO.getImageWritersByFormatName("png").next();
ImageWriteParam param = writer.getDefaultWriteParam();
param.setSourceBands(sourceBands);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageOutputStream stream = new MemoryCacheImageOutputStream(baos);
writer.setOutput(stream);
writer.write(null, new IIOImage(img, null, null), param);
writer.dispose();
stream.flush();
return baos.toByteArray();
}
private static void compare(RenderedImage img1, RenderedImage img2, boolean blueAndRedSwapped) {
int[] pixels1 = getRgbPixels(img1);
int[] pixels2 = getRgbPixels(img2);
for (int i = 0; i  blue
} else if (blueAndRedSwapped && pixels1[i] == 0xFF0000FF) {
expected = 0xFFFF0000; // blue - red
} else {
expected = pixels1[i]; // no change
}
int actual = pixels2[i];
if (actual != expected) {
throw new RuntimeException("Pixel " + i + ": expected " +
Integer.toHexString(expected) + ", but got " +
Integer.toHexString(actual));
}
}
}
private static int[] getRgbPixels(RenderedImage img) {
int w = img.getWidth();
int h = img.getHeight();
if (img instanceof BufferedImage bi) {
return bi.getRGB(0, 0, w, h, null, 0, w);
} else {
BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
Graphics2D g2d = bi.createGraphics();
g2d.drawRenderedImage(img, new AffineTransform());
g2d.dispose();
return bi.getRGB(0, 0, w, h, null, 0, w);
}
}
private static RenderedImage toTiledImage(BufferedImage img, int tileSize) throws Exception {
// write to TIFF
ImageWriter writer = ImageIO.getImageWritersByFormatName("tiff").next();
ImageWriteParam param = writer.getDefaultWriteParam();
param.setTilingMode(ImageWriteParam.MODE_EXPLICIT);
param.setTiling(tileSize, tileSize, 0, 0);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageOutputStream stream = new MemoryCacheImageOutputStream(baos);
writer.setOutput(stream);
writer.write(null, new IIOImage(img, null, null), param);
writer.dispose();
stream.flush();
byte[] bytes = baos.toByteArray();
// read from TIFF
ImageReader reader = ImageIO.getImageReadersByFormatName("tiff").next();
ImageInputStream input = ImageIO.createImageInputStream(new ByteArrayInputStream(bytes));
reader.setInput(input);
RenderedImage ri = reader.readAsRenderedImage(0, null);
if (ri instanceof BufferedImage) {
throw new RuntimeException("Unexpected BufferedImage");
}
int tw = ri.getTileWidth();
int th = ri.getTileHeight();
if (tw != tileSize || th != tileSize) {
throw new RuntimeException("Expected tile size " + tileSize +
", but found " + tw + "x" + th);
}
return ri;
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Allocate more memory to the system.
FREQUENCY : always
OS: linux

-----
Title: [JDK-8337795] Type annotation attached to incorrect type during class reading
Priority: P3
Type: Bug
Component: tools
Description: [As seen in https://github.com/uber/NullAway/issues/1011 ]
After the fix for JDK-8225377, type annotations are sometimes incorrectly attached to the wrong contained type if the same type appears multiple times. For example given `Function` below, the annotation is attached to the first occurrence of `B`, resulting in `Function`.
The fix for JDK-8225377 relies on the identity of `Type` instances to find the position of types with type annotations, and then to rewrite them: https://github.com/openjdk/jdk/blob/8bd3cd51562ff9e76fa0e3d49d38e6e19210f878/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2464-L2470
This was done to share logic for rewriting types with TypeAnnotationTypeMapping, but relies on the incorrect assumption that the contained types will have unique identities.
Demo:
=== ./B.java
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.function.Function;
public class B {
@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@interface N {}
void g(Function f) {}
}
=== ./P.java
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.ElementFilter;
@SupportedAnnotationTypes("*")
public class P extends AbstractProcessor {
@Override
public SourceVersion getSupportedSourceVersion() {
return SourceVersion.latestSupported();
}
boolean first = true;
@Override
public boolean process(Set annotations, RoundEnvironment roundEnv) {
if (!first) {
return false;
}
first = false;
for (var m :
ElementFilter.methodsIn(
processingEnv.getElementUtils().getTypeElement("B").getEnclosedElements())) {
System.err.println(m);
}
return false;
}
}
$ javac -fullversion
javac full version "23-ea+35-2364"
$ javac P.java
Compiling B.java from source shows the annotation in the correct location on the second type argument:
$ javac -processor P B.java
g(java.util.function.Function)
After reading B.class the annotation is incorrectly placed on the first type argument:
$ javac -processor P B
g(java.util.function.Function)

-----
Title: [JDK-8337958] Out-of-bounds array access in secondary_super_cache
Priority: P3
Type: Bug
Component: hotspot
Description: The fix for JDK-8180450, secondary_super_cache does not scale well, has a rare (and benign) out-of-bounds array access. While this bug is very unlikely ever to cause a failure, it should be fixed.
OS: generic

-----
Title: [JDK-8337981] ShenandoahHeap::is_in should check for alive regions
Priority: P4
Type: Enhancement
Component: hotspot
Description: The expected behavior of `CollectedHeap::is_in` is to check whether the object belongs to the committed parts of the heap. This is useful to check if object resides in the parts of the heap the GC knows are not dead. Yet, Shenandoah's check just verifies that oop is within the heap bounds. So `is_in` check for an object that is in trashed/empty region would pass by accident, and we will miss detecting bugs. This should be rectified.
Among other things, the fix would enable JDK-8337978 checks to work for JDK-8337941 failure detection.

-----
Title: [JDK-8337998] CompletionFailure in getEnclosingType attaching type annotations
Priority: P3
Type: Bug
Component: tools
Description: The following example shows a crash in javac while attaching type annotations read from a class file.
To locate type annotations on class types, javac uses getEnclosingType() to look up enclosing types to interpret type_path_kind=1 entries. The location on inner classes is expressed 'backwards', where an empty path locates the on the 'outermost part of the type for which a type annotation is admissible', and each type_path_kind=1 steps into a nested type.
For this specific issue, there is enough information in the InnerClasses attribute to determine whether the class type has an enclosing type, so this symbol completion could likely be avoided for classes without an enclosing type.
In general, completion failures in this code should not trigger a crash. There are a few possible options: report a non-crash error, report a warning (which could be configurable with -Xlint:classfile or another option), or try to silently tolerate the missing information.
=== ./B.java
import static java.lang.annotation.ElementType.TYPE_USE;
import java.lang.annotation.Target;
class B {
private @Anno A a;
@Target(TYPE_USE)
@interface Anno {}
}
=== ./C.java
class C {
B b;
}
=== ./A.java
class A {}
$ javac -fullversion
javac full version "24-ea+9-972"
$ javac A.java  B.java  C.java
$ rm A.clas
$ javac C.java -sourcepath : -XDdev
An exception has occurred in the compiler (24-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
com.sun.tools.javac.code.Symbol$CompletionFailure: class file for A not found
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.newCompletionFailure(ClassFinder.java:420)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.classFileNotFound(ClassFinder.java:407)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.fillIn(ClassFinder.java:402)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:302)
at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:703)
at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1471)
at jdk.compiler/com.sun.tools.javac.code.Symbol.apiComplete(Symbol.java:709)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$1.getEnclosingType(ClassReader.java:612)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationLocator.visitClassType(ClassReader.java:2525)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationLocator.visitClassType(ClassReader.java:2501)
at jdk.compiler/com.sun.tools.javac.code.Type$ClassType.accept(Type.java:1053)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4920)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2466)

-----
Title: [JDK-8338010] WB_IsFrameDeoptimized miss ResourceMark
Priority: P4
Type: Bug
Component: hotspot
Description: The test com/sun/jdi/EATests.java#id0 sometimes fails with
Stack: [0x000000f373e00000,0x000000f373f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc956e1]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:235)
V  [jvm.dll+0xf59abb]  VMError::report+0x149b  (vmError.cpp:1010)
V  [jvm.dll+0xf5c15e]  VMError::report_and_die+0x80e  (vmError.cpp:1845)
V  [jvm.dll+0x55796e]  report_fatal+0x7e  (debug.cpp:214)
V  [jvm.dll+0xd4d591]  ResourceArea::allocate_bytes+0x111  (resourceArea.inline.hpp:33)
V  [jvm.dll+0xf44bef]  vframe::new_vframe+0x7f  (vframe.cpp:68)
V  [jvm.dll+0x7fb97a]  JavaThread::last_java_vframe+0x3a  (javaThread.cpp:2044)
V  [jvm.dll+0xf8f659]  WB_IsFrameDeoptimized+0x219  (whitebox.cpp:798)
C  0x000001fbdebd3b96  (no source info available)

-----
Title: [JDK-8338064] Give better error for ConcurrentHashTable corruption
Priority: P4
Type: Bug
Component: hotspot
Description: When nodes in the ConcurrentHashTable get corrupted and their hash codes don't match, resizing fails with an unhelpful message.  See linked bug for details.

-----
Title: [JDK-8338136] Hotspot should support multiple large page sizes on Windows
Priority: P3
Type: Enhancement
Component: hotspot
Description: OpenJDK on Windows only supports large pages https://mail.openjdk.org/pipermail/hotspot-runtime-dev/2023-October/065382.html for some background behind the 4MB limit. This limitation should be removed for the AMD64 architecture.
This change will be behind a new proposed JVM flag (-XX:+EnableAllLargePageSizesForWindows) that defaults to FALSE. The flag allows users to opt in to the new large page handling behavior, with a warning when the requested large page size is not a multiple of the OS minimum page size.
OS: windows

-----
Title: [JDK-8338154] Fix -Wzero-as-null-pointer-constant warnings in gtest framework
Priority: P4
Type: Enhancement
Component: hotspot
Description: There are several places in the gtest framework that trigger -Wzero-as-null-pointer-constant warnings when that warning is enabled.
Some are in our code, and should be fixed.  Some are in 3rd party code, and should be suppressed rather than modifying that code.

-----
Title: [JDK-8338202] Shenandoah: Improve handshake closure labels
Priority: P4
Type: Enhancement
Component: hotspot
Description: Currently, Shenandoah has a few handshakes that have not very clear names, "ShenandoahRendezvous". Would be good to make them more explicit.
```
Event: 2.593 Executing VM operation: Shenandoah Init Marking
Event: 2.594 Executing VM operation: Shenandoah Init Marking done
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake)
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake) done
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake)
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake) done
Event: 2.599 Executing VM operation: Shenandoah Final Mark and Start Evacuation
Event: 2.600 Executing VM operation: Shenandoah Final Mark and Start Evacuation done
Event: 2.600 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous)
Event: 2.600 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous) done
Event: 2.604 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous)
Event: 2.604 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous) done
Event: 2.605 Executing VM operation: CleanClassLoaderDataMetaspaces
Event: 2.606 Executing VM operation: CleanClassLoaderDataMetaspaces done
Event: 2.606 Executing VM operation: Shenandoah Init Update References
Event: 2.606 Executing VM operation: Shenandoah Init Update References done
Event: 2.611 Executing VM operation: HandshakeAllThreads (Shenandoah Update Thread Roots)
Event: 2.611 Executing VM operation: HandshakeAllThreads (Shenandoah Update Thread Roots) done
Event: 2.611 Executing VM operation: Shenandoah Final Update References
Event: 2.611 Executing VM operation: Shenandoah Final Update References done
```

-----
Title: [JDK-8338314] JFR: Split JFRCheckpoint VM operation
Priority: P4
Type: Enhancement
Component: hotspot
Description: Investigating JFR crashes is a bit tedious, as Events section in hs_err shows just:
```
Event: 3.006 Executing VM operation: JFRCheckpoint
Event: 3.006 Executing VM operation: JFRCheckpoint done
```
What is that JFRCheckpoint doing is unclear, because it can do two separate things: clear or write. It would be good if we could disambiguate the two. Since there are only two flavors of checkpoint, I think we can just split the VMOp into two more precisely named ones, so it gives us e.g.:
```
Event: 2.462 Executing VM operation: JFRSafepointClear
Event: 2.463 Executing VM operation: JFRSafepointClear done
```

-----
Title: [JDK-8339148] Make os::Linux::active_processor_count() public
Priority: P3
Type: Enhancement
Component: hotspot
Description: During review of JDK-8322420 it was mentioned that some use-cases for the container code need the host active CPU count and not only the containerized value (which might be equal or less). I therefore, propose to make os::Linux::active_processor_count() public, which provides this info currently. It would be useful to report the host active cpus in JFR events too - if they differ to the containerized value - like we do for memory.
Some code that works around this issue currently, then needs to be cleaned up once this bug is fixed.
OS: generic

-----
Title: [JDK-8339288] Improve diagnostic logging runtime/cds/DeterministicDump.java
Priority: P4
Type: Sub-task
Component: hotspot
Description: Currently, diagnosing the failures in DeterministicDump.java rely on analysis of the CDS map files, which are saved in the scratch directory when this test is executed.
Normally, we run jtreg with at least -retain:fail, so the CDS map files are saved when the test fails. However, when this test fails inside GitHub actions, the map files are not saved. We only see a very short error message:
STDERR:
java.lang.RuntimeException: File content different at byte #4, b0 = 96, b1 = 80
at DeterministicDump.compare(DeterministicDump.java:114)
at DeterministicDump.doTest(DeterministicDump.java:73)
at DeterministicDump.main(DeterministicDump.java:42)
But this is just the archive checksum, which is useless for diagnostic purposes.
Instead, we should print the textual diff of the first material difference between the two map files. For example: if the 5th word of this method is different in the two dumps (0000000000000000 vs 1111111111111111), we print out the following to STDOUT, to be captured in the JTR file.
[first difference: map file #1]
0x00000008001b8ef8:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................
0x00000008001b8f18: @@ Method            128 java.lang.Object java.lang.Object.clone()
0x00000008001b8f18:   00000008000007c0 0000000000000000 0000000800dcb4f8 0000000000000000   ................................
0x00000008001b8f38:   0000000000000000 0000000000000000 0000000400000104 0300000300000000   ................................
0x00000008001b8f58:   0000000000000000 0000000800585710 0000000000000000 0000000000000000   .........WX.....................
0x00000008001b8f78:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................
[first difference: map file #2]
0x00000008001b8ef8:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................
0x00000008001b8f18: @@ Method            128 java.lang.Object java.lang.Object.clone()
0x00000008001b8f18:   00000008000007c0 0000000000000000 0000000800dcb4f8 0000000000000000   ................................
0x00000008001b8f38:   1111111111111111 0000000000000000 0000000400000104 0300000300000000   ................................
0x00000008001b8f58:   0000000000000000 0000000800585710 0000000000000000 0000000000000000   .........WX.....................
0x00000008001b8f78:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................

-----
Title: [JDK-8339300] CollectorPolicy.young_scaled_initial_ergo_vm gtest fails on ppc64 based platforms
Priority: P4
Type: Bug
Component: hotspot
Description: Looks like the failure of CollectorPolicy.young_scaled_initial_ergo_vm started when JDK-8258483 came in.
AIX / Linux ppc64le:
[ RUN      ] CollectorPolicy.young_scaled_initial_ergo_vm
test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:122: Failure
Expected equality of these values:
expected
Which is: 44695552
NewSize
Which is: 41943040
test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:78: Failure
Expected: checker-execute() doesn't generate new fatal failures in the current thread.
Actual: it does.
[  FAILED  ] CollectorPolicy.young_scaled_initial_ergo_vm (0 ms)
OS: generic

-----
Title: [JDK-8339538] Wrong timeout computations in DnsClient
Priority: P4
Type: Bug
Component: core-libs
Description: The following issues related to timeout computation in the 'com.sun.jndi.dns.DnsClient' code have been reported here:
https://mail.openjdk.org/pipermail/core-libs-dev/2024-September/128797.html
1. Non-monotonic time source is used to calculate the duration of receive operation:
"       long start = System.currentTimeMillis();
gotData = blockingReceive(udpChannel, ipkt, timeoutLeft);
long end = System.currentTimeMillis();
System.currentTimeMillis() is not monotonic and therefore it could happen that end - start  MIN_TIMEOUT);
Here, timeoutLeft is not iteratively decreased, but is always derived from `pktTimeout`.
I can see a case where `timeoutLeft` never drops below `MIN_TIMEOUT` (this is the part where I'm not sure if I'm missing some deeper knowledge)."

-----
Title: [JDK-8339639] Opensource few AWT PopupMenu tests
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/PopupMenu/PopupMenuVisuals/PopupMenuVisuals.java
./java/awt/PopupMenu/PopupHangTest/PopupHangTest.java
are to be converted from applet to main based

-----
Title: [JDK-8339678] Update runtime/condy tests to be executed with VM flags
Priority: P4
Type: Enhancement
Component: hotspot
Description: Need to replace
ProcessTools.createLimitedTestJavaProcessBuilder
and
remove
vm.flagless

-----
Title: [JDK-8339727] Open source several AWT focus tests - series 1
Priority: P4
Type: Bug
Component: client-libs
Description: Convert closed FOcus applet tests
./java/awt/Focus/OverrideRedirectWindowActivationTest/ActivateOnProperAppContextTest/ActivateOnProperAppContextTest.java
./java/awt/Focus/KillFocusTest/KillFocusTest.java
./java/awt/Focus/DisabledAutoTransfer/TestDisabledAutoTransferSwing.java
./java/awt/Focus/DisabledAutoTransfer/TestDisabledAutoTransfer.java
into main based and opensource

-----
Title: [JDK-8339769] Incorrect error message during startup if working directory does not exist
Priority: P4
Type: Bug
Component: core-libs
Description: When I start java on my Macbook after the current working directory has been deleted, the VM crashes during inizialization with the message: "java.lang.InternalError: platform encoding not initialized".
How to reproduce:
% mkdir test
% cd test
% rmdir ../test
% java
Error occurred during initialization of VM
java.lang.InternalError: platform encoding not initialized
at jdk.internal.util.SystemProps$Raw.platformProperties(java.base@23-ea/Native Method)
at jdk.internal.util.SystemProps$Raw.(java.base@23-ea/SystemProps.java:263)
at jdk.internal.util.SystemProps.initProperties(java.base@23-ea/SystemProps.java:67)
at java.lang.System.initPhase1(java.base@23-ea/System.java:2165)
I reproduced this with OpenJDK 21.0.3 as well as recent 23 and 24 builds on macOS 14.5 and 14.6.1. It doesn't happen on my Linux laptop.
OS: os_x

-----
Title: [JDK-8339794] Open source closed choice tests #1
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Choice/ChoiceInsertTest/ChoiceInsertTest.java
java/awt/Choice/ChoiceMouseDragTest/ChoiceMouseDragTest.java
java/awt/Choice/WheelEventsConsumed/WheelEventsConsumed.java

-----
Title: [JDK-8339810] Clean up the code in sun.tools.jar.Main to properly close resources and use ZipFile during extract
Priority: P4
Type: Bug
Component: tools
Description: There are several places in the sun.tools.jar.Main where we currently don't properly close the resources in a try/finally block. Also, the extract implementation against a JAR file, currently uses ZipInputStream while extracting the entries. We should switch to using ZipFile in that part of the implementation like we do for other operations against a JAR file, in the sun.tools.jar.Main code.

-----
Title: [JDK-8339836] Open source several AWT Mouse tests - Batch 1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Mouse tests:
java/awt/Mouse/MouseEnterExitTest/MouseEnterExitTest.java
java/awt/Mouse/MouseEnterExitTest2/MouseEnterExitTest2.java
java/awt/Mouse/MousePressedTest/MousePressedTest.java
java/awt/Mouse/MouseEnterExitTest4/MouseEnterExitTest4.java
java/awt/Mouse/MouseEnterExitTest3/MouseEnterExitTest3.java
OS: generic

-----
Title: [JDK-8339842] Open source several AWT focus tests - series 2
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these Focus applet tests into main and opensource
./java/awt/Focus/LightweightFocusLostTest/LightweightFocusLostTest.java
./java/awt/Focus/MixedWeightFocus/MixedWeightFocus.java
./java/awt/Focus/NextFocusHelperTest/NextFocusHelperTest.java
./java/awt/Focus/FocusChangeOnResizeTest/FocusChangeOnResizeTest.java

-----
Title: [JDK-8339895] Open source several AWT focus tests - series 3
Priority: P4
Type: Bug
Component: client-libs
Description: Convert closed Focus applet tests into main and opensource
./java/awt/Focus/CanvasPanelFocusOnClick/CanvasPanelFocusOnClickTest.java
./java/awt/Focus/ActivateFocusTest/ActivateFocusTest.java
./java/awt/Focus/RequestInInactiveFrame/RequestInInactiveFrame.java
./java/awt/Focus/FocusPolicyTest/FocusPolicyTest.java

-----
Title: [JDK-8339906] Open source several AWT focus tests - series 4
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource several AWT focus applet test to main
./java/awt/Focus/FocusKeepTest/FocusKeepTest.java
./java/awt/Focus/KeyStrokeTest/KeyStrokeTest.java
./java/awt/Focus/ComponentLostFocusTest/ComponentLostFocusTest.java
./java/awt/Focus/AltTabFocus/AltTabEventsTest.java

-----
Title: [JDK-8339935] Open source several AWT focus tests - series 5
Priority: P4
Type: Bug
Component: client-libs
Description: Convert few closed Focus applet tests to main and opensource
./java/awt/Focus/DeinconifyTest/DeinconifyTest.java
./java/awt/Focus/HiddenTraversalTest/HiddenTraversalTest.java
./java/awt/Focus/ProxiedWindowHide/ProxiedWindowHideTest.java
./java/awt/Focus/LightweightPopupTest/LightweightPopupTest.java

-----
Title: [JDK-8339982] Open source several AWT Mouse tests - Batch 2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Mouse tests:
java/awt/Mouse/MouseClickCount/MouseClickCount.java
java/awt/Mouse/MouseDragEnterExitTest/MouseDragEnterExitTest.java
java/awt/Mouse/MouseDragTest/MouseDragTest.java
java/awt/Mouse/OpenWinDoubleClickTest/OpenWinDoubleClickTest.java
java/awt/GraphicsEnvironment/DefaultScreenDeviceTest/DefaultScreenDeviceTest.java
OS: generic

-----
Title: [JDK-8339984] Open source AWT MenuItem related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these MenuITem applet tests into main and opensource
./java/awt/MenuItem/SetFont/MenuSetFontTest.java
./java/awt/MenuItem/NullOrEmptyStringLabelTest/NullOrEmptyStringLabelTest.java
./java/awt/MenuItem/UnicodeMenuItemTest/UnicodeMenuItemTest.java
./java/awt/MenuItem/LotsOfMenuItems/LotsOfMenuItemsTest.java
./java/awt/MenuItem/GiantFontTest/GiantFontTest.java

-----
Title: [JDK-8339995] Open source several AWT focus tests - series 6
Priority: P4
Type: Bug
Component: client-libs
Description: Convert few closed AWT focus applet test and opensource
./java/awt/Focus/InactiveWindowTest/InactiveFocusRace.java
./java/awt/Focus/NativePrintDialog/InitialFocusTest.java
./java/awt/Focus/EmptyWindowKeyTest/EmptyWindowKeyTest.java
./java/awt/Focus/KeyEventPostProcessor/ConsumedKeyEventTest/ConsumedKeyEventTest.java

-----
Title: [JDK-8340024] In ClassReader, extract a constant for the superclass supertype_index
Priority: P4
Type: Enhancement
Component: tools
Description: This line in ClassReader uses a literal 65535, which encodes the supertype_index of a superclass:
t.supertype_field = addTypeAnnotations(t.supertype_field, classExtends(65535));
https://github.com/openjdk/jdk/blob/7f1dae12e5e24d204a70cf610a8c482996556931/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2364
The constant is defined in the JVMS:
A supertype_index value of 65535 specifies that the annotation appears on the superclass in an extends clause of a class declaration.
https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.7.20.1
Vicente observed that extracting that value to a documented constant would improve the readability of the code.

-----
Title: [JDK-8340077] Open source few Checkbox tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Checkbox tests
OS: generic

-----
Title: [JDK-8340084] Open source AWT Frame related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these Frame applet tests into main and opensource
./java/awt/Frame/FrameSetMinimumSizeTest/FrameSetMinimumSizeTest.java
./java/awt/Frame/EmptyFrameTest/EmptyFrameTest.java
./java/awt/Frame/FrameLayoutTest/FrameLayoutTest.java
./java/awt/Frame/DefaultLocationTest/DefaultLocationTest.java
./java/awt/Frame/PackTwiceTest/PackTwiceTest.java

-----
Title: [JDK-8340143] Open source several Java2D rendering loop tests.
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some Java 2D rendering loop tests.

-----
Title: [JDK-8340146] ZGC: TestAllocateHeapAt.java should not run with UseLargePages
Priority: P3
Type: Bug
Component: hotspot
Description: TestAllocateHeapAt.java expects that creating the heap file works in the current director (`.`). But when using persistent hugepages (-XX:+UseLargePages) this would require the filesystem to be a HugeTLBFS.
I propose that we do not allow running these tests with persistent hugepages.
The following two tests fail in the JDK24 CI:
gc/z/TestAllocateHeapAt.java
gc/x/TestAllocateHeapAt.java
This is seen with hugepages testing. We see warnings in the output then the VM fails to start:
----------System.err:(36/2261)----------
Java HotSpot(TM) 64-Bit Server VM warning: Failed to reserve and commit memory using large pages. req_addr: 0x0000000399000000 bytes: 18907922432
stdout: [[0.005s][info][gc,init] Initializing The Z Garbage Collector
[0.005s][info][gc,init] Version: 24-ea+16-1680 (fastdebug)
[0.005s][info][gc,init] Using deprecated non-generational mode
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] CPUs: 12 total, 12 available
[0.005s][info][gc,init] Memory: 72098M
[0.005s][info][gc,init] Large Page Support: Enabled (Explicit)
[0.005s][info][gc,init] GC Workers: 1 (dynamic)
[0.005s][info][gc,init] Address Space Type: Contiguous/Unrestricted/Complete
[0.005s][info][gc,init] Address Space Size: 512M x 3 = 1536M
[0.005s][info][gc,init] Heap Backing File: ./#506511511
[0.005s][info][gc,init] Heap Backing Filesystem: other (0x58465342)
[0.005s][error][gc     ] -XX:+UseLargePages (without -XX:+UseTransparentHugePages) can only be enabled when using a hugetlbfs filesystem
[0.006s][info ][gc,init] Runtime Workers: 1
[0.006s][info ][gc     ] Using The Z Garbage Collector
];
stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
exitValue = 1

-----
Title: [JDK-8340164] Open source few Component tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Component tests

-----
Title: [JDK-8340173] Open source some Component/Panel/EventQueue tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some Component/Panel/EventQueue tests

-----
Title: [JDK-8340176] Replace usage of -noclassgc with -Xnoclassgc in test/jdk/java/lang/management/MemoryMXBean/LowMemoryTest2.java
Priority: P4
Type: Bug
Component: core-svc
Description: The "-noclassgc" is an undocumented java launcher option, which the java launcher internally converts to the HotSpot VM specific "-Xnoclassgc" before passing it to the JVM.
The test/jdk/java/lang/management/MemoryMXBean/LowMemoryTest2.java should instead use "-Xnoclassgc" which is specified in the java command specification https://docs.oracle.com/en/java/javase/22/docs/specs/man/java.html#extra-options-for-java as being specific to Hotspot JVM.

-----
Title: [JDK-8340193] Open source several AWT Dialog tests - Batch 1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Mouse tests:
java/awt/Dialog/FileDialogIconTest/FileDialogIconTest.java
java/awt/Dialog/FileDialogWrongNameCrash/FileDialogWrongNameCrash.java
java/awt/Dialog/DialogResizeTest/DialogResizeTest.java
java/awt/Dialog/GetLocationTest_1/GetLocationTest_1.java
java/awt/Dialog/DialogIconTest/DialogIconTest.java
OS: generic

-----
Title: [JDK-8340228] Open source couple more miscellaneous AWT tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple more AWT regression tests

-----
Title: [JDK-8340271] Open source several AWT Robot tests
Priority: P4
Type: Bug
Component: client-libs
Description: Few robot tests to be converted and opensourced
./java/awt/Robot/RobotScrollTest/RobotScrollTest.java
./java/awt/Robot/CreateScreenCapture/CreateScreenCapture.java
./java/awt/Robot/Capture256/Capture256mode.java
along with this
./java/awt/datatransfer/ClipbrdPastedImageTest/ClipbrdPastedImageTest.java

-----
Title: [JDK-8340279] Open source several AWT Dialog tests - Batch 2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Dialog/PrintToFileTest/PrintToFileRevoked.java
java/awt/Dialog/PrintToFileTest/PrintToFileGranted.java
java/awt/Dialog/TopmostModalDialogTest/TopmostModalDialogTest.java
java/awt/Dialog/FileDialogFilterTest/FileDialogFilterTest.java
java/awt/Dialog/DialogSystemMenu/DialogSystemMenu.java
OS: generic

-----
Title: [JDK-8340332] Open source mixed AWT tests - Set3
Priority: P4
Type: Bug
Component: client-libs
Description: Open source Mixed AWT tests
OS: generic

-----
Title: [JDK-8340366] Open source several AWT Dialog tests - Batch 3
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Dialog/DialogModalityTest/ModalDialogTest.java
java/awt/Dialog/DialogModalityTest/DialogModalityTest.java
java/awt/Dialog/DialogResizeTest2/DialogResizeTest2.java
java/awt/Dialog/HideDialogTest/HideDialogTest.java
java/awt/Dialog/FileDialogUserFilterTest/FileDialogUserFilterTest.java
OS: generic

-----
Title: [JDK-8340367] Opensource few AWT image tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few Image tests
./java/awt/image/MemoryImageSource/ImageOffsetTest/ImageOffsetTest.java
./java/awt/image/TransformImage.java
./java/awt/image/BufferedImage/GrayAATextTest.java
./java/awt/image/GrayAlpha/GrayAlpha.java

-----
Title: [JDK-8340393] Open source closed choice tests #2
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/Choice/ChoiceBigTest/ChoiceBigTest.java
./java/awt/Choice/CheckChoiceTest/CheckChoiceTest.java
./java/awt/Choice/DisabledList/DisabledList.java
./java/awt/Choice/ChoiceFocusGainTest/ChoiceFocusTest.java

-----
Title: [JDK-8340407] Open source a few more Component related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source few more java.awt.Component related regression tests

-----
Title: [JDK-8340417] Open source some MenuBar tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some MenuBar tests

-----
Title: [JDK-8340432] Open source some MenuBar tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some MenuBar tests

-----
Title: [JDK-8340433] Open source closed choice tests #3
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/Choice/DeadlockTest/DeadlockTest.java
./java/awt/Choice/SetFontTest/SetFontTest.java
./java/awt/Choice/ChoicePosTest/ChoicePosTest.java

-----
Title: [JDK-8340437] Open source few more AWT Frame related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these Frame applet tests into main and opensource
./java/awt/Frame/DisabledParentOfToplevel/DisabledParentOfToplevel.java
./java/awt/Frame/IMStatusBar/IMStatusBar.java
./java/awt/Frame/FrameVisualTest/FrameVisualTest.java
./java/awt/Frame/MultiScreenTest/MultiScreenTest.java
./java/awt/Frame/WarningWindowTest/WarningWindowTest.java

-----
Title: [JDK-8340458] Open source additional Component tests (part 2)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source few more tests related to java.awt.Component

-----
Title: [JDK-8340555]  Open source DnD tests - Set4
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DnD tests
OS: generic

-----
Title: [JDK-8340560] Open Source several AWT/2D font and rendering tests
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8340605] Open source several AWT PopupMenu tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several AWT PopupMenu tests.

-----
Title: [JDK-8340621] Open source several AWT List tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few AWT List tests
./java/awt/List/DisabledListIsGreyTest/DisabledListIsGreyTest.java
./java/awt/List/MultiSelectionListCrashTest/MultiSelectionListCrashTest.java
./java/awt/List/SelectedItemVisibilityTest/SelectedItemVisibilityTest.java
./java/awt/List/ListFrameResizeTest/ListFrameResizeTest.java
./java/awt/List/ScrollbarPositionTest/ScrollbarPositionTest.java

-----
Title: [JDK-8340625] Open source additional Component tests (part 3)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple more java.awt.Component related regression tests.

-----
Title: [JDK-8340639] Open source few more AWT List tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few List tests
./java/awt/List/HorizScrollWorkTest/HorizScrollWorkTest.java
./java/awt/List/HorizScrollbarEraseTest/HorizScrollbarEraseTest.java
./java/awt/List/ListSmoothScrollingTest/ListSmoothScrollingTest.java
./java/awt/List/ScrollbarPresenceTest/ScrollbarPresenceTest.java
./java/awt/List/SetForegroundTest/SetForegroundTest.java

-----
Title: [JDK-8340713]  Open source DnD tests - Set5
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DnD tests
OS: generic

-----
Title: [JDK-8340784] Remove PassFailJFrame constructor with screenshots
Priority: P4
Type: Bug
Component: client-libs
Description: The PassFailJFrame constructor which accepts `boolean screenCapture` can be removed. It was added in JDK-8294535 where the screenshot feature was added.
At the same time, JDK-8294535 added Builder class which provides simplified configuration of PassFailJFrame.
I haven't found any usage of the PassFailJFrame which passes the boolean parameter. Remove this constructor in favour using the Builder.
Other constructors are used in tests, they can't be removed unless these tests are refactored.

-----
Title: [JDK-8340790] Open source several AWT Dialog tests - Batch 4
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Dialog/JaFileDialogFont/JaFileDialogFont.java
java/awt/Dialog/FileDialogGetFileTest/FileDialogGetFileTest.java
java/awt/Dialog/EnabledResetTest/EnabledResetTest.java
java/awt/Dialog/ChoiceModalDialogTest/ChoiceModalDialogTest.java
java/awt/Dialog/DialogBackgroundTest/DialogBackgroundTest.java
OS: generic

-----
Title: [JDK-8340809] Open source few more AWT PopupMenu tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few more AWT PopupMenu tests

-----
Title: [JDK-8340874] Open source some of the AWT Geometry/Button tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some of the awt/geom and awt/Button tests
OS: generic

-----
Title: [JDK-8340907] Open source closed frame tests # 2
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Frame/FrameSetCursorTest.java
java/awt/Frame/InsetCorrectionTest.java
java/awt/Frame/InitialIconifiedTest.java
java/awt/Frame/DeiconifyClipTest.java

-----
Title: [JDK-8340966] Open source few Checkbox and Cursor tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Checkbox and Cursor tests

-----
Title: [JDK-8340967] Open source few Cursor tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Cursor tests

-----
Title: [JDK-8340978] Open source few DnD tests - Set6
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DnD tests
OS: generic

-----
Title: [JDK-8340985] Open source some Desktop related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple regression tests related to java.awt.Desktop class.

-----
Title: [JDK-8341000] Open source some of the AWT Window tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open Source some of the AWT ImageClass/Window tests
OS: generic

-----
Title: [JDK-8341004] Open source AWT FileDialog related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source AWT FileDialog related tests

-----
Title: [JDK-8341072] Open source several AWT Canvas and Rectangle related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Canvas/MultiDitherTest/MultiDitherTest.java
java/awt/Canvas/MultiGraphicsTest/MultiGraphicsTest.java
java/awt/Canvas/NoEventsLeakTest/NoEventsLeakTest.java
java/awt/Rectangle/IntersectionTest/IntersectionTest.java
OS: generic

-----
Title: [JDK-8341128] open source some 2d graphics tests
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341148] Open source several Choice related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source several regression tests related to java.awt.Choice class

-----
Title: [JDK-8341162] Open source some of the AWT window test
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some of the AWT window test
OS: generic

-----
Title: [JDK-8341170] Open source several Choice related tests (part 2)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source a few more Choice related regression tests.

-----
Title: [JDK-8341177] Opensource few List and a Window test
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few List and a Window test
./java/awt/List/MouseDraggedOriginatedByScrollBarTest/MouseDraggedOriginatedByScrollBarTest.java
./java/awt/List/ActionEventWhenHitEnterTest/ActionEventWhenHitEnterTest.java
./java/awt/List/ListAddPerfTest/ListAddPerfTest.java
./java/awt/Window/4189244/bug4189244.java

-----
Title: [JDK-8341191] Open source few more AWT FileDialog tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few more AWT FileDialog tests

-----
Title: [JDK-8341239] Open source closed frame tests # 3
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341257] Open source few DND tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DND tests

-----
Title: [JDK-8341258] Open source few various AWT tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few various AWT tests

-----
Title: [JDK-8341278] Open source few TrayIcon tests - Set7
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few TrayIcon tests
OS: generic

-----
Title: [JDK-8341298] Open source more AWT window tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source more AWT window tests
OS: generic

-----
Title: [JDK-8341373] Open source closed frame tests # 4
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341378] Open source few TrayIcon tests - Set8
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few TrayIcon tests
OS: generic

-----
Title: [JDK-8341447] Open source closed frame tests # 5
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341535] sun/awt/font/TestDevTransform.java fails with RuntimeException: Different rendering
Priority: P4
Type: Bug
Component: client-libs
Description: The mentioned test was recently added. But it fails on various Linux machines :
Linux ppc64le Power8/SLES 12.5  fails
Linux ppc64le  Power9/Ubuntu 23.10   fails
Linux x86_64  SLES 12.5 fails
Exception of the unchanged test is
java.lang.RuntimeException: Different rendering
at TestDevTransform.compare(TestDevTransform.java:112)
at TestDevTransform.main(TestDevTransform.java:152)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
OS: linux

-----
Title: [JDK-8341637] java/net/Socket/UdpSocket.java fails with "java.net.BindException: Address already in use" (macos-aarch64)
Priority: P4
Type: Bug
Component: core-libs
Description: The following test fails in the JDK 24 CI on macos-aarch64:
java/net/Socket/UdpSocket.java
Here's a snippet from the log file:
----------System.out:(50/2978)----------
BindException caught retry Socket creation
test UdpSocket.testMaxSockets(): failure
java.net.BindException: Address already in use
at java.base/sun.nio.ch.Net.connect0(Native Method)
at java.base/sun.nio.ch.Net.connect(Net.java:589)
at java.base/sun.nio.ch.Net.connect(Net.java:578)
at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
at java.base/java.net.Socket.connect(Socket.java:759)
at java.base/java.net.Socket.connect(Socket.java:693)
at java.base/java.net.Socket.(Socket.java:561)
at java.base/java.net.Socket.(Socket.java:534)
at UdpSocket.newUdpSocket(UdpSocket.java:143)
at UdpSocket.testMaxSockets(UdpSocket.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
test UdpSocket.testSendReceive(): success
===============================================
java/net/Socket/UdpSocket.java
Total tests run: 2, Passes: 1, Failures: 1, Skips: 0
===============================================
OS: os_x

-----
Title: [JDK-8341779] [REDO BACKPORT] type annotations are not visible to javac plugins across compilation boundaries (JDK-8225377)
Priority: P3
Type: Bug
Component: tools
Description: javac fails to associate type annotations with TypeMirrors for some symbols loaded from the classpath, which prevents plugins from accessing those annotations across compilation boundaries. The annotations are present if the same symbol is compiled from source in the compilation where the plugin runs.
=== ./test/B.java
abstract class B extends A {}
=== ./test/A.java
import java.lang.annotation.ElementType;
import java.util.List;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@interface TypeAnnotation {}
abstract class A implements List {}
=== ./plugin/p/P.java
package p;
import com.sun.source.util.JavacTask;
import com.sun.source.util.Plugin;
import com.sun.source.util.TaskEvent;
import com.sun.source.util.TaskListener;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
public class P implements Plugin {
@Override
public String getName() {
return "P";
}
@Override
public void init(JavacTask javacTask, String... strings) {
javacTask.addTaskListener(
new TaskListener() {
@Override
public void finished(TaskEvent e) {
if (e.getKind() != TaskEvent.Kind.ENTER) {
return;
}
TypeElement b = javacTask.getElements().getTypeElement("B");
for (TypeMirror i :
((TypeElement) ((DeclaredType) b.getSuperclass()).asElement()).getInterfaces()) {
System.err.printf("%s %s\n", i, i.getAnnotationMirrors());
}
}
});
}
}
=== ./plugin/module-info.java
module p {
requires transitive jdk.compiler;
provides com.sun.source.util.Plugin with p.P;
}
===
$ javac $(find plugin -name '*.java')
# when both compilation units are compiled from source, the type annotations are visible
$ javac --processor-module-path plugin -Xplugin:P test/A.java test/B.java
java.util.List
java.util.List
# when 'A' is loaded from the classpath, the type annotations on its supertype are not visible
$ javac --processor-module-path plugin -Xplugin:P -classpath test test/B.java
java.util.List

-----
Title: [JDK-8225377] type annotations are not visible to javac plugins across compilation boundaries
Priority: P3
Type: Bug
Component: tools
Description: javac fails to associate type annotations with TypeMirrors for some symbols loaded from the classpath, which prevents plugins from accessing those annotations across compilation boundaries. The annotations are present if the same symbol is compiled from source in the compilation where the plugin runs.
=== ./test/B.java
abstract class B extends A {}
=== ./test/A.java
import java.lang.annotation.ElementType;
import java.util.List;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@interface TypeAnnotation {}
abstract class A implements List {}
=== ./plugin/p/P.java
package p;
import com.sun.source.util.JavacTask;
import com.sun.source.util.Plugin;
import com.sun.source.util.TaskEvent;
import com.sun.source.util.TaskListener;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
public class P implements Plugin {
@Override
public String getName() {
return "P";
}
@Override
public void init(JavacTask javacTask, String... strings) {
javacTask.addTaskListener(
new TaskListener() {
@Override
public void finished(TaskEvent e) {
if (e.getKind() != TaskEvent.Kind.ENTER) {
return;
}
TypeElement b = javacTask.getElements().getTypeElement("B");
for (TypeMirror i :
((TypeElement) ((DeclaredType) b.getSuperclass()).asElement()).getInterfaces()) {
System.err.printf("%s %s\n", i, i.getAnnotationMirrors());
}
}
});
}
}
=== ./plugin/module-info.java
module p {
requires transitive jdk.compiler;
provides com.sun.source.util.Plugin with p.P;
}
===
$ javac $(find plugin -name '*.java')
# when both compilation units are compiled from source, the type annotations are visible
$ javac --processor-module-path plugin -Xplugin:P test/A.java test/B.java
java.util.List
java.util.List
# when 'A' is loaded from the classpath, the type annotations on its supertype are not visible
$ javac --processor-module-path plugin -Xplugin:P -classpath test test/B.java
java.util.List

-----
Title: [JDK-8341972] java/awt/dnd/DnDRemoveFocusOwnerCrashTest.java timed out after JDK-8341257
Priority: P4
Type: Bug
Component: client-libs
Description: The following test timed out in the JDK24 CI:
java/awt/dnd/DnDRemoveFocusOwnerCrashTest.java
Here's a snippet from the log file:
#section:main
----------messages:(9/356)----------
command: main DnDRemoveFocusOwnerCrashTest
reason: User specified action: run main DnDRemoveFocusOwnerCrashTest
started: Fri Oct 11 04:55:22 UTC 2024
Mode: othervm
Additional options from @modules: --add-modules java.desktop
Timeout information:
--- Timeout information end.
finished: Fri Oct 11 05:00:39 UTC 2024
elapsed time (seconds): 316.686
----------configuration:(3/43)----------
Boot Layer
add modules: java.desktop
----------System.out:(1/37)----------
Timeout signalled after 240 seconds
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(46/5301)*----------
result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-24+20-2248\windows-x64.jdk\jdk-24\bin\java' timed out (timeout set to 240000ms, elapsed time including timeout handling was 316670ms).
The test did pass while the timeout handler was running.
OS: windows

-----
Title: [JDK-8342075] HttpClient: improve HTTP/2 flow control checks
Priority: P4
Type: Bug
Component: core-libs
Description: The HttpClient should report flow control issues to the server as FLOW_CONTROL_ERROR.

-----
Title: [JDK-8342376] More reliable OOM handling in ExceptionDuringDumpAtObjectsInitPhase test
Priority: P4
Type: Bug
Component: hotspot
Description: Found a test bug while testing JDK-8341913 with Shenandoah. The allocation that follows OOM almost always succeeds with Shenandoah. Actually, it succeeds with other GCs as well, it just so happens that other GCs throw OOM with "GC overhead limit exceeded".

-----
Title: [JDK-8342524] Use latch in AbstractButton/bug6298940.java instead of delay
Priority: P5
Type: Bug
Component: client-libs
Description: Use a CountDownLatch in javax/swing/AbstractButton/6298940/bug6298940.java instead of delay.
The latch provides a direct way to synchronise EDT and main thread, and the test will finish quicker.

-----
Title: [JDK-8342633] javax/management/security/HashedPasswordFileTest.java creates tmp file in src dir
Priority: P3
Type: Bug
Component: core-svc
Description: javax/management/security/HashedPasswordFileTest.java fails if the test source tree is read-only as it tries to create a temporary file there instead of in the provided jtreg scratch dir.
Stacktrace:
test HashedPasswordFileTest.testClearTextPasswordFile(): failure
java.io.IOException: Permission denied
at java.base/java.io.UnixFileSystem.createFileExclusively0(Native Method)
at java.base/java.io.UnixFileSystem.createFileExclusively(UnixFileSystem.java:218)
at java.base/java.io.File.createNewFile(File.java:1057)
at HashedPasswordFileTest.createNewPasswordFile(HashedPasswordFileTest.java:123)
at HashedPasswordFileTest.generateClearTextPasswordFile(HashedPasswordFileTest.java:128)
at HashedPasswordFileTest.testClearTextPasswordFile(HashedPasswordFileTest.java:214)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8342958] Use jvmArgs consistently in microbenchmarks
Priority: P4
Type: Enhancement
Component: performance
Description: Currently in the OpenJDK corpus of JMH microbenchmarks all different @Fork(jvmArgs/-Append/-Prepend = ) options are used.
143 uses of jvmArgsAppend
59 uses of jvmArgsPrepend
18 uses of jvmArgs
This makes for some surprises and makes it easy to override configured flags when setting up and running chunks of microbenchmarks.
I propose we consolidate on @Fork(jvmArgs = ..) as the preferred option in microbenchmarks, leaving `-jvmArgsAppend` and `-jvmArgsPrepend` free for use by ops.

-----
Title: [JDK-8343019] Primitive caches must use boxed instances from the archive
Priority: P3
Type: Bug
Component: core-libs
Description: This is forked from JDK-8342642 and filed as a general issue for archived boxed Integer cache when it's recreated at runtime. In short, current code drops the entire primitive cache when the CDS archived version of the cache is too short. This poses a problem with code that uses CDS archived cache instances, since the boxed equality would break when comparing the CDS-archived value and the Integer cached value recreated at runtime.
https://github.com/openjdk/jdk/pull/21672#issuecomment-2434359711 discusses a possible fix for the Integer cache. JDK-8342642 has additional details.

-----
Title: [JDK-8343037] Missing @since tag on JColorChooser.showDialog overload
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
With JDK-8051548 in Java 9, we got a new overload of `JColorChooser.showDialog` to specify whether color transparency controls be shown. The overload should specify the `@since 9` tag.
https://docs.oracle.com/javase/9/docs/api/javax/swing/JColorChooser.html#showDialog-java.awt.Component-java.lang.String-java.awt.Color-boolean-
OS: generic

-----
Title: [JDK-8343103] Enable debug logging for vmTestbase/nsk/jvmti/scenarios/sampling/SP05/sp05t003/TestDescription.java
Priority: P4
Type: Sub-task
Component: hotspot
Description: Enable debug logging in the test to get more details about test failures (JDK-8305010)
OS: generic

-----
Title: [JDK-8343124] Tests fails with java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainTask cannot access
Priority: P4
Type: Bug
Component: client-libs
Description: Following two test fails with
open/test/jdk/java/awt/print/Dialog/PrintDlgPageable.java
open/test/jdk/javax/print/StreamPrintingOrientation.java
test/jdk/javax/print/URLGIFPrinting.java
----------System.err:(11/874)----------
java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainTask cannot access a member of class PrintDlgPageable with modifiers "public static"
at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:401)
at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:692)
at java.base/java.lang.reflect.Method.invoke(Method.java:563)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
This two tests is not a public class & when I added public the test passes
OS: generic

-----
Title: [JDK-8343144] UpcallLinker::on_entry racingly clears pending exception with GC safepoints
Priority: P4
Type: Bug
Component: core-libs
Description: In UpcallLinker::on_entry we clear_pending_exception() right before transitioning from native to Java. This clears an oop on the thread that might be concurrently scanned by the GC. The GC may read the oop and update its address to a new location, without using any atomics at all (because we are in a safepoint and nobody should be messing around with it concurrently). The lack of atomics means that the following interleaving is possible:
GCThread: old_oop = JT1-_pending_exception
JT1: clear_pending_exception()
GCThread: JT1-_pending_exception = new_addr(old_oop);
Other interesting things can happen as well. But it's safe to say we shouldn't be messing around with oops in_native concurrently to GC safepoints.

-----
Title: [JDK-8343170] java/awt/Cursor/JPanelCursorTest/JPanelCursorTest.java does not show the default cursor
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Cursor/JPanelCursorTest/JPanelCursorTest.java does not show the default cursor instead it shows the move cursor on OL-9-3 & windows-x64-11
Step to reproduce
------------------------
1) Run java/awt/Cursor/JPanelCursorTest/JPanelCursorTest.java
2) When the frame is visible, move the mouse pointer to the left side of the frame ( Default component). If you dn't see the default cursor then the bug is reproduced

-----
Title: [JDK-8343224] print/Dialog/PaperSizeError.java fails with MediaSizeName is not A4: A4
Priority: P3
Type: Bug
Component: client-libs
Description: open/test/jdk/java/awt/print/Dialog/PaperSizeError.java fails with the following
----------System.out:(8/289)----------
This test assumes and requires that you have a printer installed
Two page dialogs will appear. You must press 'OK' on both.
If the test fails, it will throw an Exception.
Units = 1/72" size=595.0x842.0
Units = 1/72" new size=595.0x842.0
Units = MM new size=209.90277x297.03888
Media = A4
----------System.err:(12/693)----------
java.lang.RuntimeException: MediaSizeName is not A4: A4
at PaperSizeError.verifyPaper(PaperSizeError.java:112)
at PaperSizeError.main(PaperSizeError.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
Tested on MacOs 14.6 & linux-aarch64-OL-9-3

-----
Title: [JDK-8343342] java/io/File/GetXSpace.java fails on Windows with CD-ROM drive
Priority: P4
Type: Bug
Component: core-libs
Description: On Windows Server 2019, if the drive retrieved by File.listRoots() is assigned as a CD-ROM drive and the disk is not mounted, GetXSpace.java fails with the following stack and the message "The device is not ready":
----------System.err:(23/1555)----------
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::loadLibrary has been called by GetXSpace in an unnamed module (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
java.lang.RuntimeException: The device is not ready
at GetXSpace.getSpace0(Native Method)
at GetXSpace$Space.(GetXSpace.java:112)
at GetXSpace.testVolumes(GetXSpace.java:431)
at GetXSpace.main(GetXSpace.java:469)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
In addition, if the disk is mounted, GetXSpace.java fails with the following stack and the message "The parameter is incorrect":
----------System.err:(23/1564)----------
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::loadLibrary has been called by GetXSpace in an unnamed module (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
java.lang.RuntimeException: The parameter is incorrect
at GetXSpace.getSpace0(Native Method)
at GetXSpace$Space.(GetXSpace.java:112)
at GetXSpace.testVolumes(GetXSpace.java:431)
at GetXSpace.main(GetXSpace.java:469)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
This happens because GetDiskSpaceInformationW function in libGetXSpace.c fails to get information about the size of the drive to which a CD-ROM drive is assigned.
Above errors have also been reported at https://github.com/openjdk/jdk/pull/12397#issuecomment-1705164515 but have not been resolved.
GetXSpace.java is a test for File.get-X-Space methods. These methods can get information about the size of the CD-ROM drive.  Therefore, if the target drive for the test is a CD-ROM drive, the test should be run without the above errors.
OS: windows

-----
Title: [JDK-8343345] Use -jvmArgsPrepend when running microbenchmarks in RunTests.gmk
Priority: P4
Type: Enhancement
Component: performance
Description: https://bugs.openjdk.org/browse/JDK-8342958 / https://github.com/openjdk/jdk/pull/21683 changed microbenchmarks to configure innate VM flags with @Fork(jvmArgs). This updates the RunTests.gmk runner (used when running with `make TEST=micro:foo`) to use -jvmArgsPrepend to separate this.
(This should have been updated as part of JDK-8342958)

-----
Title: [JDK-8343529] serviceability/sa/ClhsdbWhere.java fails AssertionFailure: Corrupted constant pool
Priority: P4
Type: Bug
Component: hotspot
Description: Error: sun.jvm.hotspot.utilities.AssertionFailure: Corrupted constant pool: 108 ConstantTag:1
sun.jvm.hotspot.utilities.AssertionFailure: Corrupted constant pool: 108 ConstantTag:1
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.Assert.that(Assert.java:32)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getNameAndTypeAt(ConstantPool.java:280)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getSignatureRefIndexAt(ConstantPool.java:391)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getSignatureRefAt(ConstantPool.java:300)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doMethod(GenerateOopMap.java:1730)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interp1(GenerateOopMap.java:1385)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpBB(GenerateOopMap.java:802)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpAll(GenerateOopMap.java:1108)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doInterpretation(GenerateOopMap.java:981)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.computeMap(GenerateOopMap.java:2198)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapForCacheEntry.computeMap(OopMapForCacheEntry.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.fill(OopMapCacheEntry.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.Method.getMaskFor(Method.java:265)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpretedVFrame.getLocals(InterpretedVFrame.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.ui.classbrowser.HTMLGenerator.genHTMLForJavaStackTrace(HTMLGenerator.java:1936)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$45.doit(CommandProcessor.java:1678)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2230)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2200)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2071)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:285)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:507)
OS: linux

-----
Title: [JDK-8343754] Problemlist jdk/jfr/event/oldobject/TestShenandoah.java after JDK-8279016
Priority: P4
Type: Bug
Component: hotspot
Description: See comment in JDK-8279016. I overlooked the case when we just run with Shenandoah without explicitly specifying -XX:+UseShenandoahGC. The test should be disabled in that mode as well.

-----
Title: [JDK-8343855] HTTP/2 ConnectionWindowUpdateSender may miss some unprocessed DataFrames from closed streams
Priority: P3
Type: Bug
Component: core-libs
Description: JDK-8342075 has introduced more flow controls checks, but also introduced a race condition where DataFrames for closed streams may fail to be discounted from the connection window.
The consequence is that WINDOW_UPDATE frames for the connection window may not be sent when they should, preventing the server from making progress and stalling the connection.
This can be shown by modifying the StreamFlowControlTest to send less but bigger frames (e.g. chunks of 1600 bytes instead of chunks of 12 bytes). With such a modification the test can be seen failing intermittently, when sameClient=true.

-----
Title: [JDK-8343891] Test javax/swing/JTabbedPane/TestJTabbedPaneBackgroundColor.java failed
Priority: P4
Type: Bug
Component: client-libs
Description: ----------System.out:(4/64)----------
Testing: Metal
Testing: Nimbus
Testing: CDE/Motif
Testing: GTK+
----------System.err:(11/642)----------
java.lang.RuntimeException: [GTK+ opaque=true]
at TestJTabbedPaneBackgroundColor.main(TestJTabbedPaneBackgroundColor.java:91)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8343936] Adjust timeout in test javax/management/monitor/DerivedGaugeMonitorTest.java
Priority: P4
Type: Bug
Component: core-svc
Description: This is a very long-standing, problem-listed failure.
All failures are with -Xcomp.
The test does have a timing sensitivity, a 1 second wait:
test/jdk/javax/management/monitor/DerivedGaugeMonitorTest.java:
242             my.cdl.await(1000, TimeUnit.MILLISECONDS);
This should be increased to cope with delays caused by -Xcomp compilation.

-----
Title: [JDK-8344316] security/auth/callback/TextCallbackHandler/Password.java make runnable with JTReg and add the UI
Priority: P4
Type: Bug
Component: security-libs
Description: Change security/auth/callback/TextCallbackHandler/Password.java to run with JTReg and show the ui with instructions and generated run command

-----
Title: [JDK-8344346] java/net/httpclient/ShutdownNow.java fails with java.lang.AssertionError: client was still running, but exited after further delay: timeout should be adjusted
Priority: P4
Type: Bug
Component: core-libs
Description: test ShutdownNow.testConcurrent("https://127.0.0.1:56968/https2/exec/retry"): failure
java.lang.AssertionError: client was still running, but exited after further delay: timeout should be adjusted
at ShutdownNow.testConcurrent(ShutdownNow.java:221)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: windows

-----
Title: [JDK-8344361] Restore null return for invalid services from legacy providers
Priority: P3
Type: Bug
Component: security-libs
Description: A DESCRIPTION OF THE PROBLEM :
In Provider.java around line 1285, the following code exists.
Service s = serviceMap.get(key);
if (s == null) {
s = legacyMap.get(key);
if (s != null && !s.isValid()) {
legacyMap.remove(key, s);
}
}
There needs to be a "s = null;" after legacyMap.remove() as otherwise a service which fails  the isValid() test will be returned as is resulting in a failure later.
Unfortunately this appears to happen with providers using the legacy format which results in NullPointerException further down the track when the JCA tries to create an object using a Service with a null class name. It's not immediately clear how legacy parsing is resulting in the invalid services, but they are created with a null class name. For what it's worth this has only started happening with Java 21.
REGRESSION : Last worked in version 17.0.13
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Requesting an algorithm which does not exist will cause this to happen (sometimes). It also seems to get triggered when attempts are made to match keys to signature providers which we think is why it shows up with the PKCS11 provider.
The code is incorrect by inspection though, if s.isValid() is false s should be getting returned as null, not as an invalid service class.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Request for a service which cannot be fully constructed should result in a NoSuchAlgorithmException not a NullPointerException.
ACTUAL -
NullPointerException
CUSTOMER SUBMITTED WORKAROUND :
Catching NullPointerException and hoping it can be treated like NoSuchAlgorithmException.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8344414] ZGC: Another division by zero in rule_major_allocation_rate
Priority: P4
Type: Bug
Component: hotspot
Description: We are still running into this issue (ubsan is enabled in the build) :
test compiler/uncommontrap/TestDeoptOOM.java#Z  shows this on Linux x86_64
jdk/src/hotspot/share/gc/z/zDirector.cpp:490:78: runtime error: division by zero
#0 0x7fac474e0493 in rule_major_allocation_rate src/hotspot/share/gc/z/zDirector.cpp:490
#1 0x7fac474e0493 in start_gc src/hotspot/share/gc/z/zDirector.cpp:836
#2 0x7fac474e0493 in ZDirector::run_thread() src/hotspot/share/gc/z/zDirector.cpp:926
#3 0x7fac4b04b698 in ZThread::run_service() src/hotspot/share/gc/z/zThread.cpp:29
#4 0x7fac48707249 in ConcurrentGCThread::run() src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#5 0x7fac4ab58bea in Thread::call_run() src/hotspot/share/runtime/thread.cpp:232
#6 0x7fac4a17fd22 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#7 0x7fac4f7dc6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 938e42b7e407d175ee3ef9a89c038168101d330c)
#8 0x7fac4ed0f58e in clone (/lib64/libc.so.6+0x11858e) (BuildId: 74f77bf013a66413c77197c121955e029c32d259)

-----
Title: [JDK-8344925] translet-name ignored when package-name is also set
Priority: P4
Type: Bug
Component: xml
Description: Background
GraalVM native executables do not allow loading classes at runtime due to the closed world assumption. To make XSLT work with them, we generate XSLT Translet classes at build time and let native-image compile them into the native executable. For that to work reliably, we need to be able to set the name of the generated class so that we are then able to find the class and pass it to the native compiler.
Steps to reproduce
To generate a Translet class for a given XSL file, we perform steps similar to the following:
```
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Comparator;
public class Main {
public static void main(String[] args) throws Exception {
TransformerFactory tf = TransformerFactory.newInstance();
tf.setAttribute("generate-translet", true);
tf.setAttribute("translet-name", "MyTranslet");
tf.setAttribute("package-name", "org.acme");
tf.setAttribute("destination-directory", "test");
Path test = Path.of("test");
if (Files.exists(test)) {
Files.walk(test).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);
}
File xslFile = new File(args[0]);
tf.newTemplates(new StreamSource(Files.newInputStream(xslFile.toPath())));
Files.list(Path.of("test/org/acme")).forEach(System.out::println);
}
}
```
When this program is compiled through javac Main.java and run via java Main test.xsl, where test.xsl is any simple XSL file, such as
```
http://www.w3.org/1999/XSL/Transform"
```
then, we expect to find the generated translet file under test/org/acme/MyTranslet.class. In reality, the generated translet is under test/org/acme/die_verwandlung.class.
Analysis
The execution flow goes via com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(Source), where a new com.sun.org.apache.xalan.internal.xsltc.trax.XSLTC is created and its setClassName(String) and setPackageName(String) are called.
XSLTC.setClassName(String) does some sanitization of the passed className and if the _packageName field is set, it sets the _className field to _packageName + '.' + name.
Because XSLTC._packageName is initialized to "die.verwandlung", then, after the first call of setClassName("MyTranslet"), the value of _packageName is "die.verwandlung.MyTranslet".
The XSLTC.setPackageName("org.acme") called afterwards, first sets the _packageName field to the passed value and then, if _className != null, it calls setClassName(_className).
In our situation, it effectively means calling setClassName("die.verwandlung.MyTranslet").
The sanitization of the passed value done within this second setClassName() call transforms "die.verwandlung.MyTranslet" into "die_verwandlung".
Afterwards, the _className field is set to _packageName + '.' + name which is "org.acme" + '.' + "die_verwandlung" in our case.
Observation: the ASF Xalan does not initialize XSLTC._packageName to "die.verwandlung" and therefore the reproducer code works as expected there.
Possible solutions
A. In TransformerFactoryImpl.newTemplates(Source), call XSLTC.setPackageName(String) before XSLTC.setClassName(String).
B. In XSLTC.setPackageName(String), instead of calling setClassName(_className), pass only the simple class name extracted from the _className field to setClassName(String).
C. Make XSLTC.setClassName(String) throw an exception when it is called with a className containig ., / or \; document that it expects a simple name, document that it sets _className to a fully qualified name when _packageName is set; move all sanitization to callers of XSLTC.setClassName(String). (This implies solution B).

-----
Title: [JDK-8345133] Test sun/security/tools/jarsigner/TsacertOptionTest.java failed: Warning found in stdout
Priority: P4
Type: Bug
Component: security-libs
Description: stdout: [requesting a signature timestamp
TSA certificate: X.509, CN=TSA
Signature algorithm: SHA384withRSA, 2048-bit key
[trusted certificate]
updating: META-INF/MANIFEST.MF
adding: META-INF/SIGN_ALI.SF
adding: META-INF/SIGN_ALI.RSA
signing: TsacertOptionTest.txt
Signer
X.509, CN=Test
Signature algorithm: SHA384withRSA, 2048-bit key
[certificate is not valid until 11/27/24, 4:00?PM]
X.509, CN=CA
Signature algorithm: SHA384withRSA, 2048-bit key
[trusted certificate]
TSA
X.509, CN=TSA
Signature algorithm: SHA384withRSA, 2048-bit key
[trusted certificate]
jar signed.
Warning:
The signer certificate is not yet valid.
The signer certificate will expire on 2025-11-27.
];
stderr: []
exitValue = 0
java.lang.RuntimeException: 'Warning:' found in stdout
at jdk.test.lib.process.OutputAnalyzer.stdoutShouldNotContain(OutputAnalyzer.java:337)
at TsacertOptionTest.start(TsacertOptionTest.java:166)
at TsacertOptionTest.main(TsacertOptionTest.java:65)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1447)

-----
Title: [JDK-8345134] Test sun/security/tools/jarsigner/ConciseJarsigner.java failed: unable to find valid certification path to requested target
Priority: P4
Type: Bug
Component: security-libs
Description: Error:
This jar contains unsigned entries which have not been integrity-checked.
This jar contains entries whose certificate chain is invalid. Reason: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
This jar contains entries whose signer certificate is self-signed.
Warning:
This jar contains signatures that do not include a timestamp. Without a timestamp, users may not be able to validate this jar after any of the signer certificates expire (as early as 2025-11-28).
Re-run with the -verbose and -certs options for more details.
sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
at java.base/sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:270)
at java.base/sun.security.validator.Validator.validate(Validator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:223)
at jdk.jartool/sun.security.tools.jarsigner.Main.validateCertChain(Main.java:2506)
at jdk.jartool/sun.security.tools.jarsigner.Main.certsAndTSInfo(Main.java:2144)
at jdk.jartool/sun.security.tools.jarsigner.Main.signerInfo(Main.java:2100)
at jdk.jartool/sun.security.tools.jarsigner.Main.verifyJar(Main.java:881)
at jdk.jartool/sun.security.tools.jarsigner.Main.run(Main.java:304)
at jdk.jartool/sun.security.tools.jarsigner.Main.main(Main.java:138)
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:148)
at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:129)
at java.base/java.security.cert.CertPathBuilder.build(CertPathBuilder.java:295)
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
... 9 more
sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
at java.base/sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:270)
at java.base/sun.security.validator.Validator.validate(Validator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:223)
at jdk.jartool/sun.security.tools.jarsigner.Main.validateCertChain(Main.java:2506)
at jdk.jartool/sun.security.tools.jarsigner.Main.certsAndTSInfo(Main.java:2144)
at jdk.jartool/sun.security.tools.jarsigner.Main.signerInfo(Main.java:2100)
at jdk.jartool/sun.security.tools.jarsigner.Main.verifyJar(Main.java:881)
at jdk.jartool/sun.security.tools.jarsigner.Main.run(Main.java:304)
at jdk.jartool/sun.security.tools.jarsigner.Main.main(Main.java:138)
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:148)
at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:129)
at java.base/java.security.cert.CertPathBuilder.build(CertPathBuilder.java:295)
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
... 9 more
Exit value: 20

-----
Title: [JDK-8345146] [PPC64] Make intrinsic conversions between bit representations of half precision values and floats
Priority: P3
Type: Enhancement
Component: hotspot
Description: JDK-8289552 should get ported to PPC64. Power9 has instructions for half precision float conversions.

-----
Title: [JDK-8345341] Fix incorrect log message in JDI stop002t test
Priority: P4
Type: Bug
Component: core-svc
Description: The following log message:
log.display("TEST #5: Caught expected exception while in loop: " + t);
is incorrect. It should be:
log.display("TEST #5: Caught expected exception while in sleep: " + t);
It's a copy-n-paste bug from another section of the test that dealt with loops.

-----
Title: [JDK-8345357] test/jdk/javax/swing/JRadioButton/8033699/bug8033699.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JRadioButton/8033699/bug8033699.java fails in OCI system citing
Radio Button Group Go To Next Component through Tab Key failed
----------System.err:(30/2118)----------
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
at bug8033699.runTest1(bug8033699.java:163)
at bug8033699.main(bug8033699.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.RuntimeException: Focus is not on Radio Button Single as Expected
OS: linux

-----
Title: [JDK-8345447] test/jdk/javax/swing/JToolBar/4529206/bug4529206.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JToolBar/4529206/bug4529206.java fails in OCI system citing
Caused by: java.lang.RuntimeException: setFloating does not work correctly
at bug4529206.lambda$main$3(bug4529206.java:90)
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
OS: linux

-----
Title: [JDK-8345547] test/jdk/javax/swing/text/DefaultEditorKit/4278839/bug4278839.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/text/DefaultEditorKit/4278839/bug4278839.java fails in OCI citing
java.lang.RuntimeException: Test failed.
at bug4278839.main(bug4278839.java:92)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
OS: linux

-----
Title: [JDK-8345598] Upgrade NSS binaries for interop tests
Priority: P4
Type: Bug
Component: security-libs
Description: Current version is 3.107 https://ftp.mozilla.org/pub/security/nss/releases/NSS_3_107_RTM/

-----
Title: [JDK-8345728] [Accessibility,macOS,Screen Magnifier]: JCheckbox unchecked state does not magnify but works for checked state
Priority: P3
Type: Bug
Component: client-libs
Description: Screen magnifier: JCheckbox unselect value does not its value change but works for selection. This is on MacOS 15
Step to reproduce
-------------------------
1) Enable Screen magnifier on theMac
System Preference - Accessibility - Zoom - Select ( Enable Hover Text) when "Command" button is pressed
2) Run the SwingSet2 with -Djavax.accessibility.screen_magnifier_present=true option
3) Once SwingSet2 Frame is visible select "Button Demo" and select "Check Boxes demo".
4) Press "Command" button to show the screen magnifier window on any checkbox ( One , Two , Three )
5) Select One checkbox , observe that item select in the in checkbox as well as screen magnifier also.
6) Release "Command" button and move mouse.
7) Repeat step (4) Observe that "One" check box is selected in Screen magnifier.
8) Click on the Once checkbox to deselect the value. Observe that checkbox is value is deselected but Screen magnifier is not selected If you see the same then the bug is reproduced.
OS: os_x

-----
Title: [JDK-8345838] Remove the appcds/javaldr/AnonVmClassesDuringDump.java test
Priority: P4
Type: Bug
Component: hotspot
Description: In cds/appcds/javaldr/AnonVmClassesDuringDump.java, the setting of dynamicMode is incorrect. It is always false.
public static final boolean dynamicMode =
Boolean.getBoolean(System.getProperty("test.dynamic.cds.archive", "false"));
The correct way should be:
Boolean.getBoolean("test.dynamic.cds.archive")
Or it could just be:
CDSTestUtils.DYNAMIC_DUMP
After correcting the setting, we noticed the behavior is the same regardless of dynamicMode, i.e. only the following check passed:
output - output.shouldNotMatch(pattern)
For the last test which checks the content of the archive, there are classes in the Shared Lambda Dictionary such as java.lang.module.ModuleFinder$2$$Lambda/0x800000023
so no point to run the test on the archive content.
Removing the entire test.

-----
Title: [JDK-8346049] jdk/test/lib/security/timestamp/TsaServer.java warnings
Priority: P4
Type: Bug
Component: security-libs
Description: The warning
* For target support_test_lib_test-lib_classes__the.BUILD_TEST_LIB_JAR_batch:
/home/lmesnik/ws/jdk-lib/open/test/lib/jdk/test/lib/security/timestamp/TsaServer.java:56: warning: [this-escape] possible 'this' escape before subclass is fully initialized
setHandler(handler);
And:
open/test/lib/jdk/test/lib/security/timestamp/TsaServer.java:42: warning: [try] auto-closeable resource TsaServer has a member method close() that could throw InterruptedException

-----
Title: [JDK-8346082] Output JVMTI agent information in hserr files
Priority: P4
Type: Enhancement
Component: hotspot
Description: We should output more information about the JVMTI agents in the hserr file.
OS: generic

-----
Title: [JDK-8346264] "Total compile time" counter should include time spent in failing/bailout compiles
Priority: P4
Type: Enhancement
Component: hotspot
Description: Noticed this when looking through JMH compiler profiler results.
Current `CompilerBroker` counters that are fed into `CompilationMXBean.getTotalCompilationTime()` and JFR `CompilerStatistics` only records the time for successful compilations. If we take a while in compilation and then fail/bail, that time would not be accounted for.
While this seems to be a long-standing behavior, there are problems with this:
1. This is not what "total" means.
2. This gives us a blind spot in measuring time taken in failing/bailing compilations.
3. It does not match well the Javadoc for the bean: "Returns the approximate accumulated elapsed time (in milliseconds) spent in compilation." -- since the time spent in failing/bailing compilation is still time spent in compilation.

-----
Title: [JDK-8346581] JRadioButton/ButtonGroupFocusTest.java fails in CI on Linux
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/swing/JRadioButton/ButtonGroupFocus/ButtonGroupFocusTest.java test fails on Linux:
----------System.out:(0/0)----------
----------System.err:(25/1755)----------
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1312)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1287)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1474)
at ButtonGroupFocusTest.main(ButtonGroupFocusTest.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.RuntimeException: Button 4 should get focus
at ButtonGroupFocusTest.lambda$main$2(ButtonGroupFocusTest.java:98)
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:723)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:702)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
OS: linux

-----
Title: [JDK-8346888] [ubsan] block.cpp:1617:30: runtime error: 9.97582e+36 is outside the range of representable values of type 'int'
Priority: P4
Type: Bug
Component: hotspot
Description: When running jtreg tests on macOS aarch64 with ubsanized binaries, in the test
java/foreign/TestHandshake
this error/warning is reported :
jdk/src/hotspot/share/opto/block.cpp:1617:30: runtime error: 9.97582e+36 is outside the range of representable values of type 'int'
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
seems it happens in this calculation (float value does not fit into an int)  :  int to_pct = (int) ((100 * freq) / target-_freq);
OS: os_x

-----
Title: [JDK-8347000] Bug in com/sun/net/httpserver/bugs/B6361557.java test
Priority: P4
Type: Bug
Component: core-libs
Description: (From a mail on net-dev mailing list https://mail.openjdk.org/pipermail/net-dev/2025-January/025297.html)
The jdk test B6361557 here https://github.com/openjdk/jdk23u/blob/9101cc14972ce6bdeb966e67bcacc8b693c37d0a/test/jdk/com/sun/net/httpserver/bugs/B6361557.java#L68
sends an invalid http request according to the specification here https://datatracker.ietf.org/doc/html/rfc2616#section-4.4
specifically "When a Content-Length is given in a message where a message-body is
allowed, its field value MUST exactly match the number of OCTETs in
the message-body. HTTP/1.1 user agents MUST notify the user when an
invalid length is received and detected."
The code in this test case sends a request with Content-length set to 0, but due to a bug, it sends extra octets after the request header (14 zero to be exact).
The cause is that the buffer is allocated to 64, and filled with a string that is shorter, but the entire buffer is sent.
This is fixed by changing line 68 to
final static ByteBuffer requestBuf = ByteBuffer.wrap(request.getBytes());
It currently passes, only because the server is not fully implementing the http specification.

-----
Title: [JDK-8347019] Test javax/swing/JRadioButton/8033699/bug8033699.java  still fails:  Focus is not on Radio Button Single as Expected
Priority: P4
Type: Bug
Component: client-libs
Description: ----------System.out:(2/134)----------
[The Java(tm) Look and Feel - javax.swing.plaf.metal.MetalLookAndFeel]
Radio Button Group Go To Next Component through Tab Key failed
----------System.err:(26/1787)----------
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1312)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1287)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1474)
at bug8033699.runTest1(bug8033699.java:172)
at bug8033699.main(bug8033699.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.RuntimeException: Focus is not on Radio Button Single as Expected
at bug8033699.lambda$runTest1$0(bug8033699.java:175)
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:723)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:702)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
OS: linux

-----
Title: [JDK-8347083] Incomplete logging in nsk/jvmti/ResourceExhausted/resexhausted00* tests
Priority: P4
Type: Bug
Component: hotspot
Description: Tests in nsk/jvmti/ResourceExhausted namely resexhausted001, resexhausted002, resexhausted003 have the same logging statement
Creating threads...
Can't reproduce OOME due to a limit on iterations/execution time. Test was useless.
when they are unable to reproduce OOME.
This is not a problem when the tests are run individually. However, when resexhausted004, which in turn runs all the 3 tests, is run we are not able to distinguish which test is logging the message.

-----
Title: [JDK-8347126] gc/stress/TestStressG1Uncommit.java gets OOM-killed
Priority: P4
Type: Bug
Component: hotspot
Description: Caught this on one of the testing nodes, that runs VM tests with normal parallelism:
```
0s: Using 13 workers, each allocating: ~989M
0s: Interation: 1
[1.398s][info ][gc            ] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 49M-47M(1016M) 342.489ms
[2.237s][info ][gc            ] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 279M-279M(1016M) 429.191ms
[2.520s][info ][gc            ] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 375M-391M(1016M) 240.384ms
[2.765s][info ][gc            ] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 511M-520M(1016M) 204.557ms
[3.052s][debug][gc,heap,region] GC(4) Activate regions [126, 380)
[3.052s][info ][gc            ] GC(4) Pause Young (Concurrent Start) (G1 Evacuation Pause) 648M-663M(3048M) 264.355ms
[3.052s][info ][gc            ] GC(5) Concurrent Mark Cycle
[3.497s][info ][gc            ] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 807M-815M(3048M) 336.914ms
[3.783s][info ][gc            ] GC(7) Pause Young (Normal) (G1 Evacuation Pause) 983M-998M(3048M) 166.598ms
[4.024s][info ][gc            ] GC(8) Pause Young (Normal) (G1 Evacuation Pause) 1190M-1208M(3048M) 211.513ms
[4.334s][debug][gc,heap,region] GC(9) Activate regions [380, 1032)
[4.334s][info ][gc            ] GC(9) Pause Young (Normal) (G1 Evacuation Pause) 1400M-1422M(8264M) 273.668ms
[4.913s][info ][gc            ] GC(10) Pause Young (Normal) (G1 Evacuation Pause) 1798M-1827M(8264M) 413.163ms
[5.509s][info ][gc            ] GC(11) Pause Young (Normal) (G1 Evacuation Pause) 2179M-2216M(8264M) 545.249ms
[5.579s][debug][gc,heap,region] GC(5) Deactivate regions [988, 1030)
[5.579s][debug][gc,heap,region] GC(5) Deactivate regions [978, 985)
[5.579s][debug][gc,heap,region] GC(5) Deactivate regions [917, 974)
[5.580s][info ][gc            ] GC(5) Pause Remark 2226M-2226M(7416M) 67.115ms
[5.580s][debug][gc,heap,region] Uncommit regions [917, 933)
[5.632s][debug][gc,heap,region] Uncommit regions [933, 949)
[5.696s][debug][gc,heap,region] Uncommit regions [949, 965)
[5.732s][debug][gc,heap,region] Uncommit regions [965, 974)
[5.764s][debug][gc,heap,region] Uncommit regions [978, 985)
[5.856s][debug][gc,heap,region] Uncommit regions [988, 1004)
[5.872s][info ][gc            ] GC(5) Pause Cleanup 2472M-2472M(7416M) 0.384ms
[5.956s][debug][gc,heap,region] Uncommit regions [1004, 1020)
[6.026s][debug][gc,heap,region] Uncommit regions [1020, 1030)
[6.415s][info ][gc            ] GC(12) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 2568M-2606M(7416M) 387.162ms
[6.866s][info ][gc            ] GC(13) Pause Young (Mixed) (G1 Evacuation Pause) 2918M-2957M(7416M) 342.671ms
[6.872s][info ][gc            ] GC(5) Concurrent Mark Cycle 3819.934ms
[7.255s][debug][gc,heap,region] GC(14) Activate regions [917, 974)
[7.255s][debug][gc,heap,region] GC(14) Activate regions [978, 985)
[7.255s][debug][gc,heap,region] GC(14) Activate regions [988, 1030)
[7.285s][debug][gc,heap,region] GC(14) Activate regions [1032, 1360)
[7.285s][info ][gc            ] GC(14) Pause Young (Mixed) (G1 Evacuation Pause) 3277M-3319M(10888M) 364.049ms
[8.022s][info ][gc            ] GC(15) Pause Young (Normal) (G1 Evacuation Pause) 3815M-3847M(10888M) 511.744ms
[8.643s][info ][gc            ] GC(16) Pause Young (Normal) (G1 Evacuation Pause) 4319M-4367M(10888M) 557.194ms
[9.334s][info ][gc            ] GC(17) Pause Young (Normal) (G1 Evacuation Pause) 4839M-4877M(10888M) 622.493ms
[10.010s][debug][gc,heap,region] GC(18) Activate regions [1360, 1620)
[10.010s][info ][gc            ] GC(18) Pause Young (Normal) (G1 Evacuation Pause) 5349M-5389M(12968M) 634.508ms
];
stderr: []
exitValue = 137
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [137]
at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:522)
at gc.stress.TestStressG1Uncommit.main(TestStressG1Uncommit.java:63)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1447)
```
exit code 137 means oom-killed. I think the test is a memory hog: in this configuration, it allocates 13GB on live data. This is well beyond the usual footprint for a single test VM (~2GB), and so it runs into a high chance of being OOM killed.
I think we can make the test a bit more frugal.

-----
Title: [JDK-8347173] java/net/DatagramSocket/InterruptibleDatagramSocket.java fails with virtual thread factory
Priority: P4
Type: Bug
Component: core-libs
Description: Test
java/net/DatagramSocket/InterruptibleDatagramSocket.java fails with virtual thread factory
The log
Testing interrupt of DatagramSocket receive on endpoint /[0:0:0:0:0:0:0:0]:38751
----------System.err:(14/866)----------
java.net.SocketException: Closed by interrupt
at java.base/sun.nio.ch.DatagramSocketAdaptor.receive(DatagramSocketAdaptor.java:199)
at java.base/java.net.DatagramSocket.receive(DatagramSocket.java:638)
at InterruptibleDatagramSocket.test0(InterruptibleDatagramSocket.java:63)
at InterruptibleDatagramSocket.test(InterruptibleDatagramSocket.java:76)
at InterruptibleDatagramSocket.main(InterruptibleDatagramSocket.java:103)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:466)
JavaTest Message: Test threw exception: java.net.SocketException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Closed by interrupt
test result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Closed by interrupt

-----
Title: [JDK-8347286] (fs) Remove some extensions from java/nio/file/Files/probeContentType/Basic.java
Priority: P4
Type: Enhancement
Component: core-libs
Description: Content type variation on Windows has caused issues in the past, e.g., JDK-8320943 and JDK-8346671. If the set of content types tested were reduced to a few stable extensions, then future maintenance work could be lessened if not eliminated.

-----
Title: [JDK-8347296] WinInstallerUiTest fails in local test runs if the path to test work directory is longer that regular
Priority: P4
Type: Bug
Component: tools
Description: WinInstallerUiTest produces several msi packages, some of which have very long names, making msi.exe fail to unpack them.
This is a known issue with the msi.exe, which can't handle paths longer than 260 characters.
If the path to the test work dir is long enough, some of the test cases from the WinInstallerUiTest test start failing.
OS: windows

-----
Title: [JDK-8347373] HTTP/2 flow control checks may count unprocessed data twice
Priority: P4
Type: Bug
Component: core-libs
Description: The HTTP/2 flow control logic has a potential race condition where some of the  unprocessed data may be counted twice for the connection window.
A protocol exception may be raised incorrectly if there are several concurrent streams producing data and the connection window is close from being exhausted.

-----
Title: [JDK-8347506] Compatible OCSP readtimeout property with OCSP timeout
Priority: P3
Type: Bug
Component: security-libs
Description: A new set of timeout values and enhancements to existing OCSP timeout values was first introduced in JDK-21 via JDK-8179502.  The backport to JDK-17 introduced a small change to the default setting for the `com.sun.security.ocsp.readtimeout` property.  This issue carries this default change for the property forward.  The change simply makes the default for the aforementioned property the same as whatever the value of the `com.sun.security.ocsp.timeout` System property is, rather than a 15000ms default in the original fix.
Refer to the CSRs:   https://bugs.openjdk.org/browse/JDK-8337407 and the withdrawn CSR https://bugs.openjdk.org/browse/JDK-8345114 (the withdrawn CSR has additional discussions in the comment section)

-----
Title: [JDK-8347596] Update HSS/LMS public key encoding
Priority: P3
Type: Bug
Component: security-libs
Description: https://www.rfc-editor.org/rfc/rfc9708.html#name-changes-since-rfc-8708:
The pk-HSS-LMS-HashSig definition is updated to reflect no ASN.1 wrapping for the public key.
We still have the wrapping.

-----
Title: [JDK-8347629] Test FailOverDirectExecutionControlTest.java fails with -Xcomp
Priority: P4
Type: Bug
Component: tools
Description: Test jdk/jshell/FailOverDirectExecutionControlTest.java fails with JVM options -Xcomp.
Reproduce command:
jtreg -ea -esa -Xcomp -jdk:build/linux-x86_64-server-release/images/jdk/ test/langtools/jdk/jshell/FailOverDirectExecutionControlTest.java
STDOUT:
config FailOverDirectExecutionControlTest.setUp(): success
test ExecutionControlTestBase.test(): failure
java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "java.util.Map.get(Object)" is null
at FailOverDirectExecutionControlTest.variables(FailOverDirectExecutionControlTest.java:148)
at ExecutionControlTestBase.test(ExecutionControlTestBase.java:40)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
config FailOverDirectExecutionControlTest.tearDown(): success
config FailOverDirectExecutionControlTest.setUp(): success
test FailOverDirectExecutionControlTest.variables(): success
config FailOverDirectExecutionControlTest.tearDown(): success
===============================================
jdk/jshell/FailOverDirectExecutionControlTest.java
Total tests run: 2, Passes: 1, Failures: 1, Skips: 0
===============================================
STDERR:
Jan 14, 2025 2:36:16 AM jdk.jshell.execution.FailOverExecutionControlProvider generate
WARNING: FailOverExecutionControlProvider: Failure failover -- 0 = alwaysFailing -- java.lang.UnsupportedOperationException: This operation intentionally broken.
Jan 14, 2025 2:36:16 AM jdk.jshell.execution.FailOverExecutionControlProvider generate
WARNING: FailOverExecutionControlProvider: Failure failover -- 1 = alwaysFailing -- java.lang.UnsupportedOperationException: This operation intentionally broken.
java.lang.Exception: failures: 1
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:104)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: linux

-----
Title: [JDK-8347995] Race condition in jdk/java/net/httpclient/offline/FixedResponseHttpClient.java
Priority: P4
Type: Bug
Component: core-libs
Description: The jdk/java/net/httpclient/offline/FixedResponseHttpClient.java test class makes unreasonable assumptions on BodyPublisher implementation. There's no guarantee that all buffers will be available until the subscriber is completed.

-----
Title: [JDK-8348107] test/jdk/java/net/httpclient/HttpsTunnelAuthTest.java fails intermittently
Priority: P4
Type: Bug
Component: core-libs
Description: The test/jdk/java/net/httpclient/HttpsTunnelAuthTest.java has been observed failing at least once. The suspicion is that it may be due to the client URI using "localhost" instead of a literal IP.

-----
Title: [JDK-8348110] Update LCMS to 2.17
Priority: P3
Type: Bug
Component: client-libs
Description: LittleCMS (aka LCMS) 2.17 released on February 9, 2025
We should upgrade JDK 25 to use this.

-----
Title: [JDK-8348299] Update List/ItemEventTest/ItemEventTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: I found a few problems when I looked at the java/awt/List/ItemEventTest/ItemEventTest.java test to see what's going on in JDK-8204221.
1. The java/awt/List/ItemEventTest/ItemEventTest.java test uses StringBuilder to store the string which keeps track of selecting and deselecting items in the list.
The object of StringBuilder is used across two threads, which is not thread-safe.
2. The java/awt/List/ItemEventTest/ItemEventTest.java test fails in CI on some hosts, JDK-8204221, therefore adding logging and screenshots could help identify the root cause.

-----
Title: [JDK-8348323] Corrupted timezone string in JVM crash log
Priority: P4
Type: Bug
Component: hotspot
Description: The timezone string printed by `os::print_date_and_time` is corrupted for some locales when `wcstombs` fails, as shown below.
Host: AMD Ryzen 5 2600 Six-Core Processor            , 12 cores, 15G,  Windows 11 , 64 bit Build 22621 (10.0.22621.3958)
Time: Tue Dec 10 16:32:49 2024 K��-eur󰡩 t鬩 idBuild 22621 (10.0.22621.3958) elapsed time: 1272.020845 seconds (0d 0h 21m 12s)
Typically, the timezone is replaced with random junk, followed by leftovers of the OS version string. Interestingly, the junk remains consistent across multiple machines.
OS: windows

-----
Title: [JDK-8348596] Update FreeType to 2.13.3
Priority: P3
Type: Bug
Component: client-libs
Description: Freetype 2.13.3 was released on Aug 12, 2024

-----
Title: [JDK-8348597] Update HarfBuzz to 10.4.0
Priority: P3
Type: Bug
Component: client-libs
Description: v 10.4.0 released on Feb 28, 2025

-----
Title: [JDK-8348598] Update Libpng to 1.6.47
Priority: P3
Type: Bug
Component: client-libs
Description: Need to upgrade libpng from 1.6.43 to 1.6.47 (released on  Feb 18, 2025)

-----
Title: [JDK-8348600] Update PipeWire to 1.3.81
Priority: P3
Type: Bug
Component: client-libs
Description: upgrade PipeWire to latest, 1.3.81 released on Jan 23, 2025

-----
Title: [JDK-8348865] JButton/bug4796987.java never runs because Windows XP is unavailable
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/swing/JButton/4796987/bug4796987.java test is designed to be run specifically on Windows XP:
OSVersion.current().equals(OSVersion.WINDOWS_XP)
Windows XP is obsolete for a long time. The test requires visual style that were introduced in Windows XP. At the time time, the test is relevant for any version of Windows after Windows XP. This is especially true now where visual styles are always enabled, the classic theme isn't supported since Windows 8.
OS: windows

-----
Title: [JDK-8348936] [Accessibility,macOS,VoiceOver] VoiceOver doesn't announce untick on toggling the checkbox with "space" key on macOS
Priority: P3
Type: Bug
Component: client-libs
Description: Test Type: Accessibility
Tested With: SwingSet2.jar
Products Tested: jdk-8u451 b02, jdk-11.0.27 b01, jdk-17.0.9 b09, jdk-21.0.7 b03, 24.0.1 b02, JDK 25 b07
Steps to reproduce:
1. Run SwingSet2.jar
2. Go to checkbox demo
3. Turn on VoiceOver.
4. Navigate the focus on checkbox using tab key.
5. Press only "space" key: It will also tick or untick the checkbox, but VoiceOver announces the tick only, and it does NOT announce the untick.
Expectation: VoiceOver should announce both tick and untick.
Also tested the native macOS checkbox: on toggling the native checkbox using space key it announces both tick and untick, Java checkbox should also announce the same.
Note: Only with jdk-17.0.9 b09 it announces both tick and untick, for rest all the releases it announces tick only.

-----
Title: [JDK-8349200] [JMH] time.format.ZonedDateTimeFormatterBenchmark fails
Priority: P4
Type: Bug
Component: core-libs
Description: JMH test org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.parse fails "java.time.format.DateTimeParseException: Text '2015:03:10:12:13:ECT' could not be parsed at index 17".
The reproduce command:
./build/linux-x86_64-server-release/images/jdk/bin/java -Djmh.ignoreLock=true -Djava.library.path=$PWD/build/linux-x86_64-server-release/images/test/micro/native --add-opens=java.base/java.io=ALL-UNNAMED --enable-native-access=ALL-UNNAMED --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/sun.security.provider=ALL-UNNAMED -jar $PWD/build/linux-x86_64-server-release/images/test/micro/benchmarks.jar -jvmArgsAppend "-Djava.library.path=$PWD/build/linux-x86_64-server-release/images/test/micro/native " -t 1 -f 1 -wi 2 org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.parse
or:
make test TEST="micro:org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.parse" MICRO="FORK=1;WARMUP_ITER=2" CONF=release
The test log snippet:
java.time.format.DateTimeParseException: Text '2015:03:10:12:13:ECT' could not be parsed at index 17
at java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2108)
at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:2010)
at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:600)
at org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.setUp(ZonedDateTimeFormatterBenchmark.java:47)
at org.openjdk.bench.java.time.format.jmh_generated.ZonedDateTimeFormatterBenchmark_parse_jmhTest._jmh_tryInit_f_zoneddatetimeformatterbenchmark0_0(ZonedDateTimeFormatterBenchmark_parse_jmhTest.java:340)
at org.openjdk.bench.java.time.format.jmh_generated.ZonedDateTimeFormatterBenchmark_parse_jmhTest.parse_AverageTime(ZonedDateTimeFormatterBenchmark_parse_jmhTest.java:140)
OS: generic

-----
Title: [JDK-8349348] Refactor ClassLoaderDeadlock.sh and Deadlock.sh to run fully in java
Priority: P4
Type: Sub-task
Component: security-libs
Description: test/java/security//Security/ClassLoaderDeadlock/ClassLoaderDeadlock.sh
test/java/security//Security/ClassLoaderDeadlock/Deadlock.sh

-----
Title: [JDK-8349358] [JMH] Cannot access class jdk.internal.vm.ContinuationScope
Priority: P4
Type: Bug
Component: core-libs
Description: The JMH test org.openjdk.bench.loom.obsolete.FreezeAndThaw.yieldAndContinue fails "java.lang.IllegalAccessError: superclass access check failed: class org.openjdk.bench.loom.obsolete.FreezeAndThaw$1 (in unnamed module @0x4459eb14) cannot access class jdk.internal.vm.ContinuationScope (in module java.base) because module java.base does not export jdk.internal.vm to unnamed module @0x4459eb14"
Affected tests list:
org.openjdk.bench.loom.obsolete.FreezeAndThaw.yieldAndContinue
org.openjdk.bench.loom.obsolete.OneShot.noYield
org.openjdk.bench.loom.obsolete.FreezeAndThaw.baseline
org.openjdk.bench.loom.obsolete.OneShot.yieldAfterEachCall
org.openjdk.bench.loom.obsolete.OneShot.yieldThenContinue
org.openjdk.bench.loom.obsolete.OneShot.yieldBeforeAndAfterEachCall
org.openjdk.bench.loom.obsolete.OneShot.yieldBeforeEachCall
org.openjdk.bench.loom.obsolete.Oscillation.oscillate
org.openjdk.bench.loom.obsolete.OneShot.yield
The test log snippet:
java.lang.IllegalAccessError: superclass access check failed: class org.openjdk.bench.loom.obsolete.FreezeAndThaw$1 (in unnamed module @0x4459eb14) cannot access class jdk.internal.vm.ContinuationScope (in module java.base) because module java.base does not export jdk.internal.vm to unnamed module @0x4459eb14
at java.base/java.lang.ClassLoader.defineClass1(Native Method)
at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:962)
at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:132)
at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:776)
at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:691)
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:620)
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:578)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
at org.openjdk.bench.loom.obsolete.jmh_generated.FreezeAndThaw_yieldAndContinue_jmhTest._jmh_tryInit_f_freezeandthaw0_0(FreezeAndThaw_yieldAndContinue_jmhTest.java:357)
at org.openjdk.bench.loom.obsolete.jmh_generated.FreezeAndThaw_yieldAndContinue_jmhTest.yieldAndContinue_AverageTime(FreezeAndThaw_yieldAndContinue_jmhTest.java:145)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:545)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1095)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:619)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: generic

-----
Title: [JDK-8349492] Update sun/security/pkcs12/KeytoolOpensslInteropTest.java to use a recent Openssl version
Priority: P4
Type: Enhancement
Component: security-libs
Description: The test sun/security/pkcs12/KeytoolOpensslInteropTest.java is currently using 1.1.1g openssl, it should be updated to use the current LTS version (3.0 series)

-----
Title: [JDK-8349501] Relocate supporting classes in security/testlibrary to test/lib/jdk tree
Priority: P4
Type: Bug
Component: security-libs
Description: There are 5 support classes for tests that exist in open/test/jdk/java/security/testlibrary that should be relocated to open/test/lib/jdk/test/lib/security where many other support classes already exist.  The following classes will be moved:
- CertificateBuilder
- HumanInputStream
- Providers
- ProvidersSnapshot
- SimpleOCSPServer
In addition, where classes were part of the unnamed package they should be moved into the jdk.test.lib.security package to conform to the other classes there.  It is also useful to do for the Providers class to help distinguish it from the sun.security.jca.Providers class.

-----
Title: [JDK-8349623] [ASAN] Gtest os_linux.glibc_mallinfo_wrapper_vm fails
Priority: P4
Type: Bug
Component: hotspot
Description: Standalone reproduce command:
build/linux-x86_64-server-slowdebug/images/test/hotspot/gtest/server/gtestLauncher -jdk build/linux-x86_64-server-slowdebug/images/jdk --gtest_output=xml:test_result.xml --gtest_catch_exceptions=0 --gtest_filter=NMT*:os* -XX:NativeMemoryTracking=detail
The test output snippet:
[ RUN      ] os_linux.glibc_mallinfo_wrapper_vm
test/hotspot/gtest/runtime/test_os_linux.cpp:458: Failure
Expected: ((mi.uordblks + mi.hblkhd)) = (2 * K), actual: 0 vs 2048
[  FAILED  ] os_linux.glibc_mallinfo_wrapper_vm (0 ms)
OS: linux

-----
Title: [JDK-8349637] Integer.numberOfLeadingZeros outputs incorrectly in certain cases
Priority: P2
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
Windows 11 [Version 10.0.26100.2894]
JDK 21.0.6, 23.0.2, 24-ea+35, 25-ea+8
A DESCRIPTION OF THE PROBLEM :
Use numberOfLeadingZeros inside a short loop.
Use arrays for input, output, or both.
Access arrays sequentially.
Do not use branching statements such as if statements within the loop.
A certain number of loops (hundreds of thousands of times?).
Under these conditions, it may return a number that is 1 less at the boundary where the value changes.
Could the Intrinsic of Integer.numberOfLeadingZeros be causing the problem?
0x01FFFFFF: expected=7, actual=6
0x03FFFFFE-0x03FFFFFF: expected=6, actual=5
0x07FFFFFC-0x07FFFFFF: expected=5, actual=4
0x0FFFFFF8-0x0FFFFFFF: expected=4, actual=3
0x1FFFFFF0-0x1FFFFFFF: expected=3, actual=2
0x3FFFFFE0-0x3FFFFFFF: expected=2, actual=1
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
var out = new int[0x2000004];
for (int i = 0; i  i);
var input = new int[size];
java.util.Arrays.setAll(input, i - -1  i);
int actual = 0;
for (int i = 0; i
OS: generic

-----
Title: [JDK-8349751] AIX build failure after upgrade pipewire to 1.3.81
Priority: P4
Type: Bug
Component: client-libs
Description: Filed as separate issue to keep the upgrade PR clean of it.
Fix is the same as in the src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h part of the JDK-8309703
--- a/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h
+++ b/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h
@@ -11,7 +11,15 @@ extern "C" {
#include
-#include
+#if !defined(__FreeBSD__) && !defined(__MidnightBSD__) && !defined(AIX)
+#include
+#endif
+
+#if defined(AIX)
+#include
+#define __BIG_ENDIAN      BIG_ENDIAN
+#define __BYTE_ORDER      BIG_ENDIAN
+#endif
/**
* \addtogroup spa_param

-----
Title: [JDK-8350201] Out of bounds access on Linux aarch64 in os::print_register_info
Priority: P3
Type: Bug
Component: hotspot
Description: When running jtreg test  VendorInfoPluginsTest  we noticed the following issue  (ubsanized binaries were used)
jdk/src/hotspot/os_cpu/linux_aarch64/os_linux_aarch64.cpp:369:46: runtime error: index 31 out of bounds for type 'long long unsigned int [31]'
#0 0xffff84380470 in os::print_register_info(outputStream*, void const*, int&) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x4d80470)
#1 0xffff84bf566c in VMError::report(outputStream*, bool) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f566c)
#2 0xffff84bf812c in VMError::report_and_die(int, char const*, char const*, std::__va_list, Thread*, unsigned char*, void const*, void const*, char const*, int, unsigned long) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f812c)
#3 0xffff84bf90b4 in VMError::report_and_die(Thread*, unsigned int, unsigned char*, void const*, void const*, char const*, ...) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f90b4)
#4 0xffff84bf9138 in VMError::report_and_die(Thread*, unsigned int, unsigned char*, void const*, void const*) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f9138)
#5 0xffff8489ede8 in JVM_handle_linux_signal (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x529ede8)
Looks like we have registers 0 - 30 according to  sys/ucontext.h  on Linux aarch64
typedef struct
{
unsigned long long int __ctx(fault_address);
unsigned long long int __ctx(regs)[31];
....
} mcontext_t;
and according to the  arm developer documentation
https://developer.arm.com/documentation/100069/0606/Overview-of-AArch64-state/Registers-in-AArch64-state#:~:text=In%20AArch64%20state%2C%20the%20following,are%20accessible%20as%20W0%2DW30.
Thirty-one 64-bit general-purpose registers X0-X30, the bottom halves of which are accessible as W0-W30.
OS: linux

-----
Title: [JDK-8350211] CTW: Attempt to preload all classes in constant pool
Priority: P4
Type: Enhancement
Component: hotspot
Description: CTW runners do preloading for constant pools ahead of time. I believe this is done to expose more loaded classes to the compilations, so to extend the compilation scope.
Unfortunately, current code catches the first exception when loading the constant pool and stops preloading. This routinely happens when CTW runner processes a 3rd party JAR, where dependencies might normally be in other JARs.
I believe we should attempt to resolve all constant pool entries when preloading is requested. This would likely expand the scope of CTW testing.

-----
Title: [JDK-8350224] Test javax/swing/JComboBox/TestComboBoxComponentRendering.java fails in ubuntu 23.x and later
Priority: P4
Type: Bug
Component: client-libs
Description: Test is failing in ubuntu 23.x and beyond with expected red pixel not being picked up
Increase in fontsize increase the possibility of font red pixel being picked up.
OS: linux

-----
Title: [JDK-8350260] Improve HTML instruction formatting in PassFailJFrame
Priority: P4
Type: Bug
Component: client-libs
Description: When instructions are long, the formatting in PassFailJFrame looks off:
1. When the instructions are displayed on the screen, the HTML is scrolled to the bottom, which isn't convenient;
2. Numbers above 10 in the list are clipped on the left;
3. No border around the HTML text.
These problems were found while converting the instructions for test/jdk/javax/accessibility/TestJCheckBoxToggleAccessibility.java in code review [1][2] for JDK-8348936 and JDK-8345728.
[1] https://github.com/openjdk/jdk/pull/23436
[2] https://github.com/openjdk/jdk/pull/23436#discussion_r1953131477

-----
Title: [JDK-8350313] Include timings for leaving safepoint in safepoint logging
Priority: P4
Type: Enhancement
Component: hotspot
Description: We have a production use case where leaving the safepoint introduced a significant latency, mostly due to VMThread getting de-scheduled. There are mitigations for this, see JDK-8350324. This issue is about capturing such an event in safepoint logging more comprehensively.
In those cases we would see something like:
[3.664s][info][gc       ] GC(7) Pause Young (Allocation Failure) 277M-3M(989M) 5.145ms
[3.694s][info][safepoint] Safepoint "SerialCollectForAllocation", Time since last: 374870126 ns, Reaching safepoint: 271019 ns, At safepoint: 35859436 ns, Total: 36130455 ns
...which is extremely confusing: the GC itself took ~5ms, yet "At safepoint" mentions 35ms! All that time is actually spent disarming the WaitBarrier, and eating the de/re-scheduling for VMThread at the same time.
I think a "Leaving safepoint" counter would be good to have. It comes with the symmetry advantage with "Reaching safepoint" counter. "Leaving safepoint" measures the time spent in safepoint machinery from the "finishing side". And, it more clearly captures the transitional state where some threads might be still at safepoint, and some have already unparked, like "Reaching safepoint".
So the hypothetical log for the excerpt above would look something like:
[3.664s][info][gc       ] GC(7) Pause Young (Allocation Failure) 277M-3M(989M) 5.145ms
[3.694s][info][safepoint] Safepoint "SerialCollectForAllocation", Time since last: 374870126 ns, Reaching safepoint: 271019 ns, At safepoint: 5859436 ns, Leaving safepoint: 30000000 ns, Total: 36130455 ns

-----
Title: [JDK-8350383] Test: add more test case for string compare (UL case)
Priority: P4
Type: Enhancement
Component: hotspot

-----
Title: [JDK-8350386] Test TestCodeCacheFull.java fails with option -XX:-UseCodeCacheFlushing
Priority: P4
Type: Bug
Component: hotspot
Description: Test jdk/jfr/event/compiler/TestCodeCacheFull.java fails with option -XX:-UseCodeCacheFlushing.
The test log snippet:
STDERR:
OpenJDK 64-Bit Server VM warning: CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
OpenJDK 64-Bit Server VM warning: Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=
OpenJDK 64-Bit Server VM warning: C1 initialization failed. Shutting down all compilers
java.lang.RuntimeException: No events: expected false, was true
at jdk.test.lib.Asserts.fail(Asserts.java:715)
at jdk.test.lib.Asserts.assertFalse(Asserts.java:520)
at jdk.test.lib.jfr.Events.hasEvents(Events.java:159)
at jdk.jfr.event.compiler.TestCodeCacheFull.testWithBlobType(TestCodeCacheFull.java:69)
at jdk.jfr.event.compiler.TestCodeCacheFull.main(TestCodeCacheFull.java:57)
OS: linux

-----
Title: [JDK-8350412] [21u] AArch64: Ambiguous frame layout leads to incorrect traces in JFR
Priority: P4
Type: Bug
Component: hotspot
Description: It was previously pointed https://bugs.openjdk.org/browse/JDK-8323755?focusedId=14640270&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14640270 that "When doing a runtime call from compiled code, JVM puts two words onto the stack: ... This breaks the invariant the stack walker relies on: the size of the compiled frame is constant".
As a result JFR recordings from a simple program from JDK-8323755 do contain wrong samples, e.g. see duplicated timeLoop() entry
jdk.ExecutionSample {
startTime = 21:33:04.331 (2025-02-19)
sampledThread = "timeLoop" (javaThreadId = 39)
state = "STATE_RUNNABLE"
stackTrace = [
Test.time() line: 29
Test.wrapper() line: 25
Test.timeLoop() line: 15
Test.timeLoop() line: 20
]
}
Other diagnostic tools are affected too.
Current code in 21u that is responsible for that is https://github.com/openjdk/jdk21u-dev/blob/990859cc32776e2d794de539190c9ccced1dfcd9/src/hotspot/cpu/aarch64/aarch64.ad#L3779
It's the same for other update releases.
In mainline jdk the issue has been fixed in JDK 24 as a part of JEP 491: Synchronize Virtual Threads without Pinning (JDK-8338383).
The fix is in the aarch64.ad changes:
https://github.com/openjdk/jdk/commit/78b80150e009745b8f28d36c3836f18ad0ca921f#diff-018aa61d1a7aafcf70a535fcd40a318a4bd6511fd40ac39ce4be90cc52216749R1651

-----
Title: [JDK-8350483] AArch64: turn on signum intrinsics by default on Ampere CPUs
Priority: P4
Type: Enhancement
Component: hotspot
Description: JMH microbenchmarks vm.compiler.signum.* produce problematic scores because fmov is used to transmit data between GPRs and FPRs, the time cost is significant, same as mentioned by JDK-8251525.
Particularly, Signum._1_signumFloatTest performance can be improved much by setting -XX:+UnlockDiagnosticVMOptions -XX:+UseSignumIntrinsic, which generates facgt/ushr/bsl pairs for the unrolling code snippet of the hot for-loop of the test case. Verified on Ampere-1A and found the score of patched became 40x better than base (thrpt, ops/s). This JBS is to turn the option ON by default for all Ampere CPUs.
OS: generic

-----
Title: [JDK-8350498] Remove two Camerfirma root CA certificates
Priority: P4
Type: Enhancement
Component: security-libs
Description: Camerfirma has confirmed that the following root CA certificates are terminated and are no longer active:
1. CN=Chambers of Commerce Root, OU=http://www.chambersign.org, O=AC Camerfirma SA CIF A82743287, C=EU
2. CN=Global Chambersign Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU

-----
Title: [JDK-8350546] Several java/net/InetAddress tests fails UnknownHostException
Priority: P4
Type: Bug
Component: core-libs
Description: Below 2 java/net/InetAddress tests fails "java.net.UnknownHostException" on some special machines:
java/net/InetAddress/IsReachableViaLoopbackTest.java
java/net/InetAddress/getOriginalHostName.java
The test log snippet:
java.lang.RuntimeException: Unexpected exception:java.net.UnknownHostException: bugs.openjdk.org: Temporary failure in name resolution
at IsReachableViaLoopbackTest.main(IsReachableViaLoopbackTest.java:59)
OS: linux

-----
Title: [JDK-8350616] Skip ValidateHazardPtrsClosure in non-debug builds
Priority: P4
Type: Enhancement
Component: hotspot
Description: The ValidateHazardPtrsClosure closure is effectively a no-op in a non-debug build, but ThreadsSMRSupport::free_list stills applies it in a linear-scan of all threads, unnecessarily. The assert was originally a guarantee and this optimisation was missed when it was changed over by JDK-8264624

-----
Title: [JDK-8350650] Bump update version for OpenJDK: jdk-21.0.8
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Development of update 21.0.8 starts in repository jdk21u-dev on Wednesday February 26th, 2025. The first change should be to bump the version.
Release of 21.0.8 is planned for Tuesday July 15th, 2025.
For the date, see also https://wiki.openjdk.org/display/JDKUpdates/JDK%2021u or https://www.oracle.com/security-alerts/

-----
Title: [JDK-8350682] [JMH] vector.IndexInRangeBenchmark failed with IndexOutOfBoundsException for size=1024
Priority: P4
Type: Enhancement
Component: core-libs
Description: The test vector.IndexInRangeBenchmark failed with message:
java.lang.IndexOutOfBoundsException: Index 512 out of bounds for length 481
at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
at java.base/java.util.Objects.checkIndex(Objects.java:365)
at jdk.incubator.vector/jdk.incubator.vector.VectorIntrinsics.checkFromIndexSize(VectorIntrinsics.java:58)
at jdk.incubator.vector/jdk.incubator.vector.AbstractMask.intoArray(AbstractMask.java:74)
at org.openjdk.bench.jdk.incubator.vector.IndexInRangeBenchmark.shortIndexInRange(IndexInRangeBenchmark.java:66)
for runs with specified parameters.
The test array size are hardcoded as:
public void Setup() {
mask = new boolean[512];
}
and should be updated to
public void Setup() {
mask = new boolean[size];
}

-----
Title: [JDK-8350786] Some java/lang jtreg tests miss requires vm.hasJFR
Priority: P4
Type: Bug
Component: core-libs
Description: While testing a bit with a minimal JVM, it has been noticed that some java/lang jtreg tests use jfr but do not declare it with a  "requires vm.hasJFR" ; that leads to test errors in a JVM setup with no JFR .

-----
Title: [JDK-8350924] javax/swing/JMenu/4213634/bug4213634.java fails
Priority: P4
Type: Bug
Component: client-libs
Description: javax/swing/JMenu/4213634/bug4213634.java is failing in CI with below exception:
java.lang.RuntimeException: Failed: Mnemonic activated
at bug4213634$3.actionPerformed(bug4213634.java:115)
at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1972)
at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2314)
at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:407)
at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:374)
at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:354)
at java.desktop/javax.swing.plaf.basic.BasicPopupMenuUI$BasicMenuKeyListener.menuKeyPressed(BasicPopupMenuUI.java:382)
at java.desktop/javax.swing.JPopupMenu.fireMenuKeyPressed(JPopupMenu.java:1470)
at java.desktop/javax.swing.JPopupMenu.processMenuKeyEvent(JPopupMenu.java:1449)
at java.desktop/javax.swing.JPopupMenu.processKeyEvent(JPopupMenu.java:1433)
at java.desktop/javax.swing.MenuSelectionManager.processKeyEvent(MenuSelectionManager.java:480)
at java.desktop/javax.swing.plaf.basic.BasicPopupMenuUI$MenuKeyboardHelper.keyPressed(BasicPopupMenuUI.java:1224)
at java.desktop/java.awt.Component.processKeyEvent(Component.java:6534)
at java.desktop/javax.swing.JComponent.processKeyEvent(JComponent.java:2911)
at java.desktop/java.awt.Component.processEvent(Component.java:6353)
at java.desktop/java.awt.Container.processEvent(Container.java:2260)
at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4958)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2318)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4790)
at java.desktop/java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1829)
at java.desktop/java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:874)
at java.desktop/java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1136)
at java.desktop/java.awt.DefaultKeyboardFocusManager.pumpApprovedKeyEvents(DefaultKeyboardFocusManager.java:960)
at java.desktop/java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:1057)
at java.desktop/java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:678)
at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4839)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2318)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4790)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:725)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:702)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed: Mnemonic activated
OS: linux_ubuntu

-----
Title: [JDK-8351086] (fc) Make java/nio/channels/FileChannel/BlockDeviceSize.java test manual
Priority: P4
Type: Bug
Component: core-libs
Description: Convert the test to manual. This might changed late ron when a solution to JDK-8350708 is identified.
OS: linux

-----
Title: [JDK-8351500] G1: NUMA migrations cause crashes in region allocation
Priority: P3
Type: Bug
Component: hotspot
Description: (Note: This bug manifests on JDK 21 and 17; we don't see crashes or asserts on mainline JDK. but I argue that the underlying root issue is also in mainline JDK and would best be fixed there).
One of our customers found that NUMA migrations (more precisely, the OS task getting scheduled to a different NUMA node) can cause G1 to crash if they happen at exactly the wrong moment.
JVM runs with +UseNUMA +UseNUMAInterleaving, G1GC and 4TB heap, two or four NUMA nodes, about 5000 application threads and 159 GC worker threads. JVM crashes (rarely, about once every four hours or so).
Call stacks wildly different, e.g.:
```
28 Stack: [0x00007e506733f000,0x00007e5067540000],  sp=0x00007e506753cf10,  free space=2039k
29 Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
30 V  [libjvm.so+0xf32422]  Symbol::as_klass_external_name() const+0x12  (symbol.hpp:140)
31 V  [libjvm.so+0xda71ff]  SharedRuntime::generate_class_cast_message(Klass*, Klass*, Symbol*)+0x1f  (sharedRuntime.cpp:2179)
32 V  [libjvm.so+0xda99c4]  SharedRuntime::generate_class_cast_message(JavaThread*, Klass*)+0xd4  (sharedRuntime.cpp:2171)
33 V  [libjvm.so+0x578e2c]  Runtime1::throw_class_cast_exception(JavaThread*, oopDesc*)+0x13c  (c1_Runtime1.cpp:735)
```
in some crashes, it looks like we load a zero from the heap where no zero should be (eg. as narrow Klass ID from an oop header).
However, if you run a debug JVM, you usually see an assert either in G1Allocator or in CollectedHeap, for example
```
27 Current thread (0x00007fb770087b70):  JavaThread "Thread-33"        [_thread_in_vm, id=123345, stack(0x00007fb7a86d7000,0x00007fb7a87d8000) (1028K)]
28
29 Stack: [0x00007fb7a86d7000,0x00007fb7a87d8000],  sp=0x00007fb7a87d62f0,  free space=1020k
30 Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
31 V  [libjvm.so+0x9fdd6b]  CollectedHeap::fill_with_object_impl(HeapWordImpl**, unsigned long, bool) [clone .part.0]+0x2b  (collectedHeap.cpp:470)
32 V  [libjvm.so+0x9fff1d]  CollectedHeap::fill_with_object(HeapWordImpl**, unsigned long, bool)+0x39d  (arrayOop.hpp:58)
33 V  [libjvm.so+0xc5009f]  G1AllocRegion::fill_up_remaining_space(HeapRegion*)+0x1ef  (g1AllocRegion.cpp:79)
34 V  [libjvm.so+0xc5027c]  G1AllocRegion::retire_internal(HeapRegion*, bool)+0x6c  (g1AllocRegion.cpp:106)
35 V  [libjvm.so+0xc51347]  MutatorAllocRegion::retire(bool)+0xb7  (g1AllocRegion.cpp:300)
36 V  [libjvm.so+0xc50ed9]  G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool)+0x59  (g1AllocRegion.cpp:139)
37 V  [libjvm.so+0xc9b140]  G1CollectedHeap::attempt_allocation_slow(unsigned long)+0x6d0  (g1AllocRegion.inline.hpp:120)
38 V  [libjvm.so+0xc9e4ff]  G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)+0x39f  (g1CollectedHeap.cpp:643)
39 V  [libjvm.so+0xc9bd4f]  G1CollectedHeap::mem_allocate(unsigned long, bool*)+0x5f  (g1CollectedHeap.cpp:401)
40 V  [libjvm.so+0x13b9b6d]  MemAllocator::mem_allocate_slow(MemAllocator::Allocation&) const+0x5d  (memAllocator.cpp:240)
41 V  [libjvm.so+0x13b9ca1]  MemAllocator::allocate() const+0xa1  (memAllocator.cpp:357)
```
The problem is in `G1Allocator`. `G1AllocRegion` objects tied to NUMA nodes. For most actions involving the `G1Allocator`, we determine the `G1AllocRegion` of the current thread, then redirect the action toward that alloc region. However, due to OS scheduling the NUMA-to-thread-association can change arbitrarily. That means calls to `G1Allocator` are not guaranteed to hit the same `G1AllocRegion` object as last time.
Now, we have control flows that assume that we work with the same `G1AllocRegion` object over their duration, since we build up state in `G1AllocRegion`. The JDK 21 control flow affected is:
```
- `G1CollectedHeap::attempt_allocation_slow`
- `G1Allocator::attempt_allocation_locked`                 (A)
- `G1AllocRegion::attempt_allocation_locked`
- `G1AllocRegion::attempt_allocation`                  (try again allocating from HeapRegion under lock protection); failing that:
- `G1AllocRegion::attempt_allocation_using_new_region`
- `G1AllocRegion::retire`                            (retires current allocation region; may keep it as retained region)
- `G1AllocRegion::new_alloc_region_and_allocate`     (allocate new HeapRegion and set it; failing that, sets dummy region), failing that:
- `G1Allocator::attempt_allocation_force`                  (B)
- `G1AllocRegion::attempt_allocation_force`
- `G1AllocRegion::new_alloc_region_and_allocate`
```
Here, if we change NUMA node from (A) to (B), we will address different `G1AllocRegion` objects. But `G1AllocRegion::attempt_allocation_force` assumes that the current allocation region for this object is retired, which is done by the preceding `G1AllocRegion::attempt_allocation_locked`, but for a different region.
This causes us to abandon the current allocation region; it won't be added to the collection set. On debug JVMs, we hit one of two asserts. We either complain about the current allocation region being not dummy at the entrance of new_alloc_region_and_allocate; In JDK 17, we assert when retire the wrong region, and it is more empty than expected. The effect of this can be delayed, happening on the next retire, since it can affect the retained region.
----
Reproduction and Regression testing
Reproducing the bug is difficult. I did not have a NUMA machine, and even if I had one, NUMA task-node migrations are very rare. Therefore, I build something like a "FakeNUMA" mode which essentially interposes OS NUMA calls and fakes a NUMA system of 8 nodes. I also added a "FakeNUMAStressMigrations" mode mimicking frequent node migrations. With these simple tools, I could reproduce the customer problem (with gc/TestJNICriticalStressTest, slightly modified to increase the number of JNICritical threads). I plan to bring the FakeNUMA mode upstream, but have no time atm to polish it up.
OS: linux

-----
Title: [JDK-8351665] Remove unused UseNUMA in os_aix.cpp
Priority: P4
Type: Enhancement
Component: hotspot
Description: We have some UseNUMA related coding in os_aix.cpp that is not needed.
OS: aix

-----
Title: [JDK-8351933] Inaccurate masking of TC subfield decrement in ForkJoinPool
Priority: P4
Type: Bug
Component: core-libs
Description: When a decrement of TC subfield of ctl (Number of total workers [minus target parallelism in older versions], 16 bit at shift 32) is masked with UMASK (upper bits) mask, it may lead to corruption of RC subfield  (Number of total workers [minus target parallelism], 16 bit at shift 48).
Current mainline code is like
https://github.com/openjdk/jdk/blob/e43960a0170bf29b28ff4733e1c8c927947fb0bb/src/java.base/share/classes/java/util/concurrent/ForkJoinPool.java#L2080
The FJP can stop executing tasks. E.g. JDK-8330017
OS: generic

-----
Title: [JDK-8352076] [21u] Problem list tests that fail in 21 and would be fixed by 8309622
Priority: P4
Type: Sub-task
Component: core-libs
Description: We regularly but seldom see tests
gc/shenandoah/TestAllocIntArrays.java#aggressive
gc/shenandoah/TestAllocIntArrays.java#iu-aggressive
gc/stress/gcold/TestGCOldWithShenandoah.java#iu-aggressive
fail in SAP nighly tests.
No occurances of the failures since we added 8309622 to our tests of 21.
As we don't want to backport JDK-8309622 add them to the problem list.

-----
Title: [JDK-8352109] java/awt/Desktop/MailTest.java fails in platforms where Action.MAIL is not supported
Priority: P4
Type: Bug
Component: client-libs
Description: OS: Linux
Environments: OEL 9/8 Any Kernel aarch64
Failed on Release/Build: JDK_24 - 24.0. 1 7
Is it a Regression in JDK 24 release: N/A
Is it a platform-specific issue: No
General description of the problem:
Test "java/awt/Desktop/MailTest.java": Test case auto fails
Steps to reproduce:
- Run test cases: java/awt/Desktop/MailTest.java
Expected behavior:
The test case should be executed correctly
Actual behavior:
Test case failed automatically
Any non-default VM flags
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
at PassFailJFrame.invokeOnEDT(PassFailJFrame.java:595)
at PassFailJFrame.(PassFailJFrame.java:532)
at PassFailJFrame$Builder.build(PassFailJFrame.java:1831)
at MailTest.main(MailTest.java:113)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:572)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
Caused by: java.lang.UnsupportedOperationException: The MAIL action is not supported on the current platform!
at java.desktop/java.awt.Desktop.checkActionSupport(Desktop.java:378)
at java.desktop/java.awt.Desktop.mail(Desktop.java:517)
at MailTest.(MailTest.java:67)
at PassFailJFrame.createUI(PassFailJFrame.java:649)
JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test
Issue
java/awt/Desktop/MailTest.java fails in platforms where Action.MAIL is not supported
Reason
In MailTest.java, there is a condition check(if (!desktop.isSupported(Desktop.Action.MAIL))) which will force pass the test if the corresponding 'Action' is not supported by the platform. But, apparently, this is not working good and the code flow went past this and fails in desktop.mail() method with an UnsupportedOperationException.
Fix
Even though we are calling PassFailJFrame.forcePass() if the 'Action.MAIL' is unsupported, the PassFailJFrame just count downs a latch and the actual action will be taken later only(in awaitAndCheck()). But at the meantime, the desktop.mail() call gets executed in the constructor of MailTest() and it will result in an UnsupportedOperationException. So, the fix is to return from the constructor immediately if the operation is 'unsupported'.
Testing
This is a manual test, so it is tested locally and found to be working fine.
OS: generic

-----
Title: [JDK-8352302] Test sun/security/tools/jarsigner/TimestampCheck.java is failing
Priority: P4
Type: Bug
Component: security-libs
Description: ...
Warning:
The input uses a 512-bit RSA key which is considered a security risk and is disabled.
Certificate reply was installed in keystore
Certificate reply was installed in keystore
Certificate reply was installed in keystore
stdout: [
s k       57 Wed Mar 19 01:23:20 GMT 2025 META-INF/MANIFEST.MF
243 Wed Mar 19 01:23:20 GMT 2025 META-INF/PRE2019S.SF
4350 Wed Mar 19 01:23:20 GMT 2025 META-INF/PRE2019S.RSA
smk        1 Wed Mar 19 01:22:52 GMT 2025 A
s = signature was verified
m = entry is listed in manifest
k = at least one certificate was found in keystore
- Signed by "CN=pre2019signer"
Digest algorithm: SHA-1 (weak)
Signature algorithm: SHA384withRSA, 3072-bit RSA key
Timestamped by "CN=tsbefore2019" on Sat Aug 18 19:04:58 UTC 2018
Timestamp digest algorithm: SHA-384
Timestamp signature algorithm: SHA256withRSA, 3072-bit RSA key
jar verified.
Warning:
The SHA-1 digest algorithm is considered a security risk. This algorithm will be disabled in a future update.
The timestamp will expire within one year on 2026-03-20.
Re-run with the -verbose and -certs options for more details.
];
stderr: []
exitValue = 0
java.lang.RuntimeException: 'signer certificate expired on .*. However, the JAR will be valid' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:372)
at TimestampCheck.main(TimestampCheck.java:242)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:335)
at java.base/java.lang.Thread.run(Thread.java:1447)
Failing test case:
239:                 verify("tsbefore2019.jar", "-verbose")
240:                         .shouldHaveExitValue(0)
241:                         .shouldMatch("Digest.*SHA-1.*(weak)")
242:                         .shouldMatch("signer certificate expired on .*. "
243:                                 + "However, the JAR will be valid");
So, the test expects a warning like
The signer certificate expired on 2019-06-01. However, the JAR will be valid until the timestamp expires on 2026-03-20.
but instead sees
The timestamp will expire within one year on 2026-03-20.
This is because the tsbefore2019 cert is created with a start date of 2018/1/1 and 3000 valid days, and it will expire in a year.

-----
Title: [JDK-8352512] TestVectorZeroCount: counter not reset between iterations
Priority: P4
Type: Bug
Component: hotspot
Description: The test uses counters with this initialization:
private static int intCounter = Integer.MIN_VALUE;
private static int longIterations = 100_000_000;
It uses 2 iterations, but misses a counter reset between them.
Timeouts were observed on PPC64.

-----
Title: [JDK-8352676] Opensource JMenu tests - series1
Priority: P4
Type: Bug
Component: client-libs
Description: Few closed JMenu tests are to be opensourced

-----
Title: [JDK-8352680] Opensource few misc swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Few misc swing tests are to be opensourced

-----
Title: [JDK-8352684] Opensource JInternalFrame tests - series1
Priority: P4
Type: Bug
Component: client-libs
Description: Few JInternalFrame tests are to be opensourced

-----
Title: [JDK-8352706] httpclient HeadTest does not run on HTTP2
Priority: P4
Type: Bug
Component: core-libs
Description: HeadTest verifies that the client does not expect any content in HEAD response and in HTTP 304 response, even if the Content-Length or the Transfer-Encoding headers are present. Due to a test bug, the test is currently only running on HTTP1. It should be run on HTTP2 as well.

-----
Title: [JDK-8352716] (tz) Update Timezone Data to 2025b
Priority: P3
Type: Enhancement
Component: core-libs
Description: This release contains the following changes:
Briefly:
New zone for Aysén Region in Chile which moves from -04/-03 to -03.
Changes to future timestamps
Chile's Aysén Region moves from -04/-03 to -03 year-round, joining
Magallanes Region.  The region will not change its clocks on
2025-04-05 at 24:00, diverging from America/Santiago and creating a
new zone America/Coyhaique.  (Thanks to Yonathan Dossow.)  Model
this as a change to standard offset effective 2025-03-20.
Changes to past timestamps
Iran switched from +04 to +0330 on 1978-11-10 at 24:00, not at
year end.  (Thanks to Roozbeh Pournader.)
Changes to code
'zic -l TIMEZONE -d . -l /some/other/file/system' no longer
attempts to create an incorrect symlink, and no longer has a
read buffer underflow.  (Problem reported by Evgeniy Gorbanev.)
Here are links to the release files:
https://www.iana.org/time-zones/repository/releases/tzcode2025b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdata2025b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdb-2025b.tar.lz
The following convenience links are also available, although they may
point to the previous release until the relevant caches are refreshed:
https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz
Links are also available via plain HTTP, and via FTP from
ftp://ftp.iana.org/tz/releases with the same basenames as above.
Each release file has a GPG signature, which can be retrieved by
appending ".asc" to the above URLs. Copies of these signatures are
appended to this message.
This release corresponds to commit
7e1145bfdb9630c127841dc8ce808a937a300938 dated 2025-03-22 13:40:46 -0700
and tagged '2025b' in the development GitHub repository at
https://github.com/eggert/tz.
OS: generic

-----
Title: [JDK-8352908] Open source several swing tests batch1
Priority: P4
Type: Bug
Component: client-libs
Description: Open-sourcing and standardizing several tests (JSplitPane JApplet JToolBar)

-----
Title: [JDK-8352942] jdk/jfr/startupargs/TestMemoryOptions.java fails with 32-bit build
Priority: P4
Type: Bug
Component: hotspot
Description: jdk/jfr/startupargs/TestMemoryOptions.java fails with 32-bit Server VM.
```
stdout: [Started recording 1. No limit specified, using maxsize=250MB as default.
Use jcmd 8912 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
# [ timer expired, abort... ]
];
stderr: []
exitValue = -1
java.lang.RuntimeException: Expected to get exit value of [0]
at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:396)
at jdk.jfr.startupargs.TestMemoryOptions$Driver.launchTestVM(TestMemoryOptions.java:515)
at jdk.jfr.startupargs.TestMemoryOptions$Driver.runTestCase(TestMemoryOptions.java:523)
at jdk.jfr.startupargs.TestMemoryOptions.main(TestMemoryOptions.java:658)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.lang.Thread.run(Thread.java:750)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]
```
This test validates several combinations of memory options for JFR. All test cases pass with 64bit builds and 32bit Client VM. However, one test case fails with 32-bit Server VM.
failed case JFR Options: -XX:FlightRecorderOptions=threadbuffersize=30m
The cause is an inability to allocate memory, which is easily reproduced with "jave -version."
```
$ java -server -XX:FlightRecorderOptions=threadbuffersize=30m -XX:StartFlightRecording -version
Started recording 1. No limit specified, using maxsize=250MB as default.
Use jcmd 8764 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
openjdk version "1.8.0_442"
OpenJDK Runtime Environment (Temurin)(build 1.8.0_442-b06)
OpenJDK Server VM (Temurin)(build 25.442-b06, mixed mode)
# [ timer expired, abort... ]
```
This test case probably does not assume memory usage including heap space  on 32-bit build.

-----
Title: [JDK-8353070] Clean up and open source couple AWT Graphics related tests (Part 1)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple of AWT Graphics component related tests.

-----
Title: [JDK-8353138] Screen capture for test TaskbarPositionTest.java, failure case
Priority: P4
Type: Sub-task
Component: client-libs
Description: Since the failure is intermittent and root cause is unknown, screen capture of the application area will help for further investigation.
OS: generic

-----
Title: [JDK-8353190] Use "/native" Run Option for TestAvailableProcessors Execution
Priority: P4
Type: Enhancement
Component: hotspot
Description: Created for asilichenko in https://github.com/openjdk/jdk/pull/23803
Currently, the test executes the program using test.nativepath, but it relies on path resolution. I propose following standard conventions in this case and running the test with the /native option instead.
With this change:
Path resolution is no longer required.
If nativepath is not specified at runtime, a standard error message will be printed to the console.
This improves consistency and simplifies the test execution process.
OS: windows

-----
Title: [JDK-8353237] [AArch64] Incorrect result of VectorizedHashCode intrinsic on Cortex-A53
Priority: P2
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
Hardware: Raspberry PI 3B
OS: Linux raspberrypi 6.6.74+rpt-rpi-v8 #1 SMP PREEMPT Debian 1:6.6.74-1+rpt1 (2025-01-27) aarch64 GNU/Linux
Java: openjdk 24 2025-03-18
OpenJDK Runtime Environment (build 24+36-3646)
OpenJDK 64-Bit Server VM (build 24+36-3646, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
Running a simple Spring Boot jar application on JDK 24 (Linux/AArch64) fails with a ClassNotFoundException.
* The same application runs fine on JDK 23.0.2
* The same application runs fine on JDK 24 on Windows/x64
The application consists of the demo application downloaded from https://start.spring.io/ and packaged as a jar by Maven.
REGRESSION : Last worked in version 23.0.2
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
* Download a project from https://start.spring.io/ with the settings: Maven build, Java language, Spring Boot 3.4.4 (also tried 3.5.0-M3), jar packaging, Java 21 (also tried 24), no extra dependencies
* Extract the project to a directory
* Build the project using:
mvn package
* Unpack the jar:
java -Djarmode=tools -jar demo-0.0.1-SNAPSHOT.jar extract
* Run the app:
java -jar demo-0.0.1-SNAPSHOT/demo-0.0.1-SNAPSHOT.jar
(I also found that running -Djarmode=tools in JDK 24 on Linux/AArch64 failed with a ClassNotFoundException, albeit with a different class and stacktrace).
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
App runs and outputs something like:
.   ____          _            __ _ _
/\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
\\/  ___)| |_)| | | | | || (_| |  ) ) ) )
'  |____| .__|_| |_|_| |_\__, | / / / /
=========|_|==============|___/=/_/_/_/
:: Spring Boot ::                (v3.4.4)
2025-03-29T13:38:32.829+11:00  INFO 58508 --- [demo] [           main] com.example.demo.DemoApplication         : Starting DemoApplication v0.0.1-SNAPSHOT using Java 23.0.2 with PID 58508 (/home/pi/demo-0.0.1-SNAPSHOT/demo-0.0.1-SNAPSHOT.jar started by pi in /home/pi)
2025-03-29T13:38:32.852+11:00  INFO 58508 --- [demo] [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: "default"
2025-03-29T13:38:36.894+11:00  INFO 58508 --- [demo] [           main] com.example.demo.DemoApplication         : Started DemoApplication in 7.276 seconds (process running for 9.302)
ACTUAL -
Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory
at org.springframework.boot.SpringApplication.(SpringApplication.java:202)
at com.example.demo.DemoApplication.main(DemoApplication.java:11)
Caused by: java.lang.ClassNotFoundException: org.apache.commons.logging.LogFactory
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
---------- BEGIN SOURCE ----------
As described above.
---------- END SOURCE ----------
OS: linux

-----
Title: [JDK-8353320] Open source more Swing text tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some more Swing text tests

-----
Title: [JDK-8353446] Open source several AWT Menu tests - Batch 2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Menu tests:
java/awt/Menu/OnFlyRepaintMenuTest/OnFlyRepaintMenuTest.java
java/awt/Menu/DestroyMenuTest/DestroyMenuTest.java
java/awt/Menu/MenuAddRemoveCrash/MenuAddRemoveCrash.java
java/awt/Menu/MenuZOrderTest/MenuZOrderTest.java
Remove the following test since it is platform specific (Solaris)
java/awt/Menu/MenuTearOff/MenuTearOffCrashTest.java
OS: generic

-----
Title: [JDK-8353475] Open source two Swing DefaultCaret tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source two Swing DefaultCaret tests

-----
Title: [JDK-8353685] Open some JComboBox bugs 4
Priority: P4
Type: Bug
Component: client-libs
Description: Updating and opening some tests

-----
Title: [JDK-8353709] Debug symbols bundle should contain full debug files when building --with-external-symbols-in-bundles=public
Priority: P3
Type: Bug
Component: infrastructure
Description: Currently, when building with --with-external-symbols-in-bundles=public, the debug symbols bundle contains the stripped pdb files. It should better have the full pdb files since stripped pdbs are in the runtime image already.
OS: windows

-----
Title: [JDK-8353787] Increased number of SHA-384-Digest java.util.jar.Attributes$Name instances leading to higher memory footprint
Priority: P3
Type: Bug
Component: core-libs
Description: When parsing the manifest file of a JAR file the JDK constructs a java.util.jar.Manifest instance. The Manifest instance consists of java.util.jar.Attributes instances which correspond to the attributes of the manfiest file. An Attributes instance is a name-value mapping and the name is represented by the Attributes$Name class.
Several attribute names that appear in a manifest file are standard names and many of those names may be repeated. For example, when a JAR file is signed (using the jarsigner tool), the each entry in the JAR file will have a digest recorded in the manifest file as an attribute name:
Name: foo.txt
SHA-256-Digest: ...
Name: bar.txt
SHA-256-Digest: ...
Each of these "Name" and "SHA-256-Digest" attribute names thus translate to a Attributes$Name instance, when parsed.
JAR file instances are typically cached by the internal implementation of the JDK and as a result the Manifest instance and the Attributes instance too are cached. Several releases back it was noticed that these Attributes instances can contribute to increased memory footprint of the runtime. In https://bugs.openjdk.org/browse/JDK-6805750 a performance improvement was implemented (RFR https://mail.openjdk.org/pipermail/core-libs-dev/2018-April/052697.html) to maintain an internal cache of some well-known attribtue names mapped to a single instance of Attributes$Name. That way, several occurences of "SHA-256-Digest" attribtue name would end up using a single instance of Attributes$Name for that name. This cache is maintained as a static field in java.util.jar.Attributes class.
Recently, in Java 19, the jarsigner tool was enhanced to use SHA-384 as the default digest algorithm instead of the previous SHA-256 algorithm. That was done in https://bugs.openjdk.org/browse/JDK-8283475. Since then, when jarsigner tool is used to sign the JAR, the manifest file generated in the signed JAR would now have:
Name: foo.txt
SHA-384-Digest: ...
Name: bar.txt
SHA-384-Digest: ...
The internal cache that's maintained in java.util.jar.Attributes doesn't know of this new attribute name so ends up creating separate instances of Attributes$Name for each occurence of the SHA-384-Digest attribute name.
A user reports in core-libs-dev that this now shows up as an increase in the memory footprint of the runtime https://mail.openjdk.org/pipermail/core-libs-dev/2025-April/142299.html.

-----
Title: [JDK-8353942] Open source Swing Tests - Set 5
Priority: P4
Type: Bug
Component: client-libs
Description: Open source Swing tests
OS: generic

-----
Title: [JDK-8354255] [jittester] Remove TempDir debug output
Priority: P4
Type: Bug
Component: hotspot
Description: JITTester's TempDir prints debug information about creation and deletion of a temporary folder, like this:
DBG: Temp folder created: '/tmp/java_tests8412639693749199985'
DBG: Temp folder deleted: '/tmp/java_tests8412639693749199985'
jittester is a library, TempDir can be used in other tools. Debug outputs mess up logs, confuse output comparison tools, etc. And do not give any valuable information (as temp folder with its contents is deleted after VM shutdown).
I suggest to remove those debug outputs.

-----
Title: [JDK-8354530] AIX: sporadic unexpected errno when calling setsockopt in Net.joinOrDrop
Priority: P4
Type: Bug
Component: core-libs
Description: In our automated test we see sporadic errors with this stack:
java.net.SocketException: Resource temporarily unavailable (setsockopt failed)
at java.base/sun.nio.ch.Net.joinOrDrop4(Native Method)
at java.base/sun.nio.ch.Net.join4(Net.java:654)
at java.base/sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:1568)
at java.base/sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:1586)
at java.base/sun.nio.ch.DatagramSocketAdaptor.joinGroup(DatagramSocketAdaptor.java:467)
at java.base/java.net.DatagramSocket.joinGroup(DatagramSocket.java:1199)
at java.base/java.net.MulticastSocket.joinGroup(MulticastSocket.java:331)
The native code calls setsockopt(fdval(env,fdo), IPPROTO_IP, opt, optval, optlen) and gets EAGAIN as errno - this is not defined on AIX as a valid return code but seem to happen anyway.
The idea is to simply retry as it is already done for ENOMEM on macOS.
OS: aix

-----
Title: [JDK-8354554] Open source several clipboard tests batch1
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8354802] MAX_SECS definition is unused in os_linux
Priority: P4
Type: Bug
Component: hotspot
Description: Seems the MAX_SECS definition in os_linux.cpp is not needed any more, related code was moved or deleted.
OS: linux

-----
Title: [JDK-8354893] [REDO BACKPORT] javac crashes while adding type annotations to the return type of a constructor (JDK-8320001)
Priority: P2
Type: Bug
Component: tools
Description: It's observed that some of the JCK tests related to Annotation processing are failing in JDK 22-b23 with "java.lang.AssertionError: Cannot add metadata to this type: VOID"
Possibly a regression caused by - https://bugs.openjdk.org/browse/JDK-8225377
The tests are passing with JDK22-b22.
Attaching the sample AnnotationProcessor with sample target class file (Tester)
Here is the observation :
====
With b-22 ( Tester class successfully parsed by Annotation Processor)
====
/scratch/jdk-cache/22/22/jdk-22/bin/javac -processor  AnnoProc Tester
init...
process...
annotations []
With b-23 ( java.lang.AssertionError: Cannot add metadata to this type: VOID )
====
/scratch/jdk-cache/22/23/jdk-22/bin/javac -processor  AnnoProc Tester
An exception has occurred in the compiler (22-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: Cannot add metadata to this type: VOID
at jdk.compiler/com.sun.tools.javac.code.Type.cloneWithMetadata(Type.java:351)
at jdk.compiler/com.sun.tools.javac.code.Type.addMetadata(Type.java:390)
at jdk.compiler/com.sun.tools.javac.code.Type.annotatedType(Type.java:456)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.reannotate(ClassReader.java:2548)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2568)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2523)
at jdk.compiler/com.sun.tools.javac.code.Type.accept(Type.java:223)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4894)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2426)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2394)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2335)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2286)
at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.accept(Symbol.java:2271)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultSymbolVisitor.visit(Types.java:4921)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader.addTypeAnnotationsToSymbol(ClassReader.java:2283)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationCompleter.run(ClassReader.java:2266)
at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:191)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:322)
at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1418)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.loadClass(ClassFinder.java:446)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:730)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:719)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1239)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

-----
Title: [JDK-8320001] javac crashes while adding type annotations to the return type of a constructor
Priority: P2
Type: Bug
Component: tools
Description: It's observed that some of the JCK tests related to Annotation processing are failing in JDK 22-b23 with "java.lang.AssertionError: Cannot add metadata to this type: VOID"
Possibly a regression caused by - https://bugs.openjdk.org/browse/JDK-8225377
The tests are passing with JDK22-b22.
Attaching the sample AnnotationProcessor with sample target class file (Tester)
Here is the observation :
====
With b-22 ( Tester class successfully parsed by Annotation Processor)
====
/scratch/jdk-cache/22/22/jdk-22/bin/javac -processor  AnnoProc Tester
init...
process...
annotations []
With b-23 ( java.lang.AssertionError: Cannot add metadata to this type: VOID )
====
/scratch/jdk-cache/22/23/jdk-22/bin/javac -processor  AnnoProc Tester
An exception has occurred in the compiler (22-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: Cannot add metadata to this type: VOID
at jdk.compiler/com.sun.tools.javac.code.Type.cloneWithMetadata(Type.java:351)
at jdk.compiler/com.sun.tools.javac.code.Type.addMetadata(Type.java:390)
at jdk.compiler/com.sun.tools.javac.code.Type.annotatedType(Type.java:456)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.reannotate(ClassReader.java:2548)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2568)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2523)
at jdk.compiler/com.sun.tools.javac.code.Type.accept(Type.java:223)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4894)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2426)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2394)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2335)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2286)
at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.accept(Symbol.java:2271)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultSymbolVisitor.visit(Types.java:4921)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader.addTypeAnnotationsToSymbol(ClassReader.java:2283)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationCompleter.run(ClassReader.java:2266)
at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:191)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:322)
at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1418)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.loadClass(ClassFinder.java:446)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:730)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:719)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1239)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

-----
Title: [JDK-8355498] [AIX] Adapt code for C++ VLA rule
Priority: P4
Type: Bug
Component: hotspot
Description: The declaration of Variable length array is causing compilation issues for 17.1.3 compiler.
1 error generated.
gmake[3]: *** [lib/CompileJvm.gmk:170: /home/jenkins/openjdk-suchi/jdk/build/aix-ppc64-server-fastdebug/hotspot/variant-server/libjvm/objs/os_perf_aix.o] Error 1
gmake[2]: *** [make/Main.gmk:245: hotspot-server-libs] Error 2
gmake[2]: *** Waiting for unfinished jobs....
ERROR: Build failed for target 'images' in configuration 'aix-ppc64-server-fastdebug' (exit code 2)
Stopping javac server
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_os_perf_aix.o:
/home/jenkins/openjdk-suchi/jdk/src/hotspot/os/aix/os_perf_aix.cpp:79:12: error: variable length arrays in C++ are a Clang extension [-Werror,-Wvla-cxx-extension]
79 |   char buf[BUF_LENGTH];
|            ^~~~~~~~~~
/home/jenkins/openjdk-suchi/jdk/src/hotspot/os/aix/os_perf_aix.cpp:79:12: note: read of non-const variable 'BUF_LENGTH' is not allowed in a constant expression
/home/jenkins/openjdk-suchi/jdk/src/hotspot/os/aix/os_perf_aix.cpp:76:17: note: declared here
76 |   static size_t BUF_LENGTH = 32 + sizeof(u_longlong_t);
|                 ^

-----
Title: [JDK-8356053] Test java/awt/Toolkit/Headless/HeadlessToolkit.java fails by timeout
Priority: P4
Type: Bug
Component: client-libs
Description: Over the past year this test started failing due to a timeout. It hangs when attempting to access the following image: https://openjdk.org/images/openjdk.png
Upon investigation I found that the image could not be retrieved at the time of failure even using wget.
After consulting with the ops team, confirmed that a server configuration change had been made around that time. As a result, repeated web requests especially those with non-browser user-agent headers may be blocked after some period.
Similar issue reported here:
https://youtrack.jetbrains.com/issue/JBR-6550/java-awt-Toolkit-Headless-HeadlessToolkit.java-fails-by-time-out
OS: os_x

-----
Title: [JDK-8356096] ISO 4217 Amendment 179 Update
Priority: P3
Type: Bug
Component: core-libs
Description: 02 May 2025
ISO 4217 AMENDMENT NUMBER 179
”Effective from 12 May 2025, the following change will be made to “List one: Currency, fund and
precious metal codes” as well as to “List Two: Fund Codes Registered with Agency”:
Entity Currency Alphabetic
code
Numeric code Minor unit
Arab Monetary Fund Arab Accounting Dinar XAD 396 2
The Finance Department Arab Monetary Fund (AMF) is applying for new Fund currency code Arab
Accounting Dinar with Alphabetic Code XAD and Numeric Code 396.
The Arab Accounting Dinar is the official and reporting currency of the Arab Monetary Fund Reserve Asset.
The decimal for the currency is set to 1.00, which corresponds to a Minor Unit of 2.
OS: generic

-----
Title: [JDK-8356571] Re-enable -Wtype-limits for GCC in LCMS
Priority: P4
Type: Bug
Component: client-libs
Description: The -Wtype-limits warning was previously disabled in the OpenJDK build for LCMS 2.14+ due to upstream issues: https://github.com/openjdk/jdk/pull/11217
The issue was reported to the LCMS project: https://github.com/mm2/Little-CMS/issues/458
It has since been fixed in LCMS 2.17 and integrated into OpenJDK as part of JDK-8348110.
Now that the issue has been resolved, we can re-enable this warning.
OS: linux

-----
Title: [JDK-8357105] C2: compilation fails with "assert(false) failed: empty program detected during loop optimization"
Priority: P3
Type: Bug
Component: hotspot
Description: C2: compilation fails with "assert(false) failed: empty program detected during loop optimization" when compiling a program exhibiting stacked string concatenation optimizations, if the source code is compiled with -XDstringConcat=inline:
/bin/javac -XDstringConcat=inline TestStackedConcatsInline.java && /bin/java  TestStackedConcatsInline
Current CompileTask:
C2:103   35       4       TestStackedConcatsInline::f (53 bytes)
Stack: [0x00007f6d9462b000,0x00007f6d9472b000],  sp=0x00007f6d94725ca0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14ef546]  PhaseIdealLoop::build_and_optimize()+0xb96  (loopnode.cpp:4652)
V  [libjvm.so+0xb24c63]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x4f3
V  [libjvm.so+0xb1c096]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0xb6
V  [libjvm.so+0xb1eda1]  Compile::Optimize()+0xcc1
V  [libjvm.so+0xb21eeb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1f0b
V  [libjvm.so+0x951697]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x467
V  [libjvm.so+0xb2fb28]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb58
V  [libjvm.so+0xb30cf8]  CompileBroker::compiler_thread_loop()+0x578
V  [libjvm.so+0x107bebb]  JavaThread::thread_main_inner()+0x13b
V  [libjvm.so+0x1aab6d6]  Thread::call_run()+0xb6
V  [libjvm.so+0x173a198]  thread_native_entry(Thread*)+0x128

-----
Title: [JDK-8357193] [VS 2022 17.14] Warning C5287 in debugInit.c: enum type mismatch during build
Priority: P3
Type: Bug
Component: core-svc
Description: * For target support_native_jdk.jdwp.agent_libjdwp_debugInit.obj:
debugInit.c
openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(184): error C2220: the following warning is treated as an error
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(184): warning C5287: operands are different enum types '' and ''; use an explicit cast to silence this warning
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(184): note: to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(186): warning C5287: operands are different enum types '' and ''; use an explicit cast to silence this warning
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(186): note: to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(188): warning C5287: operands are different enum types '' and ''; use an explicit cast to silence this warning
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(188): note: to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
... (rest of output omitted)
OS: windows

-----
Title: [JDK-8359170] Add 2 TLS and 2 CS Sectigo roots
Priority: P2
Type: Enhancement
Component: security-libs
Description: CN=Sectigo Public Code Signing Root E46, O=Sectigo Limited, C=GB
Serial number: 50249ba2ef8ea6bf6c2c1f1a6385d4c3
SHA-256 Fingerprint: 8F:63:71:D8:CC:5A:A7:CA:14:96:67:A9:8B:54:96:39:89:51:E4:31:9F:7A:FB:CC:6A:66:0D:67:3E:43:8D:0B
Root certificate: https://crt.sh/?id=4256644597
Type: Code Signing – ECC Keys – EV and Non-EV Code Signing
Test URLs:
Valid: https://crt.sh/?id=12669436775
Revoked: https://crt.sh/?id=18829311964
CN=Sectigo Public Code Signing Root R46, O=Sectigo Limited, C=GB
Serial number: 4b2c3b01018bad2abc8c7b5b3eed9057
SHA-256 Fingerprint: 7E:76:26:0A:E6:9A:55:D3:F0:60:B0:FD:18:B2:A8:C0:14:43:C8:7B:60:79:10:30:C9:FA:0B:05:85:10:1A:38
Root certificate: https://crt.sh/?id=4256644598
Type: Code Signing – RSA Keys – EV and Non-EV Code Signing
Test URLs: This test certificate can be found here: https://crt.sh/?id=12087917599
Valid: https://crt.sh/?id=18829273880
Revoked: https://crt.sh/?id=18829297128
CN=Sectigo Public Server Authentication Root E46, O=Sectigo Limited, C=GB
Serial number: 42f2ccda1b6937445f15fe752810b8f4
SHA-256 Fingerprint: C9:0F:26:F0:FB:1B:40:18:B2:22:27:51:9B:5C:A2:B5:3E:2C:A5:B3:BE:5C:F1:8E:FE:1B:EF:47:38:0C:53:83
Root Certificate: https://crt.sh/?id=4256644603
Type: SSL/TLS Certificates – ECC Keys – DV, OV, EV and IV validation levels.
Test URLs:
Valid: https://sectigopublicserverauthenticationroote46-ev.sectigo.com/
Revoked: https://sectigopublicserverauthenticationroote46-ev.sectigo.com:444/
CN=Sectigo Public Server Authentication Root R46, O=Sectigo Limited, C=GB
Serial number: 758dfd8bae7c0700faa925a7e1c7ad14
SHA-256 Fingerprint: 7B:B6:47:A6:2A:EE:AC:88:BF:25:7A:A5:22:D0:1F:FE:A3:95:E0:AB:45:C7:3F:93:F6:56:54:EC:38:F2:5A:06
Root Certificate: https://crt.sh/?id=4256644734
Type: SSL/TLS Certificates – RSA Keys – DV, OV, EV and IV validation levels.
Test URLs:
Valid: https://sectigopublicserverauthenticationrootr46-ev.sectigo.com/
Revoked: https://sectigopublicserverauthenticationrootr46-ev.sectigo.com:444/

-----
Title: [JDK-8360406] [21u] Disable logic for attaching type annotations to class files until 8359336 is fixed
Priority: P2
Type: Bug
Component: tools
Description: See JDK-8359336 - the logic for attaching type annotations to class files backported in JDK-8341779 is implicated in that crash.
This issue tracks disabling that logic until JDK-8359336 is fixed.

-----
Title: [JDK-8361672] [21u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 21.0.8
Priority: P4
Type: Bug
Component: infrastructure
Description: As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.
