Title: [JDK-8198237] [macos] Test java/awt/Frame/ExceptionOnSetExtendedStateTest/ExceptionOnSetExtendedStateTest.java fails
Priority: P4
Type: Bug
Component: client-libs
Description: Fails on 10.13.3 with RuntimeException: Frame state was not changed, currentState = 0
OS: os_x

-----
Title: [JDK-8211851] (ch) java/nio/channels/AsynchronousSocketChannel/StressLoopback.java times out (aix)
Priority: P4
Type: Bug
Component: core-libs
Description: Test /jdk/java/nio/channels/AsynchronousSocketChannel/StressLoopback.java times out on aix. Is there a problem
with the support of propery jdk.net.useFastTcpLoopback?
OS: aix

-----
Title: [JDK-8226933] [TEST_BUG]GTK L&F: There is no swatches or RGB tab in JColorChooser
Priority: P4
Type: Bug
Component: client-libs
Description: Testsuite: Regression manual
Test name(s):javax/swing/JColorChooser/Test4887836.java
Product(s) tested: JDK 8u231b01 (64bit)
OS/architecture: Ubuntu19.04-x64/Jtreg4.2b14
option:-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=3 -Djdk.gtk.verbose=true
Actual behavior:
1)There is no swatches tab in JColorChooser applet for GTK LAF,please refer to Test4887836.png
2)There is no such issue without option,please refer to Test4887836-without-option.png.
Affect Test:
closed/javax/swing/plaf/basic/BasicSliderUI/4419255/bug4419255.java:
There is no RGB tab please refer to bug4419255.png
OS: linux_ubuntu

-----
Title: [JDK-8226938] [TEST_BUG]GTK L&F: There is no Details button in FileChooser Dialog
Priority: P4
Type: Bug
Component: client-libs
Description: Testsuite: Regression manual
Test name(s):closed/javax/swing/JFileChooser/4587721/bug4587721.java
Product(s) tested: JDK 8u231b01 (64bit)
OS/architecture: Ubuntu19.04-x64/Jtreg4.2b14
option:-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=3 -Djdk.gtk.verbose=true
Actual behavior:
1)There is no Details button in FileChooser Dialog for GTK LAF,please refer to bug4587721.png
2)There is no such issue without option,please refer to bug4587721-no-option.png.
OS: linux_ubuntu

-----
Title: [JDK-8227529] With malformed --app-image the error messages are awful
Priority: P4
Type: Bug
Component: tools
Description: jpackage --app-image /tmp does not provide a helpful message with a malformed app-image.
Example 1:
jpackage --app-image /tmp --package-type deb  --output x
Output:
Bundler DEB Installer skipped because of a configuration problem: java.lang.NullPointerException.
Example 2:
jpackage --app-image /tmp
Output:
Error: Option [--app-image] is not valid with package-type [null].
Example 3:
mkdir /tmp/x
touch /tmp/x/y
jpackage --app-image /tmp/x --package-type deb  --output x --name xxxx
Output 3:
java.nio.file.NoSuchFileException: /tmp/jdk.jpackage13842042862336393495/images/linux-deb.image/xxxx-1.0/opt/xxxx/bin/xxxx.png
Example 4:  (Even with a well formed app image) if the --name is missing the message is poor.
jpackage -o out --app-image out/skara --package-type deb
Output 4:
Bundler DEB Installer skipped because of a configuration problem: java.lang.NullPointerException.

-----
Title: [JDK-8277240] java/awt/Graphics2D/ScaledTransform/ScaledTransform.java dialog does not get disposed
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Graphics2D/ScaledTransform/ScaledTransform.java test passes but Dialog does not get disposed even after test suite gets completed.
Attached the screen shot of the same. Dialog gets dispose on mac but not on Ubuntu 20.04
OS: linux_ubuntu

-----
Title: [JDK-8283664] Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PrintTextTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: There are multiple issue with this test case
1) Parser error due to yesno in @run main/manual=yesno
2) User can only compare the UI rendering and compare with the print out. User can't mark the test as pass or fail due to pass or fail buttons are missing.
3) When the test is executed using jtreg after user click on the print button on the print dialog the whole test UIs ( frames) gets dispose and user cannot compare the printout with the UI.  But this works as expected in test is running individually using java PrintTextTest
OS: generic

-----
Title: [JDK-8286875] ProgrammableUpcallHandler::on_entry/on_exit access thread fields from native
Priority: P4
Type: Bug
Component: core-libs
Description: ProgrammableUpcallHandler::on_entry modifies:
context-new_handles = JNIHandleBlock::allocate_block(thread);
thread-clear_pending_exception();
Before transitioning to Java. Which means there can be a concurrent safepoint/handshake.
ProgrammableUpcallHandler::on_exit modify and access same fields here:
JNIHandleBlock::release_block(context-new_handles, thread);
assert(!thread-has_pending_exception(), "Upcall can not throw an exception");
After transitioning back to native.
E.g. _free_handle_block, _pending_exception.
This have two issues:
- Is it safe today? I traced some code and FAICT it is.
- These fields are now only allowed to be modified in a safepoint/handshake if target thread is waiting for the safepoint/handshake or by the thread it self. (I.e. it is not enough that thread is safepoint safe, it must actively be waiting for the safepoint/handshake)
Is this a restriction that we want, and am I correct in saying that is safe?

-----
Title: [JDK-8293345] SunPKCS11 provider checks on PKCS11 Mechanism are problematic
Priority: P3
Type: Enhancement
Component: security-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Windows 10 64 bits / CentOS 7 64 bits
A DESCRIPTION OF THE PROBLEM :
In France, french healthcare professionals use a card to authenticate and sign.
Since jdk8 322 we have a problem.
PKCS11 have been disabled : https://bugs.openjdk.org/browse/JDK-8176837
The problem is that the card mechanism is considered legacy and therefore disabled.
This check needs a little more flexibility.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
SunPKCS11 loading ---DummyConfig-1---
Information for provider SunPKCS11-VitCo-0
Library info:
cryptokiVersion: 2.20
manufacturerID: ANS
flags: 0
libraryDescription: CPS3 PKCS#11 WIN 64
libraryVersion: 2.13
sunpkcs11: Initializing PKCS#11 library C:\Windows\System32\cps3_pkcs11_w64.dll
All slots: 0, 1
Slots with tokens: 0
Slot info for slot 0:
slotDescription: KAPELSE 00026351 KAP-LINK 0 0
manufacturerID:
flags: CKF_TOKEN_PRESENT | CKF_REMOVABLE_DEVICE | CKF_HW_SLOT
hardwareVersion: 0.00
firmwareVersion: 0.00
Token info for token in slot 0:
label: CPS3v3-2800638708
manufacturerID: ASIP SANTE
model: IAS ECC
serialNumber: 99231175
flags: CKF_RNG | CKF_LOGIN_REQUIRED | CKF_USER_PIN_INITIALIZED | CKF_TOKEN_INITIALIZED
ulMaxSessionCount: CK_EFFECTIVELY_INFINITE
ulSessionCount: 0
ulMaxRwSessionCount: CK_EFFECTIVELY_INFINITE
ulRwSessionCount: 0
ulMaxPinLen: 4
ulMinPinLen: 4
ulTotalPublicMemory: CK_UNAVAILABLE_INFORMATION
ulFreePublicMemory: CK_UNAVAILABLE_INFORMATION
ulTotalPrivateMemory: CK_UNAVAILABLE_INFORMATION
ulFreePrivateMemory: CK_UNAVAILABLE_INFORMATION
hardwareVersion: 0.00
firmwareVersion: 0.00
utcTime:
Mechanism CKM_SHA_1:
ulMinKeySize: 0
ulMaxKeySize: 0
flags: 1024 = CKF_DIGEST
Mechanism CKM_SHA256:
ulMinKeySize: 0
ulMaxKeySize: 0
flags: 1024 = CKF_DIGEST
Mechanism CKM_RSA_X_509:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 272897 = CKF_HW | CKF_DECRYPT | CKF_SIGN | CKF_VERIFY | CKF_UNWRAP
DISABLED due to legacy
Mechanism CKM_RSA_PKCS:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 272897 = CKF_HW | CKF_DECRYPT | CKF_SIGN | CKF_VERIFY | CKF_UNWRAP
DISABLED due to legacy
Mechanism CKM_SHA1_RSA_PKCS:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 10240 = CKF_SIGN | CKF_VERIFY
Mechanism CKM_SHA256_RSA_PKCS:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 10240 = CKF_SIGN | CKF_VERIFY
DISABLED in configuration
sunpkcs11: login succeeded
sunpkcs11: user already logged in
ACTUAL -
javax.net.ssl.SSLException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_TYPE_INCONSISTENT
at org.apache.hc.core5.reactor.ssl.SSLIOSession.convert(SSLIOSession.java:265)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doWrap(SSLIOSession.java:272)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doHandshake(SSLIOSession.java:319)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.access$300(SSLIOSession.java:71)
at org.apache.hc.core5.reactor.ssl.SSLIOSession$1.inputReady(SSLIOSession.java:175)
at org.apache.hc.core5.reactor.InternalDataChannel.onIOEvent(InternalDataChannel.java:124)
at org.apache.hc.core5.reactor.InternalChannel.handleIOEvent(InternalChannel.java:51)
at org.apache.hc.core5.reactor.SingleCoreIOReactor.processEvents(SingleCoreIOReactor.java:179)
at org.apache.hc.core5.reactor.SingleCoreIOReactor.doExecute(SingleCoreIOReactor.java:128)
at org.apache.hc.core5.reactor.AbstractSingleCoreIOReactor.execute(AbstractSingleCoreIOReactor.java:85)
at org.apache.hc.core5.reactor.IOReactorWorker.run(IOReactorWorker.java:44)
at java.lang.Thread.run(Thread.java:750)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_TYPE_INCONSISTENT
at sun.security.pkcs11.wrapper.PKCS11.C_SignFinal(Native Method)
at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:608)
at java.security.Signature$Delegate.engineSign(Signature.java:1382)
at java.security.Signature.sign(Signature.java:698)
at sun.security.ssl.CertificateVerify$T12CertificateVerifyMessage.(CertificateVerify.java:609)
at sun.security.ssl.CertificateVerify$T12CertificateVerifyProducer.produce(CertificateVerify.java:761)
at sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:421)
at sun.security.ssl.ServerHelloDone$ServerHelloDoneConsumer.consume(ServerHelloDone.java:182)
at sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:377)
at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:444)
at sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:981)
at sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:968)
at java.security.AccessController.doPrivileged(Native Method)
at sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:915)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doRunTask(SSLIOSession.java:288)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doHandshake(SSLIOSession.java:362)
... 9 common frames omitted
FREQUENCY : always
OS: generic

-----
Title: [JDK-8294316] SA core file support is broken on macosx-x64 starting with macOS 12.x
Priority: P4
Type: Bug
Component: hotspot
Description: It appears that SA no longer works with core files on macosx-x64, I believe starting with macOS 12.x.  macosx-aarch64 seems to be fine, as are earlier versions of macosx-x64. The failure that happens with all the SA core file tests in test/hotspot/jtreg/serviceability/sa is:
ERROR: failed to workaround classshareing
Unable to open core file
I added some debugging code to SA's init_classsharing_workaround(), and it indicated that the cause was related to the fetching of the value of SharedArchivePath from the core file. This is suppose to point to a cstring containing the classes.jsa path, but instead seemed to contain garbage. I modified hotspot to print out  &SharedArchivePath, SharedArchivePath, and the cstring it points to:
log_info(cds)("Got default archive path: %p %p %s", &SharedArchivePath, SharedArchivePath, SharedArchivePath);
When SA fails to open the core file, I see:
[0.003s][info][cds] Got default archive path: 0x10faccb30 0x6000008b8010 /System/Volumes/Data/mesos/work_dir/jib-master/install/2022-09-22-2232312.chris.plummer.jdk/macosx-x64-debug.jdk/jdk-20/fastdebug/lib/server/classes.jsa
This all looks fine. However, SA looks up the "SharedArchivePath" symbol to get its address, so in turn it can get its value, which then points to the classes.jsa path. So I also modified SA to print out this info:
printf("sharedArchivePathAddrAddr(%p)\n", (void*)sharedArchivePathAddrAddr);
printf("sharedArchivePathAddr        (%p)\n", (void*)sharedArchivePathAddr);
In the passing test cases it would match up with the CDS log output above. When it fails you get something different:
Opening core file, please wait...
hsdb
sharedArchivePathAddrAddr(0x10f881b30)
sharedArchivePathAddr        (0x7364616572687420)
sharedArchivePathAddrAddr should match the hotspot &SharedArchivePath output, but it doesn't. SA is doing a symbol table lookup to get this value, so there appears to be a bug in SA's mach-o symbol table handling code.
This problem has gone unnoticed because we have problem listed all core file testing on macoxx-x64 for probably a year now due to occasional issues with timeouts (slow core dumps). This issue seems to only be happening on 12.3.1, 12.4 and 12.5.1 host, and happens every time on these hosts, so likely the issue was introduced with  macOS 12.
I'm not seeing this on macos-aarch64, although on occasion I was seeing the same "ERROR: failed to workaround classshareing" failure message. However, I believe it was for a different reason. From what I could tell with some debugging I did with lldb, it looked like the memory where SharedArchivePath pointed to was not in the core file. However, for some reason I can't reproduce this anymore. It could be related to JDK-8293563, which is caused by the java heap not being in the core file. Possibly sometimes other areas of memory are also missing.
Note if you try using -Xshare:off, you still see this same issue with SharedArchivePath, even though SA should not need to access it. This is because SA first accesses UseSharedSpaces to see if it is 0 or 1. It should be 0, but due to the same issue we see with SharedArchivePath (symbol lookup not working properly), UseSharedSpaces could contain anything, and usually it is not 0. To work around this I forced SA to just quickly exit init_classsharing_workaround() no matter what UseSharedSpaces is set to. This caused SA to instead fail at a later point during intialization when trying to lookup some hotspot types. It does so through vmstructs, which SA accesses via other global symbols that it appears SA is not looking up properly. So it appears that in general SA's symbol table lookups are broken with core files on 12.x, and it is not just just some global symbosl.
OS: os_x

-----
Title: [JDK-8295159] DSO created with -ffast-math breaks Java floating-point arithmetic
Priority: P4
Type: Bug
Component: hotspot
Description: A bug in GCC causes shared libraries linked with -ffast-math to disable denormal arithmetic. This breaks Java's floating-point semantics.
The bug is https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55522
One solution is to save and restore the floating-point control word around System.loadLibrary(). This isn't perfect, because some shared library might load another shared library at runtime, but it's a lot better than what we do now.

-----
Title: [JDK-8302111] Serialization considerations
Priority: P4
Type: Bug
Component: security-libs
Description: While addressing JDK-8286503, it was noted that there may be other S11N issues which are more of a functional/data consistency nature.
Essentially, deserialization is a form of object construction and should enforce the same data validation and consistency checks as enforced by the constructor(s). Thus, additional checks may be needed when deserializing the objects to ensure that values failing the constructor check are rejected during deserialization as well.
OS: generic

-----
Title: [JDK-8304701] Request with timeout aborts later in-flight request on HTTP/1.1 cxn
Priority: P3
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
macOS 12.6.3 (21G419)
openjdk version "20" 2023-03-21
OpenJDK Runtime Environment (build 20+36-2344)
OpenJDK 64-Bit Server VM (build 20+36-2344, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
This was originally encountered and reported as https://github.com/SeleniumHQ/selenium/issues/11798, until it was determined to be a JDK issue.
When an java.net.http.HttpRequest is sent with a specific timeout over a persistent HTTP/1.1 connection, the ResponseTimerEvent appears to be unconditionally handle()'d once its deadline elapses (regardless of whether
the request has completed), forcing the connection to be promptly and unnecessarily closed.  If there is another request in-flight on the connection at this moment, then it will fail with a "java.io.IOException: connection closed locally" error.
This issue is readily reproducible by sending requests in a tight loop to a server with non-trivial latency or that returns a large response having a non-trivial transfer time.  This issue does appear to arise with HTTP/2 connections or if the connection is idle at the moment the timer elapses.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac JavaExample.java && java JavaExample
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The process should run to completion with a few successful requests over ~15 seconds.
ACTUAL -
The process sends a few successful requests, but at ~10 seconds throws an exception like:
```
Exception in thread "main" java.io.IOException: fixed content-length: 28490775, bytes received: 17112264
at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:586)
at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:123)
at example.JavaExample.main(JavaExample.java:28)
Caused by: java.io.IOException: fixed content-length: 28490775, bytes received: 17112264
at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:351)
at java.net.http/jdk.internal.net.http.Http1Response$BodyReader.onReadError(Http1Response.java:760)
at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)
at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)
at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: connection closed locally
at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:159)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:372)
at java.net.http/jdk.internal.net.http.AsyncSSLConnection.close(AsyncSSLConnection.java:111)
at java.net.http/jdk.internal.net.http.Http1Exchange.cancelImpl(Http1Exchange.java:492)
at java.net.http/jdk.internal.net.http.Http1Exchange.cancel(Http1Exchange.java:427)
at java.net.http/jdk.internal.net.http.Exchange.cancel(Exchange.java:238)
at java.net.http/jdk.internal.net.http.MultiExchange.cancel(MultiExchange.java:260)
at java.net.http/jdk.internal.net.http.ResponseTimerEvent.handle(ResponseTimerEvent.java:71)
at java.net.http/jdk.internal.net.http.HttpClientImpl.purgeTimeoutsAndReturnNextDeadline(HttpClientImpl.java:1270)
at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:899)
```
---------- BEGIN SOURCE ----------
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.Instant;
import static java.net.http.HttpClient.Redirect.ALWAYS;
import static java.net.http.HttpClient.Version.HTTP_1_1;
public class JavaExample {
public static void main(String[] args) throws Exception {
int timeoutSeconds = 10;
HttpClient client = HttpClient.newBuilder()
.followRedirects(ALWAYS)
.build();
for (Instant start = Instant.now(), now = start; now.isBefore(start.plusSeconds(timeoutSeconds * 3 / 2)); now = Instant.now()) {
HttpRequest request = HttpRequest.newBuilder().uri(URI.create("https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.8.0/selenium-java-4.8.1.zip"))
.GET()
.version(HTTP_1_1)
.timeout(Duration.ofSeconds(timeoutSeconds))
.build();
HttpResponse response = client.send(request, HttpResponse.BodyHandlers.discarding());
System.out.println(now + " - " + response.headers().firstValue("date"));
}
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Use HTTP/2 if available
Add "Connection: close" header to request if possible (requires jdk.httpclient.allowRestrictedHeaders customization)
Avoid using request timeouts if feasible
FREQUENCY : often
OS: generic

-----
Title: [JDK-8309841] Jarsigner should print a warning if an entry is removed
Priority: P3
Type: Enhancement
Component: security-libs
Description: If an entry is removed after a JAR file is signed, running `jarsigner -verify` on the file does not show any error info.

-----
Title: [JDK-8311546] Certificate name constraints improperly validated with leading period
Priority: P3
Type: Bug
Component: security-libs
Description: A DESCRIPTION OF THE PROBLEM :
When a CA certificate contains a name constraint that begins with a period, `.`, an end entity certificate will be improperly rejected with `java.security.cert.CertPathValidatorException: name constraints check failed`.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a CA certificate with `nameConstraints = critical,permitted;DNS:.example.com`
Sign a certificate for `demo.example.com` with the CA
Load CA certificate into keystore / as a TrustAnchor directly
Attempt to validate end entity certificate
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Certificate validates successfully
ACTUAL -
`java.security.cert.CertPathValidatorException: name constraints check failed` is thrown
---------- BEGIN SOURCE ----------
See attached zip file.
---------- END SOURCE ----------
FREQUENCY : always
OS: generic

-----
Title: [JDK-8312570] [TESTBUG] Jtreg compiler/loopopts/superword/TestDependencyOffsets.java fails on 512-bit SVE
Priority: P4
Type: Bug
Component: hotspot
Description: In our recent tests on AArch64 CPUs with 512-bit SVE, we see Hotspot jtreg `compiler/loopopts/superword/TestDependencyOffsets.java` has a large number of IR check failures. The reason is that many of the test loops in the jtreg cannot be vectorized on 512-bit SVE due to data dependence but the test code assumes they can.
OS: generic

-----
Title: [JDK-8313633] [macOS] java/awt/dnd/NextDropActionTest/NextDropActionTest.java fails with java.lang.RuntimeException: wrong next drop action!
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/dnd/NextDropActionTest/NextDropActionTest.java fails with
DropTargetListener.drop(): accepting the user drop action=1
DragSourseListener.dragDropEnd():  firstCall=true drop action=1
DropTargetListener.drop(): accepting the user drop action=1
DragSourseListener.dragDropEnd():  firstCall=false drop action=1
FAILURE: wrong drop action:1
java.lang.RuntimeException: wrong next drop action!
at NextDropActionTest.start(NextDropActionTest.java:165)
at NextDropActionTest.main(NextDropActionTest.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1570)
JavaTest Message: Test threw exception: java.lang.RuntimeException: wrong next drop action!
JavaTest Message: shutting down test
OS: os_x

-----
Title: [JDK-8313905] Checked_cast assert in CDS compare_by_loader
Priority: P3
Type: Bug
Component: hotspot
Description: Test: runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc-generational
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1691399875\workspace\open\src\hotspot\share\utilities/globalDefinitions.hpp:505), pid=8704, tid=9196
#  assert(static_cast(result) == thing) failed: must be
#
# JRE version: Java(TM) SE Runtime Environment (22.0+10) (fastdebug build 22-ea+10-667)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+10-667, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\hs_err_pid8704.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
---------------  S U M M A R Y ------------
Command Line: -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\ade\mesos\work_dir\jib-master\install\jdk\20\36\bundles\windows-x64\jdk-20_windows-x64_bin.zip\jdk-20 -Djava.io.tmpdir=c:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\tmp -XX:+CreateCoredumpOnCrash -XX:+CreateCoredumpOnCrash -XX:+UseZGC -XX:ArchiveClassesAtExit=C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\appcds-11h39m27s403.jsa -Xshare:auto --add-modules=java.base,jdk.httpserver --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -Xlog:cds=debug,class+load,class+loader+constraints -XX:+UseZGC -XX:+ZGenerational -XX:ZCollectionInterval=0.01 CustomAppLoader C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\loader_constraints.jar LoaderConstraintsApp 3
Host:  AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2019 , 64 bit Build 17763 (10.0.17763.475)
Time: Mon Aug  7 12:39:28 2023 /GM elapsed time: 0.964540 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x000002617efab810):  VMThread "VM Thread"          [id=9196, stack(0x000000d942d00000,0x000000d942e00000) (1024K)]
Stack: [0x000000d942d00000,0x000000d942e00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc6b5b1]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:236)
V  [jvm.dll+0xf0bbfc]  VMError::report+0x146c  (vmError.cpp:997)
V  [jvm.dll+0xf0e055]  VMError::report_and_die+0x645  (vmError.cpp:1811)
V  [jvm.dll+0xf0e764]  VMError::report_and_die+0x64  (vmError.cpp:1576)
V  [jvm.dll+0x549b2b]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xe40356]  UnregisteredClassesDuplicationChecker::compare_by_loader+0x86  (systemDictionaryShared.cpp:602)
C  [ucrtbase.dll+0xedea]  (no source info available)
V  [jvm.dll+0xe3f01e]  SystemDictionaryShared::check_excluded_classes+0x25e  (systemDictionaryShared.cpp:634)
V  [jvm.dll+0x5fb011]  DynamicArchiveBuilder::doit+0xc1  (dynamicArchive.cpp:115)
V  [jvm.dll+0x5fba2f]  VM_PopulateDynamicDumpSharedSpace::doit+0x4f  (dynamicArchive.cpp:393)
V  [jvm.dll+0xf15903]  VM_Operation::evaluate+0xd3  (vmOperations.cpp:72)
V  [jvm.dll+0xf172c6]  VMThread::evaluate_operation+0x96  (vmThread.cpp:282)
V  [jvm.dll+0xf17a23]  VMThread::inner_execute+0x253  (vmThread.cpp:438)
V  [jvm.dll+0xf17dc4]  VMThread::run+0x104  (vmThread.cpp:175)
V  [jvm.dll+0xe760dd]  Thread::call_run+0x1cd  (thread.cpp:222)
V  [jvm.dll+0xc69892]  os::win32::thread_native_entry+0xa2  (os_windows.cpp:554)
C  [ucrtbase.dll+0x2268a]  (no source info available)
C  [KERNEL32.DLL+0x17974]  (no source info available)
C  [ntdll.dll+0x5a0b1]  (no source info available)
VM_Operation (0x000000d9417ff4c0): PopulateDumpSharedSpace, mode: safepoint, requested by thread 0x0000025d7378cb20

-----
Title: [JDK-8314752] Use google test string comparison macros
Priority: P4
Type: Enhancement
Component: hotspot
Description: The google test suite offers some neat macros for comparing strings. We should use those instead of raw strcmp or strstr where possible. Code is more readable. Also, the macros print out the values of the strings automatically in case of a failure, which saves having to add them via "

-----
Title: [JDK-8314909] tools/jpackage/windows/Win8282351Test.java fails with java.lang.AssertionError: Expected [0]. Actual [1618]:
Priority: P4
Type: Bug
Component: tools
Description: [21:31:17.345] Succeeded in building MSI Installer Package package
[21:31:17.551] TRACE: exec: Done. Exit code: 0
[21:31:17.552] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+27-2343\\windows-x64.jdk\\jdk-21\\bin\\jpackage.exe --dest .\\test\\output --name Win8282351Test$-$$-$$$ --type msi --app-image .\\test\\appimage\\Win8282351Test --win-menu --win-shortcut -J-Djlink.debug=true --verbose](13) exited with 0 code
[21:31:17.553] TRACE: assertTrue(): Check [.\\test\\output\\Win8282351Test$-$$-$$$-1.0.msi] path exists
[21:31:17.554] TRACE: assertTrue(): Check [.\\test\\output\\Win8282351Test$-$$-$$$-1.0.msi] is a file
[21:31:17.559] TRACE: Create [C:\\sb\\prod\\1688159313\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\23\\test\\unpacked-msi\\unpack.bat] text file...
[21:31:17.560] TRACE: icacls ".\\test\\unpacked-msi" /inheritance:e /grant Users:M
[21:31:17.560] TRACE: msiexec /a "test\\output\\Win8282351Test$-$$-$$$-1.0.msi" /qn TARGETDIR="C:\\sb\\prod\\1688159313\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\23\\test\\unpacked-msi\\Program Files"
[21:31:17.566] TRACE: Done
[21:31:17.569] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:29.245] TRACE: exec: Done. Exit code: 1618
[21:31:32.247] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:36.672] TRACE: exec: Done. Exit code: 1618
[21:31:40.677] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:51.174] TRACE: exec: Done. Exit code: 1618
[21:31:56.176] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:00.017] TRACE: exec: Done. Exit code: 1618
[21:32:06.023] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:09.202] TRACE: exec: Done. Exit code: 1618
[21:32:16.205] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:21.330] TRACE: exec: Done. Exit code: 1618
[21:32:29.342] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:32.799] TRACE: exec: Done. Exit code: 1618
[21:32:41.801] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:46.092] TRACE: exec: Done. Exit code: 1618
[21:32:56.103] ERROR: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
[21:32:56.104] [  FAILED  ] Win8282351Test.test; checks=7
[21:32:56.107] [==========] 1 tests ran
[21:32:56.107] [  PASSED  ] 0 tests
[21:32:56.110] [  FAILED  ] 1 test, listed below
[21:32:56.111] [  FAILED  ] Win8282351Test.test; workDir=[.\\test]
[21:32:56.111] 1 FAILED TEST
----------System.err:(57/3896)*----------
java.lang.AssertionError: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
at jdk.jpackage.test.TKit.error(TKit.java:273)
at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)
at jdk.jpackage.test.Executor$Result.assertExitCodeIsZero(Executor.java:193)
at jdk.jpackage.test.WindowsHelper.runMsiexecWithRetries(WindowsHelper.java:104)
at jdk.jpackage.test.WindowsHelper.lambda$createMsiPackageHandlers$4(WindowsHelper.java:141)
at jdk.jpackage.test.PackageTest$2.lambda$accept$1(PackageTest.java:469)
at jdk.jpackage.test.PackageTest$2.handleAction(PackageTest.java:521)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:463)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
at Win8282351Test.test(Win8282351Test.java:104)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.TKit.runTests(TKit.java:122)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
java.lang.RuntimeException: 1 FAILED TEST
at jdk.jpackage.test.Main.reportSummary(Main.java:130)
at jdk.jpackage.test.Main.runTests(Main.java:90)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST
OS: windows

-----
Title: [JDK-8315486] vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java timed out
Priority: P4
Type: Bug
Component: core-svc
Description: The following test failed in the JDK22 CI:
vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java
Here's a snippet from the log file:
#section:main
----------messages:(8/1260)----------
command: main nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002 -arch=linux-aarch64 -verbose -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys="-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations"
reason: User specified action: run main/othervm/native nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002 -arch=${os.family}-${os.simpleArch} -verbose -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys="${test.vm.opts} ${test.java.opts}"
started: Thu Aug 31 21:24:05 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Aug 31 21:38:01 UTC 2023
elapsed time (seconds): 835.49
----------configuration:(0/0)----------
----------System.out:(340/14325)----------
Preparing debugee for testing
Launching debugee
transport port == 0, disabling SO_REUSEADDR
Debugee Starting java process:
"/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java" "-XX:MaxRAMPercentage=6.25" "-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20" "-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp" "-Duse.JTREG_TEST_THREAD_FACTORY=Virtual" "-XX:+UseZGC" "-XX:+ZGenerational" "-XX:-VerifyContinuations" "-Xrunjdwp:server=n,transport=dt_socket,address=localhost:37871,includevirtualthreads=y" "nsk.share.MainWrapper" "Virtual" "nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a" "-arch=linux-aarch64" "-verbose" "-waittime=5" "-debugee.vmkind=java" "-transport.address=dynamic" "-debugee.vmkeys="-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations"" "-pipe.port=43471"
Debugee Establishing JDWP socket connection
Debugee Listening from debugee
Waiting for VM_INIT event
Querying for IDSizes
Resuming debugee VM
Waiting for signal from debugee: ready
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = -1
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000003 (3)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 03 00 0b 0e ff ff ff ff ff   ................
0010: ff ff ff 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000003 (3)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0014 (20)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 03 80 00 14                  ...........
Packet end
Expected error: 20
debugee.stderr Debuggee: received the command: createStateTestThread
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000018 (24)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 18 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000018 (24)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 18 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
Received signal from debugee: ready
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000019 (25)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 19 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000019 (25)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 19 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001a (26)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1a 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001a (26)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1a 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001b (27)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1b 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001b (27)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1b 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001c (28)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1c 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001c (28)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000a (10)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1c 80 00 0a                  ...........
Packet end
Expected error: 10
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001e (30)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1e 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001e (30)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000a (10)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1e 80 00 0a                  ...........
Packet end
Expected error: 10
debugee.stderr Debuggee: received the command: stopInNative
debugee.stderr Enter native method
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 20
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000033 (51)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 33 00 0b 0e 00 00 00 00 00   .......3........
0010: 00 00 14 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000033 (51)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 33 80 00 0d                  .......3...
Packet end
Expected error: 13
Create command: ThreadReference.ForceEarlyReturn
threadID = 20
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000035 (53)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 35 00 0b 0e 00 00 00 00 00   .......5........
0010: 00 00 14 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000035 (53)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0020 (32)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 35 80 00 20                  .......5..
Packet end
Expected error: 32
Waiting for reply packet
debugee.stderr Debuggee: received the command: exitInNative
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000f (15)
0004 (id)     : 0x00000036 (54)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0000 (0)
Entire packet (15 bytes):
0000: 00 00 00 0f 00 00 00 36 80 00 00 00 00 00 02      .......6.......
Packet end
Checking reply packet header
Parsing reply packet:
debugee.stderr Debuggee: received the command: startNewThread
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 21
Value = (VOID)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000014 (20)
0004 (id)     : 0x00000037 (55)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (20 bytes):
0000: 00 00 00 14 00 00 00 37 00 0b 0e 00 00 00 00 00   .......7........
0010: 00 00 15 56                                       ...V
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000037 (55)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x001f (31)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 37 80 00 1f                  .......7...
Packet end
Expected error: 31
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000038 (56)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0000 (0)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 38 80 00 00                  .......8...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout signalled after 480 seconds
# ERROR: Debugee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debugee FAILED with exit code: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.share.jdwp.TestDebuggerType1.quitDebugee(TestDebuggerType1.java:191)
at nsk.share.jdwp.TestDebuggerType1.runIt(TestDebuggerType1.java:131)
at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.run(forceEarlyReturn002.java:103)
at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.main(forceEarlyReturn002.java:99)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:309)
TEST FAILED
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Debugee FAILED with exit code: 134
----------System.err:(0/0)----------
----------rerun:(42/11323)*----------
result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 835480ms).
The test timed out, but it appears to have happened because
the debuggee failed with "exit code: 134". I don't see any
hs_err_pid files in the artifacts for this test run.
OS: linux

-----
Title: [JDK-8315825] Open some swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
test/jdk/javax/swing/JComponent/bug4765272.java
test/jdk/javax/swing/JComponent/bug4979794.java
test/jdk/javax/swing/JPanel/bug4907772.java
test/jdk/javax/swing/RootPaneChecking/RootPaneChecking.java
OS: generic

-----
Title: [JDK-8315882] Open some swing tests 2
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8315883] Open source several Swing JToolbar tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JToolbar applet based tests into main

-----
Title: [JDK-8315952] Open source several Swing JToolbar JTooltip JTree tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JToolbar, JTooltip, and JTree applet based tests into main

-----
Title: [JDK-8316056] Open source several Swing JTree tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JTree applet based tests into main

-----
Title: [JDK-8316146] Open some swing tests 4
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8316149] Open source several Swing JTree JViewport KeyboardManager tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JTree, JViewport, and KeyboardManager applet based tests into main

-----
Title: [JDK-8316218] Open some swing tests 5
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8316371] Open some swing tests 6
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8316627] JViewport Test headless failure
Priority: P2
Type: Bug
Component: client-libs
Description: The following test failed in the JDK22 CI:
javax/swing/JViewport/bug4546474.java
test result: Failed. Execution failed: `main' threw exception: java.awt.AWTException: headless environment

-----
Title: [JDK-8316885] jcmd: Compiler.CodeHeap_Analytics cmd does not inform about missing aggregate
Priority: P4
Type: Enhancement
Component: hotspot
Description: If jcmd users want to print statistical data about a specific property of the code heap (instead of requesting "all"), they first have to aggregate such data. If this step was forgotten, the requested function just returns. This should be improved.
------ Output before enhancement --------
bin/jcmd  Compiler.CodeHeap_Analytics FreeSpace
:
__ CodeHeapStateAnalytics lock wait took      0.000 seconds _________
__ CodeHeapStateAnalytics total duration      0.000 seconds _________
------ Output after enhancement --------
bin/jcmd  Compiler.CodeHeap_Analytics FreeSpace
:
__ CodeHeapStateAnalytics lock wait took      0.000 seconds _________
No aggregated data available for heap CodeHeap. Run function aggregate first.
__ CodeHeapStateAnalytics total duration      0.000 seconds _________
OS: generic

-----
Title: [JDK-8317283] jpackage tests run osx-specific checks on windows and linux
Priority: P4
Type: Bug
Component: tools
Description: In all app image packaging tests output of on all platforms:
---
[17:31:52.845] TRACE: assertTrue(): Unexptected value in app image file for
[17:31:52.860] TRACE: assertTrue(): Unexptected value in app image file for
---
These checks were introduced in JDK-8293462. Commit - https://github.com/openjdk/jdk/commit/1e222bccd3807c1be0d1d824e0ff9745751d8375#diff-1c3ecd7a8a4a4125f52b6f7a7d4f83a050b5f3603d074151ab946f877e6c6d9fR845
The checks are harmless but should be executed only on osx.
OS: generic

-----
Title: [JDK-8317636] Improve heap walking API tests to verify correctness of field indexes
Priority: P4
Type: Enhancement
Component: hotspot
Description: Need to improve heap function tests to verify correctness of  field indexes (jvmtiHeapReferenceInfoField::index) for JVMTI_HEAP_REFERENCE_FIELD and JVMTI_HEAP_REFERENCE_STATIC_FIELD references for different object hierarchy as described in jvmtiHeapReferenceInfoField spec
OS: generic

-----
Title: [JDK-8317808] HTTP/2 stream cancelImpl may leave subscriber registered
Priority: P4
Type: Bug
Component: core-libs
Description: Some of the ThrowingSubscriberXxx tests (typically those that use a streaming body) have been observed failing intermittently (though rarely) in timeout. The error message printed at the end showed that some HTTP/2 stream subscribers had not been properly deregistered when an exception was thrown in GET_BODY.
The issue appears to be a race condition between cancelImpl and schedule where the scheduler `sched` may get stopped before the subscriber is exceptionally completed.
A simple fix is to ensure that cancelImpl will complete the subscriber, if needed.

-----
Title: [JDK-8317919] pthread_attr_init handle return value and destroy pthread_attr_t object
Priority: P4
Type: Bug
Component: hotspot
Description: Seems we miss on AIX and Linux the handling of pthread_attr_init  return value and sometimes in special cases destroying the related pthread_attr_t object.

-----
Title: [JDK-8319233] AArch64: Build failure with clang due to -Wformat-nonliteral warning
Priority: P4
Type: Bug
Component: hotspot
Description: I tested both {release, fastdebug} on {clang-11, clang-12, clang-14, clang-15} + aarch64 + ubuntu-22.04. The following error log would be generated.
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_os_linux_aarch64.o:
~/jdk_src/src/hotspot/os_cpu/linux_aarch64/os_linux_aarch64.cpp:266:62: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
VMError::report_and_die(thread, uc, nullptr, 0, msg, detail_msg, va_dummy);
^~~~~~~~~~
1 error generated.
* All command lines available in ~/build-fastdebug/make-support/failure-logs.
=== End of repeated output ===
Note-1: I tested on clang-14+aarch64+macos, and the JDK build can pass.
Note-2: I think it's a common issue. ppc or riscv should be affected as well. Unfortunately, I didn't have the hardware on hand.

-----
Title: [JDK-8320372] test/jdk/sun/security/x509/DNSName/LeadingPeriod.java validity check failed
Priority: P2
Type: Bug
Component: security-libs
Description: The test has started to fail on all platforms with:
CertificateExpiredException: NotAfter: Sat Nov 18 20:51:45 UTC 2023
java.security.cert.CertPathValidatorException: validity check failed
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
at LeadingPeriod.main(LeadingPeriod.java:97)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.security.cert.CertificateExpiredException: NotAfter: Sat Nov 18 20:51:45 UTC 2023
at java.base/sun.security.x509.CertificateValidity.valid(CertificateValidity.java:182)
at java.base/sun.security.x509.X509CertImpl.checkValidity(X509CertImpl.java:534)
at java.base/sun.security.provider.certpath.BasicChecker.verifyValidity(BasicChecker.java:190)
at java.base/sun.security.provider.certpath.BasicChecker.check(BasicChecker.java:144)
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
... 9 more

-----
Title: [JDK-8320676] Manual printer tests have no Pass/Fail buttons, instructions close set 1
Priority: P4
Type: Bug
Component: client-libs
Description: The following manual printer tests use Sysout framework/classes to display its UI; it was used with applets but the tests are now converted to standalone apps, and there are no Pass or Fail buttons displayed. The instructions quickly appear on the screen and close quickly; in some cases they close after you click Print/OK in a displayed dialog.
This is not the intended behaviour.
The list of tests:
test/jdk/java/awt/print/PageFormat/PageSetupDialog.java
test/jdk/java/awt/print/PrinterJob/Cancel/PrinterJobCancel.java
test/jdk/java/awt/print/PrinterJob/Collate2DPrintingTest.java
test/jdk/java/awt/print/PrinterJob/DrawImage.java
test/jdk/java/awt/print/PrinterJob/DrawStringMethods.java
test/jdk/java/awt/print/PrinterJob/InvalidPage.java
test/jdk/java/awt/print/PrinterJob/JobName/PrinterJobName.java
test/jdk/java/awt/print/PrinterJob/NumCopies.java
test/jdk/java/awt/print/PrinterJob/PageDlgPrnButton.java
test/jdk/java/awt/print/PrinterJob/PrintCompoundString.java
test/jdk/java/awt/print/PrinterJob/PrintImage.java
test/jdk/java/awt/print/PrinterJob/PrintNullString.java
test/jdk/java/awt/print/PrinterJob/PrintParenString.java
test/jdk/java/awt/print/PrinterJob/PrintTranslatedFont.java
test/jdk/java/awt/print/PrinterJob/raster/RasterTest.java
test/jdk/java/awt/print/PrinterJob/ValidatePage/ValidatePage.java
I also attached as sysout.testlist file to this bug.
You can run the entire set by using a command-line like this:
java -jar jtreg.jar -nr -v $(cat sysout.testlist)

-----
Title: [JDK-8320691] Timeout handler on Windows takes 2 hours to complete
Priority: P4
Type: Bug
Component: infrastructure
Description: With latest MSVC toolchain, the timeout handler takes 2 hours to complete. Checking the process.html file, we can find the following text:
0:048 cdb: Reading initial command '.dump /f core.46216;qd'
*****************************************************************************
* .dump /f is not supported on a user mode process.                         *
*                                                                           *
* .dump /ma creates a complete memory dump of a user mode process.          *
*****************************************************************************
...
^ Extra character error in '.dump /f core.46216;qd'
0:048 WARNING: tool timed out: killed process after 3600000 ms
----------------------------------------
[2023-11-22 22:36:16] exit code: -2 time: 3599998 ms
This is repeated twice for two processes, taking up a total of 2 hours.
We should update the dump command to use /ma instead of /f.
OS: windows

-----
Title: [JDK-8320706] RuntimePackageTest.testUsrInstallDir test fails on Linux
Priority: P4
Type: Bug
Component: tools
Description: When running the test with the installation of .deb and .rpm packages produced by jpackage the test throws an exception:
---
java.lang.NullPointerException: Cannot invoke "java.nio.file.Path.equals(Object)" because the return value of "java.nio.file.Path.getFileName()" is null
at jdk.jpackage.test.JPackageCommand.lambda$assertFileInAppImage$37(JPackageCommand.java:900)
at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:178)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:517)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:507)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:583)
at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:252)
at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)
at java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)
at jdk.jpackage.test.JPackageCommand.assertFileInAppImage(JPackageCommand.java:901)
at jdk.jpackage.test.JPackageCommand.assertFileInAppImage(JPackageCommand.java:884)
at jdk.jpackage.test.JPackageCommand.assertAppImageFile(JPackageCommand.java:834)
at jdk.jpackage.test.JPackageCommand.assertAppLayout(JPackageCommand.java:808)
at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:656)
at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:592)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
at RuntimePackageTest.testUsrInstallDir(RuntimePackageTest.java:91)
---
OS: linux

-----
Title: [JDK-8320916] jdk/jfr/event/gc/stacktrace/TestParallelMarkSweepAllocationPendingStackTrace.java failed with "OutOfMemoryError: GC overhead limit exceeded"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
jdk/jfr/event/gc/stacktrace/TestParallelMarkSweepAllocationPendingStackTrace.java
Here's a snippet from the log file:
#section:main
----------messages:(7/558)----------
command: main -XX:MaxNewSize=10M -Xmx64M -XX:+UseParallelGC -Xlog:gc* jdk.jfr.event.gc.stacktrace.TestParallelMarkSweepAllocationPendingStackTrace
reason: User specified action: run main/othervm -XX:MaxNewSize=10M -Xmx64M -XX:+UseParallelGC -Xlog:gc* jdk.jfr.event.gc.stacktrace.TestParallelMarkSweepAllocationPendingStackTrace
started: Tue Nov 28 14:42:35 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management,jdk.management
finished: Tue Nov 28 14:42:38 GMT 2023
elapsed time (seconds): 3.116
----------configuration:(3/66)----------
[3.047s][info][gc,heap        ] GC(55) PSYoungGen: 4096K(7168K)-2394K(7168K) Eden: 4096K(4096K)-2394K(4096K) From: 0K(3072K)-0K(3072K)
[3.047s][info][gc,heap        ] GC(55) ParOldGen: 54863K(55296K)-54894K(55296K)
[3.047s][info][gc,metaspace   ] GC(55) Metaspace: 6549K(6912K)-6547K(6912K) NonClass: 5863K(6080K)-5861K(6080K) Class: 685K(832K)-685K(832K)
[3.047s][info][gc             ] GC(55) Pause Full (Ergonomics) 57M-55M(61M) 30.770ms
[3.047s][info][gc,cpu         ] GC(55) User=0.05s Sys=0.00s Real=0.03s
[3.059s][info][gc,heap,exit   ] Heap
[3.059s][info][gc,heap,exit   ]  PSYoungGen      total 7168K, used 2621K [0x00000007ff600000, 0x0000000800000000, 0x0000000800000000)
[3.059s][info][gc,heap,exit   ]   eden space 4096K, 63% used [0x00000007ff600000,0x00000007ff88f440,0x00000007ffa00000)
[3.059s][info][gc,heap,exit   ]   from space 3072K, 0% used [0x00000007ffa00000,0x00000007ffa00000,0x00000007ffd00000)
[3.059s][info][gc,heap,exit   ]   to   space 3072K, 0% used [0x00000007ffd00000,0x00000007ffd00000,0x0000000800000000)
[3.059s][info][gc,heap,exit   ]  ParOldGen       total 55296K, used 54894K [0x00000007fc000000, 0x00000007ff600000, 0x00000007ff600000)
[3.059s][info][gc,heap,exit   ]   object space 55296K, 99% used [0x00000007fc000000,0x00000007ff59ba90,0x00000007ff600000)
[3.059s][info][gc,heap,exit   ]  Metaspace       used 6601K, committed 6976K, reserved 1114112K
[3.059s][info][gc,heap,exit   ]   class space    used 696K, committed 896K, reserved 1048576K
----------System.err:(38/2923)----------
java.lang.OutOfMemoryError: GC overhead limit exceeded
at java.base/jdk.internal.util.ReferencedKeyMap.lookupKey(ReferencedKeyMap.java:176)
at java.base/jdk.internal.util.ReferencedKeyMap.get(ReferencedKeyMap.java:209)
at java.base/jdk.internal.util.ReferencedKeySet.get(ReferencedKeySet.java:173)
at java.base/java.lang.invoke.MethodType.makeImpl(MethodType.java:401)
at java.base/java.lang.invoke.MethodType.methodType(MethodType.java:382)
at java.base/java.lang.invoke.MethodTypeForm.canonicalize(MethodTypeForm.java:253)
at java.base/java.lang.invoke.MethodTypeForm.findForm(MethodTypeForm.java:220)
at java.base/java.lang.invoke.MethodType.makeImpl(MethodType.java:416)
at java.base/java.lang.invoke.MethodType.methodType(MethodType.java:382)
at java.base/java.lang.invoke.MethodType.changeReturnType(MethodType.java:704)
at java.base/java.lang.invoke.InnerClassLambdaMetafactory.(InnerClassLambdaMetafactory.java:174)
at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:336)
at java.base/java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(DirectMethodHandle$Holder)
at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:316)
at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:275)
at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:265)
at jdk.jfr/jdk.jfr.internal.consumer.ConstantMap.resolve(ConstantMap.java:131)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.lambda$new$2(ChunkParser.java:143)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser$$Lambda/0x00000001250adc58.accept(Unknown Source)
at jdk.jfr/jdk.jfr.internal.LongMap.forEach(LongMap.java:246)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.(ChunkParser.java:143)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.(ChunkParser.java:109)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.(ChunkParser.java:105)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.createChunkParser(RecordingFile.java:318)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.findNext(RecordingFile.java:294)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.(RecordingFile.java:89)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.readAllEvents(RecordingFile.java:271)
at jdk.test.lib.jfr.Events.fromRecording(Events.java:275)
at jdk.jfr.event.gc.stacktrace.AllocationStackTrace.allocAndCheck(AllocationStackTrace.java:386)
at jdk.jfr.event.gc.stacktrace.AllocationStackTrace.testAllocEvent(AllocationStackTrace.java:343)
JavaTest Message: Test threw exception: java.lang.OutOfMemoryError: GC overhead limit exceeded
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: GC overhead limit exceeded
----------rerun:(41/8701)*----------
OS: os_x

-----
Title: [JDK-8321818] vmTestbase/nsk/stress/strace/strace015.java failed with 'Cannot read the array length because "<local4>" is null'
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
vmTestbase/nsk/stress/strace/strace015.java
Here's a snippet from the log file:
#section:main
----------messages:(6/268)----------
command: main nsk.stress.strace.strace015
reason: User specified action: run main/othervm/native nsk.stress.strace.strace015
started: Fri Dec 08 07:21:40 UTC 2023
Mode: othervm [/othervm specified]
finished: Fri Dec 08 07:21:41 UTC 2023
elapsed time (seconds): 1.142
----------configuration:(0/0)----------
----------System.out:(0/0)----------
----------System.err:(12/806)----------
java.lang.NullPointerException: Cannot read the array length because "" is null
at nsk.stress.strace.strace015.makeSnapshot(strace015.java:141)
at nsk.stress.strace.strace015.main(strace015.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1570)
JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot read the array length because "" is null
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.NullPointerException: Cannot read the array length because "" is null
----------rerun:(36/8488)*----------
OS: linux

-----
Title: [JDK-8322983] Virtual Threads: exclude 2 tests
Priority: P4
Type: Bug
Component: hotspot
Description: Tests
runtime/classFileParserBug/TestEmptyBootstrapMethodsAttr.java
runtime/logging/LoaderConstraintsTest.java
fail with virtual threads. Shouldn't be executed in this mode.

-----
Title: [JDK-8324672] Update jdk/java/time/tck/java/time/TCKInstant.java now() to be more robust
Priority: P4
Type: Bug
Component: core-libs
Description: Test
jdk/java/time/tck/java/time/TCKInstant.java::now()
checks that time between 2 invocations is less than 0.1 sec.
It works usually but might fail with heavy load like batch compilation or STW gc.
Need to update it to use at least 10 seconds.

-----
Title: [JDK-8324807] Manual printer tests have no Pass/Fail buttons, instructions close set 2
Priority: P4
Type: Bug
Component: client-libs
Description: The following manual printer tests use Sysout framework/classes to display its UI; it was used with applets but the tests are now converted to standalone apps, and there are no Pass or Fail buttons displayed. The instructions quickly appear on the screen and close quickly; in some cases they close after you click Print/OK in a displayed dialog.
This is not the intended behaviour.
The list of tests:
test/jdk/java/awt/print/PrinterJob/Collate2DPrintingTest.java
test/jdk/java/awt/print/PrinterJob/DrawImage.java
test/jdk/java/awt/print/PrinterJob/DrawStringMethods.java
test/jdk/java/awt/print/PrinterJob/InvalidPage.java
test/jdk/java/awt/print/PrinterJob/NumCopies.java
test/jdk/java/awt/print/PrinterJob/JobName/PrinterJobName.java

-----
Title: [JDK-8324838] test_nmt_locationprinting.cpp broken in the gcc windows build
Priority: P4
Type: Bug
Component: hotspot
Description: test_nmt_locationprinting.cpp defines method test_for_dead_c_heap_block unconditionally, but this method is only ever used on Linux. In the gcc windows build this fires an unused method warning and breaks the gtest suite. Since this is never used outside of Linux, make this method's definition only appear on Linux to avoid polluting code on other platforms

-----
Title: [JDK-8325042] Remove unused JVMDITools test files
Priority: P4
Type: Sub-task
Component: core-svc
Description: The files
test/hotspot/jtreg/vmTestbase/nsk/share/JVMDITools.h
test/hotspot/jtreg/vmTestbase/nsk/share/JVMDITools.cpp
are no longer used.  They are lingering leftovers from the long-ago removal of JVMDI.  They should be removed.

-----
Title: [JDK-8325529] Remove unused imports from `ModuleGenerator` test file
Priority: P4
Type: Bug
Component: tools
Description: The file open/test/langtools/jdk/javadoc/tool/sampleapi/lib/sampleapi/generator/ModuleGenerator.java
has unused imports.
Fixing them in other PRs clutters up those PRs.  They should be removed.

-----
Title: [JDK-8325659] Normalize Random usage by incubator vector tests
Priority: P4
Type: Enhancement
Component: hotspot
Description: Our tests (test/jdk/jdk/incubator/vector) now have a number of issues in their approach to use randomisation:
1. The seed for RNG is taken from a dedicated property, the 'jdk.test.lib.random.seed'. If the property is not set, a default value of 1337 is used. Effectively, that means that by default the tests do always run with the same value, which is unacceptable.
2. I see no reason against using the standard Utils.getRandomInstance (and @key randomness) there.
Superficially, the loopopts/superword/TestAlignVectorFuzzer.java presents a nice example.
3. Many tests create their own ad-hoc RNGs like this:
int origin = (new java.util.Random()).nextInt(SPECIES.length());
int part = (new java.util.Random()).nextInt(2);
I suggest to change all those occurrences to use the standard AbstractVectorTest.RAND field. Or Utils.getRandomInstance if the former is not handy enough.

-----
Title: [JDK-8325937] runtime/handshake/HandshakeDirectTest.java causes "monitor end should be strictly below the frame pointer" assertion failure on AArch64
Priority: P2
Type: Bug
Component: hotspot
Description: This test fails intermittently (maybe 1 in 50 attempts) in our CI, but so far only on one type of machine (CPU is Arm Neoverse N2).
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ent-user/jdk_src/src/hotspot/cpu/aarch64/frame_aarch64.cpp:348), pid=1299863, tid=1299905
#  assert((intptr_t*) result
OS: linux

-----
Title: [JDK-8326421] Add jtreg test for large arrayCopy disjoint case.
Priority: P4
Type: Enhancement
Component: hotspot
Description: This will test byte array copy operation for aligned and non aligned cases with array length greater than 2.5MB.

-----
Title: [JDK-8326525] com/sun/tools/attach/BasicTests.java does not verify AgentLoadException case
Priority: P4
Type: Bug
Component: hotspot
Description: from BasicTests.java:
// Test 2 - attempt to load an agent that does not exist
System.out.println(" - Test: Load an agent that does not exist");
try {
vm.loadAgent("SilverBullet.jar");
} catch (AgentLoadException x) {
System.out.println(" - AgentLoadException thrown as expected!");
}
The test does not verify that AgentLoadException is thrown

-----
Title: [JDK-8327098] GTest needs larger combination limit
Priority: P4
Type: Bug
Component: hotspot
Description: GHA pre-integration tests have been observed to fail with the following error:
```
----------System.err:(10/590)----------
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [LogSelectionList::combination_limit]
at GTestWrapper.main(GTestWrapper.java:98)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test
```
which derives from:
```
TEST(LogSelectionList, combination_limit) {
size_t max_combinations = LogSelectionList::MaxSelections;
EXPECT_GT(max_combinations, LogTagSet::ntagsets())

-----
Title: [JDK-8327390] JitTester: Implement temporary folder functionality
Priority: P4
Type: Enhancement
Component: hotspot
Description: The JITTester relies on standard OS / Java library functionality to create temporary folders and never cleans them.
This creates problems in CI machines and also complicates problems investigation. We need to have a dedicated TempDir entity that we could adjust during problems investigations and development. It can also be a home for various file-related activities, like executing FailureHandler.

-----
Title: [JDK-8327460] Compile tests with the same visibility rules as product code
Priority: P3
Type: Bug
Component: infrastructure
Description: Currently, our symbol visibility handling for tests are sloppy; we only handle it properly on Windows. We need to bring it up to the same levels as product code. This is a prerequisite for JDK-8327045, which in turn is a building block for Hermetic Java.

-----
Title: [JDK-8327476] Upgrade JLine to 3.26.1
Priority: P4
Type: Task
Component: tools
Description: The JLine inside the JDK should be upgraded to JLine 3.26.1.

-----
Title: [JDK-8327505] Test com/sun/jmx/remote/NotificationMarshalVersions/TestSerializationMismatch.java fails
Priority: P4
Type: Bug
Component: core-svc
Description: Test: com/sun/jmx/remote/NotificationMarshalVersions/TestSerializationMismatch.java
This test has started failing fairly regularly in our CI. A typical failure looks like:
starting server
server started and listening on service:jmx:rmi:///jndi/rmi://localhost:12345/test
starting client
client connected
client invoking foo (10 times)
..........
waiting for 10 notifications to arrive
ERROR: notification processing thread interrupted
----------System.err:(22/1474)----------
java.lang.reflect.InvocationTargetException
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at TestSerializationMismatch.startClient(TestSerializationMismatch.java:122)
at TestSerializationMismatch.main(TestSerializationMismatch.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.Error: notification thread interrupted unexpectedly
at Client.run(Client.java:97)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
... 7 more
Mar 06, 2024 9:59:22 AM com.sun.jmx.remote.internal.ClientNotifForwarder$NotifFetcher fetchOneNotif
WARNING: Failed to deserialize a notification: java.io.NotSerializableException
JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
Mar 06, 2024 9:59:55 AM com.sun.jmx.remote.internal.ClientNotifForwarder$NotifFetcher fetchOneNotif
WARNING: Failed to deserialize a notification: java.io.NotSerializableException

-----
Title: [JDK-8327857] Remove applet usage from JColorChooser tests Test4222508
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4222508.java

-----
Title: [JDK-8327859] Remove applet usage from JColorChooser tests Test4319113
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4319113.java

-----
Title: [JDK-8327986] ASAN reports use-after-free in DirectivesParserTest.empty_object_vm
Priority: P4
Type: Bug
Component: hotspot
Description: ASAN reports a use-after-free, because we feed the string we got from `setlocale` back to `setlocale`, but this string is owned by the libc, and the libc decided to free it in the meantime.
```
[ RUN      ] DirectivesParserTest.empty_object_vm
=================================================================
==347387==ERROR: AddressSanitizer: heap-use-after-free on address 0x60200000ee10 at pc 0x7f54badf2ffd bp 0x7ffff2dd8410 sp 0x7ffff2dd7bb8
READ of size 2 at 0x60200000ee10 thread T0
#0 0x7f54badf2ffc in __interceptor_setlocale ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:3254
#1 0x7f54b2a320a6 in DirectivesParserTest::~DirectivesParserTest() /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/compiler/test_directivesParser.cpp:42
#2 0x7f54b2a320a6 in DirectivesParserTest_empty_object_vm_Test::~DirectivesParserTest_empty_object_vm_Test() /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/compiler/test_directivesParser.cpp:62
#3 0x7f54b2a320a6 in DirectivesParserTest_empty_object_vm_Test::~DirectivesParserTest_empty_object_vm_Test() /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/compiler/test_directivesParser.cpp:62
#4 0x7f54b86dab8d in testing::Test::DeleteSelf_() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/include/gtest/gtest.h:336
#5 0x7f54b86dab8d in void testing::internal::HandleExceptionsInMethodIfSupported(testing::Test*, void (testing::Test::*)(), char const*) /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:2670
#6 0x7f54b86dab8d in testing::TestInfo::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:2842
#7 0x7f54b8711861 in testing::TestSuite::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:3015
#8 0x7f54b8711861 in testing::TestSuite::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:2968
#9 0x7f54b8713140 in testing::internal::UnitTestImpl::RunAllTests() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:5920
#10 0x7f54b8713e43 in bool testing::internal::HandleExceptionsInMethodIfSupported(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) /shared/projects/openjdk/gtest/g
oogletest-1.14.0/googletest/src/gtest.cc:2670
#11 0x7f54b8713e43 in testing::UnitTest::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:5484
#12 0x7f54b25eec15 in RUN_ALL_TESTS() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/include/gtest/gtest.h:2317
#13 0x7f54b25eec15 in runUnitTestsInner /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gtestMain.cpp:290
#14 0x7f54b25ef430 in runUnitTests /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gtestMain.cpp:371
#15 0x561fec59123d in main /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gtestLauncher.cpp:40
#16 0x7f54b1013082 in __libc_start_main ../csu/libc-start.c:308
#17 0x561fec59110d in _start (/shared/projects/openjdk/jdk-jdk/output-fastdebug/hotspot/variant-server/libjvm/gtest/gtestLauncher+0x110d)
0x60200000ee10 is located 0 bytes inside of 12-byte region [0x60200000ee10,0x60200000ee1c)
freed by thread T0 here:
#0 0x7f54bae8040f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122
#1 0x7f54b101fc48 in setname /build/glibc-wuryBv/glibc-2.31/locale/setlocale.c:199
#2 0x7f54b101fc48 in __GI_setlocale /build/glibc-wuryBv/glibc-2.31/locale/setlocale.c:452
#3 0x7f54b101fc48 in __GI_setlocale /build/glibc-wuryBv/glibc-2.31/locale/setlocale.c:217
previously allocated by thread T0 here:
#0 0x7f54bae80808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144
#1 0x7f54b108e38e in __GI___strdup /build/glibc-wuryBv/glibc-2.31/string/strdup.c:42
```

-----
Title: [JDK-8327994] Update code gen in CallGeneratorHelper
Priority: P5
Type: Enhancement
Component: core-libs
Description: The code in test/jdk/java/foreign/CallGeneratorHelper used to generate native test libraries is out of date. There are several issues:
- We no longer generate header files, so the code for that is dead
- The code was never updated to generate the *Stack.c test files
- The code was never updated to generate the shared.h file
The native test libraries that are generated closely correspond to the test cases that are generated by the actual TestNG tests (the former uses the same DataProvier as the latter). So, I think it is worthwhile to keep around/update the native test file generation code, in case we ever need to tweak the test case generation logic (which would then require re-generating the native test files).

-----
Title: [JDK-8328005] Convert java/awt/im/JTextFieldTest.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/im/JTextFieldTest.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328085] C2: Use after free in PhaseChaitin::Register_Allocate()
Priority: P3
Type: Bug
Component: hotspot
Description: We have seen the assertion
assert(idx
0x0000000125949580 - 0x0900000003eddc2c libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)
0x0000000125949600 - 0x09000000039cd348 libjvm.so::VMError::report(outputStream*, bool)+0x1c0c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)
0x0000000125949ee0 - 0x09000000039bbdc8 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x7cc  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)
0x000000012594a0d0 - 0x09000000039bb5b0 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)
0x000000012594a170 - 0x09000000039bb290 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)
0x000000012594a210 - 0x09000000047807ec libjvm.so::PhaseChaitin::Register_Allocate()+0x10a0  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)
0x000000012594a5c0 - 0x090000000475fc64 libjvm.so::Compile::Code_Gen()+0x21c  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:1 parmsonstk:1)
0x000000012594b200 - 0x09000000047dd12c libjvm.so::Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x16c4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)
0x000000012594be70 - 0x09000000049ec7a8 libjvm.so::C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x25c  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)
0x000000012594ca90 - 0x0900000003cffb44 libjvm.so::CompileBroker::invoke_compiler_on_method(CompileTask*)+0xcb4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)
0x000000012594d210 - 0x0900000003cf0264 libjvm.so::CompileBroker::compiler_thread_loop()+0x4c0  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 parmsonstk:1)
0x000000012594d460 - 0x0900000003cefd24 libjvm.so::CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:2 parmsonstk:1)
0x000000012594d4e0 - 0x0900000003b8ef84 libjvm.so::JavaThread::thread_main_inner()+0x1f8  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)
0x000000012594d5b0 - 0x0900000003b8d06c libjvm.so::JavaThread::run()+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:1 parmsonstk:1)
0x000000012594d650 - 0x0900000003abb85c libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)
0x000000012594d6e0 - 0x0900000003abad50 libjvm.so::thread_native_entry(Thread*)+0x194  (C++ uses_alloca saves_lr stores_bc gpr_saved:9 fixedparms:1 parmsonstk:1)
0x000000012594d7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )
0x000000012594d820 - 0x0000000000000000
*** end of backchain ***
*UPDATE 2024-10-04*
Several crash logs show the  badResourceValue pattern (abababab r7 below). That indicates a use-after-free issue with memory allocated from the ResourceArea similar to JDK-8336095.
pc =0x00007fffa8a3ed70  lr =0x00007fffa8a545b4  ctr=0x00007fffaaef89b0
r0 =0x00007fffa8a545b4  r1 =0x00007ffe2a9faf00  r2 =0x00007fffaa8b0f00
r3 =0x00007fffaa1e0448  r4 =0x0000000000000127  r5 =0x00007fffaa1e0428
r6 =0x00007fffaa1e0400  r7 =0x00000000abababab  r8 =0x0000000000000058
r9 =0x00007ffe2a9fb0c0  r10=0x00007fffaae50000  r11=0x00007fffa9a599a0
r12=0x00007fffaaef89b0  r13=0x00007ffe2aa068e0  r14=0x0000000000000003
r15=0x0000000000000010  r16=0x0000000000000000  r17=0x00007fffaa964bb0
r18=0x00007ffe2a9fb638  r19=0x00007ffe2a9fb080  r20=0x00007fffaa1e22f0
r21=0x00007ffe2a9fb4f0  r22=0x0000000000000001  r23=0x00007ffe2a9fb010
r24=0x00007ffe2a9fb088  r25=0x00007fffaa93ff20  r26=0x0000000000000000
r27=0x000000000000002f  r28=0x00007fffaa932170  r29=0x00007ffe2a9fb048
r30=0x00007ffe2a9fb4c8  r31=0x00007ffe2a9faf00
*UPDATE 2024-11-04*
Several crash logs have messages similar to
#  assert(idx

-----
Title: [JDK-8328121] Remove applet usage from JColorChooser tests Test4759306
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4759306.java

-----
Title: [JDK-8328130] Remove applet usage from JColorChooser tests Test4759934
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4759934.java

-----
Title: [JDK-8328185] Convert java/awt/image/MemoryLeakTest/MemoryLeakTest.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/image/MemoryLeakTest/MemoryLeakTest.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328227] Remove applet usage from JColorChooser tests Test4887836
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4887836.java

-----
Title: [JDK-8328368] Convert java/awt/image/multiresolution/MultiDisplayTest/MultiDisplayTest.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/image/multiresolution/MultiDisplayTest/MultiDisplayTest.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328370] Convert java/awt/print/Dialog/PrintApplet.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/Dialog/PrintApplet.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328380] Remove applet usage from JColorChooser tests Test6348456
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test6348456.java

-----
Title: [JDK-8328387] Convert java/awt/Frame/FrameStateTest/FrameStateTest.html applet test to main
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8328403] Remove applet usage from JColorChooser tests Test6977726
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test6977726.java

-----
Title: [JDK-8328553] Get rid of JApplet in test/jdk/sanity/client/lib/SwingSet2/src/DemoModule.java
Priority: P3
Type: Bug
Component: client-libs

-----
Title: [JDK-8328558] Convert javax/swing/JCheckBox/8032667/bug8032667.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert javax/swing/JCheckBox/8032667/bug8032667.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328717] Convert javax/swing/JColorChooser/8065098/bug8065098.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert javax/swing/JColorChooser/8065098/bug8065098.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328719] Convert java/awt/print/PageFormat/SetOrient.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/PageFormat/SetOrient.html applet test to main using PassFailJFrame

-----
Title: [JDK-8328730] Convert java/awt/print/bug8023392/bug8023392.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/bug8023392/bug8023392.html applet test to main using PassFailJFrame

-----
Title: [JDK-8328753] Open source few Undecorated Frame tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Undecorated Frame tests.
OS: generic

-----
Title: [JDK-8328819] Remove applet usage from JFileChooser tests bug6698013
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JFileChooser tests
open/test/jdk/javax/swing/JFileChooser/6698013/bug6698013.java

-----
Title: [JDK-8328827] Convert java/awt/print/PrinterJob/PrinterDialogsModalityTest/PrinterDialogsModalityTest.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/PrinterJob/PrinterDialogsModalityTest/PrinterDialogsModalityTest.html applet test to main using PassFailJFrame

-----
Title: [JDK-8329210] Delete Redundant Printer Dialog Modality Test
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/java/awt/print/Dialog/PrintModalDialog.java is too similar in functionality to test/jdk/java/awt/print/PrinterJob/PrinterDialogsModalityTest.java.
One test was originally for modality in web browsers, while the other was for modality in Windows OS printer dialogs, but after the updates, they both check for modality on print and page dialogs for all OSs.
Since PrinterDialogsModalityTest.java is the preferred test, this is to remove PrintModalDialog.java as a test. In addition, the bugID in the jtreg tags from PrintModalDialog.java will be added to PrinterDialogsModalityTest.java's tags to maintain a link to its original bug.

-----
Title: [JDK-8329320] Simplify awt/print/PageFormat/NullPaper.java test
Priority: P4
Type: Bug
Component: client-libs
Description: The  java/awt/print/PageFormat/NullPaper.java contains lots of unnecessary code which is a leftover from "standard instructions" machinery.
The test itself is basically two lines of code.

-----
Title: [JDK-8329322] Convert PageFormat/Orient.java to use PassFailJFrame
Priority: P4
Type: Bug
Component: client-libs
Description: The jdk/java/awt/print/PageFormat/Orient.java test is a manual printer test which uses an old framework which duplicates code in each test.
Covert Orient.java to use PassFailJFrame.

-----
Title: [JDK-8329692] Add more details to FrameStateTest.java test instructions
Priority: P4
Type: Bug
Component: client-libs
Description: Frame does not restore to normal after iconfied state in windows 10 & windows 11
Step to reproduce
----------------------------------
1) Run the manual https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/Frame/FrameStateTest/FrameStateTest.java state
2) Select Frame state NORMAL & Frame non-resizable checkbox
3) Click on "Create Frame" button.
4) "Frame State Test ( Window 2) test frame should be visible
5) Click on "Iconify & restore" button - "Frame State Test ( Window 2) test frame is iconified and restored
6) Click on "hide & show" button -  "Frame State Test ( Window 2) test frame" gets hidden and shown
7) Click on "hide, iconfify and show" button - "Frame State Test ( Window 2) test frame" is
a) Hidden
b) Iconified
c) "Frame State Test ( Window 2) test fram"  is not "showed" . User has to manually click on the iconified and select the "Frame State Test ( Window 2) test frame" to restore the frame.
If you see the same then the bug is reproduced.
NOTE: This is not an issue but ambiguity in test instructions. The test instructions will be updated for clarity.
OS: windows_10

-----
Title: [JDK-8330647] Two CDS tests fail with -UseCompressedOops and UseSerialGC/UseParallelGC
Priority: P4
Type: Bug
Component: hotspot
Description: The following CDS tests fail deterministically when using -XX:-UseCompressedOops and -Dtest.cds.runtime.options=-XX:+UseSerialGC or -Dtest.cds.runtime.options=-XX:+UseParallelGC:
test/hotspot/jtreg/runtime/cds/appcds/cacheObject/ArchiveHeapTestClass.java
test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java
A possible fix is to simply require that either UseCompressedOops is set or Serial/ParallelGC are not selected in these tests (assuming the combination of +SerialGC/+ParallelGC and -UseCompressedOops is unsupported).

-----
Title: [JDK-8330702] Update failure handler to don't generate Error message if cores actions are empty
Priority: P4
Type: Bug
Component: hotspot
Description: The cores section is empty (no exist) on windows and it is not an Error.
No need to generate Error messages in this case.
It is about
' ```ERROR: 'cores' property is empty```'
Probably it is better to be able to have empty cores and ensure it is not a mistake.

-----
Title: [JDK-8331735] UpcallLinker::on_exit races with GC when copying frame anchor
Priority: P3
Type: Bug
Component: core-libs
Description: A fatal error has been detected by the Java Runtime Environment:
SIGSEGV (0xb) at pc=0x0000ffff67e651a8, pid=1499163, tid=1499236
JRE version: Java(TM) SE Runtime Environment (23.0+22) (build 23-ea+22-1781)
Java VM: Java HotSpot(TM) 64-Bit Server VM (23-ea+22-1781, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Problematic frame:
j  java.awt.Font.getFont2D()Lsun/font/Font2D;+0 java.desktop@23-ea
....
....
[warning][os] Loading hsdis library failed

-----
Title: [JDK-8331959] Update PKCS#11 Cryptographic Token Interface to v3.1
Priority: P4
Type: Enhancement
Component: security-libs
Description: Header files are at: http://docs.oasis-open.org/pkcs11/pkcs11-spec/v3.1/os/include/pkcs11-v3.1/
OS: generic

-----
Title: [JDK-8331977] Crash: SIGSEGV in dlerror()
Priority: P2
Type: Bug
Component: tools
Description: Test:  tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java
[23:08:47.438] TRACE: exec: Execute [/opt/mach5/mesos/work_dir/slaves/f8dfb4e7-ae2d-48ec-aec1-afff79404935-S31203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f927ceb2-8f2f-40e3-988c-207f210132bf/runs/85774163-597d-4c86-8558-8b853edef678/testoutput/test-support/jtreg_open_test_jdk_tier3/scratch/5/./test.f20c824a/output/MainClassTest/bin/MainClassTest](1); save output; in directory [./test.f20c824a/output]...
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f59a64d5424, pid=28546, tid=28556
#
# JRE version: OpenJDK Runtime Environment (23.0+22) (build 23-ea+22-1820)
# Java VM: OpenJDK 64-Bit Server VM (23-ea+22-1820, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# C  [libdl.so.2+0x1424]  dlerror+0xe4
---------------  T H R E A D  ---------------
Current thread (0x00007f59a002b180):  JavaThread "main"             [_thread_in_vm, id=28556, stack(0x00007f59a67d7000,0x00007f59a68d8000) (1028K)]
Stack: [0x00007f59a67d7000,0x00007f59a68d8000],  sp=0x00007f59a68d50f0,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libdl.so.2+0x1424]  dlerror+0xe4
V  [libjvm.so+0xc83058]  NativeLookup::lookup_style(methodHandle const&, char*, char const*, int, bool, JavaThread*)+0x268  (nativeLookup.cpp:267)
V  [libjvm.so+0xc8364c]  NativeLookup::lookup_base(methodHandle const&, JavaThread*)+0xac  (nativeLookup.cpp:336)
V  [libjvm.so+0xc838bb]  NativeLookup::lookup(methodHandle const&, JavaThread*)+0x4b  (nativeLookup.cpp:423)
V  [libjvm.so+0x8ca35d]  InterpreterRuntime::prepare_native_call(JavaThread*, Method*)+0x6d  (interpreterRuntime.cpp:1458)
j  sun.nio.fs.UnixNativeDispatcher.init()I+0 java.base
j  sun.nio.fs.UnixNativeDispatcher.()V+5 java.base
v  ~StubRoutines::call_stub 0x00007f598fe6bc86
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)
V  [libjvm.so+0x8ab0bf]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ef  (instanceKlass.cpp:1630)
V  [libjvm.so+0x8ac021]  InstanceKlass::initialize_impl(JavaThread*)+0x5b1  (instanceKlass.cpp:1214)
V  [libjvm.so+0xb590aa]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x19a  (linkResolver.cpp:1101)
V  [libjvm.so+0xb5978b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x16b  (linkResolver.cpp:1689)
V  [libjvm.so+0x8cbc77]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b7  (interpreterRuntime.cpp:853)
V  [libjvm.so+0x8cc1f7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37  (interpreterRuntime.cpp:980)
j  sun.nio.fs.UnixFileSystem.(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+79 java.base
j  sun.nio.fs.LinuxFileSystem.(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+3 java.base
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/LinuxFileSystem;+6 java.base
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/UnixFileSystem;+2 java.base
j  sun.nio.fs.UnixFileSystemProvider.()V+9 java.base
j  sun.nio.fs.LinuxFileSystemProvider.()V+1 java.base
j  sun.nio.fs.DefaultFileSystemProvider.()V+4 java.base
v  ~StubRoutines::call_stub 0x00007f598fe6bc86
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)
V  [libjvm.so+0x8ab0bf]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ef  (instanceKlass.cpp:1630)
V  [libjvm.so+0x8ac021]  InstanceKlass::initialize_impl(JavaThread*)+0x5b1  (instanceKlass.cpp:1214)
V  [libjvm.so+0xb590aa]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x19a  (linkResolver.cpp:1101)
V  [libjvm.so+0xb5978b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x16b  (linkResolver.cpp:1689)
V  [libjvm.so+0x8cbc77]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b7  (interpreterRuntime.cpp:853)
V  [libjvm.so+0x8cc1f7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37  (interpreterRuntime.cpp:980)
j  java.nio.file.FileSystems.getDefault()Ljava/nio/file/FileSystem;+10 java.base
j  java.nio.file.Path.of(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;+0 java.base
j  jdk.internal.module.ModuleBootstrap.finderFor(Ljava/lang/String;)Ljava/lang/module/ModuleFinder;+65 java.base
j  jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+8 java.base
j  jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base
j  java.lang.System.initPhase2(ZZ)I+0 java.base
v  ~StubRoutines::call_stub 0x00007f598fe6bc86
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)
V  [libjvm.so+0x8d3deb]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x10b  (javaCalls.cpp:329)
V  [libjvm.so+0xeb9c0c]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x76c  (threads.cpp:316)
V  [libjvm.so+0x97756e]  JNI_CreateJavaVM+0x4e  (jni.cpp:3581)
C  [libjli.so+0x3c2f]  JavaMain+0x8f  (java.c:1550)
C  [libjli.so+0x7ee9]  ThreadJavaMain+0x9  (java_md.c:642)
OS: linux

-----
Title: [JDK-8331993] Add counting leading/trailing zero tests for Integer
Priority: P4
Type: Enhancement
Component: hotspot
Description: Currently, in hotspot/jtreg/compiler/vectorization/TestNumberOfContinuousZeros.java, there is only tests for Long, not for Integer

-----
Title: [JDK-8332158] [XWayland] test/jdk/java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java
Priority: P3
Type: Bug
Component: client-libs
Description: The test ResizingFrameTest fails with:
java.lang.RuntimeException: No Mouse Entered/Exited events!
at ResizingFrameTest.main(ResizingFrameTest.java:155)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
It looks like the mouse pointer is no longer in the right place from the XWayland server's point of view after calling
frame.setExtendedState(Frame.MAXIMIZED_BOTH);
E.g we have
```
robot.mouseMove(500, 500);
...
System.out.println(MouseInfo.getPointerInfo().getLocation()); // java.awt.Point[x=500,y=500]
...
frame.setExtendedState(Frame.MAXIMIZED_BOTH);
...
System.out.println(MouseInfo.getPointerInfo().getLocation()); // java.awt.Point[x=856,y=463] or other location depending on actual mouse cursor position on system
...
robot.mouseMove(500, 500); // has no effect
...
System.out.println(MouseInfo.getPointerInfo().getLocation()); // still doesn't print 500, 500
```
OS: linux

-----
Title: [JDK-8332494] java/util/zip/EntryCount64k.java failing with java.lang.RuntimeException: '\\A\\Z' missing from stderr
Priority: P4
Type: Bug
Component: hotspot
Description: The following test is failing in the JDK23 CI:
java/util/zip/EntryCount64k.java
Here's a snippet from the linux-x64 log file:
#section:main
----------messages:(6/233)----------
command: main EntryCount64k
reason: User specified action: run main/othervm EntryCount64k
started: Fri May 17 19:44:18 UTC 2024
Mode: othervm [/othervm specified]
finished: Fri May 17 19:44:21 UTC 2024
elapsed time (seconds): 2.774
----------configuration:(0/0)----------
----------System.out:(5/1855)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+23-1890/linux-x64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S15509/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ce0e5d10-174f-45de-bc3d-8c5debd321ac/runs/44ca1ee7-8959-4d3e-8707-f1edafdc0b1a/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/3/java/util/zip/EntryCount64k.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+23-1890/src.full/open/test/jdk/java/util/zip:/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S15509/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ce0e5d10-174f-45de-bc3d-8c5debd321ac/runs/44ca1ee7-8959-4d3e-8707-f1edafdc0b1a/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/3/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+23-1890/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/22/36/bundles/linux-x64/jdk-22_linux-x64_bin.tar.gz/jdk-22 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S15509/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ce0e5d10-174f-45de-bc3d-8c5debd321ac/runs/44ca1ee7-8959-4d3e-8707-f1edafdc0b1a/testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp -ea -esa -XX:+UseZGC -XX:-ZGenerational -jar EntryCount64k-tmp.zip ]
[2024-05-17T19:44:21.103006907Z] Gathering output for process 1234778
[2024-05-17T19:44:21.256628108Z] Waiting for completion for process 1234778
[2024-05-17T19:44:21.396841417Z] Waiting for completion finished for process 1234778
Output and diagnostic info for process 1234778 was saved into 'pid-1234778-output.log'
----------System.err:(24/1383)*----------
Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
entryCount=65533 shouldUseZip64=false usesZip64=false zipSize=6797033
stdout: [Main];
stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
]
exitValue = 0
java.lang.RuntimeException: '\\A\\Z' missing from stderr
at jdk.test.lib.process.OutputAnalyzer.stderrShouldMatch(OutputAnalyzer.java:407)
at EntryCount64k.checkCanRead(EntryCount64k.java:166)
at EntryCount64k.test(EntryCount64k.java:108)
at EntryCount64k.main(EntryCount64k.java:64)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.RuntimeException: '\\A\\Z' missing from stderr
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: '\\A\\Z' missing from stderr
----------rerun:(39/6874)*----------
The following output on stderr might be the root cause here:
stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
]
This test failure has happened on macosx-x64, windows-x64
and linux-x64 in jdk-23+23-1890-tier8 and that build-ID includes
the fix for:
JDK-8326957 Implement JEP 474: ZGC: Generational Mode by Default
The test task's JVM args are: -XX:+UseZGC -XX:-ZGenerational
Should these task definitions have been modified by JDK-8326957?
OS: generic

-----
Title: [JDK-8332917] failure_handler should execute gdb "info threads" command on linux
Priority: P5
Type: Enhancement
Component: hotspot
Description: On linux, failure_handler dumps all threads, but this dump does not include the name of each thread. The gdb "info threads" command will give a summary of all threads, and if debugging process, the summary will include each thread's name. If debugging a core file for some reason the thread name is not included, but the summary is still useful. Here's some output for each:
Process:
Id   Target Id                                             Frame
* 1    Thread 0xffff7fcf2a50 (LWP 2749191) "java"            0x0000ffff7fc22ba8 in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
2    Thread 0xffff7d9f31d0 (LWP 2749192) "old-m-a-i-n"     0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
3    Thread 0xffff7c51e1d0 (LWP 2749193) "GC Thread#0"     0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
4    Thread 0xffff7c31f1d0 (LWP 2749194) "G1 Main Marker"  0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
5    Thread 0xffff5ea991d0 (LWP 2749195) "G1 Conc#0"       0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
...
Core File:
Id   Target Id                           Frame
* 1    Thread 0xffff7fcf2a50 (LWP 2749191) 0x0000ffff7fc22ba8 in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
2    Thread 0xffff7d9f31d0 (LWP 2749192) 0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
3    Thread 0xffff4ffff1d0 (LWP 2749196) 0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
4    Thread 0xffff7c51e1d0 (LWP 2749193) 0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
5    Thread 0xffff5ea991d0 (LWP 2749195) 0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
...

-----
Title: [JDK-8333116] test/jdk/tools/jpackage/share/ServiceTest.java test fails
Priority: P4
Type: Bug
Component: tools
Description: When running test/jdk/tools/jpackage/share/ServiceTest.java in full test mode including installation of the msi the test fails:
[22:09:20.347] TRACE: assertFalse(): Check [C:\Program Files\UpdateServiceTest\foo.ico] path doesn't exist
[22:09:20.375] [  FAILED  ] ServiceTest.testUpdate; checks=60
java.lang.ExceptionInInitializerError
at jdk.jpackage.test.LauncherIconVerifier.applyTo(LauncherIconVerifier.java:70)
at jdk.jpackage.test.AdditionalLauncher.verifyIcon(AdditionalLauncher.java:298)
at jdk.jpackage.test.AdditionalLauncher.verify(AdditionalLauncher.java:363)
at jdk.jpackage.test.LauncherAsServiceVerifier$1.verify(LauncherAsServiceVerifier.java:261)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$6(PackageTest.java:660)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:660)
at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:594)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest$Group.lambda$runAction$0(PackageTest.java:364)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest$Group.runAction(PackageTest.java:364)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.RunnablePackageTest.runActions(RunnablePackageTest.java:66)
at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
at ServiceTest.testUpdate(ServiceTest.java:132)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:105)
at jdk.jpackage.test.TKit.runTests(TKit.java:122)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make private static native long jdk.jpackage.internal.ExecutableRebrander.lockResource(java.lang.String) accessible: module jdk.jpackage does not "opens jdk.jpackage.internal" to unnamed module @3761e16e
at java.base/java.lang.reflect.AccessibleObject.throwInaccessibleObjectException(AccessibleObject.java:388)
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:364)
You need to set "jpackage.test.ServiceTest.service-installer" property to reproduce the issue.
OS: windows

-----
Title: [JDK-8333360] PrintNullString.java doesn't use float arguments
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/print/PrinterJob/PrintNullString.java tests Graphics2D.drawString API which accepts int and float as the coordinates, yet in some cases it passes int where it should be float.
https://github.com/openjdk/jdk/blob/1e04ee6d57d5fe84e1d202b16e8d13dc13c002ff/test/jdk/java/awt/print/PrinterJob/PrintNullString.java#L148-L154
// API 3: null & empty drawString(Iterator, int, int);
try {
g2d.drawString(nullIterator, 20, 120);
g2d.drawString("FAILURE: No NPE for null iterator, float", 20, 120);
} catch (NullPointerException e) {
g2d.drawString("caught expected NPE for null iterator, int", 20, 120);
}
This code has inconsistency: the error message refers to float whereas the call to g2d.drawString uses int and the success message uses int.
https://github.com/openjdk/jdk/blob/1e04ee6d57d5fe84e1d202b16e8d13dc13c002ff/test/jdk/java/awt/print/PrinterJob/PrintNullString.java#L171-L176
try {
g2d.drawString(emptyIterator, 20, 180);
g2d.drawString("FAILURE: No IAE for empty iterator, float", 20, 180);
} catch (IllegalArgumentException e) {
g2d.drawString("caught expected IAE for empty iterator, float", 20, 180);
}
This piece of code should use float coordinates but it still uses int.

-----
Title: [JDK-8333391] Test com/sun/jdi/InterruptHangTest.java failed: Thread was never interrupted during sleep
Priority: P4
Type: Bug
Component: core-svc
Description: [3146ms] detailMessage = "Thread was never interrupted during sleep: 65"
[3147ms] Got StepEvent 600 at line java.lang.Thread.dispatchUncaughtException(java.lang.Throwable):2840
[3171ms] RemoteInterruptor thread: Got expected IllegalThreadStateException after 108 interrupts sent. Exiting.
java.lang.RuntimeException: Invalid debuggee exitValue: 1
at TestScaffold.waitForVMDisconnect(TestScaffold.java:787)
at TestScaffold.resumeToVMDisconnect(TestScaffold.java:1015)
at TestScaffold.listenUntilVMDisconnect(TestScaffold.java:743)
at InterruptHangTest.runTests(InterruptHangTest.java:321)
at TestScaffold.startTests(TestScaffold.java:468)
at InterruptHangTest.main(InterruptHangTest.java:249)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
OS: os_x_10.15

-----
Title: [JDK-8333403] Write a test to check various components events are triggered properly
Priority: P4
Type: Enhancement
Component: client-libs
Description: This testcase checks for the following assertions for Component events:
1. When components are resized, moved, hidden and shown the respective events are triggered.
2. When the components are hidden/disabled also,the component events like resized/moved are triggered.
3. When a hidden component is hidden again, or a visible component is shown again, the events should not be fired.
4. When a window is minimized/restored then hidden and shown component events should be triggered.
Testing:
Tested using Mach5(20 times per platform) in macos,linux and windows and got all pass.

-----
Title: [JDK-8333647] C2 SuperWord: some additional PopulateIndex tests
Priority: P4
Type: Sub-task
Component: hotspot
Description: PopulateIndex is not very well tested by the IR tests.

-----
Title: [JDK-8334305] Remove all code for  nsk.share.Log verbose mode
Priority: P4
Type: Enhancement
Component: hotspot
Description: The nsk.share.Log is made to be always verbose. Need to clean all corresponding code.

-----
Title: [JDK-8334371] [AIX] Beginning with AIX 7.3 TL1 mmap() supports 64K memory pages
Priority: P4
Type: Enhancement
Component: hotspot
Description: Beginning with AIX 7.3 TL1 mmap() supports 64K memory pages. As an enhancement, during the initialization of the VM the availability of this new feature is examined. If the 64K pages are supported the VM will use mmap() with 64K pages instead of shmget()/shmat() with 64K pages due to the bad 256M alignment of shmget()/shmat().
OS: aix

-----
Title: [JDK-8334490] Normalize string with locale invariant `toLowerCase()`
Priority: P4
Type: Bug
Component: other-libs
Description: The test utility class `jdk.test.lib.Platform` uses no-arg `String.toLowerCase()` for normalizing string arguments, which is fragile as it depends on the default locale. They should be replaced with `String.toLowerCase(Locale.ROOT)`
OS: generic

-----
Title: [JDK-8334777] Test javax/management/remote/mandatory/notif/NotifReconnectDeadlockTest.java failed with NullPointerException
Priority: P4
Type: Bug
Component: core-svc
Description: Test: javax/management/remote/mandatory/notif/NotifReconnectDeadlockTest.java
----------System.out:(1/57)----------
Tests reconnection done by a fetching notif thread.
----------System.err:(16/1440)----------
Jun 20, 2024 5:26:08 PM com.sun.jmx.remote.internal.ServerCommunicatorAdmin reqIncoming
WARNING: The server has decided to close this client connection.
java.lang.NullPointerException: Cannot invoke "javax.management.remote.NotificationResult.getNextSequenceNumber()" because "nr" is null
at java.management/com.sun.jmx.remote.internal.ClientNotifForwarder.init(ClientNotifForwarder.java:844)
at java.management/com.sun.jmx.remote.internal.ClientNotifForwarder.addNotificationListener(ClientNotifForwarder.java:185)
at java.management.rmi/javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.addNotificationListener(RMIConnector.java:1218)
at NotifReconnectDeadlockTest.main(NotifReconnectDeadlockTest.java:94)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot invoke "javax.management.remote.NotificationResult.getNextSequenceNumber()" because "nr" is null
JavaTest Message: shutting down test

-----
Title: [JDK-8335288] SunPKCS11 initialization will call C_GetMechanismInfo on unsupported mechanisms
Priority: P3
Type: Bug
Component: security-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Problem observed with Utimaco CryptoServer PKCS11 device, but is of general scope
A DESCRIPTION OF THE PROBLEM :
With the introduction of https://bugs.openjdk.org/browse/JDK-8301553  (CSR: https://bugs.openjdk.org/browse/JDK-8308719), the SunPKCS11 provider will query the PKCS11 device (C_GetMechanismInfo) for mechanisms that are not supported.
This happens because of new logic, which queries info for "required mechanisms" for a feature, even if that mechanism is not returned by C_GetMechanismList and even if the mechanism is blacklisted in disabledMechanisms.
At least some PKCS11 implementations will respond with CKR_FUNCTION_FAILED when C_GetMechanismInfo is called with an unknown mechanism. This makes it impossible to initialize the PKCS11 interface.
This happens in SunPKCS11.java line 1309ff
// Check that other mechanisms required for the
// service are supported before listing it as
// available for the first time.
for (int requiredMech : d.requiredMechs) {
if (token.getMechanismInfo(
requiredMech & 0xFFFFFFFFL) == null) {
continue descLoop;
}
}
}
REGRESSION : Last worked in version 20
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Configure a PKCS11 device as described in:
https://docs.oracle.com/en/java/javase/21/security/pkcs11-reference-guide1.html
Run
keytool -v -list -keystore NONE -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg c:
/pkcs11/pkcs11.cfg
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
List of keys in PKCS11 device
ACTUAL -
keytool error: java.security.ProviderException: Initialization failed
java.security.ProviderException: Initialization failed
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:391)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:126)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:123)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:123)
at java.base/sun.security.tools.KeyStoreUtil.loadProviderByName(KeyStoreUtil.java:283)
at java.base/sun.security.tools.KeyStoreUtil.loadProviderByClass(KeyStoreUtil.java:316)
at java.base/sun.security.tools.keytool.Main.doCommands(Main.java:834)
at java.base/sun.security.tools.keytool.Main.run(Main.java:419)
at java.base/sun.security.tools.keytool.Main.main(Main.java:412)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_FAILED
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_GetMechanismInfo(Native Method)
at jdk.crypto.cryptoki/sun.security.pkcs11.Token.getMechanismInfo(Token.java:399)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:1313)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:382)
... 9 more
CUSTOMER SUBMITTED WORKAROUND :
Downgrade to Java 20 or below
FREQUENCY : always
OS: generic

-----
Title: [JDK-8335468] [XWayland] JavaFX hangs when calling java.awt.Robot.getPixelColor
Priority: P3
Type: Bug
Component: client-libs
Description: The tests/system/src/test/java/test/robot/javafx/embed/swing/SwingNodeJDialogTest.java test timeouts after implementing the ScreenCast screen capture for JavaFX(JDK-8326712), this requires a fix on OpenJDK side.
It happens due to the call to gtk-g_main_context_iteration(NULL, TRUE) when we try to capture screen data, this blocks the gtk fx main loop.
Possible solutions are:
1. make a busy wait loop if we detect a gtk loop running
gtk-g_main_context_iteration(NULL, gtk-gtk_main_level == 0);
This will prevent the SwingNodeJDialogTest from hanging, and receive pixel color successfully.
2. do the same change as in JDK-8326712, make a nested loop, this allows to get a pixel color, but the test still timed out, needs further investigation.

-----
Title: [JDK-8335789] [TESTBUG] XparColor.java test fails with Error. Parse Exception: Invalid or unrecognized bugid: @
Priority: P4
Type: Bug
Component: client-libs
Description: XparColor.java test fails with following error
Error. Parse Exception: Invalid or unrecognized bugid: @
This test was modified as part of the https://bugs.openjdk.org/browse/JDK-8320608
The error is due to extra @ character at https://github.com/lawrence-andrew/jdk/blob/master/test/jdk/java/awt/print/PrinterJob/XparColor.java#L27

-----
Title: [JDK-8336012] Fix usages of jtreg-reserved properties
Priority: P4
Type: Bug
Component: core-libs
Description: Some tests make use of system properties whose names start with `test.*` -- which is an implicitly reserved namespace of jtreg as specified by this table: https://openjdk.org/jtreg/tag-spec.html#testvars
A fix for a usage of such a property name test include its rename, removal, or other appropriate action to resolve the name clash.

-----
Title: [JDK-8336498] [macos] [build]: install-file macro may run into permission denied error
Priority: P4
Type: Bug
Component: infrastructure
Description: On MacOS, files may have extended attributes attached. These attributes are copied together with the files. To prevent issues during further processing, the extended attributes of the copies must be removed. This action was implemented as solution of an older bug.
The solution is incomplete because it does not handle files with read-only permissions correctly. Without write permission, xattr cannot remove the extended attributes. The action is rejected with a "permission denied" error.
The issue is present in all releases. I reproduced it in 11, 17, ... 23, head
OS: os_x

-----
Title: [JDK-8336692] Redo fix for JDK-8284620
Priority: P4
Type: Bug
Component: hotspot
Description: JDK-8284620 tried to fix memory leak for CodeBuffer::_overflow_arena but I think it is incorrect. It created an issue when CodeBuffer expanded and we try to use information in CodeBuffer::_overflow_arena but it is empty.
CodeBuffer::_overflow_arena is used for forward labels patching to record labels location. What save us is that CodeBuffer expansion is rare case and usually labels are located near their target address so that expansion does not happen before a label is patched.
Instead of nulling _overflow_arena in CodeBuffer::take_over_code_from() we should remove original line there which copied the value from temporary buffer.

-----
Title: [JDK-8284620] CodeBuffer may leak _overflow_arena
Priority: P4
Type: Bug
Component: hotspot
Description: CodeBuffer is declared as StackObj, but it also has ResourceObj style new operator, to complicate thing further more, it has _overflow_arena that is C Heap allocated.
When Stack allocated CodeBuffer owns _overflow_arena, it works fine, because its destructor frees _overflow_arena. But if resource allocated CodeBuffer owns _overflow_arena, the arena is leaked, because its destructor is never called.
==1139627== 2,096 (96 direct, 2,000 indirect) bytes in 2 blocks are definitely lost in loss record 12,196 of 12,553
==1139627==    at 0x484486F: malloc (vg_replace_malloc.c:381)
==1139627==    by 0x5AE5B9E: malloc (os.cpp:656)
==1139627==    by 0x5AE5B9E: os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) (os.cpp:632)
==1139627==    by 0x527F216: AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) (allocation.cpp:42)
==1139627==    by 0x52887B8: Arena::operator new(unsigned long, MEMFLAGS) (arena.cpp:286)
==1139627==    by 0x545E16E: CodeBuffer::create_patch_overflow() (codeBuffer.cpp:245)
==1139627==    by 0x529A1BA: Label::add_patch_at(CodeBuffer*, int, char const*, int) (assembler.cpp:166)
==1139627==    by 0x529ED05: Assembler::jcc(Assembler::Condition, Label&, bool) (assembler_x86.cpp:2320)
==1139627==    by 0x5188724: jmpConUNode::emit(CodeBuffer&, PhaseRegAlloc*) const (x86_64.ad:12758)
==1139627==    by 0x5B0759F: PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*) (output.cpp:1681)
==1139627==    by 0x548A7C1: Compile::Code_Gen() (compile.cpp:2858)
==1139627==    by 0x548E7BC: Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) (compile.cpp:849)
==1139627==    by 0x53CD12F: C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (c2compiler.cpp:112)
==1139627==    by 0x5496A03: CompileBroker::invoke_compiler_on_method(CompileTask*) (compileBroker.cpp:2294)
==1139627==    by 0x54975FF: CompileBroker::compiler_thread_loop() (compileBroker.cpp:1967)
==1139627==    by 0x5D496BD: JavaThread::thread_main_inner() (thread.cpp:1291)
==1139627==    by 0x5D4F3AF: Thread::call_run() (thread.cpp:356)
==1139627==    by 0x5AF0EA7: thread_native_entry(Thread*) (os_linux.cpp:706)
==1139627==    by 0x4927B19: start_thread (pthread_create.c:443)
==1139627==    by 0x49AB8E3: clone (clone.S:100)

-----
Title: [JDK-8336942] Improve test coverage for class loading elements with annotations of different retentions
Priority: P4
Type: Enhancement
Component: tools
Description: This change covers adding some additional test coverage for type use annotations read from class files.
When completing elements from class files, annotations with runtime visible and -invisible retention are read from different attributes, and then completed separately in ClassReader by different 'TypeAnnotationCompleter's.
The changes in JDK-8225377 to attach type annotations read from bytecode to their corresponding type included some logic for this, which would benefit from more test coverage:
https://github.com/openjdk/jdk/blob/aabec4a947ed2a808a1443fa6b2dabedd8c2dd9f/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2584-L2591

-----
Title: [JDK-8337222] gc/TestDisableExplicitGC.java fails due to unexpected CodeCache GC
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK24 CI:
gc/TestDisableExplicitGC.java
Here's a snippet from the log file:
#section:main
----------messages:(7/533)----------
command: main -XX:+DisableExplicitGC -Xlog:gc=debug gc.TestDisableExplicitGC
reason: User specified action: run main/othervm/fail -XX:+DisableExplicitGC -Xlog:gc=debug gc.TestDisableExplicitGC
started: Thu Jul 25 04:16:04 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,jdk.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports jdk.management/com.sun.management.internal=ALL-UNNAMED
finished: Thu Jul 25 04:16:27 UTC 2024
elapsed time (seconds): 23.519
----------configuration:(5/211)----------
Boot Layer
add modules: java.base jdk.management
add exports: java.base/jdk.internal.misc                ALL-UNNAMED
jdk.management/com.sun.management.internal ALL-UNNAMED
----------System.out:(9/527)----------
[0.013s][info][gc] Using G1
[0.014s][debug][gc] ConcGCThreads: 2 offset 16
[0.014s][debug][gc] ParallelGCThreads: 8
[0.014s][debug][gc] Initialize mark stack with 4096 chunks, maximum 536870912
[21.656s][info ][gc] GC(0) Pause Young (Concurrent Start) (CodeCache GC Threshold) 5M-1M(488M) 8.010ms
[21.656s][info ][gc] GC(1) Concurrent Mark Cycle
[21.707s][info ][gc] GC(1) Pause Remark 2M-2M(10M) 40.760ms
[21.711s][info ][gc] GC(1) Pause Cleanup 2M-2M(10M) 0.082ms
[21.711s][info ][gc] GC(1) Concurrent Mark Cycle 55.489ms
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(49/7579)*----------
result: Failed. Execution passed unexpectedly:
test result: Failed. Execution passed unexpectedly:
So the test has "STATUS:Passed.", but ended with:
result: Failed. Execution passed unexpectedly:
I have no idea what that means.
This same failure mode was logged in this bug from ~8 years ago:
JDK-8166221 gc/TestDisableExplicitGC.java fails mysteriously
OS: linux

-----
Title: [JDK-8337660] C2: basic blocks with only BoxLock nodes are wrongly treated as empty
Priority: P2
Type: Bug
Component: hotspot
Description: FAILURE ANALYSIS
---
C2's BoxLock nodes are special in that they are not transformed into platform-specific Mach nodes [1], but kept as Ideal nodes all the way until code emission (see e.g. [2]). In this case, the crash is caused by the elimination in PhaseCFG::remove_empty_blocks() [3] of a basic block (B7 in before-empty-block-removal.pdf) that contains one BoxLock node (153 BoxLock) and no Mach nodes other than an unconditional branch. According to the current logic in Block::is_Empty(), such a block is empty because it does not contain any non-branch Mach node [4]. The removal of B7 causes a segmentation fault when the code emitted by a later node (9 cmpFastUnlock) attempts to load from the address that the (wrongly removed) BoxLock node should have computed in r1 ("box" in [5]).
A potential solution is to extend Block::is_Empty() so that it treats BoxLock and Mach nodes equally.
[1] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/share/opto/matcher.cpp#L2278
[2] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/cpu/aarch64/aarch64.ad#L2168-L2195
[3] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/share/opto/block.cpp#L735-L783
[4] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/share/opto/block.cpp#L184-L189
[5] https://github.com/openjdk/jdk/blob/ac82a8f89c7066fb1d379b12bcfd68053cb39ba4/src/hotspot/cpu/aarch64/c2_MacroAssembler_aarch64.cpp#L261
AFFECTED VERSIONS, PLATFORMS, AND CONFIGURATIONS
---
I could reproduce the segmentation fault on JDK 24, JDK 23, JDK 21, JDK 17, and JDK 11 on aarch64 using different JVM flags and a partial backport of JDK-8292289, see comment in attached TestSynchronizeWithEmptyBlock.java for details. I failed to reproduce the segmentation fault on JDK 8, but code inspection of Block::is_Empty() [1] and different FastUnlock implementations (e.g. [2]), reveals that this JDK version is also potentially affected.
Both x64 and aarch64 platforms are affected. I could reproduce the issue on JDK 24 x64 by tweaking C2's register allocation heuristics (making the wrongly removed BoxLock node not rematerializable and randomizing register assignment).
The issue affects the LM_LEGACY locking mode (LockingMode=1), which is the default configuration in JDK 8-21, and the new LM_LIGHTWEIGHT locking mode (LockingMode=2) if UseObjectMonitorTable is enabled [3]. Currently, UseObjectMonitorTable is disabled by default, but it will likely be enabled in a future release because it is required by the UseCompactObjectHeaders JVM configuration. The LM_MONITOR locking mode (LockingMode=0) is unaffected.
[1] https://github.com/openjdk/jdk8/blob/6a383433a9f4661a96a90b2a4c7b5b9a85720031/hotspot/src/share/vm/opto/block.cpp#L149-L183
[2] https://github.com/openjdk/jdk8/blob/6a383433a9f4661a96a90b2a4c7b5b9a85720031/hotspot/src/cpu/x86/vm/x86_64.ad#L2736
[3] https://github.com/openjdk/jdk/blob/b53ee053f7f7ffcf02ff47e1895ce7be4bc32486/src/hotspot/cpu/aarch64/c2_MacroAssembler_aarch64.cpp#L603
ORIGINAL REPORT
---
ADDITIONAL SYSTEM INFORMATION :
$ uname -a
Linux localhost.localdomain 4.19.90-2112.8.0.0131.oe1.aarch64 #1 SMP Fri Dec 31 19:53:20 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux
$ cat /etc/os-release
NAME="openEuler"
VERSION="20.03 (LTS-SP3)"
ID="openEuler"
VERSION_ID="20.03"
PRETTY_NAME="openEuler 20.03 (LTS-SP3)"
ANSI_COLOR="0;31"
A DESCRIPTION OF THE PROBLEM :
When I run the following Testcase using jdk-17.0.11, I find that the jvm crashes. This is very strange because there is no such problem on jdk8. I tried to add the -Xint option and -Xcomp option when running the test to determine whether it is a JIT problem, but both options make the problem unreproducible.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
path/to/jdk-17.0.11/bin/javac -cp . Test.java
path/to/jdk-17.0.11/bin/java Test
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Continues running in an infinite loop
ACTUAL -
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffc692c0e60, pid=3747800, tid=3747801
#
# JRE version: Java(TM) SE Runtime Environment (17.0.11+7) (build 17.0.11+7-LTS-207)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.11+7-LTS-207, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# J 9 c2 Test.t()V (118 bytes) @ 0x0000fffc692c0e60 [0x0000fffc692c0c40+0x0000000000000220]
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h" (or dumping to /home/TEMP/proj/core.3747800)
#
# An error report file with more information is saved as:
# /home/TEMP/proj/hs_err_pid3747800.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
---------- BEGIN SOURCE ----------
class Test {
public static void main(String[] args) {
for (;;)
t();
}
static int var8;
static void t() {
synchronized (Test.class) {
int var12 = 0;
while (var12

-----
Title: [JDK-8337886] java/awt/Frame/MaximizeUndecoratedTest.java fails in OEL due to a slight color difference
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Frame/MaximizeUndecoratedTest.java fails in OEL due to a slight color difference in the background color. This is currently reproduced only for Oracle Linux. Logs are attached.
The Color object I'm getting for each of these Point objects:
new Point(maxBounds.x + OFFSET, maxBounds.y + OFFSET) -- java.awt.Color[r=0,g=255,b=0]
new Point(maxBounds.width - OFFSET, maxBounds.y + OFFSET) --  java.awt.Color[r=0,g=207,b=0]
new Point(maxBounds.width - OFFSET, maxBounds.height - OFFSET) --   java.awt.Color[r=0,g=255,b=0]
new Point(maxBounds.x + OFFSET, maxBounds.height - OFFSET) --  java.awt.Color[r=0,g=255,b=0]
So, the issue occurs for the second Point object  --  new Point(maxBounds.width - OFFSET, maxBounds.y + OFFSET) - java.awt.Color[r=0,g=207,b=0]
Fix:
When the offset is increased from 2 to 5, it works fine in all the platforms.
This test verifies whether the frame is maximised or not by checking its four border points(by comparing it's colour with GREEN). But in OEL, the top left and top right borders are curved, so there is a possibility of error if we directly compare those points with GREEN colour, that's why an OFFSET is needed. But an OFFSET of 2 is not sufficient for OEL, and for safety I will change it to 5. I don't see this issue in Ubuntu as the borders as rectangular there, but not curved.
OS: linux_oracle

-----
Title: [JDK-8337951] Test sun/security/validator/samedn.sh CertificateNotYetValidException: NotBefore validation
Priority: P3
Type: Bug
Component: security-libs
Description: The following test failed in the JDK24 CI:
sun/security/validator/samedn.sh
Here's a snippet from the log file:
#-----testresult-----
description=file\:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/src.full/open/test/jdk/sun/security/validator/samedn.sh
elapsed=2664 0\:00\:02.664
end=Tue Aug 06 14\:41\:12 GMT 2024
environment=regtest
execStatus=Failed. Execution failed\: exit code 1
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=jpg-mac-arm-730.oraclecorp.com
javatestOS=Mac OS X 14.4.1 (aarch64)
javatestVersion=6.0-ea+b24-2022-09-27-9149bb7
jtregVersion=jtreg 7.4 1
modules=java.base/sun.security.validator
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages shell
start=Tue Aug 06 14\:41\:09 GMT 2024
test=sun/security/validator/samedn.sh
testJDK=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/macosx-aarch64.jdk/jdk-24.jdk/Contents/Home
testJDK_OS=[name\:Mac OS X,arch\:aarch64,version\:14.4.1,family\:mac,simple_arch\:aarch64,simple_version\:14.4,processors\:8,maxMemory\:17179869184,maxSwap\:2147483648]
testJDK_os.arch=aarch64
testJDK_os.name=Mac OS X
testJDK_os.version=14.4.1
totalTime=2665
user.name=mach5-one
work=/System/Volumes/Data/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S165353/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d16d676-f7c0-42cb-a59a-49cf2dbea917/runs/726fe1e8-d1cc-4bc3-91ec-ffcff41a00d2/testoutput/test-support/jtreg_open_test_jdk_tier2_part1/sun/security/validator
#section:script_messages
----------messages:(4/293)----------
JDK under test: /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/macosx-aarch64.jdk/jdk-24.jdk/Contents/Home
java version "24-ea" 2025-03-18
Java(TM) SE Runtime Environment (build 24-ea+10-1044)
Java HotSpot(TM) 64-Bit Server VM (build 24-ea+10-1044, mixed mode, sharing)
#section:shell
----------messages:(5/196)----------
command: shell samedn.sh
reason: Assumed action based on file name: run shell samedn.sh
started: Tue Aug 06 14:41:09 GMT 2024
finished: Tue Aug 06 14:41:12 GMT 2024
elapsed time (seconds): 2.663
----------System.out:(1/8)----------
Chain:
----------System.err:(53/3449)----------
Generating 3,072 bit RSA key pair and self-signed certificate (MD5withRSA) with a validity of 90 days
for: CN=CA
Warning:
The -keyalg option is specified multiple times. All except the last one will be ignored.
The generated certificate uses the MD5withRSA signature algorithm which is considered a security risk and is disabled.
Generating 3,072 bit RSA key pair and self-signed certificate (SHA1withRSA) with a validity of 90 days
for: CN=CA
Warning:
The -keyalg option is specified multiple times. All except the last one will be ignored.
The generated certificate uses the SHA1withRSA signature algorithm which is considered a security risk.
Generating 3,072 bit RSA key pair and self-signed certificate (SHA384withRSA) with a validity of 90 days
for: CN=User
Warning:
The -keyalg option is specified multiple times. All except the last one will be ignored.
Warning:
The issuer uses the MD5withRSA signature algorithm which is considered a security risk and is disabled.
Warning:
The issuer uses the SHA1withRSA signature algorithm which is considered a security risk.
Warning:
The certificate uses the MD5withRSA signature algorithm which is considered a security risk and is disabled.
Warning:
The certificate uses the SHA1withRSA signature algorithm which is considered a security risk.
Note: /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/src.full/open/test/jdk/sun/security/validator/CertReplace.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Exception in thread "main" sun.security.validator.ValidatorException: PKIX path validation failed: java.security.cert.CertPathValidatorException: validity check failed
at java.base/sun.security.validator.PKIXValidator.doValidate(PKIXValidator.java:318)
at java.base/sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:223)
at java.base/sun.security.validator.Validator.validate(Validator.java:199)
at CertReplace.main(CertReplace.java:51)
Caused by: java.security.cert.CertPathValidatorException: validity check failed
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
at java.base/sun.security.validator.PKIXValidator.doValidate(PKIXValidator.java:313)
... 5 more
Caused by: java.security.cert.CertificateNotYetValidException: NotBefore: Tue Aug 06 14:41:13 GMT 2024
at java.base/sun.security.x509.CertificateValidity.valid(CertificateValidity.java:178)
at java.base/sun.security.x509.X509CertImpl.checkValidity(X509CertImpl.java:534)
at java.base/sun.security.provider.certpath.BasicChecker.verifyValidity(BasicChecker.java:190)
at java.base/sun.security.provider.certpath.BasicChecker.check(BasicChecker.java:144)
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
... 10 more
----------rerun:(30/3918)*----------
OS: generic

-----
Title: [JDK-8337994] [REDO] Native memory leak when not recording any events
Priority: P3
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
OS (running in docker on a ubuntu 22.04) :
Alpine Linux source887b8b5876c2-5784d75ffb-l5fgv 5.15.0-1058-aws #64~20.04.1-Ubuntu SMP Tue Apr 9 11:12:27 UTC 2024 x86_64 Linux
$ java --version
NOTE: Picked up JDK_JAVA_OPTIONS: -XX:NativeMemoryTracking=detail
NOTE: Picked up JDK_JAVA_OPTIONS: -XX:NativeMemoryTracking=detail
openjdk 21.0.3 2024-04-16 LTS
OpenJDK Runtime Environment Zulu21.34+19-CA (build 21.0.3+9-LTS)
OpenJDK 64-Bit Server VM Zulu21.34+19-CA (build 21.0.3+9-LTS, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
We have a service running into a native memory leak which we believe is related to JFR. This service is running on Java 21 and it's currently not using virtual threads at all. It is however pulling on a shared library which provide basic monitoring around thread pinning event within a class named PinnedThreadTracker. The source code of this class is included at the end of this description.
When the service runs with this component enabled, it experiences a native memory leak. We do not get any leak when disabling this component. The heap/off-heap spaces are all within the limits defined and do not grow indefinitely. However, the process memory is growing. Using -XX:NativeMemoryTracking=detail, we are able to see the 'Tracing'  memory region growing and growing. Here is the result of 2 invocation of 'jcmd 1 VM.native_memory detail.diff scale=MB' spaced about 2 hours apart :
Native Memory Tracking:
(Omitting categories weighting less than 1MB)
Total: reserved=4543MB +77MB, committed=2084MB +141MB
-                 Java Heap (reserved=2252MB, committed=1074MB +60MB)
(mmap: reserved=2252MB, committed=1074MB +60MB)
-                     Class (reserved=1029MB, committed=32MB)
(classes #40298 +76)
(  instance classes #37933 +74, array classes #2365 +2)
(malloc=5MB #132908 +1918)
(mmap: reserved=1024MB, committed=27MB)
: (  Metadata)
(    reserved=192MB, committed=186MB +1MB)
(    used=185MB +1MB)
(    waste=1MB =0.49%)
: (  Class space)
(    reserved=1024MB, committed=27MB)
(    used=25MB)
(    waste=2MB =5.75%)
-                    Thread (reserved=129MB -3MB, committed=13MB)
(thread #129 -3)
(stack: reserved=128MB -3MB, committed=13MB)
-                      Code (reserved=250MB, committed=114MB)
(malloc=8MB #21506 +1389)
(mmap: reserved=242MB, committed=106MB)
-                        GC (reserved=89MB, committed=66MB +1MB)
(malloc=13MB #39253 +2286)
(mmap: reserved=76MB, committed=53MB +1MB)
-                 GCCardSet (reserved=3MB +2MB, committed=3MB +2MB)
(malloc=3MB +2MB #3771 +1098)
-                  Compiler (reserved=2MB, committed=2MB)
(malloc=1MB #4047 +71)
-                  Internal (reserved=7MB, committed=7MB)
(malloc=7MB #93677 +482)
-                     Other (reserved=3MB, committed=3MB)
(malloc=3MB #1136 -5)
-                    Symbol (reserved=62MB, committed=62MB)
(malloc=58MB #539325 +515)
(arena=5MB #1)
-    Native Memory Tracking (reserved=38MB +4MB, committed=38MB +4MB)
(malloc=1MB #12411 +2862)
(tracking overhead=37MB +4MB)
-        Shared class space (reserved=16MB, committed=13MB)
(mmap: reserved=16MB, committed=13MB)
-                   Tracing (reserved=464MB +73MB, committed=464MB +73MB)
(malloc=464MB +73MB #1548059 +250121)
-           Synchronization (reserved=4MB, committed=4MB)
(malloc=4MB #43969 +128)
-                 Metaspace (reserved=194MB, committed=188MB +1MB)
(malloc=2MB #2448 +22)
(mmap: reserved=192MB, committed=186MB +1MB)
[0x00007f72792c8828] G1MonotonicArena::allocate()+0x1d8
[0x00007f727927ff99] G1CardSet::create_coarsened_array_of_cards(unsigned int, bool)+0x39
[0x00007f7279280323] G1CardSet::coarsen_container(void* volatile*, void*, unsigned int, bool)+0x123
[0x00007f72792815a0] G1CardSet::add_to_howl(void*, unsigned int, unsigned int, bool)+0x150
(malloc=1MB type=GCCardSet +1MB #284 +269)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943dc0c] JfrThreadLocal::on_start(Thread*)+0x9c
(malloc=224MB type=Tracing +36MB #773886 +125058)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943df84] JfrThreadLocal::on_exit(Thread*)+0x94
(malloc=224MB type=Tracing +36MB #773858 +125062)
[0x00007f72797ac35b] os::reserve_memory_aligned(unsigned long, unsigned long, bool)+0x2b
[0x00007f7279aaefbf] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x51f
[0x00007f7279aaf373] ReservedSpace::ReservedSpace(unsigned long, unsigned long, unsigned long, char*)+0x53
[0x00007f7279aadc4b] metaspace::VirtualSpaceNode::create_node(unsigned long, metaspace::CommitLimiter*, metaspace::AbstractCounter*, metaspace::AbstractCounter*)+0x4b
(mmap: reserved=128MB, committed=122MB +1MB Type=Metaspace)
[0x00007f7279aaef90] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x4f0
[0x00007f7279286259] G1CollectedHeap::create_aux_memory_mapper(char const*, unsigned long, unsigned long)+0x39
[0x00007f727928ac09] G1CollectedHeap::initialize()+0x2d9
[0x00007f7279a59a36] universe_init()+0xd6
(mmap: reserved=35MB, committed=17MB +1MB Type=GC)
[0x00007f7279aafaa7] ReservedHeapSpace::try_reserve_range(char*, char*, unsigned long, char*, char*, unsigned long, unsigned long, unsigned long)+0x4c7
[0x00007f7279ab0434] ReservedHeapSpace::initialize_compressed_heap(unsigned long, unsigned long, unsigned long)+0x614
[0x00007f7279ab0699] ReservedHeapSpace::ReservedHeapSpace(unsigned long, unsigned long, unsigned long, char const*)+0x179
[0x00007f7279a59c80] Universe::reserve_heap(unsigned long, unsigned long)+0x70
(mmap: reserved=2252MB, committed=1074MB +60MB Type=Java Heap)
[0x00007f72797a20aa] thread_native_entry(Thread*)+0x12a
(mmap: reserved=127MB -3MB, committed=13MB Type=Thread Stack)
Native Memory Tracking:
(Omitting categories weighting less than 1MB)
Total: reserved=4743MB +276MB, committed=2229MB +286MB
-                 Java Heap (reserved=2252MB, committed=1020MB +6MB)
(mmap: reserved=2252MB, committed=1020MB +6MB)
-                     Class (reserved=1029MB, committed=32MB)
(classes #40392 +170)
(  instance classes #38027 +168, array classes #2365 +2)
(malloc=5MB #133963 +2973)
(mmap: reserved=1024MB, committed=27MB)
: (  Metadata)
(    reserved=192MB, committed=187MB +1MB)
(    used=186MB +1MB)
(    waste=1MB =0.49%)
: (  Class space)
(    reserved=1024MB, committed=27MB)
(    used=25MB)
(    waste=2MB =6.01%)
-                    Thread (reserved=131MB -1MB, committed=13MB)
(thread #131 -1)
(stack: reserved=130MB -1MB, committed=13MB)
-                      Code (reserved=250MB +1MB, committed=116MB +2MB)
(malloc=8MB +1MB #21142 +1025)
(mmap: reserved=242MB, committed=107MB +1MB)
-                        GC (reserved=93MB +4MB, committed=69MB +4MB)
(malloc=17MB +4MB #39987 +3020)
(mmap: reserved=76MB, committed=52MB)
-                 GCCardSet (reserved=3MB +2MB, committed=3MB +2MB)
(malloc=3MB +2MB #3860 +1187)
-                  Compiler (reserved=2MB, committed=2MB)
(malloc=1MB #4028 +52)
-                  Internal (reserved=7MB, committed=7MB)
(malloc=7MB #94712 +1517)
-                     Other (reserved=3MB, committed=3MB)
(malloc=3MB #1137 -4)
-                    Symbol (reserved=62MB, committed=62MB)
(malloc=58MB #539867 +1057)
(arena=5MB #1)
-    Native Memory Tracking (reserved=48MB +14MB, committed=48MB +14MB)
(malloc=1MB #12618 +3069)
(tracking overhead=47MB +14MB)
-        Shared class space (reserved=16MB, committed=13MB)
(mmap: reserved=16MB, committed=13MB)
-                   Tracing (reserved=647MB +256MB, committed=647MB +256MB)
(malloc=647MB +256MB #2180371 +882433)
-           Synchronization (reserved=4MB, committed=4MB)
(malloc=4MB #44142 +301)
-                 Metaspace (reserved=194MB, committed=189MB +1MB)
(malloc=2MB #2600 +174)
(mmap: reserved=192MB, committed=187MB +1MB)
[0x00007f72792c8828] G1MonotonicArena::allocate()+0x1d8
[0x00007f727927ff99] G1CardSet::create_coarsened_array_of_cards(unsigned int, bool)+0x39
[0x00007f7279280323] G1CardSet::coarsen_container(void* volatile*, void*, unsigned int, bool)+0x123
[0x00007f72792815a0] G1CardSet::add_to_howl(void*, unsigned int, unsigned int, bool)+0x150
(malloc=1MB type=GCCardSet +1MB #287 +272)
[0x00007f727978e67b] ImmutableOopMapSet::build_from(OopMapSet const*)+0x9b
[0x00007f72790f64be] CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&, CodeBuffer*, int, int, OopMapSet*, bool, bool)+0x7e
[0x00007f727913c709] CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool, bool)+0x109
[0x00007f727975ff9a] nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, CompLevel, char*, int, JVMCINMethodData*)+0xaa
(malloc=8MB type=Code +1MB #17611 +1002)
[0x00007f7279825389] PtrQueueSet::exchange_buffer_with_new(PtrQueue&)+0x39
[0x00007f727985aa0a] SATBMarkQueueSet::handle_zero_index(SATBMarkQueue&)+0x5a
[0x00007f727985ab0b] SATBMarkQueueSet::enqueue_known_active(SATBMarkQueue&, oopDesc*)+0x3b
(malloc=7MB type=GC +4MB #943 +493)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943dc0c] JfrThreadLocal::on_start(Thread*)+0x9c
(malloc=316MB type=Tracing +128MB #1090043 +441215)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943df84] JfrThreadLocal::on_exit(Thread*)+0x94
(malloc=316MB type=Tracing +128MB #1090013 +441217)
[0x00007f72797ac35b] os::reserve_memory_aligned(unsigned long, unsigned long, bool)+0x2b
[0x00007f7279aaefbf] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x51f
[0x00007f7279aaf373] ReservedSpace::ReservedSpace(unsigned long, unsigned long, unsigned long, char*)+0x53
[0x00007f7279aadc4b] metaspace::VirtualSpaceNode::create_node(unsigned long, metaspace::CommitLimiter*, metaspace::AbstractCounter*, metaspace::AbstractCounter*)+0x4b
(mmap: reserved=128MB, committed=123MB +1MB Type=Metaspace)
[0x00007f7279aaef90] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x4f0
[0x00007f7279aaf16c] ReservedCodeSpace::ReservedCodeSpace(unsigned long, unsigned long, unsigned long)+0x5c
[0x00007f727910191e] CodeCache::initialize_heaps()+0x25e
[0x00007f7279101fd5] CodeCache::initialize()+0x55
(mmap: reserved=240MB, committed=107MB +1MB Type=Code)
[0x00007f7279aafaa7] ReservedHeapSpace::try_reserve_range(char*, char*, unsigned long, char*, char*, unsigned long, unsigned long, unsigned long)+0x4c7
[0x00007f7279ab0434] ReservedHeapSpace::initialize_compressed_heap(unsigned long, unsigned long, unsigned long)+0x614
[0x00007f7279ab0699] ReservedHeapSpace::ReservedHeapSpace(unsigned long, unsigned long, unsigned long, char const*)+0x179
[0x00007f7279a59c80] Universe::reserve_heap(unsigned long, unsigned long)+0x70
(mmap: reserved=2252MB, committed=1020MB +6MB Type=Java Heap)
[0x00007f72797a20aa] thread_native_entry(Thread*)+0x12a
(mmap: reserved=129MB -1MB, committed=13MB Type=Thread Stack)
public class PinnedThreadTracker implements AutoCloseable
{
private static final Logger logger = CoveoLogger.getLogger(PinnedThreadTracker.class);
private static final String VIRTUAL_THREAD_PINNED_JFR_EVENT_NAME = "jdk.VirtualThreadPinned";
private final RecordingStream recordingStream;
private final int maximumStackDepth;
private final boolean isCloudEnvironment;
public PinnedThreadTracker(Duration recordingThreshold, int maximumStackTraceDepth, Environment environment)
{
maximumStackDepth = maximumStackTraceDepth;
isCloudEnvironment = environment.acceptsProfiles(Profiles.CLOUD_PROFILES);
recordingStream = new RecordingStream();
recordingStream.enable(VIRTUAL_THREAD_PINNED_JFR_EVENT_NAME)
.withStackTrace()
.withThreshold(Objects.requireNonNull(recordingThreshold));
recordingStream.onEvent(VIRTUAL_THREAD_PINNED_JFR_EVENT_NAME, this::recordEvent);
recordingStream.setReuse(true);
recordingStream.setMaxAge(Duration.ofSeconds(5));
recordingStream.startAsync();
}
private void recordEvent(RecordedEvent event)
{
if (isCloudEnvironment) {
LogstashMarker markers = Markers.appendEntries(Map.of("event_stack_trace",
getStackTrace(event.getStackTrace(),
maximumStackDepth),
"pinned_duration_ms",
event.getDuration().toMillis()));
logger.warn(markers,
"Pinned thread event of duration : '{}'. See event_stack_trace for more details.",
event.getDuration());
} else {
logger.warn("Pinned thread event of duration : '{}'. Stack trace:{}{}",
event.getDuration(),
System.lineSeparator(),
getStackTrace(event.getStackTrace(), maximumStackDepth));
}
}
@Override
public void close()
{
recordingStream.close();
}
/**
* Get a pretty printed stack trace from a {@link RecordedStackTrace}.
* The toString implementation of {@link RecordedStackTrace} has a max depth of 5 which is not enough to get a proper picture.
* This method is strongly inspired from the original classes, minus some details that are not relevant for our use case.
*/
private static String getStackTrace(RecordedStackTrace stackTrace, int maximumStackDepth)
{
StringBuilder builder = new StringBuilder();
List frames = stackTrace.getFrames();
int i = 0;
int depth = 0;
while (i = 0) {
builder.append(" line: ").append(line);
}
}
}
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
We're currently seeing this issue on only one service with no special setup. Therefore, I cannot provide an easy way to reproduce but hopefully from the details provided it will be enough to see the issue. If not, please say so and I'll try to find a way to reproduce it.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I'd expect this relatively simple JFR setup to not leak memory
ACTUAL -
memory leak
FREQUENCY : always
OS: generic

-----
Title: [JDK-8338100] C2: assert(!n_loop->is_member(get_loop(lca))) failed: control must not be back in the loop
Priority: P3
Type: Bug
Component: hotspot
Description: I would appreciate some credit in the PR, I took quite a while to extract a nice "X.jasm" from a larger set of classfiles, and reducing it to just a few lines of code.
Affected seem to be current (JDK24) - JDK17. JDK11 did not reproduce. [~thartmann] said it is a regression of JDK-8252372.
emanuel@emanuel-oracle:/oracle-work/triage/new$ java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm X.jasm
emanuel@emanuel-oracle:/oracle-work/triage/new$ /oracle-work/jdk-fork4/build/linux-x64-debug/jdk/bin/java -XX:CompileCommand=printcompilation,X::* -XX:CompileCommand=compileonly,X::test -Xcomp X
CompileCommand: PrintCompilation X.* bool PrintCompilation = true
CompileCommand: compileonly X.test bool compileonly = true
586   26    b  3       X::test (40 bytes)
587   27    b  4       X::test (40 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork4/open/src/hotspot/share/opto/loopopts.cpp:1071), pid=2960708, tid=2960722
#  assert(!n_loop-is_member(get_loop(lca))) failed: control must not be back in the loop
#
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-07-23-0635220.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-07-23-0635220.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12a70b9]  PhaseIdealLoop::try_move_store_after_loop(Node*) [clone .part.0]+0x9e9
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/triage/new/core.2960708)
#
# An error report file with more information is saved as:
# /oracle-work/triage/new/hs_err_pid2960708.log
#
# Compiler replay data is saved as:
# /oracle-work/triage/new/replay_pid2960708.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
Current CompileTask:
C2:616   27    b  4       X::test (40 bytes)
Stack: [0x00007fb2c5537000,0x00007fb2c5638000],  sp=0x00007fb2c5632cb0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12a70b9]  PhaseIdealLoop::try_move_store_after_loop(Node*) [clone .part.0]+0x9e9  (loopopts.cpp:1071)
V  [libjvm.so+0x12aadd6]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x96  (loopopts.cpp:1964)
V  [libjvm.so+0x129d429]  PhaseIdealLoop::build_and_optimize()+0xee9  (loopnode.cpp:4815)
V  [libjvm.so+0x9e90c0]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x390  (loopnode.hpp:1117)
V  [libjvm.so+0x9e1da5]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0x75  (compile.cpp:2171)
V  [libjvm.so+0x9e4531]  Compile::Optimize()+0xe21  (compile.cpp:2418)
V  [libjvm.so+0x9e7c76]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b06  (compile.cpp:852)
V  [libjvm.so+0x835885]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1d5  (c2compiler.cpp:142)
V  [libjvm.so+0x9f38b8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x928  (compileBroker.cpp:2303)
V  [libjvm.so+0x9f4548]  CompileBroker::compiler_thread_loop()+0x478  (compileBroker.cpp:1961)
V  [libjvm.so+0xe9cffc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:757)
V  [libjvm.so+0x17bd736]  Thread::call_run()+0xb6  (thread.cpp:225)
V  [libjvm.so+0x14a55b7]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:858)
A quick investigation with RR:
(rr) p n-dump_bfs(10,0,"c#")
dist dump
---------------------------------------------
10   67  ParsePredicate  === 66 20  [[ 68 76 ]]  #Profiled_Loop #useless  !jvms: X::test @ bci:0
9   76  IfTrue  === 67  [[ 77 ]] #1 !jvms: X::test @ bci:0
8   77  ParsePredicate  === 76 20  [[ 78 86 ]]  #Loop_Limit_Check #useless  !jvms: X::test @ bci:0
7  314  IfFalse  === 351  [[ 244 ]] #0 !orig=[144] !jvms: X::test @ bci:5
7   86  IfTrue  === 77  [[ 244 ]] #1 !jvms: X::test @ bci:0
6  370  IfFalse  === 349  [[ 355 356 ]] #0 !orig=[350],314,[144] !jvms: X::test @ bci:5
6  244  Loop  === 244 86 314  [[ 244 239 240 287 376 ]]  !orig=[87] !jvms: X::test @ bci:0
5  355  SafePoint  === 370 1 290 1 1 356 1 346 1  [[ 351 ]]  SafePoint  !orig=310,220 !jvms: X::test @ bci:37
5  376  NeverBranch  === 244  [[ 377 378 ]]
4  351  OuterStripMinedLoopEnd  === 355 92  [[ 352 314 ]] P=0.900000, C=-1.000000
4  377  CProj  === 376  [[ 298 ]] #0
3  349  CountedLoopEnd  === 363 348  [[ 370 143 ]] [lt] P=0.900000, C=-1.000000 !orig=[142] !jvms: X::test @ bci:5
3  352  IfTrue  === 351  [[ 353 ]] #1
3  298  SafePoint  === 377 1 296 1 1 287 1 92 1 92 133  [[ 293 353 ]]  SafePoint  !orig=134 !jvms: X::test @ bci:5
2  143  IfTrue  === 349  [[ 363 ]] #1 !jvms: X::test @ bci:5
2  353  OuterStripMinedLoop  === 353 298 352  [[ 353 363 ]]
1  363  CountedLoop  === 363 353 143  [[ 360 362 363 364 365 361 349 381 ]] stride: 2  strip mined !orig=[354],[311],[283] !jvms: X::test @ bci:16
0  360  StoreC  === 363 364 149 206  [[ 290 239 ]]  @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+120 *, name=c, idx=4;  Memory: @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+120 *, name=c, idx=4; !orig=[295],271,[211] !jvms: X::test @ bci:25
(rr) p lca-dump()
363  CountedLoop  === 363 353 143  [[ 360 362 363 364 365 361 349 381 ]] stride: 2  strip mined !orig=[354],[311],[283] !jvms: X::test @ bci:16
$8 = void
(rr) p n_loop-dump()
Loop: N363/N143  counted [0,10),+2 (2147483648 iters)  strip_mined
- looks like another infinite-loop bug.

-----
Title: [JDK-8338303] Linux ppc64le with toolchain clang - detection failure in early JVM startup
Priority: P4
Type: Bug
Component: hotspot
Description: When building on Linux ppc64le with the clang toolchain,  the new JVM fails already in the build process with this error :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGILL (0x4) at pc=0x000079198fae03ac, pid=2922849, tid=2923410
#
# JRE version:  (24.0.0.1) (build )
# Java VM: OpenJDK 64-Bit Server VM (24.0.0.1-internal-adhoc.d040975.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# v  ~BufferBlob::detect_cpu_features 0x000079198fae03ac
#
Host: POWER9 (architected), altivec supported, 64 cores, 127G, Ubuntu 22.04.4 LTS
Time: Tue Aug 13 08:01:50 2024 UTC elapsed time: 0.023703 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x000079199802c800):  JavaThread "Unknown thread" [_thread_in_vm, id=2923410, stack(0x000079199c990000,0x000079199cb90000) (2048K)]
Stack: [0x000079199c990000,0x000079199cb90000],  sp=0x000079199cb8b7c0,  free space=2029k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
v  ~BufferBlob::detect_cpu_features 0x000079198fae03ac
V  [libjvm.so+0x1206cb8]  (vm_version_ppc.cpp:60)
V  [libjvm.so+0x1206a98]  (vm_version.cpp:32)
V  [libjvm.so+0xa6e234]  (init.cpp:128)
V  [libjvm.so+0x11600a0]  (threads.cpp:550)
V  [libjvm.so+0xbaa0ac]  JNI_CreateJavaVM+0xac  (jni.cpp:3581)
C  [libjli.so+0x185bc]  (java.c:1592)
C  [libjli.so+0x1c158]  (java_md.c:653)
C  [libc.so.6+0xb5804]
siginfo: si_signo: 4 (SIGILL), si_code: 1 (ILL_ILLOPC), si_addr: 0x000079198fae03ac
OS: linux

-----
Title: [JDK-8338426] Test java/nio/channels/Selector/WakeupNow.java failed
Priority: P4
Type: Bug
Component: core-libs
Description: ----------System.err:(11/544)----------
java.lang.RuntimeException: test failed
at WakeupNow.test2(WakeupNow.java:76)
at WakeupNow.main(WakeupNow.java:35)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:588)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)

-----
Title: [JDK-8338571] [TestBug] DefaultCloseOperation.java test not working as expected wrt instruction after JDK-8325851 fix
Priority: P3
Type: Bug
Component: client-libs
Description: Testsuite: Regression Manual
Product(s) tested:23.0. 1 b06
OS/architecture: Windows
OS specific: No
javax/swing/JFrame/DefaultCloseOperation.java test not working as expected wrt Instruction
After JDK-8325851 fix TestFrame and TestDailog is loaded by default when test start which is not expected.
Expected: TestFrame/TestDailog should load after user clicking on OpenFrame/OpenDailog button.
PFA screenshot
OS: generic

-----
Title: [JDK-8325851] Hide PassFailJFrame.Builder constructor
Priority: P5
Type: Bug
Component: client-libs
Description: The PassFailJFrame.Builder class provides a way to configure the parameters of PassFailJFrame in a set of chained method calls.
The Builder class is public and has public constructor. At the same time, a better design would be to hide all the Builder constructors and rely on the builder() method which returns an instance of the Builder.
At the same time, the builder() helper wasn't available until JDK-8294156 which was integrated in October 2023 whereas the Builder class became available with JDK-8294535 in August 2023.
For this reason, there are 20 tests which create the PassFailJFrame.Builder object using its constructor instead of the helper method. These tests have to be updated.
To find these tests, run:
grep -r 'new PassFailJFrame.Builder' test/jdk
Hiding the PassFailJFrame.Builder constructor is a better design choice. New tests should not create the builder using the `new` keyword. To enforce it, the Builder constructor needs to be private.

-----
Title: [JDK-8338595] Add more linesize for MIME decoder in macro bench test Base64Decode
Priority: P4
Type: Enhancement
Component: hotspot
Description: Currently, lineSize linesize for MIME case in macro bench test Base64Decode is only "4", but in Base64.Encoder default linesize for MIME encoder is 76.
It's helpful to add more linesize, e.g. 76 and so on.

-----
Title: [JDK-8338668] Test javax/swing/JFileChooser/8080628/bug8080628.java doesn't test for GTK L&F
Priority: P4
Type: Bug
Component: client-libs
Description: javax/swing/JFileChooser/8080628/bug8080628.java test doesn't test for GTK L&F as it requires a headful system to test.
Ran the test and observed that it skipped testing for GTK on headless system.
Testing L&F: javax.swing.plaf.nimbus.NimbusLookAndFeel
Testing L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
Unsupported L&F: com.sun.java.swing.plaf.gtk.GTKLookAndFeel
Test passed
Expected: should be run on headful system to test GTK L&F functionality.
OS: linux

-----
Title: [JDK-8339154] Cleanups and JUnit conversion of test/jdk/java/util/zip/Available.java
Priority: P5
Type: Enhancement
Component: core-libs
Description: The ZIP test test/jdk/java/util/zip/Available.java has several issues:
* It could benefit from a conversion to JUnit
* It uses a binary test vector ZIP and could benefit from creating its own test vector instead
* It does not cover behavior after calling ZipInputStream.closeEntry
* It does not cover behavior of ZipFileInputStream.available (Uncompressed entries in ZipFile)

-----
Title: [JDK-8339261] Logs truncated in test javax/net/ssl/DTLS/DTLSRehandshakeTest.java
Priority: P4
Type: Sub-task
Component: security-libs
Description: The test javax/net/ssl/DTLS/DTLSRehandshakeTest.java runs multiple scenarios, generating a large amount of logging as a result. Since Jtreg truncates the output when it becomes too large, the logs are often not useful for debugging in case of failure.
Increment the test log maxOutputSize to get the full output.

-----
Title: [JDK-8339356] Test javax/net/ssl/SSLSocket/Tls13PacketSize.java failed with java.net.SocketException: An established connection was aborted by the software in your host machine
Priority: P4
Type: Bug
Component: security-libs
Description: ----------System.out:(20/1566)----------
Server input bytes: 16366
Client died: java.net.SocketException: An established connection was aborted by the software in your host machine
java.net.SocketException: An established connection was aborted by the software in your host machine
at java.base/sun.nio.ch.SocketDispatcher.read0(Native Method)
at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:46)
at java.base/sun.nio.ch.NioSocketImpl.tryRead(NioSocketImpl.java:256)
at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:307)
at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)
at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)
at java.base/java.net.Socket$SocketInputStream.implRead(Socket.java:1118)
at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1105)
at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)
at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)
at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1461)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1068)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:975)
at Tls13PacketSize.runClientApplication(Tls13PacketSize.java:97)
at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:302)
at SSLSocketTemplate$2.run(SSLSocketTemplate.java:441)
----------System.err:(23/1748)----------
java.net.SocketException: An established connection was aborted by the software in your host machine
at java.base/sun.nio.ch.SocketDispatcher.read0(Native Method)
at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:46)
at java.base/sun.nio.ch.NioSocketImpl.tryRead(NioSocketImpl.java:256)
at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:307)
at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)
at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)
at java.base/java.net.Socket$SocketInputStream.implRead(Socket.java:1118)
at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1105)
at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)
at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)
at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1461)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1068)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:975)
at Tls13PacketSize.runClientApplication(Tls13PacketSize.java:97)
at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:302)
at SSLSocketTemplate$2.run(SSLSocketTemplate.java:441)
See previous issues reported in JDK-8235973
OS: windows

-----
Title: [JDK-8339475] Clean up return code handling for pthread calls in library coding
Priority: P4
Type: Bug
Component: tools
Description: It has been discussed that checking the return value of pthread_create should be done.
See the discussion here https://github.com/openjdk/jdk/pull/20812 about the splashscreen coding .
OS: generic

-----
Title: [JDK-8339524] Clean up a few ExtendedRobot tests
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JInternalFrame/6725409/bug6725409.java is building ExtendedRobot without using anything from ExtendedRobot. This test should be changed to not build ExtendedRobot.

-----
Title: [JDK-8339542] compiler/codecache/CheckSegmentedCodeCache.java fails
Priority: P4
Type: Bug
Component: hotspot
Description: From JDK-8326615, [~mbaesken]'s comment:
We see now errors in the test compiler/codecache/CheckSegmentedCodeCache.java on platform linuxppc64le , fastdebug . Is this related ?
stdout: [Error occurred during initialization of VM
Not enough space in non-nmethod code heap to run VM: 5120K
OS: linux

-----
Title: [JDK-8339687] Rearrange reachabilityFence()s in jdk.test.lib.util.ForceGC
Priority: P4
Type: Bug
Component: core-libs
Description: ForceGC would be improved by moving the Reference.reachabilityFence() calls for 'obj' and 'ref'.
Reference.reachabilityFence(obj) is currently placed after 'obj' has been set to null, so effectively does nothing. It should occur before obj = null;
For Reference.reachabilityFence(ref): 'ref' is a PhantomReference to 'obj', and is registered with 'queue'. ForceGC.waitFor() later remove()s the reference from the queue, as an indication that some GC and reference processing has taken place (hopefully causing the BooleanSupplier to return true).
The code expects the PhantomReference to be cleared and be put on the queue. But recall that a Reference refers to its queue, and not the other way around. If a Reference becomes unreachable and is garbage collected, it will never be enqueued.
I argue that the VM/GC could determine that 'ref' is not used by waitFor() and collect it before the call to queue.remove(). Moving Reference.reachabilityFence(ref) after the for() loop would prevent this scenario.
While this is only a very minor deficiency in ForceGC, I believe it would be good to ensure that the code behaves as expected.

-----
Title: [JDK-8339728] [Accessibility,Windows,JAWS] Bug in the getKeyChar method of the AccessBridge class
Priority: P3
Type: Bug
Component: client-libs
Description: Note: This bug occurs with e.g. Java VM 17 and 21 running on Windows, it does not occur on macOS.
Issue: If a JMenuItem contains a shortcut like “Ctrl + Comma”, the private method getKeyChar of the AccessBridge class cuts the “Comma” text to the first character and hence transfers “C” (instead of “Comma”) via the AccessBridge API. For a shortcut “Ctrl + Comma” in a menu item, screen readers announce “Ctrl + C” instead of “Ctrl + Comma” as shortcut, and the user may use a wrong shortcut for this menu action.
For a shortcut like “Ctrl + Period” this method cuts the “Period” to “P”, the AccessBridge API sends “P” as char and hence a screen reader announces “Ctrl + P” as shortcut.
For a shortcut like “Ctrl + Enter” this method cuts the “Enter” to “E”, the AccessBridge API sends “E” as char and hence a screen reader announces “Ctrl + E” as shortcut.
You can use the simple class Test_JMenuItem_KeyStrokes below for testing the java application on Windows with a screen reader, or with the jaccessinspector.
Following code in the method getKeyChar of the AccessBridge (starting with line 3970) is the cause for this issue:
String keyText = KeyEvent.getKeyText(keyStroke.getKeyCode());
debugString("[INFO]:   Shortcut is: " + keyText);
if (keyText != null || keyText.length()  0) {
CharSequence seq = keyText.subSequence(0, 1);
if (seq != null || seq.length()  0) {
return seq.charAt(0);
}
}
When keyText is for example “Comma”, seq.charAt(0) = C, and then method will return “C” instead of Comma.
public class Test_JMenuItem_KeyStrokes
{
public static void main(String[] args)
{
JMenuBar menuBar = new JMenuBar();
JMenu menu = new JMenu("Menu with Keystrokes");
menu.setMnemonic(KeyEvent.VK_M);
menuBar.add(menu);
KeyStroke keyStroke1 = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.CTRL_DOWN_MASK);
KeyStroke keyStroke2 = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
KeyStroke keyStroke3 = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.CTRL_DOWN_MASK | InputEvent.ALT_DOWN_MASK);
KeyStroke keyStroke4 = KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, InputEvent.CTRL_DOWN_MASK);
KeyStroke keyStroke5 = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
JCheckBoxMenuItem menuItem1 = new JCheckBoxMenuItem("First Menu Item");
menuItem1.setAccelerator(keyStroke1);
JCheckBoxMenuItem menuItem2 = new JCheckBoxMenuItem("Second Menu Item");
menuItem2.setAccelerator(keyStroke2);
JCheckBoxMenuItem menuItem3 = new JCheckBoxMenuItem("Third Menu Item");
menuItem3.setAccelerator(keyStroke3);
JCheckBoxMenuItem menuItem4 = new JCheckBoxMenuItem("Fourth Menu Item");
menuItem4.setAccelerator(keyStroke4);
JCheckBoxMenuItem menuItem5 = new JCheckBoxMenuItem("Fifth Menu Item");
menuItem5.setAccelerator(keyStroke5);
menu.add(menuItem1);
menu.add(menuItem2);
menu.add(menuItem3);
menu.add(menuItem4);
menu.add(menuItem5);
JFrame frame = new JFrame("A Frame with Menu");
frame.add(new JCheckBox("A checkbox"));
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setJMenuBar(menuBar);
frame.setSize(300, 200);
frame.setVisible(true);
}
}
OS: windows

-----
Title: [JDK-8339810] Clean up the code in sun.tools.jar.Main to properly close resources and use ZipFile during extract
Priority: P4
Type: Bug
Component: tools
Description: There are several places in the sun.tools.jar.Main where we currently don't properly close the resources in a try/finally block. Also, the extract implementation against a JAR file, currently uses ZipInputStream while extracting the entries. We should switch to using ZipFile in that part of the implementation like we do for other operations against a JAR file, in the sun.tools.jar.Main code.

-----
Title: [JDK-8339834] Replace usages of -mx and -ms in some tests
Priority: P4
Type: Sub-task
Component: core-libs
Description: The java launcher currently supports "-mx", "-ms" as equivalent to "-Xmx" and "-Xms". This support is there only for backward compatibility against very old Java versions. Usage of "-mx" and "-ms" (along with some other launcher options) will be deprecated for removal, shortly. There are some tests which currently use these options when launching the tests. Those should be updated to use "-Xmx" and "-Xms" instead.

-----
Title: [JDK-8339883] Open source several AWT/2D related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source a test covering image rendering and 2 tests that test creating windows on a different screen than the default,

-----
Title: [JDK-8339902] Open source couple TextField related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source some TextArea related texts

-----
Title: [JDK-8339943] Frame not disposed in java/awt/dnd/DropActionChangeTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: Main Frame is not disposed properly in java/awt/dnd/DropActionChangeTest.java which might cause test instability and time out errors.
Sometimes I have seen that this test times out after waiting for more than 2 hours in CI runs and eventually fails the task itself.
OS: generic

-----
Title: [JDK-8340078] Open source several 2D tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several Java 2D tests related to rendering.

-----
Title: [JDK-8340116] test/jdk/sun/security/tools/jarsigner/PreserveRawManifestEntryAndDigest.java can fail due to regex
Priority: P4
Type: Bug
Component: security-libs
Description: The following test:
test/jdk/sun/security/tools/jarsigner/PreserveRawManifestEntryAndDigest.java
could fail with the following exception:
test PreserveRawManifestEntryAndDigest.testNameImmediatelyContinued(): failure
java.lang.AssertionError: "s k      300 Tue Jun 25 10:20:16 GMT+07:00 2024 META-INF/MANIFEST.MF" should have matched "s k   *\\d+ .{28,29} META-INF/MANIFEST[.]MF" expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at PreserveRawManifestEntryAndDigest.assertMatchByLines(PreserveRawManifestEntryAndDigest.java:268)
The reason is that the regex expects a certain timestamp length {28,29}, and it works fine for certain timezones such as PST or CEST, but it fails if the timezone string is longer such as 'GMT+07:00'.

-----
Title: [JDK-8340313] Crash due to invalid oop in nmethod after C1 patching
Priority: P2
Type: Bug
Component: hotspot
Description: STDOUT:
config common.TransformationWarningsTest.setup(): success
0: waiting for barrier
5: waiting for barrier
6: waiting for barrier
7: waiting for barrier
8: waiting for barrier
3: waiting for barrier
9: waiting for barrier
4: waiting for barrier
2: waiting for barrier
1: waiting for barrier
1: starting iterations
0: starting iterations
5: starting iterations
6: starting iterations
7: starting iterations
8: starting iterations
9: starting iterations
3: starting iterations
4: starting iterations
2: starting iterations
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f708ee96c68, pid=3758869, tid=3759192
#
# JRE version: OpenJDK Runtime Environment (24.0) (build 24)
# Java VM: OpenJDK 64-Bit Server VM (24, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7dfc68]  RegisterNMethodOopClosure::do_oop(oopDesc**)+0x38
#
# Core dump will be written. Default location: /tmp/tone/run/jtreg/jt-work/jtreg/test_jaxp/javax/xml/jaxp/unittest/common/TransformationWarningsTest/core.3758869
#
# An error report file with more information is saved as:
# /tmp/tone/run/jtreg/jt-work/jtreg/test_jaxp/javax/xml/jaxp/unittest/common/TransformationWarningsTest/hs_err_pid3758869.log
#
# If you would like to submit a bug report, please visit:
#   mailto:yansendao.ysd@alibaba-inc.com
#
OS: linux

-----
Title: [JDK-8340411] open source several 2D imaging tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some imaging tests.

-----
Title: [JDK-8340480] Bad copyright notices in changes from JDK-8339902
Priority: P1
Type: Bug
Component: client-libs
Description: They contain a spurious "summary" line:
/*
* Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* summary:
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.

-----
Title: [JDK-8340687] Open source closed frame tests #1
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/Frame/DefaultFrameIconTest/DefaultFrameIconTest.java
./java/awt/Frame/MenuCrash/MenuCrash.java
./java/awt/Frame/FramePaintTest/FramePaintTest.java
./java/awt/Frame/DisposeTest/DisposeTest.java

-----
Title: [JDK-8340719] Open source AWT List tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few AWT list tests
./java/awt/List/RepaintAfterResize/RepaintAfterResize.java
./java/awt/List/MultiSelectionListHorizScrollbar/MultiSelectionListHorizScrollbar.java
./java/awt/List/HandlingKeyEventIfMousePressedTest/HandlingKeyEventIfMousePressedTest.java
./java/awt/List/ListActionEventTest/ListActionEventTest.java

-----
Title: [JDK-8340824] C2: Memory for TypeInterfaces not reclaimed by hashcons()
Priority: P3
Type: Bug
Component: hotspot
Description: The list of interfaces for a TypeInterfaces is contained in a GrowableArray that's allocated in the type arena. When hashcons() deletes a TypeInterfaces object because an identical one exists, it can't reclaim memory for the object because it can only free the last thing that was allocated and that's the backing store for the GrowableArray, not the TypeInterfaces object.

-----
Title: [JDK-8340969] jdk/jfr/startupargs/TestStartDuration.java should be marked as flagless
Priority: P4
Type: Bug
Component: hotspot
Description: Test jdk/jfr/startupargs/TestStartDuration.java
checks duration, the time might be too small for stress options like Xcomp.
So it makes sense to mark it as flaglesss.

-----
Title: [JDK-8341037] Use standard layouts in DefaultFrameIconTest.java and MenuCrash.java
Priority: P4
Type: Bug
Component: client-libs
Description: Two tests from JDK-8340687, test/jdk/java/awt/Frame/DefaultFrameIconTest.java and test/jdk/java/awt/Frame/MenuCrash.java, use two test UI windows.
These tests can updated to use the standard multi-window layouts provided by JDK-8317116.

-----
Title: [JDK-8341111] open source several AWT tests including menu shortcut tests
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341135] Incorrect format string after JDK-8339475
Priority: P3
Type: Bug
Component: tools
Description: The new code use rc (an int) with a %s format string:
rc = pthread_create(&main_thr, NULL, &apple_main, &args);
if (rc != 0) {
JLI_ReportErrorMessageSys("Could not create main thread, return code: %s\n", rc);
exit(1);
}
The compiler should be able to catch this if JLI_ReportErrorMessageSys was declared with something like __attribute__ ((format (printf, 1, 2))).
I didn't compile this code or test it, this bug report is based on visual code inspection only. I assume pthread_detach cannot actually fail on MacOS, so I think this is P5.
OS: os_x

-----
Title: [JDK-8341194] [REDO] Implement C2 VectorizedHashCode on AArch64
Priority: P4
Type: Enhancement
Component: hotspot
Description: JDK-8322770 caused issues (see JDK-8341197) and was backed out. Let's re-implement.

-----
Title: [JDK-8341316] [macos] javax/swing/ProgressMonitor/ProgressMonitorEscapeKeyPress.java fails sometimes in macos
Priority: P4
Type: Bug
Component: client-libs
Description: javax/swing/ProgressMonitor/ProgressMonitorEscapeKeyPress.java fails in MacOS 15 with an Exception java.lang.RuntimeException: Escape key did not cancel the ProgressMonitor
It rarely fails in MacOS 14 and below.
This could be because of an unstable test.
OS: os_x

-----
Title: [JDK-8341412] Various test failures after JDK-8334305
Priority: P1
Type: Bug
Component: hotspot
Description: We see massive test failures after JDK-8334305:
vmTestbase/vm/mlvm/indy/func/java/thisAsArgument/INDIFY_Test.java
vmTestbase/vm/mlvm/meth/func/java/throwException/Test.java
vmTestbase/vm/mlvm/meth/stress/jni/nativeAndMH/Test.java
[12:57:12.904] # ERROR: Test caught an exception:
[12:57:12.904] # ERROR: java.lang.NullPointerException: Cannot read field "lock" because "ps" is null
[12:57:12.904] # ERROR: 	at java.base/java.io.PrintStream$1.lock(PrintStream.java:1546)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Throwable$WrappedPrintStream.lock(Throwable.java:809)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Throwable.printStackTrace(Throwable.java:692)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Throwable.printStackTrace(Throwable.java:688)
[12:57:12.904] # ERROR: 	at vm.mlvm.meth.func.java.throwException.Test.run(Test.java:103)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.runMlvmTestInstance(MlvmTestExecutor.java:398)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.runMlvmTest(MlvmTestExecutor.java:343)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:247)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:190)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:161)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTest.launch(MlvmTest.java:325)
[12:57:12.904] # ERROR: 	at vm.mlvm.meth.func.java.throwException.Test.main(Test.java:62)
[12:57:12.904] # ERROR: 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[12:57:12.904] # ERROR: 	at java.base/java.lang.reflect.Method.invoke(Method.java:573)
[12:57:12.904] # ERROR: 	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8341424] GHA: Collect hs_errs from build time failures
Priority: P4
Type: Enhancement
Component: infrastructure
Description: GHA conveniently collects hs_errs from the test job runs. However, when we have a failure during the build, e.g. javac, CDS, jmod, jlink crashes the VM, we don't have this visibility. We can add the hooks for these as well.

-----
Title: [JDK-8341453] java/awt/a11y/AccessibleJTableTest.java fails in some cases where the test tables are not visible
Priority: P4
Type: Bug
Component: client-libs
Description: The manual test java/awt/a11y/AccessibleJTableTest.java fails in some cases as the instruction window is too big and the two test tables are not seen clearly.
The failing use-case is case no: 3 as it contains two tables and that cannot be fit along with the instruction window(PFA the screenshot).
Workaround: Resizing the frame by dragging it horizontally fixes the issue
OS: generic

-----
Title: [JDK-8341715] PPC64: ObjectMonitor::_owner should be reset unconditionally in nmethod unlocking
Priority: P4
Type: Enhancement
Component: hotspot
Description: The ObjectMonitor::_owner check in MacroAssembler::compiler_fast_unlock_object() [1] is redundant and should be removed because java code with unbalanced locking is never compiled to nmethods[2].
ObjectMonitor::_owner can be a stack address with LM_LEGACY [3]. In that case the result of the check is wrong. Execution will take unnecessarily the slow path.
[1] Redundant check: https://github.com/openjdk/jdk/blob/20f36c666c30e50c446d09cca4ea52395317a7eb/src/hotspot/cpu/ppc/macroAssembler_ppc.cpp#L2700-L2705
[2] ciMethod::has_balanced_monitors() https://github.com/openjdk/jdk/blob/7a1e832ea997f9984eb5fc18474a8f1650ddb1bf/src/hotspot/share/ci/ciMethod.cpp#L290
[3] _owner can be a stack address: https://github.com/openjdk/jdk/blob/a601cd2e100958e3f37ae65e32e4b3cac246c079/src/hotspot/share/runtime/synchronizer.cpp#L1530
Background Info
Also on x86 there used to be a diagnostic locking mode that checked `_owner` field before unlocking to defend against unbalanced locking done using JNI:
https://github.com/openjdk/jdk/blob/84cf73f2a5d39240263bdb500fc98a6ec6590cf0/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L2184
JDK-8210381 removed it in jdk12: https://github.com/openjdk/jdk/commit/0f68e5221f4d3cf262f09170c5182f34c6b9cc30
Even jdk24 has stale comments refering to it: https://github.com/openjdk/jdk/blob/940aa7c4cf1bf770690660c8bb21fb3ddc5186e4/src/hotspot/cpu/x86/c2_MacroAssembler_x86.cpp#L415
On ppc64 the owner check didn't depend on a special EmitSync diagnostic mode so JDK-8210381 didn't remove it. It is unclear why there the check was always done.
OS: generic

-----
Title: [JDK-8341820] Check return value of hcreate_r
Priority: P4
Type: Bug
Component: hotspot
Description: In symtab.c there is some coding where hcreate_r is used. We should check the return value of the call (previously there was some guarantee checking the return value but uncommented).
This has been discussed in the PR of JDK-8341722 .
OS: linux

-----
Title: [JDK-8341862] PPC64: C1 unwind_handler fails to unlock synchronized methods with LM_MONITOR
Priority: P4
Type: Bug
Component: hotspot
Description: LIR_Assembler::emit_unwind_handler() calls C1_MacroAssembler::unlock_object() to unlock synchronized methods but there LM_MONITOR is not handled.

-----
Title: [JDK-8341881] [REDO] java/nio/file/attribute/BasicFileAttributeView/CreationTime.java#tmp fails on alinux3
Priority: P3
Type: Bug
Component: core-libs
Description: Test java/nio/file/attribute/BasicFileAttributeView/CreationTime.java#tmp fails, the log snippet:
STDOUT:
/tmp/name11404038214856886703 supportsCreationTimeRead == true
STDERR:
java.lang.RuntimeException: Creation time should not have changed
at CreationTime.test(CreationTime.java:127)
at CreationTime.main(CreationTime.java:154)
To reproduce the fails, test command on most linux system:
rm -rf /dev/shm/tmp/ ; jtreg -v:fail,error -w /dev/shm/tmp -nr test/jdk/java/nio/file/attribute/BasicFileAttributeView/CreationTime.java#cwd
OS: linux

-----
Title: [JDK-8341978] Improve JButton/bug4490179.java
Priority: P4
Type: Bug
Component: client-libs
Description: At first I noticed the javax/swing/JButton/bug4490179.java test does not release mouse button 1 which was introduced in JDK-8316285.
This problem was resolved by JDK-8327401.
https://github.com/openjdk/jdk/pull/19339#discussion_r1609201116
The test code could be improved further, and the number of delays could be reduced.

-----
Title: [JDK-8341982] Simplify JButton/bug4323121.java
Priority: P4
Type: Bug
Component: client-libs
Description: The test javax/swing/JButton/bug4323121.java can be simplified, it contains lots of unused methods which could be removed.

-----
Title: [JDK-8342098] Write a test to compare the images
Priority: P4
Type: Enhancement
Component: client-libs
Description: Write a test to compare the captured image from the screen using a Robot with the
source image. The images are compared pixel by pixel.

-----
Title: [JDK-8342145] File libCreationTimeHelper.c compile fails on Alpine
Priority: P2
Type: Bug
Component: core-libs
Description: # gcc -c test/jdk/java/nio/file/attribute/BasicFileAttributeView/libCreationTimeHelper.c -Itest/lib/native
test/jdk/java/nio/file/attribute/BasicFileAttributeView/libCreationTimeHelper.c:29:10: fatal error: bits/types.h: No such file or directory
29 | #include
|          ^~~~~~~~~~~~~~
compilation terminated.
OS: linux

-----
Title: [JDK-8342270] Test sun/security/pkcs11/Provider/RequiredMechCheck.java needs write access to src tree
Priority: P3
Type: Bug
Component: security-libs
Description: sun/security/pkcs11/Provider/RequiredMechCheck.java fails if the this directory is made read-only:
open/test/jdk/sun/security/pkcs11/nss
Tests should not be writing to or changing any files in the source tree. Jtreg provides a scratch directory where temporary files can be created. I would suggest copying these files there before using them.
Stacktrace:
java.security.ProviderException: Initialization failed
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:393)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:128)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:125)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:125)
at PKCS11Test.getSunPKCS11(PKCS11Test.java:165)
at PKCS11Test.getSunPKCS11(PKCS11Test.java:157)
at PKCS11Test.testNSS(PKCS11Test.java:484)
at PKCS11Test.main(PKCS11Test.java:192)
at PKCS11Test.main(PKCS11Test.java:169)
at RequiredMechCheck.test(RequiredMechCheck.java:77)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TOKEN_WRITE_PROTECTED
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_Initialize(Native Method)
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_Initialize(PKCS11.java:1717)
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:186)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:347)
... 39 more

-----
Title: [JDK-8342498] Add test for Allocation elimination after use as alignment reference by SuperWord
Priority: P2
Type: Enhancement
Component: hotspot
Description: We should add the TestA4.java to regression testing, and probably backport it at least to JDK11.
It turns out that the bug is already fixed in all old versions with JDK-8328544 and its backport of this snipped:
// We did not find the int_index. Just to be safe, reject this VPointer.
if (!_has_int_index_after_convI2L) {
return false;
}
But if somebody were to remove it, we would re-reveal the bug with the CastX2P and Allocation removal, described below.
------------------------------------------------------------------ Original Description ------------------------------------------------------------------
During the investigation of JDK-8339349, we found a replay file that has a different failure mode.
unuzip jars.zip - place in jars directory.
[~thartmann] narrowed it down:
I narrowed it down. The issue is introduced/triggered by JDK-8308606 in JDK 22 b03 (see hs_err_pid1979173.log) and fixed/hidden by JDK-8310190 in JDK 23 b05.
Emanuel, please have a look and verify that the fix was indeed introduced by JDK-8308606 and fixed JDK-8310190. If so, we need to re-triage those bugs.
DEBUG:
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid3400217.log -cp "jars/*:jars/" -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintIdeal
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork1/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:730), pid=980994, tid=981014
#  Error: assert(this_region != nullptr) failed
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-10-14-1158199.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-10-14-1158199.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/JDK-8339349/core.980994)
#
# An error report file with more information is saved as:
# /oracle-work/JDK-8339349/hs_err_pid980994.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
Current CompileTask:
C2:56926  186    b  4       org.apache.coyote.http11.Http11OutputBuffer::write (93 bytes)
Stack: [0x00007facbd1bc000,0x00007facbd2bd000],  sp=0x00007facbd2b7fa0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411  (g1BarrierSetC2.cpp:730)
V  [libjvm.so+0x12d3064]  PhaseMacroExpand::process_users_of_allocation(CallNode*)+0x694  (macro.cpp:159)
V  [libjvm.so+0x12decae]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)+0x35e  (macro.cpp:1100)
V  [libjvm.so+0x12df2b2]  PhaseMacroExpand::eliminate_macro_nodes()+0x3b2  (macro.cpp:2386)
V  [libjvm.so+0x12df569]  PhaseMacroExpand::expand_macro_nodes()+0x19  (macro.cpp:2434)
V  [libjvm.so+0x9ece06]  Compile::Optimize()+0xef6  (compile.cpp:2446)
V  [libjvm.so+0x9f04cb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1beb  (compile.cpp:857)
V  [libjvm.so+0x83dc17]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1e7  (c2compiler.cpp:134)
V  [libjvm.so+0x9fba8c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x92c  (compileBroker.cpp:2299)
V  [libjvm.so+0x9fc718]  CompileBroker::compiler_thread_loop()+0x468  (compileBroker.cpp:1958)
V  [libjvm.so+0xeb99ac]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:721)
V  [libjvm.so+0x179e956]  Thread::call_run()+0xb6  (thread.cpp:220)
V  [libjvm.so+0x14a92a7]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:789)
PRODUCT:
/oracle-work/jdk-fork1/build/linux-x64/jdk/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid3400217.log -cp "jars/*:jars/" -XX:+UseSuperWord -Xbatch -XX:+UseG1GC
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fc3455e00fa, pid=892245, tid=892653
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (build 23-internal-2024-10-14-1157432.xyz...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (23-internal-2024-10-14-1157432.xyz..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/JDK-8339349/core.892245)
#
# An error report file with more information is saved as:
# /oracle-work/JDK-8339349/hs_err_pid892245.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
Current CompileTask:
C2:42341  186    b  4       org.apache.coyote.http11.Http11OutputBuffer::write (93 bytes)
Stack: [0x00007fc30efaf000,0x00007fc30f0b0000],  sp=0x00007fc30f0ab760,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a  (node.hpp:406)
V  [libjvm.so+0xbd119f]  PhaseMacroExpand::process_users_of_allocation(CallNode*)+0x6bf  (macro.cpp:159)
V  [libjvm.so+0xbd6d0e]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)+0x1ee  (macro.cpp:1100)
V  [libjvm.so+0xbd6e92]  PhaseMacroExpand::eliminate_macro_nodes()+0x122  (macro.cpp:2386)
V  [libjvm.so+0xbd6f39]  PhaseMacroExpand::expand_macro_nodes()+0x19  (macro.cpp:2434)
V  [libjvm.so+0x641bee]  Compile::Optimize()+0x89e  (compile.cpp:2446)
V  [libjvm.so+0x6432ad]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xedd  (compile.cpp:857)
V  [libjvm.so+0x56b091]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f1  (c2compiler.cpp:134)
V  [libjvm.so+0x648c71]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xae1  (compileBroker.cpp:2299)
V  [libjvm.so+0x64bd58]  CompileBroker::compiler_thread_loop()+0x498  (compileBroker.cpp:1958)
V  [libjvm.so+0x909d38]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:721)
V  [libjvm.so+0xebcf7f]  Thread::call_run()+0x9f  (thread.cpp:220)
V  [libjvm.so+0xce0485]  thread_native_entry(Thread*)+0xd5  (os_linux.cpp:789)

-----
Title: [JDK-8342508] Use latch in BasicMenuUI/bug4983388.java instead of delay
Priority: P5
Type: Bug
Component: client-libs
Description: Use a CountDownLatch in javax/swing/plaf/basic/BasicMenuUI/4983388/bug4983388.java instead of delay.
The latch provides a direct way to synchronise EDT and main thread, and the test will finish quicker.

-----
Title: [JDK-8342541] Exclude List/KeyEventsTest/KeyEventsTest.java from running on macOS
Priority: P4
Type: Bug
Component: client-libs
Description: The code in java/awt/List/KeyEventsTest/KeyEventsTest.java returns if the test is run on macOS.
boolean isWin = false;
if (Platform.isWindows()) {
isWin = true;
} else if (Platform.isOSX()) {
System.out.println("Not for OS X");
return;
}
https://github.com/openjdk/jdk/blob/236c71cad9fa269518456c11edcfb353bbfc084d/test/jdk/java/awt/List/KeyEventsTest/KeyEventsTest.java#L264-L270
The test must have @requires tag so that it's not even selected for running on macOS. The condition can be removed from the test.

-----
Title: [JDK-8342602] Remove JButton/PressedButtonRightClickTest test
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/swing/JButton/PressedButtonRightClickTest.java test was added by JDK-8049069 and it fully duplicates an existing test javax/swing/JButton/bug4490179.java.
The bug4490179.java test used to be closed, it was open-sourced by JDK-8316285. Thus, an open-source test was needed for JDK-8049069. The bug4490179.java test should've been used as a regression test for JDK-8049069.
Both bug4490179.java and PressedButtonRightClickTest.java had the same issue where mouse button 1 wasn't released before exiting the test. These issues were fixed independently.
JDK-8341978 improves the test code, which makes PressedButtonRightClickTest.java redundant.

-----
Title: [JDK-8342609] jpackage test helper function incorrectly removes a directory instead of its contents only
Priority: P4
Type: Bug
Component: tools
Description: In TKit.DirectoryCleaner.accept() at https://github.com/openjdk/jdk/blob/8174cbd5cb797a80d48246a686897ef6fe64ed57/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/TKit.java#L382 :
---
try (var pathStream = Files.walk(root, 0)) {
paths = pathStream.collect(Collectors.toList());
}
---
The intent is to get non-recursive contents of the `root` directory. However `Files.walk(root, 0)` call returns a stream that contains only the `root` itself. This is wrong as it makes the directory cleaner remove the contents of the `root` directory (intended behavior) and the `root` directory itself (NOT intended behavior).
`Files.walk(root, 0)` should be replaced with `Files.list(root)`.
The issue impacts only scenarios when jpackage tests are executed on the existing test directories and doesn't impact common scenarios of clean test runs.
OS: generic

-----
Title: [JDK-8342634] javax/imageio/plugins/wbmp/WBMPStreamTruncateTest.java creates temp file in src dir
Priority: P4
Type: Bug
Component: client-libs
Description: javax/imageio/plugins/wbmp/WBMPStreamTruncateTest.java fails if the test source tree is read-only as it tries to create a temporary file there instead of in the provided jtreg scratch dir.
Stacktrace:
java.io.IOException: Permission denied
at java.base/java.io.UnixFileSystem.createFileExclusively0(Native Method)
at java.base/java.io.UnixFileSystem.createFileExclusively(UnixFileSystem.java:218)
at java.base/java.io.File.createTempFile(File.java:2218)
at WBMPStreamTruncateTest.main(WBMPStreamTruncateTest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8342635] javax/swing/JFileChooser/FileSystemView/WindowsDefaultIconSizeTest.java creates tmp file in src dir
Priority: P3
Type: Bug
Component: client-libs
Description: javax/swing/JFileChooser/FileSystemView/WindowsDefaultIconSizeTest.java fails if the test source tree is read-only as it tries to create a temporary file there instead of in the provided jtreg scratch dir.
Stacktrace:
java.lang.RuntimeException: Unexpected error while creating the test file: Access is denied
at WindowsDefaultIconSizeTest.test(WindowsDefaultIconSizeTest.java:70)
at WindowsDefaultIconSizeTest.main(WindowsDefaultIconSizeTest.java:43)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8342704] GHA: Report truncation is broken after JDK-8341424
Priority: P4
Type: Bug
Component: infrastructure
Description: When GH output is too large, we do not actually truncate it after JDK-8341424. The error log would be:
```
Run bash ./.github/scripts/gen-test-results.sh "$GITHUB_STEP_SUMMARY"
./.github/scripts/gen-test-results.sh: line 28: report-utils.sh: No such file or directory
./.github/scripts/gen-test-results.sh: line 97: truncate_summary: command not found
Error: Process completed with exit code 127.
Error: $GITHUB_STEP_SUMMARY upload aborted, supports content up to a size of 1024k, got 1579k. For more information see: https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-markdown-summary
```
This is because we import report-utils.sh incorrectly: scripts try to find it in current directory, which is not the same directory where the importing scripts are located. And we never see it in normal cases, because scripts are just eating the errors without any other observable effects.

-----
Title: [JDK-8342811] java/net/httpclient/PlainProxyConnectionTest.java failed: Unexpected connection count: 5
Priority: P4
Type: Bug
Component: core-libs
Description: ===== Testing with HTTP_1_1
Server is: /127.0.0.1:33557
Verifying communication with server
Hello World!
Communication with server OK
Pretending the server is a proxy...
Verifying communication with proxy
Hello World!
Communication with proxy OK
Real test begins here.
Setting up request with HttpClient for version: HTTP_1_1
Sending request with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (2) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (3) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (4) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
PASSED: Proxy received only one connection from: [/127.0.0.1:45542]
===== Testing with HTTP_2
Server is: /127.0.0.1:33557
Verifying communication with server
Hello World!
Communication with server OK
Pretending the server is a proxy...
Verifying communication with proxy
Hello World!
Communication with proxy OK
Real test begins here.
Setting up request with HttpClient for version: HTTP_2
Sending request with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (2) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (3) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (4) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Server stopped
----------System.err:(14/1081)----------
Unexpected connection count: 5
Connections: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
java.lang.AssertionError: Expected 4: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
at PlainProxyConnectionTest.test(PlainProxyConnectionTest.java:265)
at PlainProxyConnectionTest.main(PlainProxyConnectionTest.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
JavaTest Message: Test threw exception: java.lang.AssertionError: Expected 4: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.AssertionError: Expected 4: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
OS: linux

-----
Title: [JDK-8342858] Make target mac-jdk-bundle fails on chmod command
Priority: P4
Type: Bug
Component: infrastructure
Description: Error log from my attempt to 'make images' on macOS:
---
chmod: /Users/dan/Dev/jdk/oracle/build/macosx-aarch64/images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE: No such file or directory
MacBundles.gmk:51: recipe for target '/Users/dan/Dev/jdk/oracle/build/macosx-aarch64/images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE' failed
make[3]: *** [/Users/dan/Dev/jdk/oracle/build/macosx-aarch64/images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE] Error 1
make[3]: *** Waiting for unfinished jobs....
make/Main.gmk:467: recipe for target 'mac-jdk-bundle' failed
make[2]: *** [mac-jdk-bundle] Error 2
---
The file images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE is a symbolic link and its target (legal/java.base/LICENSE) does not yet exist. It doesn't always fail, so there seems to be a race condition here (sometimes the target exists? or sometimes chmod doesn't run?).
OS: os_x

-----
Title: [JDK-8342988] GHA: Build JTReg in single step
Priority: P4
Type: Enhancement
Component: infrastructure
Description: It is visible in current GHA runs that building jtreg in all worker at once sometimes break on dependencies checkout, for example:
[build.sh][INFO] CYGWIN_OR_MSYS=0
[build.sh][INFO] JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
[build.sh][INFO] Downloading https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.8-bin.zip to /home/runner/work/jdk/jdk/jtreg/src/make/../build/deps/apache-ant-1.10.8-bin.zip
Error: sh][ERROR] wget exited with exit code 4
Error: Process completed with exit code 1.
I suppose this is a side-effect of pulling lots of dependencies all at once. Additionally, we often had problems with building jtreg on various platforms. We do not have to build jtreg for every platform. We can just have a job step that does it once, and stores it in the cache for all dependent jobs to use.
It would also save some build time across various jobs.

-----
Title: [JDK-8343100] Consolidate EmptyFolderTest and EmptyFolderPackageTest jpackage tests into single java file
Priority: P3
Type: Enhancement
Component: tools
Description: EmptyFolderTest and EmptyFolderPackageTest tests do the same but the first one is for app image packaging and the latter is for native package packaging.
Shared code is stored in EmptyFolderTestBase class.
There is no point in keeping these classes separated. Consolidate them in EmptyFolderTest class that will have "testAppImage()" and "testPackage()" test cases.
OS: generic

-----
Title: [JDK-8343101] Rework BasicTest.testTemp test cases
Priority: P4
Type: Enhancement
Component: tools
Description: BasicTest.testTemp(true) test case will run jpackage command with --temp parameter referring to a non-existing directory.
BasicTest.testTemp(fale) test case will run jpackage command with --temp parameter referring to an existing empty directory.
Both test cases will rerun the same jpackage command line making the --temp paraterm refer to a non-empty temp directory. This run is expected to fail.
It will be four jpackage runs in total. Two "expected-to-fail" runs are identical.
Rework this test case to run jpackage three times:
1. --temp referring to a non-existing directory.
2. --temp referring to an existing empty directory.
3. --temp referring to an existing non-empty directory (expected to fail).
OS: generic

-----
Title: [JDK-8343102] Remove `--compress` from jlink command lines from jpackage tests
Priority: P4
Type: Bug
Component: tools
Description: RuntimeImageTest and RuntimePackageTest tests call jlink with `--compress` parameter. jlink issues warnings:
---
Warning: The 0 argument for --compress is deprecated and may be removed in a future release
Warning: The 1 argument for --compress is deprecated and may be removed in a future release
Warning: The 2 argument for --compress is deprecated and may be removed in a future release
---
Should stop using `--compress` jlink parameter before it starts failing.
OS: generic

-----
Title: [JDK-8343118] [TESTBUG] java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java fails with rror. Can't find HTML file PrintCheckboxManualTest.html
Priority: P4
Type: Bug
Component: client-libs
Description: Running java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java fail with
test result: Error. Can't find HTML file: C:\Reg_Client\src\open\test\jdk\java\awt\PrintJob\PrintCheckboxTest\PrintCheckboxManualTest.html
Test looks for PrintCheckboxManualTest.html
but the PrintCheckboxManualTest.html
file does not exists
https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java#L30
OS: generic

-----
Title: [JDK-8343128] PassFailJFrame.java test result: Error. Bad action for script: build}
Priority: P4
Type: Bug
Component: client-libs
Description: JDK-8340785 updated documentation with a @test in it:
*
* Add the following jtreg tags before the test class declaration
* {@snippet :
* /*
*  * @test
*  * @summary Sample manual test
*  * @library /java/awt/regtesthelpers
*  * @build PassFailJFrame
*  * @run main/manual SampleManualTest
* }
* and the closing comment tag *&#47;.
So jtreg now considers this file as a test.
I guess it can be changed to the " *  * {@literal @}test" to avoid this.
----------messages:(0/0)----------
test result: Error. Bad action for script: build}

-----
Title: [JDK-8343129] Disable unstable check of ThreadsListHandle.sanity_vm ThreadList values
Priority: P4
Type: Sub-task
Component: hotspot
OS: linux

-----
Title: [JDK-8343144] UpcallLinker::on_entry racingly clears pending exception with GC safepoints
Priority: P4
Type: Bug
Component: core-libs
Description: In UpcallLinker::on_entry we clear_pending_exception() right before transitioning from native to Java. This clears an oop on the thread that might be concurrently scanned by the GC. The GC may read the oop and update its address to a new location, without using any atomics at all (because we are in a safepoint and nobody should be messing around with it concurrently). The lack of atomics means that the following interleaving is possible:
GCThread: old_oop = JT1-_pending_exception
JT1: clear_pending_exception()
GCThread: JT1-_pending_exception = new_addr(old_oop);
Other interesting things can happen as well. But it's safe to say we shouldn't be messing around with oops in_native concurrently to GC safepoints.

-----
Title: [JDK-8343149] Cleanup os::print_tos_pc on AIX
Priority: P4
Type: Bug
Component: hotspot
Description: The os::print_tos_pc on AIX has some TODO output related to potential instruction decoding that can be removed.
On other platforms no instruction decoding (or TODO) is present at this place.
OS: aix

-----
Title: [JDK-8343178] Test BasicTest.java javac compile fails cannot find symbol
Priority: P3
Type: Bug
Component: tools
Description: /tmp/tone/run/jtreg/jdk-repo/test/jdk/tools/jpackage/share/jdk/jpackage/tests/BasicTest.java:320: error: cannot find symbol
TKit.assertPathNotEmptyDirectory(tempDir);
^
symbol:   method assertPathNotEmptyDirectory(Path)
location: class TKit
1 error
TEST RESULT: Failed. Compilation failed: Compilation failed
OS: generic

-----
Title: [JDK-8343205] CompileBroker::possibly_add_compiler_threads excessively polls available memory
Priority: P4
Type: Bug
Component: hotspot
Description: A DESCRIPTION OF THE PROBLEM :
possibly_add_compiler_threads always fetches the free memory, before considering if a compiler thread is required, which we've observed causing performance issues with both cgroupv1 and cgroupv2 due to the frequency of polling (even with the mitigations added in JDK-8232207), particularly with large running large numbers of relatively short lived tasks on container platforms.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Believe this is enough to demonstrate the correlation between compilations and calls:
java -Xlog:os+container=trace,jit+compilation=debug
[0.000s][trace][os,container] OSContainer::init: Initializing Container Support
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] Detected cgroups v2 unified hierarchy
[0.001s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.001s][trace][os,container] CPU Quota is: 400000
[0.001s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.001s][trace][os,container] CPU Period is: 100000
[0.001s][trace][os,container] CPU Quota count based on quota/period: 4
[0.001s][trace][os,container] OSContainer::active_processor_count: 4
[0.004s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4
[0.004s][trace][os,container] total physical memory: 790776565760
[0.004s][trace][os,container] Path to /memory.max is /sys/fs/cgroup/memory.max
[0.004s][trace][os,container] Memory Limit is: 8589934592
[0.005s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.025s][trace][os,container] CPU Quota is: 400000
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.025s][trace][os,container] CPU Period is: 100000
[0.025s][trace][os,container] CPU Quota count based on quota/period: 4
[0.025s][trace][os,container] OSContainer::active_processor_count: 4
[0.029s][debug][jit,compilation]    1       3       java.lang.String::hashCode (60 bytes)
[0.029s][trace][os,container   ] total physical memory: 790776565760
[0.029s][trace][os,container   ] Path to /memory.max is /sys/fs/cgroup/memory.max
[0.029s][trace][os,container   ] Memory Limit is: 8589934592
[0.029s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.029s][trace][os,container   ] Memory Usage is: 8166121472
[0.030s][debug][jit,compilation]    2       3       java.lang.Object:: (1 bytes)
[0.030s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.030s][trace][os,container   ] Memory Usage is: 8166121472
[0.030s][debug][jit,compilation]    3     n 0       jdk.internal.misc.Unsafe::getReferenceVolatile (native)
[0.030s][debug][jit,compilation]    4     n 0       jdk.internal.vm.Continuation::enterSpecial (native)   (static)
[0.030s][debug][jit,compilation]    5     n 0       jdk.internal.vm.Continuation::doYield (native)   (static)
[0.031s][debug][jit,compilation]    6       3       java.lang.Byte::toUnsignedInt (6 bytes)
[0.031s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.031s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]    7       3       java.lang.String::coder (15 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]   10       3       java.lang.String::isLatin1 (19 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]    8       3       jdk.internal.util.Preconditions::checkIndex (18 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]    9       3       java.lang.String::charAt (25 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]   11     n 0       java.lang.Object::hashCode (native)
[0.032s][debug][jit,compilation]   12     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLL)L (native)   (static)
[0.033s][debug][jit,compilation]   13       1       java.lang.Enum::ordinal (5 bytes)
[0.033s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.033s][trace][os,container   ] Memory Usage is: 8166383616
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Free memory is only considered if a thread would otherwise be added.
ACTUAL -
Free memory is considered for each compiler loop iteration.
CUSTOMER SUBMITTED WORKAROUND :
Configure -XX:-UseDynamicNumberOfCompilerThreads
FREQUENCY : often
OS: linux

-----
Title: [JDK-8343314] Move common properties from jpackage jtreg test declarations to TEST.properties file
Priority: P4
Type: Enhancement
Component: tools
Description: All jpackage jtreg test declarations have @modules tag. Values:
jdk.jpackage/jdk.jpackage.internal
AppContentTest.java additionally has "@modules java.base/jdk.internal.util" tag
All jpackage jtreg test declarations have @library tag. Values:
../../../../helpers
../helpers
This @library tag is properly accompanied by the "@build jdk.jpackage.test.*" tag, which pulls in all classes from the jpackage test helper library.
Other @library tag values:
/test/lib
base
These are probably dangling ends because they are not accompanied by relevant @build tags.
Some @run tags have "--add-opens jdk.jpackage/jdk.jpackage.internal=ALL-UNNAMED". These tests pull in jpackage helper lib functionality that uses reflection to access jpackage internal classes. E.g.: https://github.com/openjdk/jdk/blob/1b177ce5b7e25b3a563066ba92dbf8cacfd29126/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/LauncherIconVerifier.java#L161
This `--add-opens` should be applied to jpackage test lib.
jpackage jtreg test declarations should be unified:
- remove "@modules java.base/jdk.internal.util"
- remove `--add-opens` from @run
- replace "@library ../../../../helpers" and "@library ../helpers" with "@library /test/jdk/tools/jpackage/helpers"
- remove @library referring unused libraries.
Add "modules=jdk.jpackage/jdk.jpackage.internal:+open         java.base/jdk.internal.util" to jpackage's TEST.properties. This will eliminate the need for `--add-open` and "@modules java.base/jdk.internal.util" in jtreg test declarations. This change will simplify jpackage jtreg test declarations, reduce code duplication, and do a cleanup.
OS: generic

-----
Title: [JDK-8343343] Misc crash dump improvements on more platforms after JDK-8294160
Priority: P4
Type: Bug
Component: hotspot
Description: JDK-8294160 added misc crash dump improvements on some platforms, but it might be helpful to do those improvements on some platforms, e.g. bsd_x86 .
OS: generic

-----
Title: [JDK-8294160] misc crash dump improvements
Priority: P3
Type: Enhancement
Component: hotspot
Description: Try to recover and output meaningful information in more situations, such as:
- when a pointer is in Method metadata memory range, but the memory is not committed
- when we call a bad address
When calling a bad address, we usually don't get a meaningful stack backtrace, but in many situations we can if we know where to find the caller information.

-----
Title: [JDK-8343378] Exceptions in javax/management DeadLockTest.java do not cause test failure
Priority: P4
Type: Bug
Component: core-svc
Description: This test will print its " Test failed for " message on an Exception, but then pass.
It could test multiple protocols, which is theoretical at the moment, but any of them failing should cause a test failure.

-----
Title: [JDK-8343396] Use OperatingSystem, Architecture, and OSVersion in jpackage tests
Priority: P4
Type: Enhancement
Component: tools
Description: Same refactoring as in JDK-8304914 but for jpackage tests.
OS: generic

-----
Title: [JDK-8343491] javax/management/remote/mandatory/connection/DeadLockTest.java failing with NoSuchObjectException: no such object in table
Priority: P4
Type: Bug
Component: core-svc
Description: This test currently fails with:
----------System.out:(22/1365)----------
test on a client notification deadlock.
Test for protocol rmi
The listener receives notif with the type:jmx.remote.connection.closed
The listener is not blocked!
Test failed for rmi
java.rmi.NoSuchObjectException: no such object in table
at java.rmi/sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:304)
at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:280)
at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:166)
at jdk.remoteref/jdk.jmx.remote.internal.rmi.PRef.invoke(Unknown Source)
at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl_Stub.getDefaultDomain(RMIConnectionImpl_Stub.java:347)
at java.management.rmi/javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.getDefaultDomain(RMIConnector.java:1022)
at DeadLockTest.test(DeadLockTest.java:105)
at DeadLockTest.main(DeadLockTest.java:52)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:572)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
Test for protocol iiop
Skipping unsupported URL iiop
Test for protocol jmxmp
Skipping unsupported URL jmxmp
----------System.err:(13/738)----------
Nov 02, 2024 3:46:45 PM com.sun.jmx.remote.internal.ClientCommunicatorAdmin restart
WARNING: Failed to restart: java.rmi.NoSuchObjectException: no such object in table
java.lang.RuntimeException: FAILED
at DeadLockTest.main(DeadLockTest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:572)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
JavaTest Message: Test threw exception: java.lang.RuntimeException: FAILED
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: FAILED

-----
Title: [JDK-8343599] Kmem limit and max values swapped when printing container information
Priority: P3
Type: Bug
Component: hotspot
Description: When improving the container information in JDK-8287011, the values for limit and max for kernel memory got mixed up. Code looks like this:
```
OSContainer::print_container_helper(st, kmem_usage, "kernel_memory_usage_in_bytes");
OSContainer::print_container_helper(st, kmem_limit, "kernel_memory_max_usage_in_bytes");
OSContainer::print_container_helper(st, kmem_max_usage, "kernel_memory_limit_in_bytes");
```
This information is displayed in hs_err-files and it gives the impression that we've hit the kernel limit (if we are at peak usage) even though we haven't.

-----
Title: [JDK-8343882] BasicAnnoTests doesn't handle multiple annotations at the same position
Priority: P4
Type: Bug
Component: tools
Description: Thomas Fitzsimmons noticed this issue in https://github.com/openjdk/jdk17u-dev/pull/2955
BasicAnnoTests uses @Test annotations for test cases, which a 'posn' representation the expected location of an annotation to check for. Some tests have multiple @Test annotations with the same position:
@Test(posn=0, annoType = TA.class, expect = "70")
@Test(posn=0, annoType = TB.class, expect = "71")
@TA(70) @TB(71) String f;
The tests creates a map indexed by posn, so if multiple annotations have the same posn only one of them is processed: https://github.com/openjdk/jdk/blame/325a2c3f76a45248e6f8baa63477db15e55be705/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java#L174-L177
The following change should cause the test to fail, but doesn't, because the modified @Test annotation is not being processed due to this bug:
$ diff --git a/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java b/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java
index 904e4e78cad..01206faeb6d 100644
--- a/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java
+++ b/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java
@@ -697,7 +697,7 @@ class Inner8 {
void m60(@TA(60) @TB(61) String t) { }
class Inner70 {
-        @Test(posn=0, annoType = TA.class, expect = "70")
+        @Test(posn=0, annoType = TA.class, expect = "99")
@Test(posn=0, annoType = TB.class, expect = "71")
@TA(70) @TB(71) String f;
}
$ make test TEST="jtreg:test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java"
...
Passed: tools/javac/processing/model/type/BasicAnnoTests.java

-----
Title: [JDK-8344275] tools/jpackage/windows/Win8301247Test.java fails on localized Windows platform
Priority: P4
Type: Bug
Component: tools
Description: On Japanese Windows platform (Windows Server2019), tools/jpackage/windows/Win8301247Test.java fails with the following stack:
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at jdk.jpackage.test.WindowsHelper.findAppLauncherPIDs(WindowsHelper.java:272)
at jdk.jpackage.test.WindowsHelper.killAppLauncherProcess(WindowsHelper.java:240)
at Win8301247Test.test(Win8301247Test.java:74)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$0(TKit.java:144)
at jdk.jpackage.test.TKit.lambda$runTests$1(TKit.java:129)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1716)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
at jdk.jpackage.test.TKit.lambda$runTests$0(TKit.java:126)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:112)
at jdk.jpackage.test.TKit.runTests(TKit.java:125)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:112)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
java.lang.RuntimeException: 1 FAILED TEST
at jdk.jpackage.test.Main.reportSummary(Main.java:130)
at jdk.jpackage.test.Main.runTests(Main.java:90)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:112)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
In Japanese environment, "No Instance (s) Available.".equals(output.getFirst().trim()) returns false because message is output in Japanese. This causes ArrayIndexOutOfBoundsException in subsequent line.
OS: windows

-----
Title: [JDK-8344326] Move jpackage tests from "jdk.jpackage.tests" package to the default package
Priority: P4
Type: Enhancement
Component: tools
Description: Most jpackage tests are in the default package. Some are in the "jdk.jpackage.tests" package for no specific reason. All jpackage tests should be in the same (the default) package.
The positive side effect of this change is shortening jtreg directory names from "jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java" to "jtreg_open_test_jdk_tools_jpackage_share_BasicTest_java". This will reduce the risk of lengths of jtreg paths exceeding the limit of 260 chars on Windows.
OS: generic

-----
Title: [JDK-8344581] [TESTBUG] java/awt/Robot/ScreenCaptureRobotTest.java failing on macOS
Priority: P4
Type: Bug
Component: client-libs
Description: The newly integrated test java/awt/Robot/ScreenCaptureRobotTest.java is already failing on macOS - this on a macOS 14.7.1 M1 mac Mini with HDMI
Captured pixel (fffefe00) at (164, 48) is not equal to real pixel (ffffff00)
System.err
java.lang.RuntimeException: FAIL : Captured Image is different from the real image
at ScreenCaptureRobotTest.doTest(ScreenCaptureRobotTest.java:114)
at ScreenCaptureRobotTest.main(ScreenCaptureRobotTest.java:65)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)

-----
Title: [JDK-8344589] Update IANA Language Subtag Registry to Version 2024-11-19
Priority: P4
Type: Enhancement
Component: core-libs
Description: [TBF]
OS: generic

-----
Title: [JDK-8344646] The libjsig deprecation warning should go to stderr not stdout
Priority: P4
Type: Bug
Component: hotspot
Description: In JDK 16 we deprecated the old signal and sigset signal-chaining interfaces under JDK-8257572. The deprecation warning was written to stdout but all other warnings go to stderr. Having the warning be on stdout causes interference with application output so we should fix it.

-----
Title: [JDK-8345296] AArch64: VM crashes with SIGILL when prctl is disallowed
Priority: P3
Type: Bug
Component: hotspot
Description: We have caught this in some prod environments, where prctl is forbidden by the sandboxing mechanism. This fails the JVM, because we have the following code to check for SVE vector length:
int VM_Version::get_current_sve_vector_length() {
assert(VM_Version::supports_sve(), "should not call this");
return prctl(PR_SVE_GET_VL);
}
That code returns `-1` when `prctl` is disallowed, which JVM then blindly interprets as vector length:
if (UseSVE  0) {
_initial_sve_vector_length = get_current_sve_vector_length();
}
This incorrect vector length would then be fed into AArch64 assembler, eventually leading to emitting illegal instructions, and thus getting a SIGILL when executing that incorrectly generated code. With modern JDKs, this reliably happens on JVM startup.
Workaround: -XX:UseSVE=0

-----
Title: [JDK-8345368] java/io/File/createTempFile/SpecialTempFile.java fails on Windows Server 2025
Priority: P4
Type: Bug
Component: core-libs
Description: This test case fails during creation of files with OS reserved/forbidden file name eg : com7, LPT1.
It is the same issue like in JDK-8274122. I would suggest to add Windows Server 2025 to the check in the test.
It would be great if the detection would also work for future releases.
OS: windows

-----
Title: [JDK-8345370] Bump update version for OpenJDK: jdk-21.0.7
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Development of update 21.0.7 starts in repository jdk21u-dev on Wednesday December 4th, 2024. The first change should be to bump the version.
Release of 21.0.7 is planned for Tuesday April 15th, 2025.
For the date, see also https://wiki.openjdk.org/display/JDKUpdates/JDK%2021u or https://www.oracle.com/security-alerts/

-----
Title: [JDK-8345375] Improve debuggability of test/jdk/java/net/Socket/CloseAvailable.java
Priority: P4
Type: Sub-task
Component: core-libs
Description: The test/jdk/java/net/Socket/CloseAvailable.java has been failing intermittently, details of which have been noted in https://bugs.openjdk.org/browse/JDK-8269526. The test code can be improved to help identify the cause of these failures.

-----
Title: [JDK-8345414] Google CAInterop test failures
Priority: P3
Type: Bug
Component: security-libs
Description: Following 5 tests in CAInterop.java for Google root CAs fail OCSP verification
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#globalsigneccrootcar4
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootcar1
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootcar2
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootecccar3
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootecccar4
Error:
java.lang.RuntimeException: Failed to validate https://revoked.gtsr1.demo.pki.goog
at ValidatePathWithURL.validateDomain(ValidatePathWithURL.java:129)
The reason is that the URLs now return 404, these have been moved:
good.gtsr1.demo.pki.goog - good.gtsr1.demosite.pki.goog
revoked.gtsr1.demo.pki.goog - revoked.gtsr1.demosite.pki.goog
good.gtsr2.demo.pki.goog - good.gtsr2.demosite.pki.goog
revoked.gtsr2.demo.pki.goog - revoked.gtsr2.demosite.pki.goog
good.gtsr3.demo.pki.goog - good.gtsr3.demosite.pki.goog
revoked.gtsr3.demo.pki.goog - revoked.gtsr3.demosite.pki.goog
good.gtsr4.demo.pki.goog - good.gtsr4.demosite.pki.goog
revoked.gtsr4.demo.pki.goog - revoked.gtsr4.demosite.pki.goog

-----
Title: [JDK-8345468] test/jdk/javax/swing/JScrollBar/4865918/bug4865918.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JScrollBar/4865918/bug4865918.java fails in OCI system with reason
java.lang.Error: The scrollbar block increment is incorect
at bug4865918.main(bug4865918.java:68)
OS: linux

-----
Title: [JDK-8345569] [ubsan] adjustments to filemap.cpp and virtualspace.cpp for macOS aarch64
Priority: P3
Type: Bug
Component: hotspot
Description: Seems there is an undefined addition to a nullptr in filemap.cpp :
jdk/src/hotspot/share/cds/filemap.cpp:2215:47: runtime error: applying non-zero offset 34358689792 to null pointer
#0 0x107b70c78 in FileMapInfo::heap_region_requested_address() filemap.cpp:2215
#1 0x107b71960 in FileMapInfo::map_heap_region_impl() filemap.cpp:2260
#2 0x107b70e04 in FileMapInfo::map_or_load_heap_region() filemap.cpp:2081
#3 0x1082976ec in MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool) metaspaceShared.cpp:1344
#4 0x10829699c in MetaspaceShared::initialize_runtime_shared_and_meta_spaces() metaspaceShared.cpp:1098
#5 0x108289530 in Metaspace::global_initialize() metaspace.cpp:736
#6 0x108819da8 in universe_init() universe.cpp:887
#7 0x107d8b4ec in init_globals() init.cpp:133
#8 0x1087e43d8 in Threads::create_vm(JavaVMInitArgs*, bool*) threads.cpp:574
#9 0x107eca96c in JNI_CreateJavaVM jni.cpp:3681
#10 0x102e6e770 in JavaMain java.c:494
#11 0x102e7579c in ThreadJavaMain java_md_macosx.m:679
#12 0x19d38ef90 in _pthread_start+0x84 (libsystem_pthread.dylib:arm64e+0x6f90)
#13 0x19d389d30 in thread_start+0x4 (libsystem_pthread.dylib:arm64e+0x1d30)
coding in filemap.cpp is (and CompressedOops::base()   seems to return nullptr on this macOS aarch64 machine)
return /*runtime*/ CompressedOops::base() + r-mapping_offset();
This was seen in the OpenJDK build on macOS aarch64 when building with ubsan enabled.
OS: os_x

-----
Title: [JDK-8345614] Improve AnnotationFormatError message for duplicate annotation interfaces
Priority: P4
Type: Enhancement
Component: core-libs
Description: The AnnotationFormatError thrown for duplicate annotation interfaces does not indicate the problematic class in which this duplication is found, and prints the annotation content of one of the annotations.  This is confusing, and we can instead improve by printing the name of the erroneous class.

-----
Title: [JDK-8345676] [ubsan] ProcessImpl_md.c:561:40: runtime error: applying zero offset to null pointer on macOS aarch64
Priority: P4
Type: Bug
Component: core-libs
Description: When starting :tier1  jdk  jtreg tests with
/jtreg_latest/bin/jtreg
this error is show when running ubsanized binaries on macOS aarch64  (XCode 13.1 and 15.4 show this)
src/java.base/unix/native/libjava/ProcessImpl_md.c:561:40: runtime error: applying zero offset to null pointer
#0 0x102a6552c in startChild ProcessImpl_md.c:621
#1 0x102a64480 in Java_java_lang_ProcessImpl_forkAndExec ProcessImpl_md.c:721
#2 0x13f53c4fc  ()
#3 0x13f5387cc  ()
#4 0x13f53894c  ()
#5 0x13f5386dc  ()
#6 0x13f5386dc  ()
#7 0x13f5386dc  ()
#8 0x13f53894c  ()
#9 0x13f53894c  ()
#10 0x13f534110  ()
#11 0x107de60e0 in JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*) javaCalls.cpp:416
#12 0x107ebf778 in jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) jni.cpp:885
#13 0x107ec2778 in jni_CallStaticVoidMethod jni.cpp:1714
#14 0x102e86210 in invokeStaticMainWithArgs java.c:392
#15 0x102e884e8 in JavaMain java.c:640
#16 0x102e8d79c in ThreadJavaMain java_md_macosx.m:679
#17 0x19d38ef90 in _pthread_start+0x84 (libsystem_pthread.dylib:arm64e+0x6f90)
#18 0x19d389d30 in thread_start+0x4 (libsystem_pthread.dylib:arm64e+0x1d30)
Looks similar to
https://www.reddit.com/r/C_Programming/comments/133oxnc/null_0_is_ub_this_is_not_what_you_would_expect/?rdt=41590
and
https://trac.ffmpeg.org/changeset/9c0b3eddf4262f9dcea479091f1307444e614e88/ffmpeg
OS: os_x

-----
Title: [JDK-8345684] OperatingSystemMXBean.getSystemCpuLoad() throws NPE
Priority: P4
Type: Bug
Component: core-svc
Description: ADDITIONAL SYSTEM INFORMATION :
Linux
A DESCRIPTION OF THE PROBLEM :
Occassionally, calls to com.sun.management.OperatingSystemMXBean.getSystemCpuLoad() throw an NPE:
java.lang.NullPointerException: Cannot read the array length because the return value of "jdk.internal.platform.Metrics.getCpuSetCpus()" is null
at jdk.management/com.sun.management.internal.OperatingSystemImpl.isCpuSetSameAsHostCpuSet(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl$ContainerCpuTicks.getContainerCpuLoad(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl.getCpuLoad(Unknown Source)
at jdk.management/com.sun.management.OperatingSystemMXBean.getSystemCpuLoad(Unknown Source)
...
This appears to be caused by a TOCTOU (time of check, time of use) issue with a null check at https://github.com/openjdk/jdk/blob/16ef6e2a187181f49b7b2d601c660bbd25ab3845/src/jdk.management/unix/classes/com/sun/management/internal/OperatingSystemImpl.java#L277-L278.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
This issue is flaky and there is no clear reproducer. The exception has been observed running the build system Bazel in a container setup in CI (https://github.com/bazelbuild/bazel/issues/24519).
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Method does not throw any exceptions.
ACTUAL -
Method throws:
java.lang.NullPointerException: Cannot read the array length because the return value of "jdk.internal.platform.Metrics.getCpuSetCpus()" is null
at jdk.management/com.sun.management.internal.OperatingSystemImpl.isCpuSetSameAsHostCpuSet(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl$ContainerCpuTicks.getContainerCpuLoad(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl.getCpuLoad(Unknown Source)
at jdk.management/com.sun.management.OperatingSystemMXBean.getSystemCpuLoad(Unknown Source)
...
This appears to be
CUSTOMER SUBMITTED WORKAROUND :
Catching any NPEs thrown by the method.
FREQUENCY : occasionally
OS: linux

-----
Title: [JDK-8345750] Shenandoah: Test TestJcmdHeapDump.java#aggressive intermittent assert(gc_cause() == GCCause::_no_gc) failed: Over-writing cause
Priority: P3
Type: Bug
Component: hotspot
Description: Test gc/shenandoah/TestJcmdHeapDump.java#aggressive intermittent assert(gc_cause() == GCCause::_no_gc) failed: Over-writing cause on linux-aarch64 by fastdebud build.
The test log snippet:
STDOUT:
[2024-12-07T00:35:29.101488535Z] Gathering output for process 651326
[2024-12-07T00:35:29.518459263Z] Waiting for completion for process 651326
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:1516), pid=650235, tid=650303
#  assert(gc_cause() == GCCause::_no_gc) failed: Over-writing cause
#
# JRE version: OpenJDK Runtime Environment (25.0) (fastdebug build 25-internal-e0d63987)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 25-internal-e0d63987, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x163aee0]  ShenandoahHeap::on_cycle_start(GCCause::Cause, ShenandoahGeneration*)+0xfc
#
# Core dump will be written. Default location: /tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/gc/shenandoah/TestJcmdHeapDump_aggressive/core.650235
#
# An error report file with more information is saved as:
# /tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/gc/shenandoah/TestJcmdHeapDump_aggressive/hs_err_pid650235.log
[2024-12-07T00:35:29.842295115Z] Waiting for completion finished for process 651326
OS: linux

-----
Title: [JDK-8346055] javax/swing/text/StyledEditorKit/4506788/bug4506788.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/text/StyledEditorKit/4506788/bug4506788.java fails in OCI system
OS: linux

-----
Title: [JDK-8346108] [21u][BACKOUT] 8337994: [REDO] Native memory leak when not recording any events
Priority: P4
Type: Bug
Component: hotspot
Description: Backout the backport of 8337994 to 21u.
We see failures of test/jdk/jdk/jfr/jvm/TestChunkIntegrity.java with slowdebug and fastdebug builds.
The failure is well reproducible with the slowdebug build, but with faster binaries the test passes sometimes.
In our nightly CI with high load the fastdebug build fails reliably.
From the .jtr file of the testruns:
Veryfying chunk: disassembled/recording_00.jfr 0
Veryfying chunk: disassembled/recording_01.jfr 3338
Veryfying chunk: disassembled/recording_02.jfr 9083
One value null
Value A: {
type = N/A
name = "bootstrap"
}
Value B: null
Field classLoader doesn't match
Value A: {
type = N/A
name = "bootstrap"
}
Value B: null
Field type doesn't match
Value A: {
classLoader = null
name = "jdk/internal/loader/ClassLoaders$AppClassLoader"
package = {
name = "jdk/internal/loader"
module = {
name = "java.base"
version = "21.0.7-internal"
location = "jrt:/java.base"
classLoader = null
}
exported = true
}
modifiers = 10
hidden = false
}
Value B: {
classLoader = N/A
name = "jdk/internal/loader/ClassLoaders$AppClassLoader"
package = {
name = "jdk/internal/loader"
module = {
name = "java.base"
version = "21.0.7-internal"
location = "jrt:/java.base"
classLoader = N/A
}
exported = true
}
modifiers = 10
hidden = false
}
Field classLoader doesn't match
Value A: {
type = jdk.internal.loader.ClassLoaders$AppClassLoader (classLoader = bootstrap)
name = "app"
}
Value B: {
type = jdk.internal.loader.ClassLoaders$AppClassLoader (classLoader = null)
name = "app"
}
Field type doesn't match
Value A: {
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
name = "jdk/jfr/jvm/TestChunkIntegrity$ClassStressor"
package = {
name = "jdk/jfr/jvm"
module = {
name = N/A
version = N/A
location = N/A
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
}
exported = true
}
modifiers = 8
hidden = false
}
Value B: {
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
name = "jdk/jfr/jvm/TestChunkIntegrity$ClassStressor"
package = {
name = "jdk/jfr/jvm"
module = {
name = N/A
version = N/A
location = N/A
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
}
exported = true
}
modifiers = 8
hidden = false
}
Field method doesn't match
Value A: {
type = jdk.jfr.jvm.TestChunkIntegrity$ClassStressor (classLoader = app)
name = "stress"
descriptor = "()V"
modifiers = 4
hidden = false
}
Value B: {
type = jdk.jfr.jvm.TestChunkIntegrity$ClassStressor (classLoader = app)
name = "stress"
descriptor = "()V"
modifiers = 4
hidden = false
}
Array contents doesn't match
Field frames doesn't match
Value A: [Ljava.lang.Object;@16e87903
Value B: [Ljava.lang.Object;@466281af
Object A:
Clazz {
startTime = 01:26:04.779 (2024-12-12)
clazz = jdk.jfr.jvm.TestChunkIntegrity$MyClass (classLoader = JFR TestClassLoader)
eventThread = "Thread-1" (javaThreadId = 33)
stackTrace = [
jdk.jfr.jvm.TestChunkIntegrity$ClassStressor.stress() line: 272
jdk.jfr.jvm.TestChunkIntegrity$StressThread.run() line: 75
]
}
Object B:
Clazz {
startTime = 01:26:04.779 (2024-12-12)
clazz = jdk.jfr.jvm.TestChunkIntegrity$MyClass (classLoader = JFR TestClassLoader)
eventThread = "Thread-1" (javaThreadId = 33)
stackTrace = [
jdk.jfr.jvm.TestChunkIntegrity$ClassStressor.stress() line: 272
jdk.jfr.jvm.TestChunkIntegrity$StressThread.run() line: 75
]
}
----------System.err:(12/755)----------
java.lang.AssertionError: Events don't match. Event number 0
at jdk.jfr.jvm.TestChunkIntegrity.assertEventEquals(TestChunkIntegrity.java:174)
at jdk.jfr.jvm.TestChunkIntegrity.main(TestChunkIntegrity.java:131)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.AssertionError: Events don't match. Event number 0
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.AssertionError: Events don't match. Event number 0
OS: generic

-----
Title: [JDK-8346324] javax/swing/JScrollBar/4865918/bug4865918.java fails in CI
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JScrollBar/4865918/bug4865918.java fails in CI citing
----------System.err:(11/674)----------
java.lang.RuntimeException: The scrollbar block increment is incorrect
at bug4865918.main(bug4865918.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: linux

-----
Title: [JDK-8346587] Distrust TLS server certificates anchored by Camerfirma Root CAs
Priority: P3
Type: Enhancement
Component: security-libs
Description: TLS server certificates anchored by Camerfirma Root CAs are distrusted or distrusted after a specific date by Google [1], Mozilla [2], Apple [3], and Microsoft [4, 5].
This enhancement will implement similar restrictions in the JDK.
The restrictions will be enforced in the SunJSSE Provider of the Java Secure Socket Extension (JSSE) API. A TLS session will not be negotiated if the server's certificate chain is anchored by any of the Certificate Authorities in the table below and the certificate's notBefore date is after . An application will receive an Exception with a message indicating the trust anchor (root) is not trusted, ex:
"TLS Server certificate issued after  and anchored by a distrusted legacy Camerfirma root CA: CN=Chambers of Commerce Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU"
If necessary, you can work around the restrictions by removing "CAMERFIRMA_TLS" from the "jdk.security.caDistrustPolicies" security property.
The restrictions will be imposed on the following Camerfirma Root certificates (identified by Distinguished Name) included in the JDK:
1. CN=Chambers of Commerce Root, OU=http://www.chambersign.org, O=AC Camerfirma SA CIF A82743287, C=EU
2. CN=Chambers of Commerce Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU
3. CN=Global Chambersign Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU
[1] https://groups.google.com/g/mozilla.dev.security.policy/c/dSeD3dgnpzk/m/iAUwcFioAQAJ
[2] https://groups.google.com/g/mozilla.dev.security.policy/c/PnAAWnxyosM/m/cImb78jnBAAJ
[3] https://support.apple.com/en-us/121668
[4] https://learn.microsoft.com/en-us/security/trusted-root/2023/feb2023
[5] https://learn.microsoft.com/en-us/security/trusted-root/2024/feb2024

-----
Title: [JDK-8346671] java/nio/file/Files/probeContentType/Basic.java fails on Windows 2025
Priority: P3
Type: Bug
Component: core-libs
Description: While running the Baseline task for Windows2025 java/nio/file/Files/probeContentType/Basic.java fails
Failure trace:
----------System.err:(16/1178)----------
For extension bz2 we got content type: application/x-compressed; expected: [application/bz2, application/x-bzip2, application/x-bzip]
For extension rar we got content type: application/x-compressed; expected: [application/rar, application/vnd.rar, application/x-rar, application/x-rar-compressed]
For extension 7z we got content type: application/x-compressed; expected: [application/x-7z-compressed]
java.lang.RuntimeException: Test failed!
at Basic.main(Basic.java:209)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:834)
OS: windows

-----
Title: [JDK-8346713] [testsuite] NeverActAsServerClassMachine breaks TestPLABAdaptToMinTLABSize.java TestPinnedHumongousFragmentation.java TestPinnedObjectContents.java
Priority: P4
Type: Bug
Component: hotspot
Description: JTREG=JAVA_OPTIONS=-XX:+NeverActAsServerClassMachine
test/hotspot/jtreg/gc/TestPLABAdaptToMinTLABSize.java
java.lang.RuntimeException: Unexpected to get exit value of [0]
test/hotspot/jtreg/gc/g1/pinnedobjs/TestPinnedHumongousFragmentation.java
#  Internal Error (/home/azul/azul/openjdk-git/src/hotspot/share/prims/whitebox.cpp:2647), pid=1672170, tid=1672189
#  Error: ShouldNotReachHere()
test/hotspot/jtreg/gc/g1/pinnedobjs/TestPinnedObjectContents.java
#  Internal Error (/home/azul/azul/openjdk-git/src/hotspot/share/prims/whitebox.cpp:2647), pid=1672170, tid=1672189
#  Error: ShouldNotReachHere()
OS: linux

-----
Title: [JDK-8346828] javax/swing/JScrollBar/4865918/bug4865918.java still fails in CI
Priority: P4
Type: Bug
Component: client-libs
Description: https://bugs.openjdk.org/browse/JDK-8346324 was supposed to resolve failures of javax/swing/JScrollBar/4865918/bug4865918.java on Linux CI testing.
But it still occurs :
java.lang.RuntimeException: The scrollbar block increment is incorrect
at bug4865918.main(bug4865918.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
JavaTest Message: Test threw exception: java.lang.RuntimeException: The scrollbar block increment is incorrect
JavaTest Message: shutting down test

-----
Title: [JDK-8346847] [s390x] minimal build failure
Priority: P3
Type: Bug
Component: hotspot
Description: log:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp: In static member function ‘static void VM_Version::initialize()’:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp:328:7: error: ‘OptoScheduling’ was not declared in this scope
328 |   if (OptoScheduling) {
|       ^~~~~~~~~~~~~~
gmake[3]: *** [lib/CompileJvm.gmk:170: /home/amit/build/jdk/build/linux-s390x-minimal-fastdebug/hotspot/variant-minimal/libjvm/objs/vm_version_s390.o] Error
1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:245: hotspot-minimal-libs] Error 2
gmake[2]: *** Waiting for unfinished jobs....
ERROR: Build failed for target 'images' in configuration 'linux-s390x-minimal-fastdebug' (exit code 2)
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-minimal_libjvm_objs_vm_version_s390.o:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp: In static member function ‘static void VM_Version::initialize()’:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp:328:7: error: ‘OptoScheduling’ was not declared in this scope
328 |   if (OptoScheduling) {
|       ^~~~~~~~~~~~~~
* All command lines available in /home/amit/build/jdk/build/linux-s390x-minimal-fastdebug/make-support/failure-logs.
=== End of repeated output ===
No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.
make[1]: *** [/home/amit/build/jdk/make/Init.gmk:323: main] Error 2
make: *** [/home/amit/build/jdk/make/Init.gmk:189: images] Error 2
OS: linux

-----
Title: [JDK-8346880] [aix] java/lang/ProcessHandle/InfoTest.java still fails: "reported cputime less than expected"
Priority: P4
Type: Bug
Component: core-libs
Description: The test java/lang/ProcessHandle/InfoTest.java still fails sporadically on AIX. The test exclusion was removed through JDK-8211847 under the assumption the problem was gone. But it turned out that it was wrong.
We can see an exception like:
java.lang.AssertionError: reported cputime less than expected: PT0.2S, actual: Optional[PT0.021179882S]
at org.testng.Assert.fail(Assert.java:99)
at InfoTest.test1(InfoTest.java:110)
After a discussion with Roger Riggs and the team, we came to the following conclusion.
The problem is based on 2 independent causes; one fundamental and one AIX-specific.
The fundamental cause is as follows:
Modern hardware provides many hardware threads (up to several hundred) that enable the worker threads of the processes to be processed in real parallel. To ensure that such a worker thread does not take up a hardware thread resource for itself, it is rolled out by the OS after a few ms at the latest to make room for another worker thread, possibly from another process.
The OS continuously adds up all the times that each worker thread of a process is active as process cpu time.
It is easy to see that there is no correlation between the CPU time of a process and the real time(wall time).
If you have a system with many hardware threads and few worker threads, these are active almost all the time. If they are rolled out, they are immediately rolled back in due to a lack of competition. If a process has several worker threads, the CPU time will increase faster than the real time. In this case, cpu time  real time is to be expected, which is what the test wants.
However, if the same system is heavily loaded, i.e. there are a lot of worker threads competing on one hardware thread, each individual worker thread can only become active relatively rarely. Even if a process has several worker threads, the total CPU time will be less than the past real time. This is even more pronounced if the individual worker threads have to wait for each other via synchronization objects. Since this is the normal case, cpu time /psinfo file is evaluated to obtain the cpu time. The /proc directory is only present on AIX for portability reasons. The data in it is only updated at long intervals. For example, the cpu time is only updated every 1-2 seconds, which can cause the error.
The better solution here would be the getprocs64() API. Here the values ​​for the cpu time are updated by the OS kernel every few ms.
It may therefore be that the error no longer occurs after adjusting the AIX coding, but in principle the problem is not solved.
OS: aix

-----
Title: [JDK-8346881] [ubsan] logSelection.cpp:154:24  / logSelectionList.cpp:72:94 : runtime error: applying non-zero offset 1 to null pointer
Priority: P4
Type: Bug
Component: hotspot
Description: When running jtreg tests on macOS aarch64 with ubsanized binaries, the following error is reported :
jdk/src/hotspot/share/logging/logSelection.cpp:154:24: runtime error: applying non-zero offset 1 to null pointer
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
(XCode 13.1 was used)
This can be seen e.g. in these jdk jtreg tests :
jdk/internal/misc/CDS/ArchivedEnumTest.java
jdk/jfr/event/gc/collection/TestGCGarbageCollectionEvent.java
jdk/jfr/startupargs/TestDumpOnExit.java
There is another issue observed here  (also when running on macOS aarch64) , seems this happens in the for loop when incrementing comma_pos
" for (char *comma_pos = copy, *cur = copy; success && comma_pos != nullptr; cur = comma_pos + 1) { ..."
src/hotspot/share/logging/logSelectionList.cpp:72:94: runtime error: applying non-zero offset 1 to null pointer
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
OS: os_x

-----
Title: [JDK-8346887] DrawFocusRect() may cause an assertion failure
Priority: P4
Type: Bug
Component: client-libs
Description: With the fast debug configuration, the `api/java_awt/awt_focus_subsystem/event_delivery/index.html#EventDelivery2`	test is hanging when run on Windows with JDK 8 or 11. Although not explicit when running the test through the CLI, the cause is this (1) assertion failing. When running with the test harness GUI, we see a popup with the assertion failure (see attached). By ignoring the assertion (pressing “No”), the tests all pass.
Goal: determine why the assertion is failing and address the cause. Afterwards this test should no longer hang when run from the CLI.
Steps to reproduce
* Pull the relevant OpenJDK source (11 or 8)
* Install the necessary build dependencies
* Build with `--enable-debug`
* Pull jck.jar and unpack it
* Run the `api/java_awt/awt_focus_subsystem/event_delivery/index.html#EventDelivery2` test (either through CLI or test harness)
(1) https://github.com/openjdk/jdk11u-dev/blob/master/src/java.desktop/windows/native/libawt/windows/awt_Button.cpp#L246
OS: windows

-----
Title: [JDK-8346972] Test java/nio/channels/FileChannel/LoopingTruncate.java fails sometimes with IOException: There is not enough space on the disk
Priority: P4
Type: Bug
Component: core-libs
Description: On some of our machines the test java/nio/channels/FileChannel/LoopingTruncate.java sometimes fails with
java.io.IOException: There is not enough space on the disk
at java.base/sun.nio.ch.FileDispatcherImpl.write0(Native Method)
at java.base/sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:74)
at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:137)
at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:102)
at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:72)
at java.base/sun.nio.ch.FileChannelImpl.implWrite(FileChannelImpl.java:371)
at java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:351)
at LoopingTruncate.main(LoopingTruncate.java:56)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
Looks like the machines have only few disc space available and the test creates a very large file.
Should we maybe catch the IOException and then throw a SkippedException in case the  "large file creation" fails ?
(the real test later seems to be the truncate operation )
OS: generic

-----
Title: [JDK-8347038] [JMH] jdk.incubator.vector.SpiltReplicate fails NoClassDefFoundError
Priority: P4
Type: Bug
Component: core-libs
Description: 4 jmh tests fails:
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testInt
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testLong
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testDouble
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testFloat
Test output:
# Warmup Iteration   1:
java.lang.NoClassDefFoundError: jdk/incubator/vector/FloatVector
at org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.broadcastFloat(SpiltReplicate.java:70)
at org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testFloat(SpiltReplicate.java:112)
at org.openjdk.bench.jdk.incubator.vector.jmh_generated.SpiltReplicate_testFloat_jmhTest.testFloat_avgt_jmhStub(SpiltReplicate_testFloat_jmhTest.java:190)
at org.openjdk.bench.jdk.incubator.vector.jmh_generated.SpiltReplicate_testFloat_jmhTest.testFloat_AverageTime(SpiltReplicate_testFloat_jmhTest.java:153)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:545)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1095)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:619)
at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.ClassNotFoundException: jdk.incubator.vector.FloatVector
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
... 14 more
Test command:
make test TEST="micro:org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testFloat" MICRO="FORK=1;WARMUP_ITER=2"
Standalone test command:
java -Djmh.ignoreLock=true -Djava.library.path=/tmp/tone/run/jmh/jdk-repo/build/linux-aarch64-server-release/images/test/micro/native --add-opens=java.base/java.io=ALL-UNNAMED -jar /tmp/tone/run/jmh/jdk-repo/build/linux-aarch64-server-release/images/test/micro/benchmarks.jar -t 1 -f 1 -wi 2 org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testInt
Configure command:
bash configure --with-jobs=64 --prefix=/tmp/tone/run/jmh/jdk-repo/install-release --verbose --with-debug-level=release --enable-unlimited-crypto --with-vendor-name=yansendao --with-vendor-url=https://github.com/sendaoYan --with-vendor-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-vendor-vm-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-jvm-variants=server --with-boot-jdk=/tmp/tone/run/jmh/binary-download/jdk-repo-binary --with-gtest=/tmp/tone/run/jmh/googletest-v1.14.x --with-jtreg=/tmp/tone/run/jmh/jtreg --with-jmh=build/jmh/jars    --with-version-opt=07c9f713 --with-zlib=system --enable-ccache
OS: generic

-----
Title: [JDK-8347129] cpuset cgroups controller is required for no good reason
Priority: P3
Type: Bug
Component: hotspot
Description: The OpenJDK hotspot container detection code assumes the following cgroup controllers as required: cpu, cpuset, cpuacct, memory. If one of those controllers are not available, or not enabled at the kernel level, the container detection code fails and falls back to host-only resource limits.
This is problematic on some systems, like Fedora 41, which don't have the cpuset controller enabled by default any more. File /proc/cgroups file doesn't list the controller as enabled. Example:
$ cat /proc/cgroups
#subsys_name	hierarchy	num_cgroups	enabled
cpu	0	357	1
cpuacct	0	357	1
blkio	0	357	1
memory	0	357	1
devices	0	357	1
freezer	0	357	1
net_cls	0	357	1
perf_event	0	357	1
net_prio	0	357	1
hugetlb	0	357	1
pids	0	357	1
rdma	0	357	1
misc	0	357	1
I.e. there is no cpuset controller. This results in this output when container detection tracing is turned on:
$ ./bin/java -Xlog:os+container=trace --version
[0.000s][trace][os,container] OSContainer::init: Initializing Container Support
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.000s][debug][os,container] controller cpu is not enabled
[                           ]
[0.000s][debug][os,container] One or more required controllers disabled at kernel level.
openjdk 25-internal 2025-09-16
OpenJDK Runtime Environment (build 25-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 25-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
There is a secondary bug which incorrectly maps the 'cpuset' controller to the 'cpu' one in the log output. Fixing that bug results in:
$ ./bin/java -Xlog:os+container=trace --version
[0.001s][trace][os,container] OSContainer::init: Initializing Container Support
[0.001s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] controller cpuset is not enabled
[                           ]
[0.001s][debug][os,container] One or more required controllers disabled at kernel level.
openjdk 25-internal 2025-09-16
OpenJDK Runtime Environment (build 25-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 25-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
With all that said, the cpuset controller isn't really that essential. os::Linux::active_processor_count() uses sched_getaffinity() which in-turn figures out the cpuset setting. Thus, it's only reporting code that actually uses the cpuset controller interface files. This suggests that this controller can be made optional and improve automatic detection code on more systems.
OS: linux

-----
Title: [JDK-8347171] (dc) java/nio/channels/DatagramChannel/InterruptibleOrNot.java fails with virtual thread factory
Priority: P4
Type: Bug
Component: core-libs
Description: Test java/nio/channels/DatagramChannel/InterruptibleOrNot.java	fails with virtual thread factory because of wrong exception
the log
org.opentest4j.AssertionFailedError: Unexpected exception type thrown, expected:  but was:
at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:67)
at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)
at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3115)
at InterruptibleOrNot.testInterruptBeforeUninterruptibleReceive(InterruptibleOrNot.java:109)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
Caused by: java.io.InterruptedIOException
at java.base/sun.nio.ch.DatagramChannelImpl.park(DatagramChannelImpl.java:482)
at java.base/sun.nio.ch.SelChImpl.park(SelChImpl.java:116)
at java.base/sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:571)
at InterruptibleOrNot.lambda$testInterruptBeforeUninterruptibleReceive$1(InterruptibleOrNot.java:109)
at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)
... 6 more
FAILED     InterruptibleOrNot::testInterruptBeforeUninterruptibleReceive 'testInterruptBeforeUninterruptibleReceive()'
STARTED    InterruptibleOrNot::testInterruptDuringUninterruptibleReceive 'testInterruptDuringUninterruptibleReceive()'
SUCCESSFUL InterruptibleOrNot::testInterruptDuringUninterruptibleReceive 'testInterruptDuringUninterruptibleReceive()'
STARTED    InterruptibleOrNot::testInterruptBeforeUninterruptibleSend 'testInterruptBeforeUninterruptibleSend()'
SUCCESSFUL InterruptibleOrNot::testInterruptBeforeUninterruptibleSend 'testInterruptBeforeUninterruptibleSend()'
STARTED    InterruptibleOrNot::testInterruptDuringInterruptibleReceive 'testInterruptDuringInterruptibleReceive()'
SUCCESSFUL InterruptibleOrNot::testInterruptDuringInterruptibleReceive 'testInterruptDuringInterruptibleReceive()'
JavaTest Message: JUnit Platform Failure(s): 1
[ JUnit Containers: found 4, started 4, succeeded 4, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 6, started 6, succeeded 5, failed 1, aborted 0, skipped 0]
java.lang.Exception: JUnit test failure
at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:149)
at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:466)
JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

-----
Title: [JDK-8347256] Epsilon: Demote heap size and AlwaysPreTouch warnings to info level
Priority: P4
Type: Enhancement
Component: hotspot
Description: For Epsilon, we have added log_warning messages when heap size and AlwaysPreTouch configuration is not great with JDK-8232051. Unfortunately, this means we print this warning all the time, even though users might not actually run into problems there, or when users tried to implement these suggestions and still decided to run against them.
I think we want to emit the suggestions in the normal GC log instead, so they are not printed all the time.

-----
Title: [JDK-8347267] [macOS]: UnixOperatingSystem.c:67:40: runtime error: division by zero
Priority: P4
Type: Bug
Component: core-svc
Description: When running ubsan-enabled binaries on macOS aarch64, in test
javax/management/MBeanServer/OldMBeanServerTest.java
the following division by zero is shown  :
src/jdk.management/macosx/native/libmanagement_ext/UnixOperatingSystem.c:67:40: runtime error: division by zero
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
This seems to come from the division by a total_delta (of ticks) == 0   :
jlong used_delta  = used - last_used;
jlong total_delta = total - last_total;
jdouble cpu = (jdouble) used_delta / total_delta;
OS: os_x

-----
Title: [JDK-8347268] [ubsan] logOutput.cpp:357:21: runtime error: applying non-zero offset 1 to null pointer
Priority: P4
Type: Bug
Component: hotspot
Description: When running ubsan-enabled binaries on macOS aarch64, the following issue is reported in the test
jdk/jfr/event/gc/detailed/TestZAllocationStallEvent.java
src/hotspot/share/logging/logOutput.cpp:357:21: runtime error: applying non-zero offset 1 to null pointer
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
OS: os_x

-----
Title: [JDK-8347424] Fix and rewrite sun/security/x509/DNSName/LeadingPeriod.java test
Priority: P4
Type: Bug
Component: security-libs
Description: Noticed this when backporting JDK-8311546. The test is actually broken, as it does not include CA cert in the certification path. So it passes even without the fix, and thus the test does not actually tests what the fix is supposed to fix.
The test is also quite hairy and can be drastically simplified.
I think JDK-8320372 actually broke it: https://github.com/openjdk/jdk/commit/a2c0fa6f9ccefd3d1b088c51d0b8170cfb59a885#diff-518af459086b0cd1aef2498da82abf7da93391c030662e55312860ac9ce80542L55

-----
Title: [JDK-8347427] JTabbedPane/8134116/Bug8134116.java has no license header
Priority: P2
Type: Bug
Component: client-libs
Description: The test/jdk/javax/swing/JTabbedPane/8134116/Bug8134116.java file has no license header.

-----
Title: [JDK-8347576] Error output in libjsound has non matching format strings
Priority: P4
Type: Bug
Component: client-libs
Description: When enabling the jsound  ERROR and TRACE reporting (see src/java.desktop/share/native/libjsound/Configure.h  https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/native/libjsound/Configure.h#L32 ), we run into these build warnings as errors because at some places the format specifiers do not match the number types :
/jdk/src/java.desktop/share/native/libjsound/MidiInDevice.c: In function 'Java_com_sun_media_sound_MidiInDevice_nGetTimeStamp':
/jdk/src/java.desktop/share/native/libjsound/Utilities.h:38:65: error: format '%lld' expects argument of type 'long long int', but argument 3 has type 'jlong' {aka 'long int'} [-Werror=format=]
38 | #define ERROR1(string, p1)                    { fprintf(stdout, (string), (p1)); fflush(stdout); }
|                                                                 ^~~~~~~~  ~~~~
|                                                                           |
|                                                                           jlong {aka long int}
/jdk/src/java.desktop/share/native/libjsound/MidiInDevice.c:140:9: note: in expansion of macro 'ERROR1'
140 |         ERROR1("Java_com_sun_media_sound_MidiInDevice_nGetTimeStamp: MIDI_IN_GetTimeStamp returned %lld\n", ret);
|         ^~~~~~
cc1: all warnings being treated as errors
* For target support_native_java.desktop_libjsound_MidiOutDevice.o:
In file included from /jdk/src/java.desktop/share/native/libjsound/MidiOutDevice.c:40:
/jdk/src/java.desktop/share/native/libjsound/MidiOutDevice.c: In function 'Java_com_sun_media_sound_MidiOutDevice_nGetTimeStamp':
/jdk/src/java.desktop/share/native/libjsound/Utilities.h:38:65: error: format '%lld' expects argument of type 'long long int', but argument 3 has type 'jlong' {aka 'long int'} [-Werror=format=]
38 | #define ERROR1(string, p1)                    { fprintf(stdout, (string), (p1)); fflush(stdout); }
|                                                                 ^~~~~~~~  ~~~~
|                                                                           |
|                                                                           jlong {aka long int}
/jdk/src/java.desktop/share/native/libjsound/MidiOutDevice.c:97:9: note: in expansion of macro 'ERROR1'
97 |         ERROR1("Java_com_sun_media_sound_MidiOutDevice_nGetTimeStamp: MIDI_IN_GetTimeStamp returned %lld\n", ret);
|         ^~~~~~
cc1: all warnings being treated as errors
OS: generic

-----
Title: [JDK-8347740] java/io/File/createTempFile/SpecialTempFile.java failing
Priority: P3
Type: Bug
Component: core-libs
Description: java/io/File/createTempFile/SpecialTempFile.java seems to be failing on Windows after JDK-8345368. Example failure:
Windows 11 10.0
exceptionExpected 1: true
In test ReservedName, creating temp file with prefix, LPT1.package.zip, suffix, .temp, in dir, .\\9114136656605212322
----------System.err:(11/591)----------
java.lang.RuntimeException: IOException is expected
at SpecialTempFile.test(SpecialTempFile.java:82)
at SpecialTempFile.main(SpecialTempFile.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1447)

-----
Title: [JDK-8347911] Limit the length of inflated text chunks
Priority: P3
Type: Bug
Component: client-libs
Description: In PNG we have non-essential compressed text chunks zTXt and iTXt, which can consume considerable amount of memory when they contain large amount of compressed data.
Since these are non-essential chunks we should restrict the amount of data we want to inflate.
OS: generic

-----
Title: [JDK-8347965] (tz) Update Timezone Data to 2025a
Priority: P3
Type: Enhancement
Component: core-libs
Description: Briefly:
Paraguay adopts permanent -03 starting spring 2024.
Improve pre-1991 data for the Philippines.
Etc/Unknown is now reserved.
Changes to future timestamps
Paraguay will stop changing its clocks after the spring-forward
transition on 2024-10-06, so it is now permanently at -03.
(Thanks to Heitor David Pinto and Even Scharning.)
This affects timestamps starting 2025-03-22, as well as the
obsolescent tm_isdst flags starting 2024-10-15.
Changes to past timestamps
Correct timestamps for the Philippines before 1900, and from 1937
through 1990.  (Thanks to P Chan for the heads-up and citations.)
This includes adjusting local mean time before 1899; fixing
transitions in September 1899, January 1937, and June 1954; adding
transitions in December 1941, November 1945, March and September
1977, and May and July 1990; and removing incorrect transitions in
March and September 1978.
Changes to data
Add zone1970.tab lines for the Concordia and Eyre Bird Observatory
research stations.  (Thanks to Derick Rethans and Jule Dabars.)
Changes to code
strftime %s now generates the correct numeric string even when the
represented number does not fit into time_t.  This is better than
generating the numeric equivalent of (time_t) -1, as strftime did
in TZDB releases 96a (when %s was introduced) through 2020a and in
releases 2022b through 2024b.  It is also better than failing and
returning 0, as strftime did in releases 2020b through 2022a.
strftime now outputs an invalid conversion specifier as-is,
instead of eliding the leading '%', which confused debugging.
An invalid TZ now generates the time zone abbreviation "-00", not
"UTC", to help the user see that an error has occurred.  (Thanks
to Arthur David Olson for suggesting a "wrong result".)
mktime and timeoff no longer incorrectly fail merely because a
struct tm component near INT_MIN or INT_MAX overflows when a
lower-order component carries into it.
TZNAME_MAXIMUM, the maximum number of bytes in a proleptic TZ
string's time zone abbreviation, now defaults to 254 not 255.
This helps reduce the size of internal state from 25480 to 21384
on common platforms.  This change should not be a problem, as
nobody uses such long "abbreviations" and the longstanding tzcode
maximum was 16 until release 2023a.  For those who prefer no
arbitrary limits, you can now specify TZNAME_MAXIMUM values up to
PTRDIFF_MAX, a limit forced by C anyway; formerly tzcode silently
misbehaved unless TZNAME_MAXIMUM was less than INT_MAX.
tzset and related functions no longer leak a file descriptor if
another thread forks or execs at about the same time and if the
platform has O_CLOFORK and O_CLOEXEC respectively.  Also, the
functions no longer let a TZif file become a controlling terminal.
'zdump -' now reads TZif data from /dev/stdin.
(From a question by Arthur David Olson.)
Changes to documentation
The name Etc/Unknown is now reserved: it will not be used by TZDB.
This is for compatibility with CLDR, which uses the string
"Etc/Unknown" for an unknown or invalid timezone.  (Thanks to
Justin Grant, Mark Davis, and Guy Harris.)
Cite Internet RFC 9636, which obsoletes RFC 8536 for TZif format.
Here are links to the release files:
https://www.iana.org/time-zones/repository/releases/tzcode2025a.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdata2025a.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdb-2025a.tar.lz
The following convenience links are also available, although they may
point to the previous release until the relevant caches are refreshed:
https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz
Links are also available via plain HTTP, and via FTP from
ftp://ftp.iana.org/tz/releases with the same basenames as above.
Each release file has a GPG signature, which can be retrieved by
appending ".asc" to the above URLs. Copies of these signatures are
appended to this message.
This release corresponds to commit
a8e2fcd87bc5f83fec0a76652095e8d7881b0763 dated 2025-01-15 10:47:24 -0800
and tagged '2025a' in the development GitHub repository at
https://github.com/eggert/tz.

-----
Title: [JDK-8348562] ZGC: segmentation fault due to missing node type check in barrier elision analysis
Priority: P2
Type: Bug
Component: hotspot
Description: Running jdk/jfr/api/consumer/streaming/TestFilledChunks.java with ZGC on PPC64 leads to a crash due to a missing node type check in the barrier elision analysis:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00001000027ee234, pid=103220, tid=103252
#
# JRE version: OpenJDK Runtime Environment (25.0) (fastdebug build 25-internal-2025-01-23-1552158.rocastan.open)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 25-internal-2025-01-23-1552158.rocastan.open, mixed mode, tiered, compressed class ptrs, z gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0x1bde234]  get_base_and_offset(MachNode const*, long&)+0x354
#
Stack trace (provided by [~mdoerr]):
V  [libjvm.so+0xa1a3f0]  TypePtr::offset() const+0x14  (type.hpp:994)
V  [libjvm.so+0x1d35288]  get_base_and_offset(MachNode const*, long&)+0xb0  (zBarrierSetC2.cpp:557)
V  [libjvm.so+0x1d35818]  is_allocation(Node const*)+0x108  (zBarrierSetC2.cpp:629)
V  [libjvm.so+0x1d36230]  ZBarrierSetC2::analyze_dominating_barriers() const+0x19c  (zBarrierSetC2.cpp:759)
V  [libjvm.so+0x1d33ea0]  ZBarrierSetC2::late_barrier_analysis() const+0x54  (zBarrierSetC2.cpp:307)
V  [libjvm.so+0x167d36c]  PhaseOutput::perform_mach_node_analysis()+0x60  (output.cpp:258)
V  [libjvm.so+0x167dc50]  PhaseOutput::Output()+0x890  (output.cpp:346)
V  [libjvm.so+0xa0a57c]  Compile::Code_Gen()+0x4e4  (compile.cpp:3030)
V  [libjvm.so+0x9fd51c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x179c  (compile.cpp:884)
V  [libjvm.so+0x80a220]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f0  (c2compiler.cpp:141)
The crash has only been observed on PPC64, but there does not seem to be any fundamental reason (other than different addressing mode matching rules) that could prevent it from happening on other platforms.
Thanks to [~mdoerr] for the original bug report, see more context here: https://github.com/openjdk/jdk/pull/23235.

-----
Title: [JDK-8348625] [21u, 17u] Revert JDK-8185862 to restore old java.awt.headless behavior on Windows
Priority: P2
Type: Bug
Component: client-libs
Description: JDK-8185862 changed the detection of headless mode on Windows by enumerating displays and turning on headless mode when only virtual devices exist. This causes problems with several use cases, mostly for automatic testing, e.g. JDK-8336862, JDK-8340992, JDK-8341294.
While the new detection mode seems correct from its idea, we should revert the change for the current LTS update releases and try to focus on fixing issues with explicitly using -Djava.awt.headless=true in the head release.
OS: windows

-----
Title: [JDK-8185862] AWT Assertion Failure in ::GetDIBits(hBMDC, hBM, 0, 1, 0, gpBitmapInfo, 0) 'awt_Win32GraphicsDevice.cpp', at line 185
Priority: P3
Type: Bug
Component: client-libs
Description: The test failed on Windows with following assertion:
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] AWT Assertion Failure
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] ::GetDIBits(hBMDC, hBM, 0, 1, 0, gpBitmapInfo, 0)
[glue.process.err] [stress.process.err] File 'awt_Win32GraphicsDevice.cpp', at line 185
[glue.process.err] [stress.process.err] GetLastError() is 57 : The parameter is incorrect.
[glue.process.err] [stress.process.err]
[glue.process.err] [stress.process.err] Do you want to break into the debugger?
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] AWT Assertion Failure
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] ::DeleteObject(hBM)
[glue.process.err] [stress.process.err] File 'awt_Win32GraphicsDevice.cpp', at line 298
[glue.process.err] [stress.process.err] GetLastError() is 57 : The parameter is incorrect.
[glue.process.err] [stress.process.err]
[glue.process.err] [stress.process.err] Do you want to break into the debugger?
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] AWT Assertion Failure
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] ::DeleteDC(hBMDC)
[glue.process.err] [stress.process.err] File 'awt_Win32GraphicsDevice.cpp', at line 299
[glue.process.err] [stress.process.err] GetLastError() is 6 : The handle is invalid.
[glue.process.err] [stress.process.err]
OS: windows

-----
Title: [JDK-8348675] TrayIcon tests fail in Ubuntu 24.10 Wayland
Priority: P3
Type: Bug
Component: client-libs
Description: Test name(s):
java/awt/TrayIcon/ActionCommand/ActionCommand.java
java/awt/TrayIcon/TrayIconMouseTest/TrayIconMouseTest.java
java/awt/TrayIcon/TrayIconPopup/TrayIconPopupClickTest.java
java/awt/TrayIcon/TrayIconPopup/TrayIconPopupTest.java
Product(s) tested: JDK 25, jdk-24, 21.0.7, 17.0.15
OS/architecture: Ubuntu 24.10 Wayland
Reproducible: Always
Is it a platform specific issue: Yes.
Test is failing on ubuntu 24.10 wayland
java/awt/TrayIcon/ActionCommand/ActionCommand.java error log
java.lang.RuntimeException: FAIL: ActionEvent not triggered when TrayIcon is double clicked
at ActionCommand.doTest(ActionCommand.java:129)
at ActionCommand.main(ActionCommand.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.RuntimeException: FAIL: ActionEvent not triggered when TrayIcon is double clicked
OS: linux_ubuntu

-----
Title: [JDK-8349039] Adjust exception No type named <ThreadType> in database
Priority: P4
Type: Enhancement
Component: hotspot
Description: We should change the exception message from
Caused by: java.lang.RuntimeException: No type named "DeoptimizeObjectsALotThread" in database
to
Caused by: java.lang.RuntimeException: No type named "DeoptimizeObjectsALotThread" in hotspot type database
error was  (from JDK-8348800) :
serviceability/sa/CDSJMapClstats.java
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.createJavaThreadWrapper(Threads.java:196)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.getJavaThreadAt(Threads.java:178)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.collectLiveRegions(ObjectHeap.java:320)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.iterateSubtypes(ObjectHeap.java:216)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.iterateObjectsOfKlass(ObjectHeap.java:116)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.iterateObjectsOfKlass(ObjectHeap.java:128)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.ClassLoaderStats.printClassLoaderStatistics(ClassLoaderStats.java:95)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.ClassLoaderStats.run(ClassLoaderStats.java:78)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.run(JMap.java:121)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.main(JMap.java:202)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJMAP(SALauncher.java:344)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:507)
Caused by: java.lang.RuntimeException: No type named "DeoptimizeObjectsALotThread" in database
at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupType(BasicTypeDataBase.java:86)
at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotTypeDataBase.lookupType(HotSpotTypeDataBase.java:137)
at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupType(BasicTypeDataBase.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VirtualConstructor.instantiateWrapperFor(VirtualConstructor.java:75)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.createJavaThreadWrapper(Threads.java:192)
OS: generic

-----
Title: [JDK-8349603] [21u, 17u, 11u] Update GHA JDKs after Jan/25 updates
Priority: P4
Type: Bug
Component: infrastructure
Description: Time to bump GHA JDKs.

-----
Title: [JDK-8349729] [21u] AIX jtreg tests fail to compile with qvisibility=hidden
Priority: P3
Type: Bug
Component: infrastructure
Description: jdk-21.0.7+1 on AIX is failing to compile with error:
14:56:45  ld: 0711-407 ERROR: Symbol .std::__1::basic_string, std::__1::allocator  std::__1::operator+, std::__1::allocator (char const*, std::__1::basic_string, std::__1::allocator  const&)
14:56:45  	Visibility is not allowed on a reference to an imported symbol.
14:56:45  gmake[3]: *** [test/JtregNativeJdk.gmk:148: /home/jenkins/workspace/build-scripts/jobs/jdk21u/jdk21u-aix-ppc64-temurin/workspace/build/src/build/aix-ppc64-server-release/support/test/jdk/jtreg/native/bin/NullCallerTest] Error 8
Ref build log: https://ci.adoptium.net/job/build-scripts/job/jobs/job/jdk21u/job/jdk21u-aix-ppc64-temurin/88/consoleFull
I suspect recent change: JDK-8327460
may be the cause? Not sure AIX jtreg test code links with -qvisibility=hidden
possibly??
OS: aix

-----
Title: [JDK-8352097] (tz) zone.tab update missed in 2025a backport
Priority: P4
Type: Bug
Component: core-libs
Description: The zone.tab file was removed by JDK-8166983 in trunk and so was not updated as part of the original version of JDK-8347965.
While the 24u backport did update zone.tab, the 21u backport - and subsequent backports to 17u, 11u & 8u based on this - did not,due to being based on the trunk backport.
We should apply the zone.tab update to the 2025a updates in the upcoming April releases. Long-term, we should look at the possibility of backporting JDK-8166983 as tzdata is frequently updated and these files only in older JDK releases are likely to be missed.
OS: generic

-----
Title: [JDK-8353904] [21u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 21.0.7
Priority: P4
Type: Bug
Component: infrastructure
Description: As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.
