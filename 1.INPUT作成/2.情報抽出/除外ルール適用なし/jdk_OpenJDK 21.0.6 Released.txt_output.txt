Title: [JDK-6942632] Hotspot should be able to use more than 64 logical processors on Windows
Priority: P3
Type: Enhancement
Component: hotspot
Description: Windows 7 and Windows Server 2008 R2 implement "processor groups" that, with some complication, allow a single process to use more than 64 hardware threads.  This mechanism is distinct from the NUMA mode facility, which focuses on allocating threads to NUMA domains, e.g., a single multi-core socket.  Without support for processor groups, a single jvm instance can't use more than 64 hw threads.
See
http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx
and
http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx
and, for NUMA
http://msdn.microsoft.com/en-us/library/aa363804(v=VS.85).aspx
Linxux and Solaris have no such limitation.
OS: windows_7

-----
Title: [JDK-8028127] Regtest java/security/Security/SynchronizedAccess.java is incorrect
Priority: P3
Type: Bug
Component: security-libs
Description: We're creating a bunch of threads which create several local providers which are added to the security framework.  However, those providers we're adding/removing are potentially lost when the following is called in the AccessorThread at the end of the loop:
provs = Security.getProviders();
This will start adding/removing some of the system providers, in addition to the local providers.  I don't understand this, and think this was not the intent.
Also, with the rewrite of the delayed provider selection and without an implementation of sigimpl, I don't think we'll ever be getting to the removeProvider code, it's always going to be failing the getInstance call.
In addition, this test is failing on windows-i586 with the server compiler only.  See 6915983.  Could be -sameVM issue.
windows_i586-product-c2-jdk_security1
TEST: java/security/Security/SynchronizedAccess.java
JDK under test: (C:\temp\jprt\T1\T\182757~1.SS1\TESTPR~1\WINDOW~1.0-P)
java version "1.7.0-2010-02-10-182757.ss145989.tl-pit-jtreg"
Java(TM) SE Runtime Environment (build 1.7.0-2010-02-10-182757.ss145989.tl-pit-j
treg-administrator_2010_02_10_11_28-b00)
Java HotSpot(TM) Server VM (build 17.0-b08, mixed mode)
ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.468 seconds
messages:
command: build SynchronizedAccess
reason: Named class compiled on demand
elapsed time (seconds): 0.468
ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.437 seconds
messages:
command: compile C:\temp\jprt\T1\T\182757.ss145989\source\test\java\security\Sec
urity\SynchronizedAccess.java
reason: .class file out of date or does not exist
elapsed time (seconds): 0.437
ACTION: main -- Error. Error while cleaning up threads after test
REASON: Assumed action based on file name: run main SynchronizedAccess
TIME:   124.844 seconds
messages:
command: main SynchronizedAccess
reason: Assumed action based on file name: run main SynchronizedAccess
elapsed time (seconds): 124.844
STDOUT:
STDERR:
TEST RESULT: Error. Error while cleaning up threads after test
OS: generic

-----
Title: [JDK-8195675] Call to insertText with single character from custom Input Method ignored
Priority: P4
Type: Bug
Component: client-libs
Description: FULL PRODUCT VERSION :
I don't have java installed to run at the command line. OmegaT reports that it is running on Java 1.8.0_144 (64-bit). jEdit reports that is using Java 1.8.0_151 (which I downloaded directly, independent of jEdit).
ADDITIONAL OS VERSION INFORMATION :
macOS 10.12.6 (16G1114)
EXTRA RELEVANT SYSTEM CONFIGURATION :
I am reporting behavior observed in both OmegaT and jEdit (see version info).
Here is the original bug report filed with OmegaT: https://sourceforge.net/p/omegat/bugs/889/
A DESCRIPTION OF THE PROBLEM :
Using the Keyman (Keyman.com) ISIS-Devanagari keyboard, I expected to be able to type the letter "j" and see ज, but instead I just got a plain "j". Typing a subsequent "i" does insert the correct two-character sequence (जि), but it fails to delete and replace the errant "j" character. I have written a small test input method to reproduce this with a minimum of code, and it appears that the problem is calling insertText: and passing a single character as the string to insert). If I pass two ज characters or a space followed by a ज, it outputs just fine. I also tested this with a simple Roman script letter using a test case where typing the letter "l" was supposed to produce a "j" and that also failed. If you don't want to download and use Keyman to reproduce this, I would be happy to provide my simple test IM.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
To reproduce using Keyman:
1) Download and install Keyman for macOS from https://keyman.com/macos/
2) Follow instructions to install Keyman and set it up as an Input Method: https://help.keyman.com/products/mac/1.0/docs/start_download-install_keyman.php?_ga=2.174123428.780044351.1516121660-886959843.1497845253
3) Follow instructions here to download and install a keyboard: https://help.keyman.com/products/mac/1.0/docs/start_download-install_keyboard.php. Download and select the ISIS-Devanagari keyboard as the keyboard for Keyman to use.
In OmegaT, jEdit, or any application that uses the text editor in JDK, type a "j".
If necessary, I can provide a very simple test IM that will illustrate the problem without requiring the above steps, but since Keyman is already packaged up nicely for easy installation, this is probably the easiest way to reproduce.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
You should get a ज character. (Furthermore, typing a subsequent "i" should replace the ज with जि. However, this could require some more work on our end because many "legacy" apps that don't use Apple's editing controls require a special mode in Keyman to correctly handle character replacements.) You can observe the correct behavior of the keyboard in any standard Apple app, such as Notes or Messages.
ACTUAL -
Outputs a plain "j" character.
REPRODUCIBILITY :
This bug can be reproduced always.
CUSTOMER SUBMITTED WORKAROUND :
The only workaround I know of would be to type the text in another application and paste it into the application that uses the JDK editor.
Note that this deficiency is not directly hampering the development of Keyman (which has been chosen as the software to serve as the official reference implementation for the LDML standard). It does, however, affect all of any software whose editing is based on this JDK editing control. Although OmegaT declined to follow up on this directly, they do have affected users. I don't know of any existing users complaining about jEdit or any other software that uses this control, but there may well be some.
OS: os_x

-----
Title: [JDK-8207908] JMXStatusTest.java fails assertion intermittently
Priority: P3
Type: Bug
Component: core-svc
Description: The following test failed on Solaris X64 in release and
slowdebug configs using jdk11+19 bits:
sun/management/jmxremote/startstop/JMXStatusTest.java
The test did not fail in the fastdebug config at all and did not
fail in all 'release' or 'slowdebug' runs so I'm tagging this bug
as intermittent.
Here's a snippet from the stdout part of one of the 'release'
bits failures:
test JMXStatusTest.testAgentDefault(): failure
java.lang.AssertionError:  expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:94)
at org.testng.Assert.failNotEquals(Assert.java:496)
at org.testng.Assert.assertTrue(Assert.java:42)
at JMXStatusTest.assertStatusMatches(JMXStatusTest.java:155)
at JMXStatusTest.assertStatusMatches(JMXStatusTest.java:148)
at JMXStatusTest.testAgentDefault(JMXStatusTest.java:144)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
at org.testng.TestRunner.privateRun(TestRunner.java:773)
at org.testng.TestRunner.run(TestRunner.java:623)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
at org.testng.SuiteRunner.run(SuiteRunner.java:259)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
at org.testng.TestNG.run(TestNG.java:1018)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:115)
at java.base/java.lang.Thread.run(Thread.java:832)
[TestApp] read: 1
[TestApp] main exit
Here's the stderr part of the same log:
----------System.err:(15/936)----------
[jcmd] java.lang.RuntimeException: Invalid agent state: Agent already started
java.lang.Exception: failures: 1
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:115)
at java.base/java.lang.Thread.run(Thread.java:832)
JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
The two 'release' bits logs are similar. The 'slowdebug' failures
are more verbose.
OS: linux, os_x, solaris

-----
Title: [JDK-8225220] When the Tab Policy is checked,the scroll button direction displayed incorrectly.
Priority: P3
Type: Bug
Component: client-libs
Description: Testsuite name: Swing manual
Test name(s): Swing_JTabbedPane/Manual/JTabbedPaneLAFTests/TabbedPaneLAFTest2
Product(s) tested:JDK 8u221b06 (64bit)/tonga-4.0.2-rc2
OS/architecture:oel7.6-uek-x64
option: -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=3
Actual behavior:
1.When the Tab Policy is checked,the scroll button direction displayed incorrectly.Refer to TabbedPaneLAFTest2_1-with-option.png
2.No such issue without option.Refer to TabbedPaneLAFTest2_1-no-option.png
3.No such issue on oel6.4-uek-x86/JDK8u221b04(32bit) with the same option
OS: linux

-----
Title: [JDK-8240343] JDI stopListening/stoplis001 "FAILED: listening is successfully stopped without starting listening"
Priority: P4
Type: Bug
Component: core-svc
Description: The following test failed in the JDK15 CI:
vmTestbase/nsk/jdi/ListeningConnector/stopListening/stoplis001/TestDescription.java
Here's a snippet from the log file:
----------System.out:(86/5530)----------
run [nsk.jdi.ListeningConnector.stopListening.stoplis001, -verbose, -arch=linux-x64, -waittime=5, -debugee.vmkind=java, -transport.address=dynamic, -debugee.vmkeys=-XX:MaxRAMPercentage=6 -Xshare:off -showversion]
Connector name=com.sun.jdi.SocketListen
description=Accepts socket connections initiated by other VMs
transport=dt_socket
argument name=timeout
value=
argument name=port
value=44321
argument name=localAddress
value=
Connector name=com.sun.jdi.SocketListen
description=Accepts socket connections initiated by other VMs
transport=dt_socket
argument name=timeout
value=
argument name=port
value=
argument name=localAddress
value=
TEST: start listening the address localhost:44321
# ERROR: Test case #1 FAILED: listening is successfully stopped without starting listening
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Test case #1 FAILED: listening is successfully stopped without starting listening
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:428)
at nsk.share.Log.complain(Log.java:399)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.runIt(stoplis001.java:102)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.run(stoplis001.java:72)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.main(stoplis001.java:68)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at PropertyResolvingWrapper.main(PropertyResolvingWrapper.java:104)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
# ERROR: FAILURE: Illegal connector arguments: Not listening
The following stacktrace is for failure analysis.
nsk.share.TestFailure: FAILURE: Illegal connector arguments: Not listening
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:428)
at nsk.share.Log.complain(Log.java:399)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.stopListen(stoplis001.java:185)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.runIt(stoplis001.java:108)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.run(stoplis001.java:72)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.main(stoplis001.java:68)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at PropertyResolvingWrapper.main(PropertyResolvingWrapper.java:104)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
com.sun.jdi.connect.IllegalConnectorArgumentsException: Not listening
at jdk.jdi/com.sun.tools.jdi.GenericListeningConnector.stopListening(GenericListeningConnector.java:136)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.stopListen(stoplis001.java:169)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.runIt(stoplis001.java:108)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.run(stoplis001.java:72)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.main(stoplis001.java:68)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at PropertyResolvingWrapper.main(PropertyResolvingWrapper.java:104)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
# ERROR: Test case #2 FAILED: unable to stop listening
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Test case #1 FAILED: listening is successfully stopped without starting listening
# ERROR: FAILURE: Illegal connector arguments: Not listening
# ERROR: Test case #2 FAILED: unable to stop listening
----------System.err:(3/172)----------
OS: linux

-----
Title: [JDK-8283214] [macos] Screen magnifier does not show the magnified text for JComboBox
Priority: P3
Type: Bug
Component: client-libs
Description: I have a JFrame with JLabel and JComboBox. I was trying Screen magnifier  on macOS.
I enabled Hover Text in Zoom section in Accessibility settings of macOS. I see that native combo box shows large-text view of the item under the pointer but JComboBox doesn't.
Steps to reproduce
--------------------------
1) Enable Screen magnifier on Mac
System Preferences - Accessibility - Zoom - Select (Enable Hover Text)
2) Run the attached code by passing the following option
-Djavax.accessibility.screen_magnifier_present=true    JComboBoxScreenMagnifierBug.java
3) Once the JFrame is visible, press the Command (Cmd) key and move mouse over JLabel (Fruits), you should see "Fruits" with magnified or enlarged text.
4) Move the mouse pointer over JComboBox. If you don't see the magnified text, then the bug is reproduced.
Note: I am getting the following exception in JDK 17 b35, but it's not reproduced in JDK 18 b36 and JDK 19 b13. This exception is seen when user presses the Command key and moves the mouse pointer over a Swing component
2022-03-15 13:14:57.419 java[22109:3940166] Bad JNI lookup accessibilityHitTest
2022-03-15 13:14:57.420 java[22109:3940166] (
0   libawt_lwawt.dylib                  0x0000000105efa3d9 -[JavaComponentAccessibility accessibilityHitTest:withEnv:] + 153
1   libawt_lwawt.dylib                  0x0000000105ea6573 -[AWTView accessibilityHitTest:] + 179
2   AppKit                              0x00007fff23a20b51 -[NSWindow(NSWindowAccessibility) accessibilityHitTest:] + 309
3   AppKit                              0x00007fff235c490c -[NSApplication(NSApplicationAccessibility) accessibilityHitTest:] + 342
4   AppKit                              0x00007fff235957f3 CopyElementAtPosition + 150
5   HIServices                          0x00007fff25c0aa2b _AXXMIGCopyElementAtPosition + 336
6   HIServices                          0x00007fff25c2b708 _XCopyElementAtPosition + 369
7   HIServices                          0x00007fff25be993c mshMIGPerform + 182
8   CoreFoundation                      0x00007fff20955b04 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 41
9   CoreFoundation                      0x00007fff209559e5 __CFRunLoopDoSource1 + 619
10  CoreFoundation                      0x00007fff2095406f __CFRunLoopRun + 2400
11  CoreFoundation                      0x00007fff2095304c CFRunLoopRunSpecific + 563
12  HIToolbox                           0x00007fff28b9ba83 RunCurrentEventLoopInMode + 292
13  HIToolbox                           0x00007fff28b9b6b6 ReceiveNextEventCommon + 284
14  HIToolbox                           0x00007fff28b9b583 _BlockUntilNextEventMatchingListInModeWithFilter + 70
15  AppKit                              0x00007fff2315bd72 _DPSNextEvent + 864
16  AppKit                              0x00007fff2315a545 -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 1364
17  libosxapp.dylib                     0x0000000105fb659a -[NSApplicationAWT nextEventMatchingMask:untilDate:inMode:dequeue:] + 122
18  AppKit                              0x00007fff2314c869 -[NSApplication run] + 586
19  libosxapp.dylib                     0x0000000105fb6369 +[NSApplicationAWT runAWTLoopWithApp:] + 169
20  libawt_lwawt.dylib                  0x0000000105f02830 +[AWTStarter starter:headless:] + 496
21  libosxapp.dylib                     0x0000000105fb803f +[ThreadUtilities invokeBlockCopy:] + 15
22  Foundation                          0x00007fff21704b91 __NSThreadPerformPerform + 204
23  CoreFoundation                      0x00007fff2095537c __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17
24  CoreFoundation                      0x00007fff209552e4 __CFRunLoopDoSource0 + 180
25  CoreFoundation                      0x00007fff20955064 __CFRunLoopDoSources0 + 242
26  CoreFoundation                      0x00007fff20953a8c __CFRunLoopRun + 893
27  CoreFoundation                      0x00007fff2095304c CFRunLoopRunSpecific + 563
28  libjli.dylib                        0x00000001059ce0b2 CreateExecutionEnvironment + 386
29  libjli.dylib                        0x00000001059c9c15 JLI_Launch + 1413
30  java                                0x00000001059b9c09 main + 393
31  libdyld.dylib                       0x00007fff20878f3d start + 1
)
Exception in thread "AppKit Thread" java.lang.NoSuchMethodError: accessibilityHitTest
OS: os_x

-----
Title: [JDK-8296787] Unify debug printing format of X.509 cert serial numbers
Priority: P4
Type: Bug
Component: security-libs
Description: The JDK debug libraries print X.509 certificate serial numbers in 3 different formats. We should unify on one format.
e.g.
==============
certpath: X509CertSelector.match(SN: 83be056904246b1a1756ac95991c74a
Issuer: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
Subject: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US)
certpath: X509CertSelector.match returning: true
certpath: YES - try this trustedCert
certpath: Constraints.permits(): RSA, [
Variant: tls server
Anchor: [
Trusted CA cert: [
[
Version: V3
Subject: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5
Key:  Sun RSA public key, 2048 bits
params: null
modulus: 28559384442792876273280274398620578979733786817784174960112400169719065906301471912340204391164075730987771255281479191858503912379974443363319206013285922932969143082114108995903507302607372164107846395526169928849546930352778612946811335349917424469188917500996253619438384218721744278787164274625243781917237444202229339672234113350935948264576180342492691117960376023738627349150441152487120197333042448834154779966801277094070528166918968412433078879939664053044797116916260095055641583506170045241549105022323819314163625798834513544420165235412105694681616578431019525684868803389424296613694298865514217451303
public exponent: 65537
Validity: [From: Fri Nov 10 00:00:00 UTC 2006,
To: Mon Nov 10 00:00:00 UTC 2031]
Issuer: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
SerialNumber: [    083be056 904246b1 a1756ac9 5991c74a]
Certificate Extensions: 4
[1]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 03 DE 50 35 56 D1 4C BB   66 F0 A3 E2 1B 1B C3 97  ..P5V.L.f.......
0010: B2 3D D1 55                                        .=.U
]
"certificate" : {
"version"            : "v3",
"serial number"      : "083BE056904246B1A1756AC95991C74A",
"signature algorithm": "SHA1withRSA",
"issuer"             : "CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US",
"not before"         : "2006-11-10 24:00:00.000 UTC",
"not  after"         : "2031-11-10 24:00:00.000 UTC",
"subject"            : "CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US",
"subject public key" : "RSA",
"extensions"         : [
==============
one cert - 3 styles of serial number :
SN: 83be056904246b1a1756ac95991c74a
SerialNumber: [    083be056 904246b1 a1756ac9 5991c74a]
"serial number"      : "083BE056904246B1A1756AC95991C74A",
It would help with debug log checks.
OS: generic

-----
Title: [JDK-8296972] [macos13] java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java: getExtendedState() != 6 as expected.
Priority: P4
Type: Bug
Component: client-libs
Description: The test java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java became failing on both macOS-aarch64 and macOS-x64 starting since Ventura 13.0 Beta (22A5365d) with the following output:
```
#section:main
----------messages:(7/279)----------
command: main MaximizedToIconified
reason: User specified action: run main MaximizedToIconified
started: Wed Oct 12 04:13:38 UTC 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Wed Oct 12 04:13:42 UTC 2022
elapsed time (seconds): 3.873
----------configuration:(3/40)----------
Boot Layer
add modules: java.desktop
----------System.out:(11/452)----------
last = 0; getOldState() = 0; getNewState() = 6
state = 6; getExtendedState() = 6
last = 6; getOldState() = 6; getNewState() = 0
last = 0; getOldState() = 0; getNewState() = 1
state = 1; getExtendedState() = 1
last = 1; getOldState() = 1; getNewState() = 0
state = 0; getExtendedState() = 0
last = 0; getOldState() = 0; getNewState() = 1
state = 1; getExtendedState() = 1
last = 1; getOldState() = 1; getNewState() = 0
state = 6; getExtendedState() = 0
----------System.err:(14/877)----------
java.lang.RuntimeException: getExtendedState() != 6 as expected.
at MaximizedToIconified.checkState(MaximizedToIconified.java:70)
at MaximizedToIconified.examineStates(MaximizedToIconified.java:98)
at MaximizedToIconified.doTest(MaximizedToIconified.java:117)
at MaximizedToIconified.main(MaximizedToIconified.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1588)
JavaTest Message: Test threw exception: java.lang.RuntimeException: getExtendedState() != 6 as expected.
```
It is still being observed on 13.1 Beta (22C5033e)
The test passes successfully on the previous macOS versions 11, 12.
The issue was observed on jdk20 20-ea+23-1677. It is also reproducible with jdk19 (19.0.1+10-21), jdk17
*Reproducibility*: 100%
*Steps to reproduce*:
$ jtreg/bin/jtreg -va  -testjdk:jdk-20.jdk/Contents/Home/ test/jdk/java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java
OS: os_x

-----
Title: [JDK-8306446] java/lang/management/ThreadMXBean/Locks.java transient failures
Priority: P4
Type: Bug
Component: core-svc
Description: The java/lang/management/ThreadMXBean/Locks.java test seems to expect all threads returned by java.lang.management.ThreadMXBean#getAllThreadIds to still be alive in a subsequent call to java.lang.management.ThreadMXBean#getThreadInfo(long). Running the test on GraalVM sometimes fails with:
STDOUT:
LockBThread about to block on OBJC
LockAThread about to block on OBJB
Stack dump : Thread - LockBThread
java.base/java.util.concurrent.Phaser.internalAwaitAdvance(Phaser.java:1063)
java.base/java.util.concurrent.Phaser.arriveAndAwaitAdvance(Phaser.java:685)
Locks$LockBThread.run(Locks.java:196)
STDERR:
java.lang.NullPointerException: Cannot invoke "java.lang.management.ThreadInfo.getLockName()" because "" is null
at Locks.doCheck(Locks.java:437)
at Locks.findThreadsBlockedOn(Locks.java:425)
at Locks.main(Locks.java:374)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1623)

-----
Title: [JDK-8308429] jvmti/StopThread/stopthrd007 failed with "NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK21 CI:
vmTestbase/nsk/jvmti/StopThread/stopthrd007/TestDescription.java
Here's a snippet from the log file:
#section:main
----------messages:(8/397)----------
command: main -agentlib:stopthrd007=-waittime=5 nsk.jvmti.StopThread.stopthrd007
reason: User specified action: run main/othervm/native -agentlib:stopthrd007=-waittime=5 nsk.jvmti.StopThread.stopthrd007
started: Fri May 19 03:02:45 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Fri May 19 03:11:49 UTC 2023
elapsed time (seconds): 544.51
----------configuration:(0/0)----------
----------System.out:(1/26)----------
Timeout refired 480 times
----------System.err:(11/1002)----------
Exception in thread "DebuggeeWaitingThread" Exception in thread "DebuggeeSleepingThread" Exception in thread "DebuggeeRunningThread" java.lang.ThreadDeath
java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads
at java.base/java.util.concurrent.locks.LockSupport.unpark(LockSupport.java:179)
at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer.java:645)
at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1060)
at java.base/java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:494)
at nsk.share.Wicket.unlock(Wicket.java:226)
at nsk.jvmti.StopThread.stopthrd007ThreadRunning.run(stopthrd007.java:195)
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.ThreadDeath [in thread "DebuggeeRunningThread"]
Exception: java.lang.NoClassDefFoundError thrown from the UncaughtExceptionHandler in thread "DebuggeeRunningThread"
----------rerun:(42/8469)*----------

-----
Title: [JDK-8309218] java/util/concurrent/locks/Lock/OOMEInAQS.java still times out with ZGC, Generational ZGC, and SerialGC
Priority: P3
Type: Bug
Component: core-libs
Description: Even with the fix for the following bug:
JDK-8298066 java/util/concurrent/locks/Lock/OOMEInAQS.java timed out
which was integrated in jdk-21+24-2094, the following test:
java/util/concurrent/locks/Lock/OOMEInAQS.java
still times out with both ZGC and Generational ZGC.
This latest batch of timeouts happened in Tier8. If/when a new fix is attempted,
please remember that the fix needs to be tested in Tier8 along with all other
tiers where this test runs.
OS: generic

-----
Title: [JDK-8311301] MethodExitTest may fail with stack buffer overrun
Priority: P4
Type: Bug
Component: hotspot
Description: Spotted when running tier1 tests on Windows JVM build with clang.
MethodExitTest failed with:
----------System.out:(6/187)----------
Agent_OnLoad started
Agent_OnLoad finished
ThreadStart: cthread: 000001E0573A5980, name: main
ThreadStart: GetThreadLocalStorage for carrier thread returned value 111 as expected
----------System.err:(0/0)----------
...
test result: Failed. Unexpected exit from test [exit code: -1073740791]
This exit code translates to STATUS_STACK_BUFFER_OVERRUN. No hs_err file is generated, but there's an entry in Windows event log:
Faulting application name: java.exe, version: 22.0.0.0, time stamp: 0x64a2ef1a
Faulting module name: MethodExitTest.dll, version: 0.0.0.0, time stamp: 0x64a31b75
Exception code: 0xc0000409
Fault offset: 0x00000000000039f5
This, along with the test output, points to stack overrun in libMethodExitTest.cpp / ThreadStart.
Looking at the method, it passes a variable loc_tls_data of type long to SetThreadLocalStorage, and then calls GetThreadLocalStorage to retrieve the stored value back to the same variable.
The problem here is that ThreadLocalStorage is a pointer, which is 8 bytes long on 64 bit architectures. Long on Windows can only store 4 bytes, so the call to GetThreadLocalStorage overwrites additional 4 bytes on stack. When the code is compiled by MS compiler, the overrun is ignored, but clang-compiled code detects the overrun and crashes the application.

-----
Title: [JDK-8311656] Shenandoah: Unused ShenandoahSATBAndRemarkThreadsClosure::_claim_token
Priority: P4
Type: Enhancement
Component: hotspot
Description: Trivial omission from JDK-8221785: _claim_token initialization was removed, but the field itself remains:
https://github.com/openjdk/jdk/blob/34004e1666f6adf0e52af553c30b6b0006b4cfb6/src/hotspot/share/gc/shenandoah/shenandoahConcurrentMark.cpp#L76

-----
Title: [JDK-8312518] [macos13] setFullScreenWindow() shows black screen on macOS 13 & above
Priority: P3
Type: Bug
Component: client-libs
Description: macOS 13 starting showing black screen for fullscreen windows, see attachment for reproducer. Issue reproducible on both - x64 and aarch64
Issue seen to occur on macOS versions - 13.3 & above as per our testing so far.
OS: os_x

-----
Title: [JDK-8313374] --enable-ccache's CCACHE_BASEDIR breaks builds
Priority: P4
Type: Bug
Component: infrastructure
Description: With ccache enabled the dependencies no longer work.
This leads to mysterious compilation errors where one has to `rm -rf build/XXX` and rebuild it from scratch.
I am pretty sure in some cases these broken dependencies lead even to segfaulting code which again gets fixed by `rm -rf build/XXX`. Unfortunately I do not have now a reproducer for such case.
man ccache even documents this problem:
there might be cases where things break. One known issue is that absolute paths are not reproduced in dependency files
I believe the whole --enable-ccache code should be dropped as default ccache flags is up to ccache upstream, OS vendor and developer's preferences but the ccache defaults should not be quietly changed by the compiled package.
# Tested on Fedora 38 x86_64
git checkout master # ad34be1f329edc8e7155983835cc70d733c014b8
patch -p1
Updating support/modules_libs/java.base/server/libjvm.so due to 1 file(s)
/usr/bin/ld: openjdk-git/build/linux-x86_64-server-release/hotspot/variant-server/libjvm/objs/g1CollectedHeap.o: in function `G1CollectedHeap::wait_for_collection_finish()':
make/hotspot/../../src/hotspot/share/gc/g1/g1CollectedHeap.hpp:291: undefined reference to `G1UncommitRegionTask::wait_if_active()'
collect2: error: ld returned 1 exit status
OS: linux

-----
Title: [JDK-8313878] Exclude two compiler/rtm/locking tests on ppc64le
Priority: P4
Type: Sub-task
Component: hotspot
Description: The tests
compiler/rtm/locking/TestRTMSpinLoopCount.java
compiler/rtm/locking/TestRTMAbortThreshold.java
fail very often in JDK11 on linux ppc64le and should be excluded to reduce noise in the CI infrastructure.
OS: linux

-----
Title: [JDK-8315701] [macos] Regression: KeyEvent has different keycode on different keyboard layouts
Priority: P3
Type: Bug
Component: client-libs
Description: Starting from JDK18 KeyEvents started to have different keycode on different keyboard layouts.
Because of that shortcuts (like copy/paste) stopped to work on non-english locales.
Everything works fine in JDKs 17 and older.
It seems like this is the regression produced by this commit: https://github.com/openjdk/jdk/commit/47e7a42594f1c36f71cdf4d383080bf8d616b7e7
With this code
```
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
public class Example {
public static void main(String[] args) {
SwingUtilities.invokeLater(() - {
var frame = new JFrame();
frame.addKeyListener(new KeyListener() {
@Override
public void keyTyped(KeyEvent e) {
}
@Override
public void keyPressed(KeyEvent e) {
System.out.println("CODE " + KeyEvent.VK_C + " REAL CODE " + e.getKeyCode());
}
@Override
public void keyReleased(KeyEvent e) {
}
});
frame.setSize(new Dimension(200, 200));
frame.setVisible(true);
});
}
}
```
Steps to reproduce:
1. Run the application
2. Change locale to English
3. Press cmd + C
4. Change locale to Russian (may be on other it will also fail)
5. Press cmd + C
Expected:
CODE 67 REAL CODE 67
printed on both locales
Actual -
CODE 67 REAL CODE 67
is printed on English locale
CODE 67 REAL CODE 16778305
is printed on Russian locale
OS: os_x

-----
Title: [JDK-8316428] G1: Nmethod count statistics only count last code root set iterated
Priority: P4
Type: Bug
Component: hotspot
Description: G1 Nmethod count statistics is wrong, only counting the count of the last code root set iterated.

-----
Title: [JDK-8316893] Compile without -fno-delete-null-pointer-checks
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Currently we are passing -fno-delete-null-pointer-checks command line flag when compiling with GCC (6+) or Clang (12+)
This flag is necessary when the code assumes that `this` pointer of a C++ member function can be null. This is not permitted by C++ standard, which requires that `this` always contains a non-null pointer. The flag was added to enable non-compliant code to run.
There are still some places that need fixing before this flag can be removed.

-----
Title: [JDK-8316895] SeenThread::print_action_queue called on a null pointer
Priority: P4
Type: Sub-task
Component: hotspot
Description: PlaceholderEntry calls print_action_queue without checking if the thread pointers are non-null. This works because we compile with -fno-delete-null-pointer-checks, and crashes if that flag is removed.
Crash can be observed in test/hotspot/jtreg/runtime/logging/RedefineClasses.java, for example.

-----
Title: [JDK-8316907] Fix nonnull-compare warnings
Priority: P4
Type: Sub-task
Component: hotspot
Description: The following warnings are emitted when compiling with gcc without -fno-delete-null-pointer-checks:
In file included from .../src/hotspot/share/memory/allocation.hpp:29,
from .../src/hotspot/share/classfile/classLoaderData.hpp:28,
from .../src/hotspot/share/precompiled/precompiled.hpp:34:
ad_x86_pipeline.cpp: In member function 'uint Pipeline::operand_latency(uint, const Pipeline*) const':
.../src/hotspot/share/utilities/debug.hpp:152:7: warning: nonnull argument 'this' compared to NULL [-Wnonnull-compare]
152 |   if (! VMASSERT_CHECK_PASSED(p)) {                                            \
|       ^
.../src/hotspot/share/utilities/debug.hpp:160:24: note: in expansion of macro 'vmassert'
160 | #define assert(p, ...) vmassert(p, __VA_ARGS__)
|                        ^~~~~~~~
ad_x86_pipeline.cpp:142:3: note: in expansion of macro 'assert'
.../src/hotspot/share/asm/codeBuffer.cpp: In member function 'void CodeBuffer::print()':
.../src/hotspot/share/asm/codeBuffer.cpp:1064:3: warning: nonnull argument 'this' compared to NULL [-Wnonnull-compare]
1064 |   if (this == nullptr) {
|   ^~

-----
Title: [JDK-8317116] Provide layouts for multiple test UI in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: JDK-8294156 allows creating and adding multiple test UI frames as part of PassFailJFrame. As mentioned in the code review [1], the framework should provide a few simple layout managers to position the test UI.
The demos [2] for the testUI feature provide implementations which need to be refined.
A quote from the demo layouts [3]:
“I didn't even think about not providing any default implementations of positionTestUI — that's the idea! The framework should support simple layouts.
“Implementing common layouts each time they're used would be a waste of time.
“A method reference to an implementation in PassFailJFrame could be passed. Alternatively, we can add helper methods to builder which selects the Position and positionTestUI.
“The code in TwoWindowsHH.java and TwoWindowsHV.java needs refining. Yet it's a great foundation.”
[1] https://github.com/openjdk/jdk/pull/15665#discussion_r1323491246
[2] https://github.com/openjdk/jdk/pull/15721
[3] https://github.com/openjdk/jdk/pull/15721#discussion_r1326082796

-----
Title: [JDK-8317575] AArch64: C2_MacroAssembler::fast_lock uses rscratch1 for cmpxchg result
Priority: P5
Type: Bug
Component: hotspot
Description: The fast_lock code CASes the owner field with the current thread and upon failure checks if the previous value was the current thread, which would indicate a recursive lock.
```
add(tmp, disp_hdr, (in_bytes(ObjectMonitor::owner_offset())-markWord::monitor_value));
cmpxchg(tmp, zr, rthread, Assembler::xword, /*acquire*/ true,
/*release*/ true, /*weak*/ false, rscratch1); // Sets flags for result
br(Assembler::EQ, cont); // CAS success means locking succeeded
cmp(rscratch1, rthread);
br(Assembler::NE, cont); // Check for recursive locking
```
The contract is that cmpxchg clobbers rscratch1, so this seems problematic.
The cmpxchg code looks like this:
```
void MacroAssembler::cmpxchg(Register addr, Register expected,
Register new_val,
enum operand_size size,
bool acquire, bool release,
bool weak,
Register result) {
if (result == noreg)  result = rscratch1;
BLOCK_COMMENT("cmpxchg {");
if (UseLSE) {
mov(result, expected);
lse_cas(result, new_val, addr, size, acquire, release, /*not_pair*/ true);
compare_eq(result, expected, size);
#ifdef ASSERT
// Poison rscratch1 which is written on !UseLSE branch
mov(rscratch1, 0x1f1f1f1f1f1f1f1f);
#endif
} else {
Label retry_load, done;
prfm(Address(addr), PSTL1STRM);
bind(retry_load);
load_exclusive(result, addr, size, acquire);
compare_eq(result, expected, size);
br(Assembler::NE, done);
store_exclusive(rscratch1, new_val, addr, size, release);
if (weak) {
cmpw(rscratch1, 0u);  // If the store fails, return NE to our caller.
} else {
cbnzw(rscratch1, retry_load);
}
bind(done);
}
BLOCK_COMMENT("} cmpxchg");
}
```
For -XX:-UseLSE this is a benign problem because when the owner value is set to non-null the cmpxchg doesn't take the clobbering path:
```
store_exclusive(rscratch1, new_val, addr, size, release);
if (weak) {
cmpw(rscratch1, 0u);  // If the store fails, return NE to our caller.
} else {
cbnzw(rscratch1, retry_load);
}
```
So, the code happens to work but it would be better to use another register for the result.
The debug clobbering in the -XX:+UseLSE path was recently added and this will lead to debug builds never taking the recursive fast-path. That clobbering should maybe be done also for -XX:-UseLSE, which doesn't always clobber the register?

-----
Title: [JDK-8318105] [jmh] the test java.security.HSS failed with 2 active threads
Priority: P4
Type: Bug
Component: security-libs
Description: The test micro/org/openjdk/bench/java/security/HSS.java failed with log:
java.lang.RuntimeException
at org.openjdk.bench.java.security.HSS.verify(HSS.java:105)
for runs with 2+ threads.
OS: generic

-----
Title: [JDK-8318442] java/net/httpclient/ManyRequests2.java fails intermittently on Linux
Priority: P4
Type: Bug
Component: core-libs
Description: On Linux, especially on Linux ppc64le test machines  (RHEL8.5, Ubuntu 22.04)  we see intermittent failures of java/net/httpclient/ManyRequests2.java .
Failure seems to be this :
Oct 18, 2023 8:47:49 AM sun.net.httpserver.ServerImpl$Exchange run
FINER: ServerImpl.Exchange (5)
java.lang.AssertionError: State is not REQUEST (IDLE)
at jdk.httpserver/sun.net.httpserver.ServerImpl.requestCompleted(ServerImpl.java:1001)
at jdk.httpserver/sun.net.httpserver.FixedLengthInputStream.readImpl(FixedLengthInputStream.java:63)
at jdk.httpserver/sun.net.httpserver.LeftOverInputStream.read(LeftOverInputStream.java:99)
at java.base/java.io.InputStream.readNBytes(InputStream.java:412)
at java.base/java.io.InputStream.readAllBytes(InputStream.java:349)
at EchoHandler.handle(EchoHandler.java:48)
at ManyRequests$TestEchoHandler.handle(ManyRequests.java:147)
at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:871)
at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:845)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1570)
Is the state IDLE maybe also valid under some circumstances ?
Or should we mark the test "intermittent"  ?
OS: linux

-----
Title: [JDK-8319640] ClassicFormat::parseObject (from DateTimeFormatter) does not conform to the javadoc and may leak DateTimeException
Priority: P4
Type: Bug
Component: core-libs
Description: The Format::parseObject (which ClassicFormat implements) explicitly says that it returns `null` in case of error:
* @return An Object parsed from the string. In case of error, returns null.
And it may throw NullPointerException if position is `null`:
* @throws NullPointerException if {@code source} or {@code pos} is null.
However, ClassicFormat::parseObject does not conform to this specification and may leak DateTimeException, reproducer below:
final DateTimeFormatter formatter = new DateTimeFormatterBuilder()
.parseCaseInsensitive()
.append(DateTimeFormatter.ISO_LOCAL_DATE)
.appendLiteral('T')
.optionalStart()
.appendValue(HOUR_OF_DAY, 2, 2, SignStyle.NOT_NEGATIVE)
.optionalStart()
.appendLiteral(':')
.appendValue(MINUTE_OF_HOUR, 2, 2, SignStyle.NOT_NEGATIVE)
.optionalStart()
.appendLiteral(':')
.appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE)
.optionalEnd()
.optionalEnd()
.optionalStart()
.appendZoneOrOffsetId()
.optionalEnd()
.optionalStart()
.appendOffset("+HHmm", "Z")
.optionalEnd()
.optionalEnd()
.toFormatter(Locale.ROOT)
.withResolverStyle(ResolverStyle.STRICT);
var object = formatter.toFormat().parseObject("2018-03-30T17-30-28.842Z", new ParsePosition(0));
assert object == null;
The snippet fails with:
java.time.DateTimeException: Value out of range: Hour[0-23], Minute[0-59], Second[0-59]
at java.base/java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser.parse(DateTimeFormatterBuilder.java:3708)
at java.base/java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.parse(DateTimeFormatterBuilder.java:2360)
at java.base/java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.parse(DateTimeFormatterBuilder.java:2360)
at java.base/java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.parse(DateTimeFormatterBuilder.java:2370)
at java.base/java.time.format.DateTimeFormatter.parseUnresolved0(DateTimeFormatter.java:2107)
at java.base/java.time.format.DateTimeFormatter$ClassicFormat.parseObject(DateTimeFormatter.java:2236)
OS: generic

-----
Title: [JDK-8319673] Few security tests ignore VM flags
Priority: P4
Type: Sub-task
Component: security-libs
Description: Tests
java/security/Security/ConfigFileTest.java
java/security/SignedJar/SignedJarWithCustomClassLoader.java com/sun/crypto/provider/KeyProtector/IterationCount.java
sun/security/tools/jarsigner/compatibility/SignTwice.java
sun/security/krb5/auto/ModuleName.java
sun/security/provider/KeyStore/DKSTest.java
start java process ignoring VM flags. Needs to be updated.
OS: linux

-----
Title: [JDK-8319678] Several tests from corelibs areas ignore VM flags
Priority: P4
Type: Sub-task
Component: core-libs
Description: Tests
java/rmi/reliability/benchmark/bench/rmi/Main.java
java/time/nontestng/java/time/chrono/HijrahConfigTest.java
javax/naming/spi/providers/InitialContextTest.java
sun/misc/EscapePath.java
java/lang/annotation/LoaderLeakTest.java
java/lang/Thread/UncaughtExceptionsTest.java
start new java processes ignoring VM flags.
Should be updated.

-----
Title: [JDK-8319960] RISC-V: compiler/intrinsics/TestInteger/LongUnsignedDivMod.java failed with "counts: Graph contains wrong number of nodes"
Priority: P4
Type: Bug
Component: hotspot
Description: After JDK-8318224， compiler/intrinsics/TestInteger/LongUnsignedDivMod.java failed with "counts: Graph contains wrong number of nodes"

-----
Title: [JDK-8319970] AArch64: enable tests compiler/intrinsics/Test(Long|Integer)UnsignedDivMod.java on aarch64
Priority: P4
Type: Enhancement
Component: hotspot
Description: During the fix of JDK-8319960, found out that these 2 tests are not enabled for aarch64, but the corresponding intrinsics were implemented on aarch64 already.

-----
Title: [JDK-8319973] AArch64: Save and restore FPCR in the call stub
Priority: P3
Type: Bug
Component: hotspot
Description: On AArch64 we don't save and restore the default floating-point control state when we enter and leave Java code. We really should, because if we're called via the JNI invocation interface with a weird FP control state we'll not be Java compatible.
OS: generic

-----
Title: [JDK-8320192] SHAKE256 does not work correctly if n >= 137
Priority: P3
Type: Bug
Component: security-libs
Description: The internal SHAKE256 class fails the NIST CAVP test when n reaches 137. The following program succeeds in the 1st check but fails the 2nd one.
import sun.security.provider.SHAKE256;
import java.util.Arrays;
import java.util.HexFormat;
public class A2 {
public static void main(String[] args) throws Exception {
//https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/shakebytetestvectors.zip
//SHAKE256VariableOut.rsp:
//3380: COUNT = 674
//3381: Outputlen = 1088
//3382: Msg = 6ae23f058f0f2264a18cd609acc26dd4dbc00f5c3ee9e13ecaea2bb5a2f0bb6b
//3383: Output = b9b92544fb25cfe4ec6fe437d8da2bbe00f7bdaface3de97b8775a44d753c3adca3f7c6f183cc8647e229070439aa9539ae1f8f13470c9d3527fffdeef6c94f9f0520ff0c1ba8b16e16014e1af43ac6d94cb7929188cce9d7b02f81a2746f52ba16988e5f6d93298d778dfe05ea0ef256ae3728643ce3e29c794a0370e9ca6a8bf3e7a41e8677067
//3384:
//3385: COUNT = 675
//3386: Outputlen = 1096
//3387: Msg = 8d8001e2c096f1b88e7c9224a086efd4797fbf74a8033a2d422a2b6b8f6747e4
//3388: Output = 2e975f6a8a14f0704d51b13667d8195c219f71e6345696c49fa4b9d08e9225d3d39393425152c97e71dd24601c11abcfa0f12f53c680bd3ae757b8134a9c10d429615869217fdd5885c4db174985703a6d6de94a667eac3023443a8337ae1bc601b76d7d38ec3c34463105f0d3949d78e562a039e4469548b609395de5a4fd43c46ca9fd6ee29ada5e
var s = new SHAKE256(1088/8);
var msg = HexFormat.of().parseHex("6ae23f058f0f2264a18cd609acc26dd4dbc00f5c3ee9e13ecaea2bb5a2f0bb6b");
var output = HexFormat.of().parseHex("b9b92544fb25cfe4ec6fe437d8da2bbe00f7bdaface3de97b8775a44d753c3adca3f7c6f183cc8647e229070439aa9539ae1f8f13470c9d3527fffdeef6c94f9f0520ff0c1ba8b16e16014e1af43ac6d94cb7929188cce9d7b02f81a2746f52ba16988e5f6d93298d778dfe05ea0ef256ae3728643ce3e29c794a0370e9ca6a8bf3e7a41e8677067");
s.update(msg, 0, msg.length);
if (!Arrays.equals(s.digest(), output)) {
throw new RuntimeException();
}
s = new SHAKE256(1096/8);
msg = HexFormat.of().parseHex("8d8001e2c096f1b88e7c9224a086efd4797fbf74a8033a2d422a2b6b8f6747e4");
output = HexFormat.of().parseHex("2e975f6a8a14f0704d51b13667d8195c219f71e6345696c49fa4b9d08e9225d3d39393425152c97e71dd24601c11abcfa0f12f53c680bd3ae757b8134a9c10d429615869217fdd5885c4db174985703a6d6de94a667eac3023443a8337ae1bc601b76d7d38ec3c34463105f0d3949d78e562a039e4469548b609395de5a4fd43c46ca9fd6ee29ada5e");
s.update(msg, 0, msg.length);
if (!Arrays.equals(s.digest(), output)) {
throw new RuntimeException();
}
}
}
BTW, when n  200, the state buffer in SHA3.java does not have enough bytes and the last line of implDigest() throws an exception. It probably needs to squeeze multiple times to fullfill the output.

-----
Title: [JDK-8320397] RISC-V: Avoid passing t0 as temp register to MacroAssembler:: cmpxchg_obj_header/cmpxchgptr
Priority: P4
Type: Enhancement
Component: hotspot
Description: MacroAssembler::cmpxchg/cmpxchgptr/cmpxchg_obj_header is non-trivial on linux-riscv64 platform. Passing t0(aka x5) as temporary register to this functions can also be error prone. As a reserved scratch register, t0 is implicitly clobberred by various assembler functions.
This issue is used to track avoid passing t0 as a temporary register in the following cases:
1. avoid passing t0 as temp register to MacroAssembler::cmpxchg/cmpxchgptr/cmpxchg_obj_header.
2. avoid passing t0 as temp register to x_load_barrier and x_load_barrier_slow_path function in x_riscv.ad
3. avoid passing t0 as temp register to z_store_barrier and z_color function in z_riscv.ad
Note that I didn't touch MacroAssembler::cmpxchg because it seems to me that this function is designed that it allows t0 to be used as the result register. As the result register will be set on exits, there should be no risk when using t0 for receiving the result.
OS: linux

-----
Title: [JDK-8320575] generic type information lost on mandated parameters of record's compact constructors
Priority: P3
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Tested on MacBook Pro M2, Ventura 13.4
Java 21.0.1
A DESCRIPTION OF THE PROBLEM :
When, via reflection, trying to determine the generic type of an argument of the default record constructor,
the generic type cannot be determined in Java 21.
This did work in pre 21 versions. Tested in 17.0.9.
REGRESSION : Last worked in version 17.0.9
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run provided test case.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect generic type to be available in the default record constructor.
ACTUAL -
No generic type information available.
---------- BEGIN SOURCE ----------
import java.util.Optional;
public class Reproducer {
interface NoConstructorDeclarations {
record Person(Optional name, Optional age) {}
}
interface AnnotatedCompactConstructor {
record Person(Optional name, Optional age) {
@Deprecated public Person {}
}
}
interface AnotatedExplicitCanonicalConstructor  {
record Person(Optional name, Optional age) {
@Deprecated
public Person(Optional name, Optional age) {
this.name = name;
this.age = age;
}
}
}
public static void main(String args[]) {
for(var approach: Reproducer.class.getDeclaredClasses()) {
Class recordClass = approach.getClasses()[0];
System.out.println(approach.getSimpleName());
var constructor = recordClass.getConstructors()[0];
System.out.println(constructor.isAnnotationPresent(Deprecated.class));
for(var p: constructor.getParameters()) {
System.out.println(p);
}
System.out.println();
}
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Explicitly add a canonical constructor with all record properties.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8320586] update manual test/jdk/TEST.groups
Priority: P4
Type: Task
Component: core-libs
Description: update manual groups to separate core and security tests.
This will add additional test groups jdk_core_manual_interactive, jdk_security_manual_interactive to categorise tests that are run manually and require some interactive input or manual setup, such as deploying and running an rmi server on a remote machine.
it renames the group jdk_core_manual_no_input_security to jdk_security_no_input

-----
Title: [JDK-8320665] update jdk_core at open/test/jdk/TEST.groups
Priority: P4
Type: Task
Component: core-libs
Description: This is part of the ATR job restructuring, so that separate seclibs atr jobs will be executed, allowing more even distrbution of MACH5 execution resources and more effective and efficient analysis of test results, especially for those task that  are executed by an external test partner. corelibs and seclibs  tests will execute as distinct and separate ATR jobs.
update jdk_core so that it is split on security and non security part
a similar task will be required for closed/test/jdk/TEST,groups

-----
Title: [JDK-8320673] PageFormat/CustomPaper.java has no Pass/Fail buttons; multiple instructions
Priority: P4
Type: Bug
Component: client-libs
Description: The test/jdk/java/awt/print/PageFormat/CustomPaper.java test displays instructions but there's no Pass/Fail buttons. As soon as you close the Print dialog (after selecting the file if printing to PDF), the UI disappears — there's no way for the tester to fail the test.
The instructions reference two different bugs which require different actions from the tester. As such, the test must be run twice and display different instructions, it can be achieved by having multiple blocks with `@test` tag.

-----
Title: [JDK-8320682] [AArch64] C1 compilation fails with "Field too big for insn"
Priority: P3
Type: Bug
Component: hotspot
Description: ### Failure analysis ###
The issue is due to using PC-relative addressing (the aarch64 adr instruction) with an (unusually) large non-nmethod code heap size. Attempting to load the address of a constant that is out of range triggers the assert/guarantee.
### Original report ###
In the tier 6 test run that included the fix for JDK-8319700 we saw the same failure.
Test: compiler/arguments/TestC1Globals.java#id4
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10903/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0724edac-4f9d-4b23-a291-90fd75eb8a31/runs/365cdd81-6ab1-4745-a986-7340646f3a7b/workspace/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:265), pid=2092794, tid=2092814
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn
#
# JRE version: Java(TM) SE Runtime Environment (22.0+26) (fastdebug build 22-ea+26-2029)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+26-2029, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x5b9958]  Assembler::adr(Register, unsigned char*)+0x148
#
Host: AArch64, 8 cores, 30G, Oracle Linux Server release 8.8
Time: Fri Nov 24 01:16:05 2023 UTC elapsed time: 2.811199 seconds (0d 0h 0m 2s)
---------------  T H R E A D  ---------------
Current thread (0x0000ffff7837e0a0):  JavaThread "C1 CompilerThread0" daemon [_thread_in_native, id=2092814, stack(0x0000ffff23e02000,0x0000ffff24000000) (2040K)]
Current CompileTask:
C1:2811  242    b  3       java.util.HashMap::putMapEntries (170 bytes)
Stack: [0x0000ffff23e02000,0x0000ffff24000000],  sp=0x0000ffff23ffbc00,  free space=2023k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5b9958]  Assembler::adr(Register, unsigned char*)+0x148  (assembler_aarch64.hpp:265)
V  [libjvm.so+0x698ff8]  LIR_Assembler::const2reg(LIR_Opr, LIR_Opr, LIR_PatchCode, CodeEmitInfo*)+0x3b8  (c1_LIRAssembler_aarch64.cpp:588)
V  [libjvm.so+0x68c194]  LIR_Assembler::move_op(LIR_Opr, LIR_Opr, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool)+0x310  (c1_LIRAssembler.cpp:816)
V  [libjvm.so+0x68da68]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8  (c1_LIRAssembler.cpp:304)
V  [libjvm.so+0x68e6f0]  LIR_Assembler::emit_code(BlockList*)+0x270  (c1_LIRAssembler.cpp:269)
V  [libjvm.so+0x63720c]  Compilation::emit_code_body()+0x14c  (c1_Compilation.cpp:358)
V  [libjvm.so+0x6377d0]  Compilation::compile_java_method()+0x390  (c1_Compilation.cpp:421)
V  [libjvm.so+0x638060]  Compilation::compile_method()+0x1fc  (c1_Compilation.cpp:482)
V  [libjvm.so+0x6386ec]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x25c  (c1_Compilation.cpp:612)
V  [libjvm.so+0x63a464]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4  (c1_Compiler.cpp:258)
V  [libjvm.so+0x8f2b44]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e0  (compileBroker.cpp:2305)
V  [libjvm.so+0x8f372c]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1964)
V  [libjvm.so+0xd6b248]  JavaThread::thread_main_inner()+0xe4  (javaThread.cpp:720)
V  [libjvm.so+0x159a1e0]  Thread::call_run()+0xac  (thread.cpp:220)
V  [libjvm.so+0x130d4cc]  thread_native_entry(Thread*)+0x12c  (os_linux.cpp:787)
C  [libpthread.so.0+0x7928]  start_thread+0x188
OS: linux

-----
Title: [JDK-8320892] AArch64: Restore FPU control state after JNI
Priority: P3
Type: Bug
Component: hotspot
Description: Some buggy libraries corrupt the floating-point control register. Provide something similar to the x86 RestoreMXCSROnJNICalls.
OS: generic

-----
Title: [JDK-8321299] runtime/logging/ClassLoadUnloadTest.java doesn't reliably trigger class unloading
Priority: P4
Type: Bug
Component: hotspot
Description: runtime/logging/ClassLoadUnloadTest.java doesn't trigger unloading of test.Empty class.
The test accidentally pass due to an unrelated class being unloaded:
$ java ... -Xlog:class+unload=info ... ClassLoadUnloadTest\$ClassUnloadTestMain
[0.113s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x000007c001002000 0x000007c001002000

-----
Title: [JDK-8321470] ThreadLocal.nextHashCode can be static final
Priority: P4
Type: Enhancement
Component: core-libs
Description: Submitted for PR:
https://github.com/openjdk/jdk/pull/16987

-----
Title: [JDK-8321474] TestAutoCreateSharedArchiveUpgrade.java should be updated with JDK 21
Priority: P4
Type: Enhancement
Component: hotspot
Description: TestAutoCreateSharedArchiveUpgrade.java tests different JDK versions with their build numbers hard coded into the test. JDK 21 should be added so it can be tested.

-----
Title: [JDK-8321543] Update NSS to version 3.96
Priority: P3
Type: Bug
Component: security-libs
Description: This will be released on 12/14/2023
https://wiki.mozilla.org/NSS:Release_Versions

-----
Title: [JDK-8321550] Update several runtime/cds tests to use vm flags or mark as flagless
Priority: P4
Type: Enhancement
Component: hotspot
Description: The following tests use the ProcessTools.createLimitedTestJavaProcessBuilder() which doesn't pass the vm options to the java process. They need to be changed to use the ProcessTools.createTestJavaProcessBuilder() or mark as vm.flagless.
./appcds/dynamicArchive/LambdasInTwoArchives.java
./appcds/sharedStrings/ResolvedReferencesNotNullTest.java
./appcds/CommandLineFlagCombo.java
./appcds/VerifyWithDefaultArchive.java
./appcds/FillerObjectLoadTest.java
./appcds/TestDumpClassListSource.java
./TestCDSVMCrash.java
./SharedStrings.java
./MaxMetaspaceSize.java

-----
Title: [JDK-8321616] Retire binary test vectors in test/jdk/java/util/zip/ZipFile
Priority: P4
Type: Enhancement
Component: core-libs
Description: Various tests in zip/ZipFile use the binary test vectors input.zip, input.jar and crash.jar. Binary test vectors makes the tests harder to understand, since the contents of the binary files must be analyzed to get a complete understanding of the tests. Modifications to binary test vectors is more complicated and sharing them across tests introduces the risk of affecting unrelated tests.
We should update the tests to generate their own test vectors independently and programmatically. While making a pass over these dusty tests, it also makes sense to convert them to JUnit and perform a moderate pass of cleanup and code modernization.

-----
Title: [JDK-8321940] Improve CDSHeapVerifier in handling of interned strings
Priority: P4
Type: Enhancement
Component: hotspot
Description: If the archived heap object graphs points to any objects that may be reinitialized at run time, the JVM may behave incorrectly. CDSHeapVerifier tries to detect this kind of error. For an explanation, see
https://github.com/openjdk/jdk/blob/3d9d353edb64dd364925481d7b7c8822beeaa117/src/hotspot/share/cds/cdsHeapVerifier.cpp#L40-L65
However, cdsHeapVerifier's handling for interned strings is too strict for cases like this:
******
At dumptime, FooBar is initialized, and its static field points to something like this:
class FooBar {
static final String xxx = System.getProperty("foo") == null ? "AAA" : "BBB"
}
The strings "AAA" and "BBB" are archived as part of the interned string table.
None of the archived object graphs actually point to "AAA" or "BBB". (Note: the static fields of FooBar itself are not archived). So we don't have a condition that cdsHeapVerifier is trying to find.
*******
However, in this case, cdsHeapVerifier still reports an error, even
[3.582s][warning][cds,heap] Field: FooBar::xxx
[3.582s][warning][cds,heap] Value: java.lang.String
[3.582s][warning][cds,heap] {0x000000060e8be8d0} - klass: 'java/lang/String'
[3.582s][warning][cds,heap]  - string: "AAA"
[3.582s][warning][cds,heap]  - ---- fields (total size 3 words):
[3.582s][warning][cds,heap]  - private 'hash' 'I' @12  0 (0x00000000)
[3.582s][warning][cds,heap]  - private final 'coder' 'B' @16  0 (0x00)
[3.582s][warning][cds,heap]  - private 'hashIsZero' 'Z' @17  true (0x01)
[3.582s][warning][cds,heap]  - injected 'flags' 'B' @18  1 (0x01)
[3.582s][warning][cds,heap]  - private final 'value' '[B' @20  [B{0x000000060e8be8e8} (0xc1d17d1d)
[3.582s][warning][cds,heap] --- trace begin ---
[3.582s][warning][cds,heap] [ 0] (shared string table)
[3.582s][warning][cds,heap] [ 1] {0x000000060e8be8d0} java.lang.String
[3.582s][warning][cds,heap] --- trace end ---

-----
Title: [JDK-8322166] Files.isReadable/isWritable/isExecutable expensive when file does not exist
Priority: P4
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Tested on OpenJDK 21.0.1 on Ubuntu Linux 64, but behavior goes back to JDK 7.
A DESCRIPTION OF THE PROBLEM :
The method Files.isAccessible() are implemented on checkAccess so need to catch the IOException when the file does not exist or access can't be determined.
When using Files.isReadable() / isWritable() / isExecutable(), we check only for one mode. The native code in UnixNativeDispatcher.c / Java_sun_nio_fs_UnixNativeDispatcher_access0() is able to give us an error code if the single mode we ask for is not valid for the file.
Since we are asking for a single mode, we could translate the value of error code to a boolean directly, instead of creating an exception with is caught in Files.isAccessible() to return a boolean.
I've tested a patch available here : https://github.com/gdarmont/jdk/commit/5d0128fde225844cf9155505ea005ad50fc74a8c
The performance improvement is especially visible on use cases where a call to Files.isXXX() is likely to fail.
This is for example the case when checking if many files are executable, as it is expected that most of them are not.
Eg. the well known JGit library (Java Git Implementation) is affected, as it needs to check if a file is executable to compute Git mode attributes.
OS: generic

-----
Title: [JDK-8322754] click JComboBox when dialog about to close causes IllegalComponentStateException
Priority: P3
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
Clicking to open a JComboBox popup during AWT event processing at the end of which the dialog will be closed causes an IllegalComponentStateException. This is a re-reporting of 4773491 which I reported over 20 years ago. The evaluation there "Not common usage. Not a feature. This seesm [sic] to be timing related." makes no sense. It can not take zero time to process an event, and there is always some chance the user will click on a combo box during that time. I made that argument then but it was ignored. The very similar bug 4942216 was fixed, and the fix here is the same, check to make sure the combo box is showing before showing the popup, possibly in BasicComboPopup.togglePopup(). We have been receiving these crashes for the last 21 years. We have worked-around for our combo boxes, but we have no control over the ones in JFileChoosers, and we still get crashes for those.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run code.
Click "Close" button on the dialog.
Before the dialog closes (2 seconds) click the combo box arrow at the top.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect no exceptions.
ACTUAL -
Exception in thread "AWT-EventQueue-0" java.awt.IllegalComponentStateException: component must be showing on the screen to determine its location
at java.desktop/java.awt.Component.getLocationOnScreen_NoTreeLock(Component.java:2113)
at java.desktop/java.awt.Component.getLocationOnScreen(Component.java:2087)
at java.desktop/javax.swing.JPopupMenu.show(JPopupMenu.java:982)
at java.desktop/javax.swing.plaf.basic.BasicComboPopup.show(BasicComboPopup.java:235)
at java.desktop/javax.swing.plaf.basic.BasicComboPopup.togglePopup(BasicComboPopup.java:1265)
at java.desktop/javax.swing.plaf.basic.BasicComboPopup$Handler.mousePressed(BasicComboPopup.java:936)
at java.desktop/java.awt.AWTEventMulticaster.mousePressed(AWTEventMulticaster.java:288)
at java.desktop/java.awt.Component.processMouseEvent(Component.java:6618)
at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3398)
at java.desktop/java.awt.Component.processEvent(Component.java:6386)
at java.desktop/java.awt.Container.processEvent(Container.java:2266)
at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4996)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4572)
at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:98)
at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
---------- BEGIN SOURCE ----------
import javax.swing.*;
import java.awt.*;
public class JComboBoxBug5 {
public static void main(String args[]) {
SwingUtilities.invokeLater(()-go());
}
public static void go() {
JDialog dialog = new JDialog();
JComboBox cb = new JComboBox();
cb.setEditable(true);
cb.addItem("test");
cb.addItem("test2");
cb.addItem("test3");
dialog.getContentPane().add(cb, "North");
JButton b = new JButton("Close");
b.addActionListener(
(e)-{
try {
Thread.sleep(2000);
}
catch (Exception ex) {
}
dialog.setVisible(false);
});
dialog.getContentPane().add(b, "South");
dialog.setMinimumSize(new java.awt.Dimension(500, 500));
dialog.pack();
dialog.setVisible(true);
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Override getLocationOnScreen in a JComboBox subclass as follows:
public Point getLocationOnScreen() {
try {
return super.getLocationOnScreen();
}
catch (IllegalComponentStateException e) {
return new Point(0, 0);
}
}
The popup will not be shown, so returning (0,0) does not cause a problem.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8322809] SystemModulesMap::classNames and moduleNames arrays do not match the order
Priority: P3
Type: Bug
Component: tools
Description: A DESCRIPTION OF THE PROBLEM :
I have a java-project that is build as module. The name of the module starts with "com" (e.g. com.project). This module has a dependency to jdk.httpserver. When I run the compiled jar with java command, then everything works fine. But when I build a runtime image with jlink and try to start that one, I get an error ("Module com.project not in boot Layer").
If I change the module name to not start with "com" (e.g. org.project) or remove the dependency to jdk.httpserver or use Java 17, then the runtime image created by jlink works fine.
REGRESSION : Last worked in version 17.0.9
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a java project with a starter class (com.project.Starter) containing the main method.
Add module-info.java and name your project "com.project" and add dependency to "jdk.httpserver".
Compile the project.
Use jlink to build a runtime image:
jlink --module-path "c:\\jmods;out" --add-modules com.project --launcher starter=com.project/com.project.Starter --output image
Execute image/bin/starter.bat and you will get an exception: "Module com.project not in boot Layer"
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Running application (no exception)
ACTUAL -
java.lang.InternalError: Module com.project not in boot Layer
---------- BEGIN SOURCE ----------
##Starter##
package com.project;
public class Starter {
public static void main(String[] args) {
System.out.println("Hello world");
}
}
##module-info.java##
module com.project {
requires jdk.httpserver;
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
renaming module to not start with "com"
FREQUENCY : always
OS: generic

-----
Title: [JDK-8322830] Add test case for ZipFile opening a ZIP with no entries
Priority: P4
Type: Enhancement
Component: core-libs
Description: A ZIP file with no entries is unusual, but valid. It can be the result of filtering a ZIP file with no matching entries, etc.
We currently have no test case for this, which can be verified by adding the following code in getEntryPos:
if (total == 0) {
throw new AssertionError();
}

-----
Title: [JDK-8323562] SaslInputStream.read() may return wrong value
Priority: P4
Type: Bug
Component: core-libs
Description: The "com.sun.jndi.ldap.sasl.SaslInputStream" class has this code:
public int read() throws IOException {
byte[] inBuf = new byte[1];
int count = read(inBuf, 0, 1);
if (count  0) {
return inBuf[0];
} else {
return -1;
}
}
SaslInputStream.read() should return a value in the range from 0 to 255 per the spec of InputStream.read() but it returns the signed byte from the inBuf as is.
OS: generic

-----
Title: [JDK-8323688] C2: Fix UB of jlong overflow in PhaseIdealLoop::is_counted_loop()
Priority: P4
Type: Bug
Component: hotspot
Description: The computation of `final_correction` in `is_counted_loop()` could overflow which is UB. I don't think that any compiler would produce a wrong result. But we should still fix this UB.

-----
Title: [JDK-8324841] PKCS11 tests still skip execution
Priority: P4
Type: Bug
Component: security-libs
Description: Since JDK-8313206, the PKCS11 tests throw SkipException if they can't find NSS library. This is fine in the default case where no NSS library was provided. However, in cases where we expect the library to be found (like when using JIB or when path to NSS is explicitly specified on the command line via -Djdk.test.lib.artifacts.nsslib-linux_x64), failure to find NSS should be treated as an error.
Additionally, the test framework adds nss/lib suffix to the provided jdk.test.lib.artifacts.nsslib-linux_x64 parameter; this is unexpected, and makes testing with platform libnss3 harder than necessary.
(Also, since JDK-8295343 the test does not work with system NSS libraries on Ubuntu 20.04/22.04. On these systems the library was located in /usr/lib/x86_64-linux-gnu/nss/, which was removed from the search path. But that might be a separate issue.)

-----
Title: [JDK-8324861] Exceptions::wrap_dynamic_exception() doesn't have ResourceMark
Priority: P4
Type: Bug
Component: hotspot
Description: Exceptions::wrap_dynamic_exception() don't have ResourceMark in the logging path
diff:
diff --git a/src/hotspot/share/utilities/exceptions.cpp b/src/hotspot/share/utilities/exceptions.cpp
index bca6837ee13..a1c5b868481 100644
--- a/src/hotspot/share/utilities/exceptions.cpp
+++ b/src/hotspot/share/utilities/exceptions.cpp
@@ -433,6 +433,7 @@ void Exceptions::wrap_dynamic_exception(bool is_indy, JavaThread* THREAD) {
// Pass through an Error, including BootstrapMethodError, any other form
// of linkage error, or say OutOfMemoryError
if (ls != nullptr) {
+        ResourceMark rm(THREAD);
ls-print_cr("bootstrap method invocation wraps BSME around " PTR_FORMAT, p2i(exception));
exception-print_on(ls);
}
@@ -441,6 +442,7 @@ void Exceptions::wrap_dynamic_exception(bool is_indy, JavaThread* THREAD) {
// Otherwise wrap the exception in a BootstrapMethodError
if (ls != nullptr) {
+      ResourceMark rm(THREAD);
ls-print_cr("%s throws BSME for " PTR_FORMAT, is_indy ? "invokedynamic" : "dynamic constant", p2i(exception));
exception-print_on(ls);
}

-----
Title: [JDK-8325038] runtime/cds/appcds/ProhibitedPackage.java can fail with UseLargePages
Priority: P4
Type: Bug
Component: hotspot
Description: make CONF_NAME=linux-x64 LOG=info TEST="runtime/cds/appcds/ProhibitedPackage.java" JTREG_JAVA_OPTIONS="-XX:+UseLargePages" test
stdout: [[0.001s][warning][pagesize] UseLargePages disabled, no large pages configured and available on the system.
[0.009s][info   ][cds     ] Core region alignment: 4096
[0.028s][info   ][cds     ] JVM_StartThread() ignored: java.lang.ref.Reference$ReferenceHandler
[0.028s][info   ][cds     ] JVM_StartThread() ignored: java.lang.ref.Finalizer$FinalizerThread
[0.041s][info   ][cds     ] Loading classes to share ...
[0.041s][info   ][cds     ] Parsing /home/dnsimon/dev/jdk-jdk/open/build/linux-x64/images/jdk/lib/classlist
[0.094s][info   ][cds     ] JVM_StartThread() ignored: jdk.internal.misc.InnocuousThread
[0.132s][info   ][cds     ] Parsing /home/dnsimon/dev/jdk-jdk/open/build/linux-x64/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_ProhibitedPackage_java/scratch/0/runtime.cds.appcds.ProhibitedPackage.java-test.classlist
[0.132s][info   ][cds     ] Prohibited package for non-bootstrap classes: java/lang/Prohibited.class from /home/dnsimon/dev/jdk-jdk/open/build/linux-x64/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_ProhibitedPackage_java/scratch/0/prohibited_pkg.jar
[0.132s][warning][cds     ] java.lang.ClassNotFoundException:
...
java.lang.RuntimeException: '[cds] Prohibited package for non-bootstrap classes: java/lang/Prohibited.class' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:252)
at ProhibitedPackage.main(ProhibitedPackage.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)

-----
Title: [JDK-8325399] Add tests for virtual threads doing Selector operations
Priority: P4
Type: Enhancement
Component: core-libs
Description: SelectorOps is new test in the loom repo to exercise virtual threads doing Selector operations, this test can be brought over to the main line.

-----
Title: [JDK-8325506] Ensure randomness is only read from provided SecureRandom object
Priority: P4
Type: Enhancement
Component: security-libs
Description: Many crypto service classes require a SecureRandom object at initialization. This test makes sure no other random source is accidentally used.

-----
Title: [JDK-8325525] Create jtreg test case for JDK-8325203
Priority: P4
Type: Enhancement
Component: tools
Description: Create jtreg test case for JDK-8325203 issue.
Need to test that child process started from the app launched by jpackage launcher is not automatically terminated when the the launcher is terminated.
OS: windows

-----
Title: [JDK-8325203] System.exit(0) kills the launched 3rd party application
Priority: P3
Type: Bug
Component: tools
Description: ADDITIONAL SYSTEM INFORMATION :
Windows 11,
openjdk version "21.0.2" 2024-01-16 LTS
OpenJDK Runtime Environment Temurin-21.0.2+13 (build 21.0.2+13-LTS)
OpenJDK 64-Bit Server VM Temurin-21.0.2+13 (build 21.0.2+13-LTS, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
Hi there,
my Java app experienced a very weird regression when switching from JDK
OpenJDK21U-jdk_x64_windows_hotspot_21.0.1_12
to
OpenJDK21U-jdk_x64_windows_hotspot_21.0.2_13
This small snippet should start a third party software (in this case Notepad++.exe but it's just an example) and after 30 seconds, close the java app that launched it.
public static void main(String... args) throws IOException {
String[] cmdToRunUsingArgs = {"cmd.exe", "/C", "C:\\Program Files\\Notepad++\\notepad++.exe"};
Runtime.getRuntime().exec(cmdToRunUsingArgs);
Executors.newSingleThreadScheduledExecutor().schedule(() - {
System.exit(0);
}, 30, TimeUnit.SECONDS);
}
It works well with all previous JDK versions but it stopped working from java 21.0.2 and later.
With java 21.0.1, the program launches the third party app correcly, after 30 seconds, it kills itself by leaving the third app running.
With java 21.0.2, the program launches the third party app correcly, after 30 seconds, it kills itself AND the third party app.
This makes even impossible to restart a java app from the app itself.
REGRESSION : Last worked in version 17.0.10
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the code snippet from a JAR file not in an IDE!
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program should run a third party software and then close itself leaving the third party software running.
ACTUAL -
The program kills both the third party software and itself.
---------- BEGIN SOURCE ----------
public static void main(String... args) throws IOException {
String[] cmdToRunUsingArgs = {"cmd.exe", "/C", "C:\\Program Files\\Notepad++\\notepad++.exe"};
Runtime.getRuntime().exec(cmdToRunUsingArgs);
Executors.newSingleThreadScheduledExecutor().schedule(() - {
System.exit(0);
}, 30, TimeUnit.SECONDS);
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
no workaround found
FREQUENCY : always
OS: windows_10

-----
Title: [JDK-8325610] CTW: Add StressIncrementalInlining to stress options
Priority: P4
Type: Enhancement
Component: hotspot
Description: CtwRunner opts-in into various C2 randomizers:
https://github.com/openjdk/jdk/blob/6a12362660d6221beb3a059dc90d06a8068cce39/test/hotspot/jtreg/testlibrary/ctw/src/sun/hotspot/tools/ctw/CtwRunner.java#L297-L301
I think we forgot to add -XX:+StressIncrementalInlining there, which was added by JDK-8319879.

-----
Title: [JDK-8325762] Use PassFailJFrame.Builder.splitUI() in PrintLatinCJKTest.java
Priority: P4
Type: Enhancement
Component: client-libs
Description: The test/jdk/java/awt/print/PrinterJob/PrintLatinCJKTest.java test displays only Print button as its test UI. It can be embedded into the instruction frame using the new PassFailJFrame.Builder.splitUI() method which allows displaying test UI in a split pane.
It depends on JDK-8294148 which adds this feature to PassFailJFrame.

-----
Title: [JDK-8325851] Hide PassFailJFrame.Builder constructor
Priority: P5
Type: Bug
Component: client-libs
Description: The PassFailJFrame.Builder class provides a way to configure the parameters of PassFailJFrame in a set of chained method calls.
The Builder class is public and has public constructor. At the same time, a better design would be to hide all the Builder constructors and rely on the builder() method which returns an instance of the Builder.
At the same time, the builder() helper wasn't available until JDK-8294156 which was integrated in October 2023 whereas the Builder class became available with JDK-8294535 in August 2023.
For this reason, there are 20 tests which create the PassFailJFrame.Builder object using its constructor instead of the helper method. These tests have to be updated.
To find these tests, run:
grep -r 'new PassFailJFrame.Builder' test/jdk
Hiding the PassFailJFrame.Builder constructor is a better design choice. New tests should not create the builder using the `new` keyword. To enforce it, the Builder constructor needs to be private.

-----
Title: [JDK-8325906] Problemlist vmTestbase/vm/mlvm/meth/stress/compiler/deoptimize/Test.java#id1 until JDK-8320865 is fixed
Priority: P4
Type: Sub-task
Component: hotspot

-----
Title: [JDK-8326100] DeflaterDictionaryTests should use Deflater.getBytesWritten instead of Deflater.getTotalOut
Priority: P4
Type: Enhancement
Component: core-libs
Description: Various DeflaterDictionaryTests methods currently calls Deflater.getTotalOut() when printing some debugging info.
They should be updated to instead use Deflater.getBytesWritten.
Additionally, various debugging output lines claim to include the output of Deflater.getAdler, but instead output the value of Deflater.getTotalOut. We should correct this to actually print the Adler value.
This is a cleanup in preparation for deprecating Deflater.getTotalOut, see JDK-8326096

-----
Title: [JDK-8326121] vmTestbase/gc/g1/unloading/tests/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl failed with Full gc happened. Test was useless.
Priority: P4
Type: Bug
Component: hotspot
Description: The test triggers frequent System.gc() calls which in some cases may aggressively shrink the heap, and subsequent allocations lead to full-GC. This may affect the usefulness of the test, but should not be considered a test failure.
The following test failed in the JDK23 CI:
vmTestbase/gc/g1/unloading/tests/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl/TestDescription.java
Here's a snippet from the log file:
#section:main
----------messages:(7/1060)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -Xbootclasspath/a:classPool.jar -Xlog:gc:gc.log -XX:-UseGCOverheadLimit gc.g1.unloading.UnloadingTest -keepRefMode STATIC_FIELD_OF_ROOT_CLASS -inMemoryCompilation -keep classloader -numberOfChecksLimit 4 -stressTime 180
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -Xbootclasspath/a:classPool.jar -Xlog:gc:gc.log -XX:-UseGCOverheadLimit gc.g1.unloading.UnloadingTest -keepRefMode STATIC_FIELD_OF_ROOT_CLASS -inMemoryCompilation -keep classloader -numberOfChecksLimit 4 -stressTime 180
started: Sun Feb 18 22:33:06 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
finished: Sun Feb 18 22:33:48 UTC 2024
elapsed time (seconds): 42.244
----------configuration:(5/210)----------
----------System.out:(209/10886)----------
Stress time: 180 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1073741824
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
releaseRefMode = NONE
whatToKeep = CLASSLOADER
classlodingMethod = REFLECTION
numberOfGCsBeforeCheck = 50
keepRefMode = STATIC_FIELD_OF_ROOT_CLASS
humongousClass = false
compilationLevel = 0
compilationNumber = 2
redefineClasses = false
inMemoryCompilation = false
numberOfChecksLimit = 4
For random generator using seed: -9189803049408108649
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-9189803049408108649" to command line.
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
Check OK, class gc.g1.unloading.loading.ClassAbc_0___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_1___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_2___________, isAlive = true, shouldBeAlive = true
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_3___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_4___________, isAlive = true, shouldBeAlive = true
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
Check OK, class gc.g1.unloading.loading.ClassAbc_5___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_6___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_7___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_8___________, isAlive = true, shouldBeAlive = true
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_9___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
Check OK, class gc.g1.unloading.loading.ClassAbc_10__________, isAlive = true, shouldBeAlive = true
Exiting because numberOfChecksLimit exceeded.
ClassAssertion.getCounterOfCheckedAlive() = 4
ClassAssertion.getCounterOfCheckedUnloaded() = 7
bean.getName() = 	"G1 Young Generation", bean.getCollectionCount() = 	66
bean.getName() = 	"G1 Concurrent GC", bean.getCollectionCount() = 	122
bean.getName() = 	"G1 Old Generation", bean.getCollectionCount() = 	1
java.lang.RuntimeException: Full gc happened. Test was useless.
at gc.g1.unloading.UnloadingTest.checkGCCounters(UnloadingTest.java:164)
at gc.g1.unloading.UnloadingTest.run(UnloadingTest.java:133)
at nsk.share.test.Tests$TestRunner.execute(Tests.java:82)
at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
at nsk.share.test.Tests.runTest(Tests.java:102)
at gc.g1.unloading.UnloadingTest.main(UnloadingTest.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
----------System.err:(14/786)----------
nsk.share.TestFailure: Test exit code: 97
at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
at nsk.share.test.Tests.runTest(Tests.java:102)
at gc.g1.unloading.UnloadingTest.main(UnloadingTest.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
----------rerun:(51/8380)*----------
OS: windows

-----
Title: [JDK-8326611] Clean up vmTestbase/nsk/stress/stack tests
Priority: P4
Type: Enhancement
Component: hotspot
Description: The vmTestbase/nsk/stress/stack might be easy refactored to improve reading.

-----
Title: [JDK-8326898] NSK tests should listen on loopback addresses only
Priority: P4
Type: Enhancement
Component: core-svc
Description: There are 2 places in nsk framework when server socket listens on all local addresses:
DebugeeBinder.prepareForPipeConnection (nsk/share/jpda/DebugeeBinder.java)
and
SocketIOPipe.createServerIOPipe (nsk/share/jpda/SocketIOPipe.java)
To improve robustness the tests should listen on loopback addresses only
OS: generic

-----
Title: [JDK-8327924] Simplify TrayIconScalingTest.java
Priority: P5
Type: Bug
Component: client-libs
Description: The test/jdk/java/awt/TrayIcon/TrayIconScalingTest.java test uses PassFailJFrame and combines builder and positioning of the windows. Previously, calling PassFailJFrame.positionTestWindow was required to show the instructions; now the instructions are shown automatically after build() is called on the builder.
Moreover, using PassFailJFrame.positionTestWindow moves the instructions to the left of the screen. Since there's no test UI, the instructions could and should remain centered.

-----
Title: [JDK-8328021] Convert applet test java/awt/List/SetFontTest/SetFontTest.html to main program
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/List/SetFontTest/SetFontTest.html  is a manual applet-based test.
It can be converted to a main program test using PassFailJFrame

-----
Title: [JDK-8328242] Add a log area to the PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: Often manual tests have a text area in the instruction window to print feedback from the test to be evaluated by a tester.
We can add this as a standard feature.

-----
Title: [JDK-8328303] 3 JDI tests timed out with UT enabled
Priority: P4
Type: Bug
Component: core-svc
Description: The following 3 tests timed out in the JDK23 CI with UT enabled:
vmTestbase/nsk/jdi/EventRequestManager/threadDeathRequests/thrdeathreq001/TestDescription.java
vmTestbase/nsk/jdi/ClassPrepareEvent/thread/thread001/TestDescription.java
vmTestbase/nsk/jdi/ClassPrepareEvent/referenceType/refType001/TestDescription.java
thrdeathreq001 log snippet:
2) Getting ThreadDeathRequest objects with enabled event requests...
Found expected ThreadDeathRequest object with the property: (first,a quick)
Found expected ThreadDeathRequest object with the property: (second,brown)
Found expected ThreadDeathRequest object with the property: (third,fox)
Found expected ThreadDeathRequest object with the property: (fourth,jumps)
Found expected ThreadDeathRequest object with the property: (fifth,over)
Found expected ThreadDeathRequest object with the property: (sixth,the lazy)
Found expected ThreadDeathRequest object with the property: (seventh,dog)
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: exiting
Timeout signalled after 480 seconds
# ERROR: TEST FAILED: debuggee's process finished with status: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: debuggee's process finished with status: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.quitDebuggee(thrdeathreq001.java:187)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.runIt(thrdeathreq001.java:131)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.run(thrdeathreq001.java:82)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.main(thrdeathreq001.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: TEST FAILED: debuggee's process finished with status: 134
----------System.err:(0/0)----------
----------rerun:(40/10287)*----------
thread001 log snippet:
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread outerThread
Class nsk.jdi.ClassPrepareEvent.thread.ClassForOuterThread prepared in thread outerThread
Thread outerThread is correctly suspended
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
eventHandler completed
Disabling StepEvent request
Sending command: quit
Waiting for debuggee terminating
debugee.stderr All threads started in debuggee
Timeout signalled after 480 seconds
# ERROR: Debuggee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debuggee FAILED with exit code: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.jdi.ClassPrepareEvent.thread.thread001.run(thread001.java:334)
at nsk.jdi.ClassPrepareEvent.thread.thread001.main(thread001.java:79)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
# ERROR: TEST FAILED
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Debuggee FAILED with exit code: 134
# ERROR: TEST FAILED
----------System.err:(0/0)----------
----------rerun:(40/10107)*----------
refType001 log snippet:
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
eventHandler completed
Disabling StepEvent request
debugee.stderr Another thread started in debuggee: AnotherThread
Sending command: quit
Waiting for debuggee terminating
Timeout signalled after 480 seconds
# ERROR: Debuggee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debuggee FAILED with exit code: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.jdi.ClassPrepareEvent.referenceType.refType001.run(refType001.java:310)
at nsk.jdi.ClassPrepareEvent.referenceType.refType001.main(refType001.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
# ERROR: TEST FAILED
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Debuggee FAILED with exit code: 134
# ERROR: TEST FAILED
----------System.err:(0/0)----------
----------rerun:(40/10179)*----------
OS: linux, os_x

-----
Title: [JDK-8328379] Convert URLDragTest.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert awt/dnd/URLDragTest.html applet test to main using PassFailJFrame.
OS: generic

-----
Title: [JDK-8328402] Implement pausing functionality for the PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: we need to add next to Pass/Fail a "Pause Timer" button, that
(a) stops the count down
(b) changes the Pause Timer to "Resume Timer"
(c) disables Pass/Fail until the timer is resumed
the test will not have to pause or be aware - only the PassFailJFrame machinery.
So the tester can do anything they want except exit the test in the paused mode.

-----
Title: [JDK-8328619] sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.java failed with BindException: Address already in use
Priority: P4
Type: Bug
Component: core-svc
Description: The following test failed in the JDK23 CI:
sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.java
Here's a snippet from the log file:
#section:main
----------messages:(8/427)----------
command: main SSLConfigFilePermissionTest
reason: User specified action: run main/timeout=300 SSLConfigFilePermissionTest
started: Wed Mar 20 05:06:20 UTC 2024
Mode: agentvm
Agent id: 14
Additional exports to unnamed modules from @modules: java.management/sun.management jdk.management.agent/jdk.internal.agent jdk.management.agent/sun.management.jmxremote
finished: Wed Mar 20 05:06:27 UTC 2024
elapsed time (seconds): 7.287
----------configuration:(17/2132)----------
----------System.out:(56/17284)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=37049 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy ]
test cmdline: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=37049 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy]
[2024-03-20T05:06:22.175078613Z] Gathering output for process 135662
[2024-03-20T05:06:22.305457499Z] Waiting for completion for process 135662
[2024-03-20T05:06:25.948450419Z] Waiting for completion finished for process 135662
Output and diagnostic info for process 135662 was saved into 'pid-135662-output.log'
test output:
Error: Exception thrown by the agent: java.rmi.server.ExportException: Port already in use: 37049; nested exception is:
java.net.BindException: Address already in use
jdk.internal.agent.AgentConfigurationError: java.rmi.server.ExportException: Port already in use: 37049; nested exception is:
java.net.BindException: Address already in use
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:491)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:447)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:603)
Caused by: java.rmi.server.ExportException: Port already in use: 37049; nested exception is:
java.net.BindException: Address already in use
at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:356)
at java.rmi/sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:251)
at java.rmi/sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:415)
at java.rmi/sun.rmi.transport.LiveRef.exportObject(LiveRef.java:147)
at java.rmi/sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:235)
at java.rmi/sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:223)
at java.rmi/sun.rmi.registry.RegistryImpl.(RegistryImpl.java:182)
at jdk.management.agent/sun.management.jmxremote.SingleEntryRegistry.(SingleEntryRegistry.java:49)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.exportMBeanServer(ConnectorBootstrap.java:857)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:479)
... 2 more
Caused by: java.net.BindException: Address already in use
at java.base/sun.nio.ch.Net.bind0(Native Method)
at java.base/sun.nio.ch.Net.bind(Net.java:565)
at java.base/sun.nio.ch.Net.bind(Net.java:554)
at java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:636)
at java.base/java.net.ServerSocket.bind(ServerSocket.java:391)
at java.base/java.net.ServerSocket.(ServerSocket.java:278)
at java.base/java.net.ServerSocket.(ServerSocket.java:170)
at java.rmi/sun.rmi.transport.tcp.TCPDirectSocketFactory.createServerSocket(TCPDirectSocketFactory.java:45)
at java.rmi/sun.rmi.transport.tcp.TCPEndpoint.newServerSocket(TCPEndpoint.java:672)
at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:344)
... 11 more
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=39843 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy ]
test cmdline: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=39843 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy]
[2024-03-20T05:06:25.959174046Z] Gathering output for process 135686
[2024-03-20T05:06:25.959879410Z] Waiting for completion for process 135686
[2024-03-20T05:06:27.595435680Z] Waiting for completion finished for process 135686
Output and diagnostic info for process 135686 was saved into 'pid-135686-output.log'
test output:
Error: File read access must be restricted: /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/jmxremote.ssl.config
jdk.internal.agent.AgentConfigurationError
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.checkRestrictedFile(ConnectorBootstrap.java:655)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.createSslRMIServerSocketFactory(ConnectorBootstrap.java:689)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.exportMBeanServer(ConnectorBootstrap.java:815)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:479)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:447)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:603)
----------System.err:(11/600)----------
java.lang.Error: 1 test(s) failed
at AbstractFilePermissionTest.runTest(AbstractFilePermissionTest.java:126)
at SSLConfigFilePermissionTest.main(SSLConfigFilePermissionTest.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.Error
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.lang.Error: 1 test(s) failed
OS: linux

-----
Title: [JDK-8328665] serviceability/jvmti/vthread/PopFrameTest failed with a timeout
Priority: P4
Type: Bug
Component: hotspot
Description: The test serviceability/jvmti/vthread/PopFrameTest/PopFrameTest.java#no-vmcontinuations resulted in test timeout after 480 secs.
This bug is a copy of the JDK-8327781 as it was created as a confidential by accident. The JDK-8327781 is closed as dup.

-----
Title: [JDK-8328723] IP Address error when client enables HTTPS endpoint check on server socket
Priority: P3
Type: Bug
Component: security-libs
Description: Client authentication in SSLServerSocket is not working correctly, when configured with endpoint identification algorithm "HTTPS".
The endpoint identification algorithm HTTPS is defined on the Java Security Standard Algorithm Names page [1], and points to RFC 2818 [2]. The RFC defines steps to perform server identity checks. For client identity, the RFC states [3]:
Typically, the server has no external knowledge of what the client's
identity ought to be and so checks (other than that the client has a
certificate chain rooted in an appropriate CA) are not possible. If a
server has such knowledge (typically from some source external to
HTTP or TLS) it SHOULD check the identity as described above.
There's no way to specify the external source of knowledge, so we should disable HTTPS identity checks on the server side.
[1] https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#additional-jsse-standard-names
[2] https://datatracker.ietf.org/doc/html/rfc2818
[3] https://datatracker.ietf.org/doc/html/rfc2818#section-3.2
Steps to reproduce:
- create a SSLServerSocket
- activate client authentication on SSLServerSocket (setNeedClientAuth(true))
- set endpoint identification algorithm to HTTPS
- connect to the SSLServerSocket with a certificate
Actual results are one of the following, depending on the certificate used:
- java.security.cert.CertificateException: No subject alternative names present
- java.security.cert.CertificateException: No subject alternative names matching IP address  found
- successful connection, if the client certificate contains SubjectAltName extension matching its IP address
Expected result:
- java.security.cert.CertificateException: Identification algorithm HTTPS is not supported on the server side

-----
Title: [JDK-8329353] ResolvedReferencesNotNullTest.java failed with Incorrect resolved references array, quxString should not be archived
Priority: P2
Type: Bug
Component: hotspot
Description: The following test failed in the JDK23 CI:
runtime/cds/appcds/sharedStrings/ResolvedReferencesNotNullTest.java
Here's a snippet from the log file:
#section:driver
----------messages:(7/254)----------
command: driver ResolvedReferencesNotNullTest
reason: User specified action: run driver ResolvedReferencesNotNullTest
started: Fri Mar 29 23:18:24 UTC 2024
Mode: agentvm
Agent id: 15
finished: Fri Mar 29 23:19:03 UTC 2024
elapsed time (seconds): 39.553
----------configuration:(16/2450)----------
----------System.out:(4/3396)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+17-1315/linux-x64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/5/runtime/cds/appcds/sharedStrings/ResolvedReferencesNotNullTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+17-1315/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/sharedStrings:/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/5/test/lib:/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/5/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-x64/jdk-21_linux-x64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/tmp -Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -cp /opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/0/test.jar -Xbootclasspath/a:/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/0/whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI ResolvedReferencesWb false ]
[2024-03-29T23:18:24.429762282Z] Gathering output for process 2540024
[2024-03-29T23:18:24.438787921Z] Waiting for completion for process 2540024
[2024-03-29T23:19:03.834958489Z] Waiting for completion finished for process 2540024
----------System.err:(22/1034)----------
stdout: [Resolved References Array Length: 3
quxString
fooString
barString
];
stderr: [Exception in thread "main" java.lang.RuntimeException: Incorrect resolved references array, quxString should not be archived
at ResolvedReferencesWb.throwException(ResolvedReferencesWb.java:81)
at ResolvedReferencesWb.main(ResolvedReferencesWb.java:71)
]
exitValue = 1
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:521)
at ResolvedReferencesNotNullTest.main(ResolvedReferencesNotNullTest.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
OS: linux

-----
Title: [JDK-8329533] TestCDSVMCrash fails on libgraal
Priority: P4
Type: Bug
Component: hotspot
Description: java.lang.Error: Expected VM to crash
at TestCDSVMCrash.main(TestCDSVMCrash.java:59)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
This part of the test looks suspicious to me:
// This should guarantee to throw:
// java.lang.OutOfMemoryError: Requested array size exceeds VM limit
try {
Object[] oa = new Object[Integer.MAX_VALUE];
throw new Error("OOME not triggered");
} catch (OutOfMemoryError err) {
throw new Error("OOME didn't abort JVM!");
}
Escape analysis can eliminate the allocation altogether.
This started failing with https://bugs.openjdk.org/browse/JDK-8321550 according to [~mikael].

-----
Title: [JDK-8330278] Have SSLSocketTemplate.doClientSide use loopback address
Priority: P4
Type: Bug
Component: security-libs
Description: SSLSocketTemplate currently defaults to using the localhost address. Using the loopback address by default may prove more reliable for some test configurations.
e.g. see https://github.com/openjdk/jdk/pull/2405
similar changes may be possible for the TLSBase test class

-----
Title: [JDK-8330621] Make 5 compiler tests use ProcessTools.executeProcess
Priority: P4
Type: Enhancement
Component: hotspot
Description: Those compiler tests use plain 'new ProcessBuilder' and its start method:
c2/Test7068051.java
c2/unloaded/TestInlineUnloaded.java
jsr292/NonInlinedCall/Agent.java
profiling/spectrapredefineclass_classloaders/Launcher.java
profiling/spectrapredefineclass/Launcher.java
As stated in JDK-8174768, we try to have more information about started secondary processes and make the process more controllable. For example, we can identify tests that start processes by a simple modification of ProcessTools, but that 5 would avoid such a search.
I suggest reworking them so that they use the ProcessTools.executeProcess.

-----
Title: [JDK-8331391] Enhance the keytool code by invoking the buildTrustedCerts method for essential options
Priority: P4
Type: Bug
Component: security-libs
Description: Optimize the buildTrustedCerts() method by ensuring it's invoked only when the -trustcacerts option is specified. Currently, the code lacks this conditional guarding.
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/tools/keytool/Main.java#L1135

-----
Title: [JDK-8331393] AArch64: u32 _partial_subtype_ctr loaded/stored as 64
Priority: P4
Type: Bug
Component: hotspot
Description: We should store/load as proper sized.
https://github.com/openjdk/jdk/blob/60b61e588c1252b4b1fbc64d0f818a85670f7146/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp#L1565

-----
Title: [JDK-8331864] Update Public Suffix List to 1cbd6e7
Priority: P3
Type: Enhancement
Component: security-libs
Description: Download date: 2024-05-07
Download URL: https://publicsuffix.org/list/public_suffix_list.dat
which is identical to https://raw.githubusercontent.com/publicsuffix/list/1cbd6e71a9b83620b1d0b11e49d3d9ff48c27e22/public_suffix_list.dat

-----
Title: [JDK-8332112] Update nsk.share.Log to don't print summary during VM shutdown hook
Priority: P4
Type: Enhancement
Component: hotspot
Description: The nsk.share.Log doing some cleanup and reporting errors in the cleanup method. This method is supposed to be executed by finalizer originally. However, now it is called only during shutdown hook. The cleanup using Cleaner doesn't work (see JDK-8330760).
This cleanup is not necessary and printing summary usually is just disabled. It is enabled if the test called 'complain' method. However, the error should have been printed already in this method.
Note: The 'verboseOnErrorEnabled' is just not used.
See isVerboseOnErrorEnabled.
public boolean isVerboseOnErrorEnabled() {
-        return errorsSummaryEnabled;
-    }

-----
Title: [JDK-8332340] Add JavacBench as a test case for CDS
Priority: P4
Type: Enhancement
Component: hotspot
Description: JavacBench is a test program that compiles 90 Java source files. It uses a fair amount of invokedynamic callsites, so it's good for testing CDS support for indy and lambda expressions.

-----
Title: [JDK-8332461] ubsan : dependencies.cpp:906:3: runtime error: load of value 4294967295, which is not a valid value for type 'DepType'
Priority: P4
Type: Bug
Component: hotspot
Description: On linux86_64  fastdebug, with ubsan enabled, we run into this issue :
assert(_type != end_marker, "already at end");
/jdk/src/hotspot/share/code/dependencies.cpp:906:3: runtime error: load of value 4294967295, which is not a valid value for type 'DepType'
#0 0x14e2c941db7b in Dependencies::DepStream::next() /jdk/src/hotspot/share/code/dependencies.cpp:906
#1 0x14e2cadaf907 in Dependencies::validate_dependencies(CompileTask*, char**) /jdk/src/hotspot/share/code/dependencies.cpp:632
#2 0x14e2ca7b70c0 in ciEnv::validate_compile_task_dependencies(ciMethod*) /jdk/src/hotspot/share/ci/ciEnv.cpp:1007
#3 0x14e2ca7c1719 in ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, bool, int, RTMState) /jdk/src/hotspot/share/ci/ciEnv.cpp:1091
#4 0x14e2ca2744f6 in Compilation::install_code(int) /jdk/src/hotspot/share/c1/c1_Compilation.cpp:426
#5 0x14e2ca283a81 in Compilation::compile_method() /jdk/src/hotspot/share/c1/c1_Compilation.cpp:488
#6 0x14e2ca2854aa in Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*) /jdk/src/hotspot/share/c1/c1_Compilation.cpp:609
#7 0x14e2ca28a9f3 in Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) /jdk/src/hotspot/share/c1/c1_Compiler.cpp:260
#8 0x14e2cab51df1 in CompileBroker::invoke_compiler_on_method(CompileTask*) /jdk/src/hotspot/share/compiler/compileBroker.cpp:2303
#9 0x14e2cab538ee in CompileBroker::compiler_thread_loop() /jdk/src/hotspot/share/compiler/compileBroker.cpp:1961
#10 0x14e2cb7b03dc in JavaThread::thread_main_inner() /jdk/src/hotspot/share/runtime/javaThread.cpp:759
#11 0x14e2cd2a7c2f in Thread::call_run() /jdk/src/hotspot/share/runtime/thread.cpp:225
#12 0x14e2cc791415 in thread_native_entry /jdk/src/hotspot/os/linux/os_linux.cpp:846
#13 0x14e2d2d486e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
... (rest of output omitted)
Looks like some variable (probably _type)  is not initialized or somehow overwritten.
We might also remove the assertion if it brings not much benefit.
OS: linux

-----
Title: [JDK-8332724] x86 MacroAssembler may over-align code
Priority: P5
Type: Bug
Component: hotspot
Description: The functions align32 and align64 are supposed to align the code to 32 or 64 bytes, by adding the minimal number of NOP bytes that is required to align the code.
The target is explicitly cast to unsigned long long, but then it's passed to a method that accepts a signed int. If the target happens to be negative, we will generate 32 / 64 NOP bytes too many.

-----
Title: [JDK-8332777] Update JCStress test suite
Priority: P4
Type: Enhancement
Component: hotspot
Description: Let's make our wrapper capable of running the latest JCStress with all its improvements.

-----
Title: [JDK-8332866] Crash in ImageIO JPEG decoding when MEM_STATS in enabled
Priority: P3
Type: Bug
Component: client-libs
Description: In IJG library's jmemmgr.c file we can define MEM_STATS to enable printing of memory statistic logs when we have OOM. But if we enable it we get crash while disposing IJG stored objects in jmemmgr-free-pool() function.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000103743164, pid=82400, tid=8707
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-05-24-0701510.jdv...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-05-24-0701510.jdv..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# C  [libjavajpeg.dylib+0x23164]  free_pool+0x50
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
---------------  S U M M A R Y ------------
Command Line: -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=49954:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 ImageDecoding
Host: jdv-mac, "MacBookPro18,1" arm64, 10 cores, 32G, Darwin 23.3.0, macOS 14.3.1 (23D60)
Time: Fri May 24 13:27:36 2024 IST elapsed time: 5.160990 seconds (0d 0h 0m 5s)
---------------  T H R E A D  ---------------
Current thread (0x0000000153009810):  JavaThread "main"             [_thread_in_native, id=8707, stack(0x000000016dcd4000,0x000000016ded7000) (2060K)]
Stack: [0x000000016dcd4000,0x000000016ded7000],  sp=0x000000016ded66c0,  free space=2057k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjavajpeg.dylib+0x23164]  free_pool+0x50
C  [libjavajpeg.dylib+0x23324]  self_destruct+0x18
C  [libjavajpeg.dylib+0xdf34]  jDestroy+0x24
C  [libjavajpeg.dylib+0x409c]  Java_com_sun_imageio_plugins_jpeg_JPEGImageReader_disposeReader+0x40
This is happening because we delete the error handler before we actually start deleting IJG stored objects and while freeing the IJG objects we try to access cinfo-err-trace_level of error handler. This early deletion of error handler is happening in jpegloader.c-imageio_dispose() function. We should delete error handler after we are done with deleting IJG stored objects.
OS: generic

-----
Title: [JDK-8332901] Select{Current,New}ItemTest.java for Choice don't open popup on macOS
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/Choice/SelectCurrentItemTest/SelectCurrentItemTest.java and test/jdk/java/awt/Choice/SelectNewItemTest/SelectNewItemTest.java tests do not open the choice popup on macOS. Because the popup is not open, the test does not perform its job.
SelectCurrentItemTest.java does not fail in this case, no ItemEvent is received; SelectNewItemTest.java fails and it is in ProblemList.txt.
If I add MouseListener to `theChoice`, it does not receive mouse events: pressed, released and clicked.
The test should fail if mouse click to open the popup is received because the test is not in the state it expected. Unfortunately, there are no events to determine the popup of the choice is open.
This bug is likely due to JDK-8322653. If add a component to the right of the choice, it receives mouse events and the test works correctly.
OS: os_x

-----
Title: [JDK-8333098] ubsan: bytecodeInfo.cpp:318:59: runtime error: division by zero
Priority: P4
Type: Bug
Component: hotspot
Description: When running test
compiler/classUnloading/methodUnloading/TestOverloadCompileQueues.java
with ubsan enabled binaries we run into the issue reported below.
Reason seems to be that we divide by zero in the code (maybe we should instead check for CompilationPolicy::min_invocations() == 0 in in this case set min_freq to MinInlineFrequencyRatio) .
double min_freq = MAX2(MinInlineFrequencyRatio, 1.0 / CompilationPolicy::min_invocations());
/jdk/src/hotspot/share/opto/bytecodeInfo.cpp:318:59: runtime error: division by zero
#0 0x7f5145c0dda2 in InlineTree::should_not_inline(ciMethod*, ciMethod*, int, bool&, ciCallProfile&) src/hotspot/share/opto/bytecodeInfo.cpp:318
#1 0x7f51466366d7 in InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&, bool&) src/hotspot/share/opto/bytecodeInfo.cpp:382
#2 0x7f514663d36b in InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&, bool&) src/hotspot/share/opto/bytecodeInfo.cpp:596
#3 0x7f51470dffd6 in Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) src/hotspot/share/opto/doCall.cpp:189
#4 0x7f51470e18ab in Parse::do_call() src/hotspot/share/opto/doCall.cpp:641
#5 0x7f514887dbf1 in Parse::do_one_block() src/hotspot/share/opto/parse1.cpp:1607
#6 0x7f514887fefa in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:724
#7 0x7f514888d4da in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:628
#8 0x7f51469d8418 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99
#9 0x7f5146d99cff in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) src/hotspot/share/opto/compile.cpp:793
#10 0x7f51469d5ebf in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) src/hotspot/share/opto/c2compiler.cpp:142
#11 0x7f5146db0274 in CompileBroker::invoke_compiler_on_method(CompileTask*) src/hotspot/share/compiler/compileBroker.cpp:2303
#12 0x7f5146db2826 in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1961
#13 0x7f51478d475a in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:759
#14 0x7f51491620ea in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#15 0x7f51487ac201 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:846
#16 0x7f514e5cf6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
#17 0x7f514db1550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)
OS: linux

-----
Title: [JDK-8333108] Update vmTestbase/nsk/share/DebugeeProcess.java to don't use finalization
Priority: P4
Type: Enhancement
Component: hotspot

-----
Title: [JDK-8333144] docker tests do not work when ubsan is configured
Priority: P4
Type: Bug
Component: hotspot
Description: Currently when we run with ubsan - enabled binaries (configure option --enable-ubsan, see JDK-8298448), the docker tests do not work.
For example :
containers/docker/TestCPUSets.jtr
[STDOUT]
/jdk/bin/java: error while loading shared libraries: libubsan.so.1: cannot open shared object file: No such file or directory
The container where the test is executed does not contain the ubsan package;  we might skip the test in this case or find a way to add the ubsan package / lib(s) to the container.
OS: linux

-----
Title: [JDK-8333235] vmTestbase/nsk/jdb/kill/kill001/kill001.java fails with C1
Priority: P4
Type: Bug
Component: core-svc
Description: Test
vmTestbase/nsk/jdb/kill/kill001/kill001.java
fails with
-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:TieredStopAtLevel=3 (1,2,3)
See log in comments.

-----
Title: [JDK-8333248] VectorGatherMaskFoldingTest.java failed when maximum vector bits is 64
Priority: P4
Type: Bug
Component: hotspot
Description: VectorGatherMaskFoldingTest.java Test fails when max vector bits is 64, when max vector bits is 64, LongVector.SPECIES_MAX.length()/DoubleVector.SPECIES_MAX.length() is 1.
For example, the following method will fail:
```
@Test
@IR(counts = { IRNode.STORE_VECTOR_MASKED, "= 1", IRNode.LOAD_VECTOR_MASKED, "= 1" }, applyIfCPUFeatureOr = {"avx512", "true", "sve", "true"})
public static void testDoubleVectorStoreLoadMaskedVector() {
double[] res = new double[D_SPECIES.length()];
doubleVector.intoArray(res, 0, doubleVectorMask);
DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, res, 0, doubleVectorMask);
Asserts.assertNotEquals(res2, doubleVector);
}
```
doubleVector data is:[1.0], doubleVectorMask:[true], res2 is:[1.0] So here `Asserts.assertNotEquals(res2, doubleVector);` will assert Error.
By the way, the aarch64 client jvm mode, getMaxVectorBitSize will return the default 64 bit, or RISC-V will return the default 64 bit without rvv1.0.
```
/**
* Returns the maximum vector bit size for a given element type.
*
* @param etype the element type.
* @return the maximum vector bit.
*/
/*package-private*/
static int getMaxVectorBitSize(Class etype) {
// VectorSupport.getMaxLaneCount may return -1 if C2 is not enabled,
// or a value smaller than the S_64_BIT.vectorBitSize / elementSizeInBits if MaxVectorSize
OS: generic

-----
Title: [JDK-8333317] Test sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java failed with: Invalid ECDH ServerKeyExchange signature
Priority: P3
Type: Bug
Component: security-libs
Description: Test: sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java
javax.net.ssl.SSLHandshakeException: (handshake_failure) Received fatal alert: handshake_failure
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:130)
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:365)
at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Alert.java:287)
at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:204)
at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1507)
at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1422)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:924)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1015)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:975)
at CipherTest$Server.handleRequest(CipherTest.java:80)
at JSSEServer$1.run(JSSEServer.java:87)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
javax.net.ssl.SSLHandshakeException: (handshake_failure) Invalid ECDH ServerKeyExchange signature
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:130)
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:365)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:321)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
at java.base/sun.security.ssl.ECDHServerKeyExchange$ECDHServerKeyExchangeMessage.(ECDHServerKeyExchange.java:312)
at java.base/sun.security.ssl.ECDHServerKeyExchange$ECDHServerKeyExchangeConsumer.consume(ECDHServerKeyExchange.java:523)
at java.base/sun.security.ssl.ServerKeyExchange$ServerKeyExchangeConsumer.consume(ServerKeyExchange.java:122)
at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:393)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:476)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:447)
at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:201)
at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1507)
at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1422)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:924)
at java.base/sun.security.ssl.SSLSocketImpl$AppOutputStream.write(SSLSocketImpl.java:1293)
at java.base/java.io.OutputStream.write(OutputStream.java:124)
at CipherTest$Client.sendRequest(CipherTest.java:269)
at JSSEClient.runTest(JSSEClient.java:74)
at CipherTest$Client.run(CipherTest.java:252)
at java.base/java.lang.Thread.run(Thread.java:1575)
java.lang.Exception: *** Test 'Client JSSE - Server JSSE' failed ***
at CipherTest.run(CipherTest.java:209)
at CipherTest.main(CipherTest.java:337)
at ClientJSSEServerJSSE.main(ClientJSSEServerJSSE.java:67)
at PKCS11Test.premain(PKCS11Test.java:820)
at PKCS11Test.testNSS(PKCS11Test.java:485)
at PKCS11Test.main(PKCS11Test.java:192)
at ClientJSSEServerJSSE.main(ClientJSSEServerJSSE.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)

-----
Title: [JDK-8333427] langtools/tools/javac/newlines/NewLineTest.java is failing on Japanese Windows
Priority: P4
Type: Bug
Component: tools
Description: When running langtools/tools/javac/newlines/NewLineTest.java on Japanese Windows, it always fails by MalformedInputException.
Java version:
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-adhoc.Administrator.jdk)
OpenJDK 64-Bit Server VM (build 23-internal-adhoc.Administrator.jdk, mixed mode, sharing)
Environment:
I tested on Windows 10.
$ locale
LANG=ja_JP.UTF-8
LC_CTYPE="ja_JP.UTF-8"
LC_NUMERIC="ja_JP.UTF-8"
LC_TIME="ja_JP.UTF-8"
LC_COLLATE="ja_JP.UTF-8"
LC_MONETARY="ja_JP.UTF-8"
LC_MESSAGES="ja_JP.UTF-8"
LC_ALL=
Exception:
java.nio.charset.MalformedInputException: Input length = 1
at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:279)
at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:405)
at java.base/sun.nio.cs.StreamDecoder.lockedRead(StreamDecoder.java:217)
at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:171)
at java.base/java.io.InputStreamReader.read(InputStreamReader.java:190)
at java.base/java.io.BufferedReader.fill(BufferedReader.java:160)
at java.base/java.io.BufferedReader.implReadLine(BufferedReader.java:370)
at java.base/java.io.BufferedReader.readLine(BufferedReader.java:347)
at java.base/java.io.BufferedReader.readLine(BufferedReader.java:436)
at java.base/java.nio.file.Files.readAllLines(Files.java:3419)
at NewLineTest.main(NewLineTest.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
I verified this test passed on English Windows and Linux. Also, this problem does not occur in jdk17.
This exception is probably related to the change in default charset in JEP 400.
The exception message indicates that it failed to read a file to which the output of javac run in the test was redirected. JEP400 changed Charset.defaultCharset() to return UTF-8. However, the encoding of Javac's standard output is still derived from the host environment and/or the user's settings. As a result, the test fails on Windows with non-English locale in jdk18 and later.
OS: windows

-----
Title: [JDK-8333728] ubsan: shenandoahFreeSet.cpp:1347:24: runtime error: division by zero
Priority: P4
Type: Bug
Component: hotspot
Description: When running with ubsan-enabled binaries, the test
gc/shenandoah/oom/TestAllocLargeObj.jtr
reports this issue :
src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp:1347:24: runtime error: division by zero
#0 0x7fc1d3ec6ec7 in ShenandoahFreeSet::internal_fragmentation() src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp:1347
#1 0x7fc1d6f4a516 in ShenandoahMetricsSnapshot::snap_before() src/hotspot/share/gc/shenandoah/shenandoahMetrics.cpp:37
#2 0x7fc1d6e39c95 in ShenandoahDegenGC::op_degenerated() src/hotspot/share/gc/shenandoah/shenandoahDegeneratedGC.cpp:86
#3 0x7fc1d6e3b1e8 in ShenandoahDegenGC::entry_degenerated() src/hotspot/share/gc/shenandoah/shenandoahDegeneratedGC.cpp:74
#4 0x7fc1d6fde7cb in VM_ShenandoahDegeneratedGC::doit() src/hotspot/share/gc/shenandoah/shenandoahVMOperations.cpp:84
#5 0x7fc1d75dd0dd in VM_Operation::evaluate() src/hotspot/share/runtime/vmOperations.cpp:75
#6 0x7fc1d75eba41 in VMThread::evaluate_operation(VM_Operation*) src/hotspot/share/runtime/vmThread.cpp:283
#7 0x7fc1d75eda4f in VMThread::inner_execute(VM_Operation*) src/hotspot/share/runtime/vmThread.cpp:427
#8 0x7fc1d75ee5b9 in VMThread::loop() src/hotspot/share/runtime/vmThread.cpp:493
#9 0x7fc1d75ee6a7 in VMThread::run() src/hotspot/share/runtime/vmThread.cpp:177
#10 0x7fc1d737e6ca in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#11 0x7fc1d69ca311 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:846
#12 0x7fc1dc7846e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
#13 0x7fc1dbd1550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)
OS: linux

-----
Title: [JDK-8333754] Add a Test against ECDSA and ECDH NIST Test vector
Priority: P3
Type: Bug
Component: security-libs

-----
Title: [JDK-8333824] Unused ClassValue in VarHandles
Priority: P5
Type: Bug
Component: core-libs
Description: VarHandles defines the static ClassValue ADDRESS_FACTORIES, which appears to be completely unused. Likely a leftover.

-----
Title: [JDK-8334057] JLinkReproducibleTest.java support receive test.tool.vm.opts
Priority: P4
Type: Sub-task
Component: tools
Description: Currently, the testcase test/jdk/tools/jlink/JLinkReproducibleTest.java doesn't receive jvm options from jtreg.
I think it's necessory to receive jvm options from jtreg.
In the process of verifying the JDK-8321509 problem fix solutions, we need to configure jvm options to verify the effectiveness of some of the fixe solutions. During the verification process, we found that the test case would start a new java process during the test, but the started java child process did not receive the jvm options configured from the parent process, resulting in the failure of the fix verification to continue normally. Therefore, it is necessary to pass in the jvm options configured from the parent process when starting the child java process.
On the other hand, during the jtreg test execution process, if a java child process is started, under normal circumstances, the started child process should pass in the jvm options configured from jtreg by default, such as the -vmoption option value configured by jtreg. If the test case does not support or does not want to receive the jvm options configured from jtreg, the '@requires vm.flagless' tag should be configured in the test case. If the child java process wants to ignore the   jvm options from parent process, there should add some comments to explain the ignore reason.
This fix similar to JDK-8157850, no risk.
OS: generic

-----
Title: [JDK-8334405] java/nio/channels/Selector/SelectWithConsumer.java#id0 failed in testWakeupDuringSelect
Priority: P4
Type: Bug
Component: core-libs
Description: ...
test SelectWithConsumer.testTwoChannels(): success
test SelectWithConsumer.testWakeupBeforeSelect(): success
test SelectWithConsumer.testWakeupDuringSelect(): failure
java.lang.AssertionError: select took -958 ms expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at SelectWithConsumer.testWakeupDuringSelect(SelectWithConsumer.java:361)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
test SelectWithConsumer.testWritable(): success
config SelectWithConsumer.shutdownThreadPool(): success
OS: os_x

-----
Title: [JDK-8334475] UnsafeIntrinsicsTest.java#ZGenerationalDebug assert(!assert_on_failure) failed: Has low-order bits set
Priority: P4
Type: Bug
Component: hotspot
Description: The test compiler/gcbarriers/UnsafeIntrinsicsTest.java#ZGenerationalDebug fails by assert on Windows aarch64 on fastdebug binaries as follows
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (s\src\hotspot\share\gc/z/zAddress.inline.hpp:300), pid=5296, tid=4352
#  assert(!assert_on_failure) failed: Has low-order bits set: 0xbdbd323532317063
#
# JRE version:  (24.0+2) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 24+2-b3, mixed mode, tiered, compressed class ptrs, z gc, windows-aarch64)
# CreateCoredumpOnCrash turned off, no core file dumped
#
#
---------------  S U M M A R Y ------------
Command Line: -Dtest.vm.opts= -Dtest.tool.vm.opts= -Dtest.compiler.opts= -Dtest.java.opts=-Djbr.catch.SIGABRT=true -Dtest.jdk=D:\BuildAgent\work\a4596779d36397b2\jbrsdk-24-windows-aarch64-fastdebug-b3 -Dcompile.jdk=D:\BuildAgent\work\a4596779d36397b2\jbrsdk-24-windows-aarch64-fastdebug-b3 -Dtest.timeout.factor=2.0 -Dtest.nativepath=D:\BuildAgent\work\a4596779d36397b2\support\test\hotspot\jtreg\native -Dtest.root=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg -Dtest.name=compiler/gcbarriers/UnsafeIntrinsicsTest.java#ZGenerationalDebug -Dtest.file=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg\compiler\gcbarriers\UnsafeIntrinsicsTest.java -Dtest.src=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg\compiler\gcbarriers -Dtest.src.path=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg\compiler\gcbarriers;D:\BuildAgent\work\a4596779d36397b2\test\lib -Dtest.classes=D:\BuildAgent\work\a4596779d36397b2\JTwork\classes\0\compiler\gcbarriers\UnsafeIntrinsicsTest_ZGenerationalDebug.d -Dtest.class.path=D:\BuildAgent\work\a4596779d36397b2\JTwork\classes\0\compiler\gcbarriers\UnsafeIntrinsicsTest_ZGenerationalDebug.d;D:\BuildAgent\work\a4596779d36397b2\JTwork\classes\0\test\lib -Dtest.modules=java.base/jdk.internal.misc:+open --add-modules=java.base --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED -Djbr.catch.SIGABRT=true -Djava.library.path=D:\BuildAgent\work\a4596779d36397b2\support\test\hotspot\jtreg\native -XX:+UseZGC -XX:+ZGenerational -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyOops -XX:ZCollectionInterval=1 -XX:-CreateCoredumpOnCrash -XX:CompileCommand=dontinline,*::mergeImpl* com.sun.javatest.regtest.agent.MainWrapper D:\BuildAgent\work\a4596779d36397b2\JTwork\compiler\gcbarriers\UnsafeIntrinsicsTest_ZGenerationalDebug.d\main.1.jta
Host: jre-w11a-azr1, Ampere(R) Altra(R) Processor, 4 cores, 15G,  Windows 11 , 64 bit Build 22621 (10.0.22621.3672)
Time: Tue Jun 18 11:30:48 2024 Coordinated Universal Time elapsed time: 0.114944 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x000002c97529a200):  JavaThread "main"             [_thread_in_vm, id=4352, stack(0x000000d1e0f00000,0x000000d1e1000000) (1024K)]
Stack: [0x000000d1e0f00000,0x000000d1e1000000]
Native frames:
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.Object.clone()Ljava/lang/Object;+0 java.base
j  java.util.Arrays.copyOfRange([BII)[B+11 java.base
j  java.lang.String.(Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V+32 java.base
j  java.lang.StringBuilder.toString()Ljava/lang/String;+16 java.base
j  sun.nio.cs.StandardCharsets.toLower(Ljava/lang/String;)Ljava/lang/String;+121 java.base
j  sun.nio.cs.StandardCharsets.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;+44 java.base
j  sun.nio.cs.StandardCharsets.charsetForName(Ljava/lang/String;)Ljava/nio/charset/Charset;+6 java.base
j  java.nio.charset.Charset.lookup2(Ljava/lang/String;)Ljava/nio/charset/Charset;+39 java.base
j  java.nio.charset.Charset.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;+40 java.base
j  java.nio.charset.Charset.isSupported(Ljava/lang/String;)Z+1 java.base
j  java.lang.System.initPhase1()V+37 java.base
v  ~StubRoutines::call_stub 0x000002c907530180
Lock stack of current Java thread (top to bottom):
LockStack[0]: sun.nio.cs.StandardCharsets
{0x0000040000017ed0} - klass: 'sun/nio/cs/StandardCharsets'
- ---- fields (total size 5 words):
- private 'classMap' 'Ljava/util/Map;' @16  null (0x0000000000000000)
- private 'aliasMap' 'Ljava/util/Map;' @24  null (0x0000000000000000)
- private 'cache' 'Ljava/util/Map;' @32  null (0x0000000000000000)
```
see the attached hs_err.txt
The failure was observed on jdk24, jdk21
Reproducibility: 100%
OS: windows

-----
Title: [JDK-8334560] [PPC64]: postalloc_expand_java_dynamic_call_sched does not copy all fields
Priority: P4
Type: Bug
Component: hotspot
Description: postalloc_expand_java_dynamic_call_sched should copy also MachSafePointNode::_has_ea_local_in_scope
If the information is not propagated then it can happen that C2 optimizations based on escape analysis are not reverted when an object reference escapes because an JVMTI agent reads it.
OS: generic

-----
Title: [JDK-8334562] Automate com/sun/security/auth/callback/TextCallbackHandler/Default.java test
Priority: P4
Type: Bug
Component: security-libs
Description: The test: com/sun/security/auth/callback/TextCallbackHandler/Default.java is currently marked to be run manually because user console inputs are required, but it can be automated by providing a custom inputStream to System.in in the actual test instead to simulate sequential user input.

-----
Title: [JDK-8334567] [test] runtime/os/TestTracePageSizes move ppc handling
Priority: P4
Type: Bug
Component: hotspot
Description: The handling of ppc platforms should be moved to the test headers.
This is done for x86_64 too in some case, make it more consistent.
OS: linux

-----
Title: [JDK-8334719] (se) Deferred close of SelectableChannel may result in a Selector doing the final close before concurrent I/O on channel has completed
Priority: P3
Type: Bug
Component: core-libs
Description: The hs_err_.log shows:
Event: 5.943 Thread 0x0000023ed289e5f0 Exception  (0x00000000dbd53808)
thrown [s\open\src\hotspot\share\prims\jni.cpp, line 539]
This happens intermittently (and relatively rarely) but even if the channel is in non-blocking mode.
Work arounds:
- Use non-blocking IO and a RW lock to control receive/send/close and avoid concurrent calls to close
- or make sure everything happens in the selector thread
- or use VirtualThread for sending and receiving - but that can lead to hangs due to JDK-8334574

-----
Title: [JDK-8335142] compiler/c1/TestTraceLinearScanLevel.java occasionally times out with -Xcomp
Priority: P5
Type: Bug
Component: hotspot
Description: compiler/c1/TestTraceLinearScanLevel is occasionally timing out on macosx-x64 when running with -Xcomp.
The test's purpose is to sanity check the TraceLinearScanLevel flag with a hello world like test. It runs with -XX:TestTraceLinearScanLevel=4 which prints quite a lot of data. It becomes even more when running with -Xcomp. Since we only want to sanity check, there is not much benefit in running this test with -Xcomp which only unnecessarily increases the time to run this test.
I suggest to exclude this test with -Xcomp but instead add -Xbatch to at least wait until all the C2 compilations are finished in the start-up.

-----
Title: [JDK-8335172] Add manual steps to run security/auth/callback/TextCallbackHandler/Password.java test
Priority: P4
Type: Bug
Component: security-libs
Description: The test com/sun/security/auth/callback/TextCallbackHandler/Password.java is in the problem list, but it is not actually failing. It requires some manual user input and the issue is that there are no steps on how to run it. Adding a small section with steps will help running this test properly. Also, move it from the jdk_security_manual_no_input to jdk_security_manual_interactive

-----
Title: [JDK-8335267] [XWayland] move screencast tokens from .awt to .java folder
Priority: P4
Type: Bug
Component: client-libs
Description: Currently the screencast tokens are stored in
.awt/robot/screencast-tokens.properties
when they should be in the .java folder
e.g. in  .java/robot/screencast-tokens.properties

-----
Title: [JDK-8335344] test/jdk/sun/security/tools/keytool/NssTest.java fails to compile
Priority: P3
Type: Bug
Component: security-libs
Description: There is a compilation issue in the test test/jdk/sun/security/tools/keytool/NssTest.java because the HumanInputStream class was moved from KeyToolTest to a library class.
open/test/jdk/sun/security/tools/keytool/KeyToolTest.java:1820: error: cannot find symbol
HumanInputStream.test();
To fix it, include the library in the test

-----
Title: [JDK-8335449] runtime/cds/DeterministicDump.java fails with File content different at byte ...
Priority: P3
Type: Bug
Component: hotspot
Description: java.lang.RuntimeException: File content different at byte #4, b0 = -87, b1 = 77
at DeterministicDump.compare(DeterministicDump.java:114)
at DeterministicDump.doTest(DeterministicDump.java:66)
at DeterministicDump.main(DeterministicDump.java:42)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
OS: os_x

-----
Title: [JDK-8335530] Java file extension missing in AuthenticatorTest
Priority: P4
Type: Bug
Component: core-libs
Description: The `.java` file extension is missing for https://github.com/openjdk/jdk/blob/master/test/jdk/com/sun/net/httpserver/AuthenticatorTest
The test also fails due to principal.getName() needs to be replaced with principal.getUsername() at line 57.
It would be also good to refactor the test to use JUnit Jupiter API.

-----
Title: [JDK-8335664] Parsing jsr broken: assert(bci>= 0 && bci < c->method()->code_size()) failed: index out of bounds
Priority: P4
Type: Bug
Component: hotspot
Description: If you fix this bug: please mention me, I spent quite some time extracting the JASM file for you to have a simple reproducer ;)
Affected:
JDK23 - JDK11, maybe further back (did not check more).
Product gives us:
Error: Unable to initialize main class TestClassNew
Caused by: java.lang.LinkageError: Illegal class file encountered. Try running with -Xverify:all in method main
Debug reproduces/asserts immediately.
emanuel@emanuel-oracle:xyz$ java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm Test.jasm
emanuel@emanuel-oracle:xyz$ /oracle-work/jdk-fork2/build/linux-x64-debug/jdk/bin/java Test
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork2/open/src/hotspot/share/oops/generateOopMap.cpp:401), pid=3707675, tid=3707676
#  assert(bci= 0 && bci method()-code_size()) failed: index out of bounds
#
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-06-13-1913126.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-06-13-1913126.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd5b5c8]  GenerateOopMap::bb_mark_fct(GenerateOopMap*, int, int*) [clone .part.0]+0x28
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/???/files-for-report/24-13/core.3707675)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
bci = 39, c-method()-code_size() = 39
We are at bci 36, where the jsr bytecode is. Then, we want to step the length of that bytecode forward, i.e. +3, and mark the bci there as a block header. But that is the end of the code, i.e. there is nothing after the jsr.
I extracted a simple JASM test:
super public class Test
{
public static Method main:"([Ljava/lang/String;)V"
stack 100 locals 100
{
return;
LABEL:
nop;
jsr LABEL; // bci=2. Compute bci + length(jsr) - bci = 5 accessed, out of bounds.
}
}

-----
Title: [JDK-8335709] C2: assert(!loop->is_member(get_loop(useblock))) failed: must be outside loop
Priority: P3
Type: Bug
Component: hotspot
Description: I would really appreciate a mention in the PR: I extracted the JASM file from a class-file, reduced it, and was able to recreate a JAVA file from that. This simplifies the debug job and the triaging (class-file would have been limited to JDK22 and newer).
Affected: 23, 22, 21, 17 (did not reproduce with 11)
Assert in debug. Product: infinite loop as expected, but not sure if there is no wrong result possible.
Only reproduced with JDK17 and newer, but you will have to see why it does not reproduce with JDK11.
Looks like a problem with infinite-loops, see java code and the NeverBranch as evidence that there is no loop exit:
(rr) p x_ctrl-dump_bfs(100,x_ctrl,"#cA")
dist apd dump
---------------------------------------------
7  14   84  IfFalse  === 82  [[ 87 91 ]] #0 !jvms: Test::test @ bci:4 (line 12)
6   7   87  Region  === 87 84 83  [[ 87 112 92 105 107 130 ]] #reducible  !jvms: Test::test @ bci:11 (line 15)
5   7  107  SafePoint  === 87 1 108 1 1 112 106  [[ 73 ]]  SafePoint  !jvms: Test::test @ bci:24 (line 16)
4   7   73  Region  === 73 107 72  [[ 73 119 77 118 117 ]] #reducible  !jvms: Test::test @ bci:2 (line 12)
3   7  119  NeverBranch  === 73  [[ 120 121 ]]
2   7  120  CProj  === 119  [[ 82 ]] #0
1   7   82  If  === 120 81  [[ 83 84 ]] P=0.500000, C=-1.000000 !jvms: Test::test @ bci:4 (line 12)
0   0   83  IfTrue  === 82  [[ 87 ]] #1 !jvms: Test::test @ bci:4 (line 12)
We have had many open bugs with infinite-loops: they are quite rare in the wild but tricky to get right with loop-opts.
JDK-8308749: C2 failed: regular loops only (counted loop inside infinite loop)
JDK-8296389: C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors
JDK-8297642: PhaseIdealLoop::only_has_infinite_loops must detect all loops that never lead to termination
JDK-8296318: use-def assert: special case undetected loops nested in infinite loops
JDK-8296412: Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts
Maybe we should just disable PhaseIdealLoop::try_sink_out_of_loop  for infinite loops: they never terminate anyway, and thus their performance is not very important.
/oracle-work/jdk-fork2/build/linux-x64-debug/jdk/bin/java -Xcomp -XX:CompileCommand=compileonly,Test::* -XX:CompileCommand=printcompilation,Test::* -XX:+TraceLoopOpts Test.java
CompileCommand: compileonly Test.* bool compileonly = true
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
36751   97    b  3       Test::main (4 bytes)
36773   99    b  4       Test::main (4 bytes)
36775  100 %  b  4       Test::test @ 2 (27 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork2/open/src/hotspot/share/opto/loopopts.cpp:1266), pid=4119505, tid=4119519
#  assert(!loop-is_member(get_loop(useblock))) failed: must be outside loop
#
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-07-04-1039391.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-07-04-1039391.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12a2718]  PhaseIdealLoop::place_outside_loop(Node*, IdealLoopTree*) const+0x348
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/xyz/core.4119505)
#
# An error report file with more information is saved as:
# /oracle-work/xyz/hs_err_pid4119505.log
#
# Compiler replay data is saved as:
# /oracle-work/xyz/replay_pid4119505.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Current CompileTask:
C2:36803  100 %  b  4       Test::test @ 2 (27 bytes)
Stack: [0x00007f4fc436f000,0x00007f4fc4470000],  sp=0x00007f4fc446ad80,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12a2718]  PhaseIdealLoop::place_outside_loop(Node*, IdealLoopTree*) const+0x348  (loopopts.cpp:1266)
V  [libjvm.so+0x12a5bd6]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x376  (loopopts.cpp:1753)
V  [libjvm.so+0x12a6603]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x83  (loopopts.cpp:1531)
V  [libjvm.so+0x12a6ec6]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x96  (loopopts.cpp:1964)
V  [libjvm.so+0x1299519]  PhaseIdealLoop::build_and_optimize()+0xee9  (loopnode.cpp:4815)
V  [libjvm.so+0x9e4770]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x390  (loopnode.hpp:1117)
V  [libjvm.so+0x9df283]  Compile::Optimize()+0x4c3  (compile.cpp:2366)
V  [libjvm.so+0x9e3326]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b06  (compile.cpp:852)
V  [libjvm.so+0x835575]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1d5  (c2compiler.cpp:142)
V  [libjvm.so+0x9eef68]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x928  (compileBroker.cpp:2303)
V  [libjvm.so+0x9efbf8]  CompileBroker::compiler_thread_loop()+0x478  (compileBroker.cpp:1961)
V  [libjvm.so+0xe994dc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:757)
V  [libjvm.so+0x17b9076]  Thread::call_run()+0xb6  (thread.cpp:225)
V  [libjvm.so+0x14a1717]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:858)

-----
Title: [JDK-8335912] Add an operation mode to the jar command when extracting to not overwriting existing files
Priority: P5
Type: Enhancement
Component: core-libs
Description: the jar command currently does not provide a means to warn/ask the user what to do when extracting a file and it already exists.

-----
Title: [JDK-8336240] Test com/sun/crypto/provider/Cipher/DES/PerformanceTest.java fails with java.lang.ArithmeticException
Priority: P5
Type: Bug
Component: security-libs
Description: The manual test Cipher/DES/PerformanceTest.java  fails because in the following lines end - start could be zero, and then that value is used in division:
''
start = System.currentTimeMillis();
//operations
end = System.currentTimeMillis();
int speed = (int)((data.length * count)/(end - start));
''
Error thrown:
(1).Failed Automatically and thrown java.lang.ArithmeticException.
(2)Exception:
java.lang.ArithmeticException:
at PerformanceTest.runTest(PerformanceTest.java:187)
at PerformanceTest.run(PerformanceTest.java:126)
at PerformanceTest.main(PerformanceTest.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
atsun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:484)
at com.sun.javatest.regtest.MainWrapper$MainThread.run(MainWrapper.java:94)
at java.lang.Thread.run(Thread.java:744)
JavaTest Message: Test threw exception: java.lang.ArithmeticException: / by zero
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.ArithmeticException: / by zero
result: Failed. Execution failed: `main' threw exception: java.lang.ArithmeticException: / by zero

-----
Title: [JDK-8336257] Additional tests in jmxremote/startstop to match on PID not app name
Priority: P2
Type: Bug
Component: core-svc
Description: Since
8207908: JMXStatusTest.java fails assertion intermittently
which updates:
test/jdk/sun/management/jmxremote/startstop/JMXStatusTest.java
test/jdk/sun/management/jmxremote/startstop/ManagementAgentJcmd.java
the related tests:
test/jdk/sun/management/jmxremote/startstop/JMXStartStopTest.java
test/sun/management/jmxremote/startstop/JMXStatusPerfCountersTest.java
...fail to compile:
test/jdk/sun/management/jmxremote/startstop/JMXStartStopTest.java:75: error: incompatible types: String cannot be converted to Process
private static ManagementAgentJcmd jcmd = new ManagementAgentJcmd(TEST_APP_NAME, verbose);
These tests also use jcmd using an application name pattern and presume they see output from the program they started, and not some other concurrent test invocation.

-----
Title: [JDK-8336315] tools/jpackage/windows/WinChildProcessTest.java Failed: Check is calculator process is alive
Priority: P4
Type: Bug
Component: tools
Description: The following test failed in the JDK24 CI:
tools/jpackage/windows/WinChildProcessTest.java
Here's a snippet from the log file:
#section:main
----------messages:(7/458)----------
command: main -Xmx512m jdk.jpackage.test.Main --jpt-run=WinChildProcessTest
reason: User specified action: run main/othervm -Xmx512m jdk.jpackage.test.Main --jpt-run=WinChildProcessTest
started: Fri Jul 12 11:44:51 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jpackage --add-exports jdk.jpackage/jdk.jpackage.internal=ALL-UNNAMED
finished: Fri Jul 12 11:45:00 UTC 2024
elapsed time (seconds): 9.127
----------configuration:(4/129)----------
Boot Layer
add modules: jdk.jpackage
add exports: jdk.jpackage/jdk.jpackage.internal ALL-UNNAMED
----------System.out:(55/6211)*----------
[11:44:51.924] Parsing [--jpt-run=WinChildProcessTest]...
[11:44:51.987] WinChildProcessTest.test - [public static void WinChildProcessTest.test() throws java.lang.Throwable]
[11:44:52.002] Create: WinChildProcessTest.test
[11:44:52.018] [ RUN      ] WinChildProcessTest.test
[11:44:52.127] Running candle.exe
[11:44:52.190] Running light.exe
[11:44:52.284] Running wix.exe
[11:44:52.299] TRACE: Bundler msi supported
[11:44:52.299] Running candle.exe
[11:44:52.377] Running light.exe
[11:44:52.471] Running wix.exe
[11:44:52.471] TRACE: Bundler exe supported
[11:44:52.518] TRACE: exec: Execute tool provider [javac -d .\\test\\jar-workdir .\\test\\src\\Hello.java](4)...
[11:44:53.237] TRACE: exec: Done. Exit code: 0
[11:44:53.237] TRACE: assertEquals(0): Check command tool provider [javac -d .\\test\\jar-workdir .\\test\\src\\Hello.java](4) exited with 0 code
[11:44:53.237] TRACE: exec: Execute tool provider [jar -c -f .\\test\\input\\hello.jar -C .\\test\\jar-workdir .](7)...
[11:44:53.315] TRACE: exec: Done. Exit code: 0
[11:44:53.315] TRACE: assertEquals(0): Check command tool provider [jar -c -f .\\test\\input\\hello.jar -C .\\test\\jar-workdir .](7) exited with 0 code
[11:44:53.330] TRACE: exec: Execute [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-24+7-647\\windows-x64.jdk\\jdk-24\\bin\\jpackage.exe --input .\\test\\input --dest .\\test\\output --name WinChildProcessTest --type app-image --main-jar hello.jar --main-class Hello --win-console -J-Djlink.debug=true --verbose](16); inherit I/O...
[11:44:53.737] Creating app package: WinChildProcessTest in C:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\scratch\\3\\.\\test\\output
[11:45:00.096] Command [PID: -1]:
jlink --output .\\test\\output\\WinChildProcessTest\\runtime --module-path c:\\\\ade\\\\mesos\\\\work_dir\\\\jib-master\\\\install\\\\jdk-24+7-647\\\\windows-x64.jdk\\\\jdk-24\\\\jmods --add-modules java.rmi,jdk.management.jfr,jdk.jdi,jdk.charsets,jdk.xml.dom,java.xml,java.datatransfer,jdk.jstatd,jdk.httpserver,java.desktop,java.security.sasl,jdk.zipfs,java.base,jdk.javadoc,jdk.management.agent,jdk.jshell,jdk.editpad,jdk.jsobject,java.sql.rowset,jdk.sctp,java.smartcardio,jdk.jlink,jdk.unsupported,java.security.jgss,jdk.nio.mapmode,java.compiler,jdk.dynalink,jdk.unsupported.desktop,jdk.accessibility,jdk.security.jgss,jdk.incubator.vector,java.sql,java.logging,java.transaction.xa,java.xml.crypto,jdk.jfr,jdk.internal.md,jdk.crypto.cryptoki,jdk.net,java.naming,jdk.internal.ed,java.prefs,java.net.http,jdk.compiler,jdk.naming.rmi,jdk.internal.opt,jdk.jconsole,jdk.attach,jdk.crypto.mscapi,jdk.internal.le,java.management,jdk.jdwp.agent,jdk.internal.jvmstat,java.instrument,jdk.management,jdk.security.auth,java.scripting,jdk.jdeps,jdk.jartool,jdk.jpackage,java.management.rmi,jdk.naming.dns,jdk.localedata --strip-native-commands --strip-debug --no-man-pages --no-header-files
[11:45:00.096] Output:
WARNING: Using incubator modules: jdk.incubator.vector
[11:45:00.096] Returned: 0
[11:45:00.112] Using default package resource JavaApp.ico [icon] (add WinChildProcessTest.ico to the resource-dir to customize).
[11:45:00.112] Warning: Windows Defender may prevent jpackage from functioning. If there is an issue, it can be addressed by either disabling realtime monitoring, or adding an exclusion for the directory "c:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\tmp\\jdk.jpackage17972536289581077334".
[11:45:00.127] Using default package resource WinLauncher.template [Template for creating executable properties file] (add WinChildProcessTest.properties to the resource-dir to customize).
[11:45:00.174] Succeeded in building Windows Application Image package
[11:45:00.268] TRACE: exec: Done. Exit code: 0
[11:45:00.268] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-24+7-647\\windows-x64.jdk\\jdk-24\\bin\\jpackage.exe --input .\\test\\input --dest .\\test\\output --name WinChildProcessTest --type app-image --main-jar hello.jar --main-class Hello --win-console -J-Djlink.debug=true --verbose](16) exited with 0 code
[11:45:00.284] TRACE: assertStringListEquals(): Check there is only one file with [.jpackage.xml] name in the package
[11:45:00.284] TRACE: assertStringListEquals(1, .\\test\\output\\WinChildProcessTest\\app\\.jpackage.xml)
[11:45:00.284] TRACE: assertStringListEquals(): Check there are no files with [.package] name in the package
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\runtime] path exists
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\runtime] is a directory
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe] path exists
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe] is a file
[11:45:00.299] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe] file is executable
[11:45:00.299] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\app\\WinChildProcessTest.cfg] path exists
[11:45:00.299] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\app\\WinChildProcessTest.cfg] is a file
[11:45:00.299] TRACE: exec: Execute [C:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\scratch\\3\\.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe](1); save output...
Calc id=43708
[11:45:00.763] TRACE: exec: Done. Exit code: 0
[11:45:00.763] TRACE: assertEquals(0): Check command [C:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\scratch\\3\\.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe](1) exited with 0 code
Is Alive false
[11:45:00.763] ERROR: Failed: Check is calculator process is alive
[11:45:00.779] [  FAILED  ] WinChildProcessTest.test; checks=14
[11:45:00.779] [==========] 1 tests ran
[11:45:00.779] [  PASSED  ] 0 tests
[11:45:00.779] [  FAILED  ] 1 test, listed below
[11:45:00.779] [  FAILED  ] WinChildProcessTest.test; workDir=[.\\test]
[11:45:00.779] 1 FAILED TEST
----------System.err:(42/2704)----------
java.lang.AssertionError: Failed: Check is calculator process is alive
at jdk.jpackage.test.TKit.error(TKit.java:273)
at jdk.jpackage.test.TKit.assertTrue(TKit.java:653)
at jdk.jpackage.test.TKit.assertTrue(TKit.java:640)
at WinChildProcessTest.test(WinChildProcessTest.java:82)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.TKit.runTests(TKit.java:122)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
java.lang.RuntimeException: 1 FAILED TEST
at jdk.jpackage.test.Main.reportSummary(Main.java:130)
at jdk.jpackage.test.Main.runTests(Main.java:90)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST
----------rerun:(45/6577)*----------
OS: windows

-----
Title: [JDK-8336413] gtk headers : Fix typedef redeclaration of GMainContext and GdkPixbuf
Priority: P4
Type: Bug
Component: client-libs
Description: The following typedef redeclaration warnings were seen on Solaris in 11u but on examination it seems it is an issue in all releases including mainline, but only the Solaris compiler warns.
Two typedef declarations are causing this issue - GMainContext, GdkPixbuf
The problem is that they are defined in gtk_interface.h but then redefined in gtk2_interface.h and gtk3_interface.h
The fix is to remove the redeclarations in gtk2_interface.h and gtk3_interface.h
[2024-07-14T16:49:41,763Z] === Output from failing command(s) repeated here ===
[2024-07-14T16:49:41,767Z] * For target support_native_java.desktop_libawt_xawt_gtk2_interface.o:
[2024-07-14T16:49:41,772Z] "open/src/java.desktop/unix/native/libawt_xawt/awt/gtk2_interface.h", line 53: error: typedef redeclared: GMainContext (E_TYPEDEF_REDECLARED)
[2024-07-14T16:49:41,772Z] cc: acomp failed for ./open/src/java.desktop/unix/native/libawt_xawt/awt/gtk2_interface.c
[2024-07-14T16:49:41,782Z] * For target support_native_java.desktop_libawt_xawt_gtk3_interface.o:
[2024-07-14T16:49:41,787Z] "open/src/java.desktop/unix/native/libawt_xawt/awt/gtk3_interface.h", line 179: error: typedef redeclared: GMainContext (E_TYPEDEF_REDECLARED)
OS: linux

-----
Title: [JDK-8336640] Shenandoah: Parallel worker use in parallel_heap_region_iterate
Priority: P4
Type: Enhancement
Component: hotspot
Description: Shenandoah init mark is supposed to be very fast, on the order of a few hundreds microseconds. We do most of the work right in the VM thread that executes the safepoint. Yet, we have a block here that involves workers:
https://github.com/openjdk/jdk/blob/d41d2a7a82cb6eff17396717e2e14139ad8179ba/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp#L555-L559
It goes for parallel walk when the number of regions is 1024 (see ShenandoahParallelRegionStride), which is below the usual Shenandoah target of 2048 regions. Which means we are likely always going into that path.
It might cause some trouble, if the number of parallel GC workers is high: we wake up lots of GC threads without having most them do any useful work:
[info ][gc,start         ] GC(163) Pause Init Mark (unload classes)
[info ][gc,task          ] GC(163) Using 16 of 16 workers for init marking
[info ][gc               ] GC(163) Pause Init Mark (unload classes) 0.116ms
[info ][safepoint        ] Safepoint "ShenandoahInitMark", Time since last: 10717617218 ns, Reaching safepoint: 157434 ns, Cleanup: 27282 ns, At safepoint: 202251 ns, Total: 386967 ns
We need to see if: a) this is actually a problem; b) default ShenandoahParallelRegionStride is too low; c) whether we should limit the number of active worker around that block by `num_regions() / stride`; d) whether we should just ditch this code and do a single-threaded walk always.
Not limited to init mark, parallel_heap_region_iterate is used by 4 others GC phases to apply lightweight operation on heap regions, if possible/needed, we should optimize parallel_heap_region_iterate which generally benefits all the 5 places using parallel_heap_region_iterate to walk and apply operation on heap regions.
Assuming the overhead to orchestrate worker threads for parallel interaction is `n`, the cost to process 1024 heap region is `m`(assuming total cost is linear in single thread), we could test and collect the value of `n` and `m` them  calculate the threshold, below the threshold simply use single thread, otherwise use parallel walk.  Threshold should be roughly `(n/m + 1) * 1024`

-----
Title: [JDK-8336854] CAInterop.java#actalisauthenticationrootca conflicted with /manual and /timeout
Priority: P4
Type: Bug
Component: security-libs
Description: This manual test is failing with
test result: Error. Parse Exception: `/manual' disables use of `/timeout'
It is failing as timeout cannot work with manual.
This. change is  done in this bug JDK-8334441

-----
Title: [JDK-8336911] ZGC: Division by zero in heuristics after JDK-8332717
Priority: P4
Type: Bug
Component: hotspot
Description: when running with ubsan enabled binaries, the following issue is reported,
e.g. in test
compiler/uncommontrap/TestDeoptOOM_ZGenerational.jtr
also in gc/z/TestSmallHeap.jtr
jdk/src/hotspot/share/gc/z/zDirector.cpp:537:84: runtime error: division by zero
#0 0x7f422495bd1f in calculate_young_to_old_worker_ratio src/hotspot/share/gc/z/zDirector.cpp:537
#1 0x7f422495bd1f in select_worker_threads src/hotspot/share/gc/z/zDirector.cpp:694
#2 0x7f42282a0d97 in select_worker_threads src/hotspot/share/gc/z/zDirector.cpp:689
#3 0x7f42282a0d97 in initial_workers src/hotspot/share/gc/z/zDirector.cpp:784
#4 0x7f42282a2485 in initial_workers src/hotspot/share/gc/z/zDirector.cpp:795
#5 0x7f42282a2485 in start_minor_gc src/hotspot/share/gc/z/zDirector.cpp:797
#6 0x7f42282a2485 in start_gc src/hotspot/share/gc/z/zDirector.cpp:826
#7 0x7f42282a2485 in ZDirector::run_thread() src/hotspot/share/gc/z/zDirector.cpp:912
#8 0x7f422840bdd8 in ZThread::run_service() src/hotspot/share/gc/z/zThread.cpp:29
#9 0x7f4225ab6979 in ConcurrentGCThread::run() src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#10 0x7f4227e1137a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#11 0x7f42274619b1 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#12 0x7f422c8d36e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 9a146bd267419cb6a8cf08d7c602953a0f2e12c5)
#13 0x7f422c1dc58e in clone (/lib64/libc.so.6+0x11858e) (BuildId: f2d1cb1ef49f8c47d43a4053910ba6137673ccce)

-----
Title: [JDK-8332717] ZGC: Division by zero in heuristics
Priority: P3
Type: Bug
Component: hotspot
Description: When running hs :tier1 tests, with ubsan enabled (configure flag --enable-ubsan), in a couple of  ZGC tests like
compiler/uncommontrap/TestDeoptOOM_ZGenerational.jtr
gc/stringdedup/TestStringDeduplicationInterned_ZGenerational.jtr
this division by zero is reported :
/jdk/src/hotspot/share/gc/z/zDirector.cpp:531:87: runtime error: division by zero
#0 0x7f34901420b0 in calculate_young_to_old_worker_ratio /jdk/src/hotspot/share/gc/z/zDirector.cpp:531
#1 0x7f34901420b0 in select_worker_threads /jdk/src/hotspot/share/gc/z/zDirector.cpp:690
#2 0x7f34944021d3 in select_worker_threads /jdk/src/hotspot/share/gc/z/zDirector.cpp:685
#3 0x7f34944021d3 in initial_workers /jdk/src/hotspot/share/gc/z/zDirector.cpp:780
#4 0x7f34944034d5 in initial_workers /jdk/src/hotspot/share/gc/z/zLock.inline.hpp:114
#5 0x7f34944034d5 in start_major_gc /jdk/src/hotspot/share/gc/z/zDirector.cpp:784
#6 0x7f34944034d5 in start_gc /jdk/src/hotspot/share/gc/z/zDirector.cpp:812
#7 0x7f34944034d5 in ZDirector::run_thread() /jdk/src/hotspot/share/gc/z/zDirector.cpp:908
#8 0x7f34945831f8 in ZThread::run_service() /jdk/src/hotspot/share/gc/z/zThread.cpp:29
#9 0x7f34917e4f89 in ConcurrentGCThread::run() /jdk/src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#10 0x7f3493ee8b0f in Thread::call_run() /jdk/src/hotspot/share/runtime/thread.cpp:225
#11 0x7f34933dae75 in thread_native_entry /jdk/src/hotspot/os/linux/os_linux.cpp:846
#12 0x7f349991c6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
#13 0x7f3498f1550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)
OS: linux

-----
Title: [JDK-8337066] Repeated call of StringBuffer.reverse with double byte string returns wrong result
Priority: P2
Type: Bug
Component: hotspot
Description: When calling StringBuffer/StringBuilder.reverse with 2byte string repeatedly, the API returns wrong result.

-----
Title: [JDK-8337067] Test runtime/classFileParserBug/Bad_NCDFE_Msg.java won't compile
Priority: P4
Type: Bug
Component: hotspot
Description: The test
runtime/classFileParserBug/Bad_NCDFE_Msg.java
was broken by a bad merge commit:
https://github.com/openjdk/jdk/commit/d4b040f42dd0a9100ad1ffa55de4ae4f20e9f182#diff-9984e56122c1411fcf16852d6030bce3409fa38fd5e56ec59fe8ffeccdf65e1e
way back in June 2022!
This was never noticed because jtreg just ignores the file when running all the tests in the directory, because it does not appear to be a test file due to the missing terminator on the test-block-comment. Only if you try to run the test by itself directly will you get an error.

-----
Title: [JDK-8337320] Update ProblemList.txt with tests known to fail on XWayland
Priority: P3
Type: Bug
Component: client-libs
Description: There are a few jtreg tests known to fail on XWayland
In order to be able to routinely test on this environment we need to add them to the ProblemList.txt
Specifically :
java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java 8332158 linux-x64
java/awt/FullScreen/FullscreenWindowProps/FullscreenWindowProps.java 8280991 linux-x64
java/awt/FullScreen/SetFullScreenTest.java 8332155 linux-x64
There is also :-
java/awt/Focus/VetoableChangeListenerLoopTest.java 8279256 linux-x64
but that bug is closed with a comment that it will be resolved by the fix
for https://bugs.openjdk.org/browse/JDK-8280988 which is fixed.
We should not add a problem list entry referencing a closed bug so either 8279256 should be re-opened or this problem list entry is not needed.

-----
Title: [JDK-8337331] crash: pinned virtual thread will lead to jvm crash when running with the javaagent option
Priority: P3
Type: Bug
Component: hotspot
Description: JDK HEAD commit: 476d2ae69d6
Testcase:
1. Add javaagent which will change the class file (CFLH will be touched)
2. A virtual thread need to be pinned
3. Add the option `-Djdk.tracePinnedThreads=full`
I add the testcase in the attachment.
I think this and is_in_any_VTMS_transition()) failed" class="issue-link" data-issue-key="JDK-8330146"JDK-8330146  should be backport for JDK21. JDK21 will run into deadlock now.
Update: I pull some new commits and now HEAD is 657c0bddf90. The release version will run into deadlock instead of causing jvm crash. The slowdebug version will run into jvm crash.
Cause:
When the virtual thread is pinned, it will use the class `PinnedThreadPrinter` to report. When loading this class, javaagent will change its content and post the CFLH. However, JvmtiClassFileLoadHookPoster should not call `post` for vthreads which are in VTMS transition.
Solution:
Add condition judegement for `JvmtiClassFileLoadHookPoster::post`
The crash log:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f861178c8b1, pid=41748, tid=41772
#
# JRE version: OpenJDK Runtime Environment (24.0) (build 24-internal-adhoc.tjw378335.jdk)
# Java VM: OpenJDK 64-Bit Server VM (24-internal-adhoc.tjw378335.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x2f58b1]  AccessInternal::PostRuntimeDispatch, (AccessInternal::BarrierType)2, 548964ul::oop_access_barrier(void*)+0x1
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
---------------  S U M M A R Y ------------
Host: Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz, 96 cores, 503G, Alibaba Group Enterprise Linux Server release 7.2 (Paladin)
Time: Mon Jul 29 15:08:54 2024 CST elapsed time: 0.128565 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x00007f8528061400):  JavaThread "pool-1-thread-1"        [_thread_in_vm, id=41772, stack(0x00007f85ab13a000,0x00007f85ab23b000) (1028K)]
Stack: [0x00007f85ab13a000,0x00007f85ab23b000],  sp=0x00007f85ab237c10,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x2f58b1]  AccessInternal::PostRuntimeDispatch, (AccessInternal::BarrierType)2, 548964ul::oop_access_barrier(void*)+0x1  (access.inline.hpp:81)
V  [libjvm.so+0xb2e933]  JvmtiClassFileLoadHookPoster::post_to_env(JvmtiEnv*, bool)+0x163  (jvmtiExport.cpp:270)
V  [libjvm.so+0xb23ce5]  JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**)+0x1d5  (jvmtiExport.cpp:987)
V  [libjvm.so+0xb53c26]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, JavaThread*)+0x176  (klassFactory.cpp:148)
V  [libjvm.so+0x62e33e]  ClassLoader::load_class(Symbol*, PackageEntry*, bool, JavaThread*)+0x24e  (classLoader.cpp:1205)
V  [libjvm.so+0xf707f5]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x235  (systemDictionary.cpp:1279)
V  [libjvm.so+0xf6f148]  SystemDictionary::load_instance_class(Symbol*, Handle, JavaThread*)+0x18  (systemDictionary.cpp:1343)
V  [libjvm.so+0xf6f80f]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x5ef  (systemDictionary.cpp:702)
V  [libjvm.so+0xf6fc50]  SystemDictionary::resolve_or_null(Symbol*, Handle, Handle, JavaThread*)+0x40  (systemDictionary.cpp:343)
V  [libjvm.so+0xf6fdae]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x1e  (systemDictionary.cpp:321)
V  [libjvm.so+0x6b2616]  ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)+0x296  (constantPool.cpp:599)
V  [libjvm.so+0xb83726]  LinkInfo::LinkInfo(constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x46  (linkResolver.cpp:278)
V  [libjvm.so+0xb8fcaa]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x28a  (linkResolver.cpp:1745)
V  [libjvm.so+0x9155e6]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1c6  (interpreterRuntime.cpp:842)
V  [libjvm.so+0x915ab5]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0xd5  (interpreterRuntime.cpp:1004)
j  java.lang.VirtualThread$VThreadContinuation.onPinned(Ljdk/internal/vm/Continuation$Pinned;)V+42 java.base@24-internal
j  jdk.internal.vm.Continuation.onPinned0(I)V+5 java.base@24-internal
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+325 java.base@24-internal
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 java.base@24-internal
j  java.lang.VirtualThread.yieldContinuation()Z+8 java.base@24-internal
j  java.lang.VirtualThread.parkNanos(J)V+64 java.base@24-internal
j  java.lang.VirtualThread.sleepNanos(J)V+70 java.base@24-internal
j  java.lang.Thread.sleepNanos(J)V+26 java.base@24-internal
j  java.lang.Thread.sleep(J)V+25 java.base@24-internal
j  TestPinCaseWithTrace.native2Java(I)I+11
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
V  [libjvm.so+0x91e014]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2f4  (javaCalls.cpp:415)
V  [libjvm.so+0x9d3241]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .isra.148] [clone .constprop.253]+0x161  (jni.cpp:888)
V  [libjvm.so+0x9d3d5f]  jni_CallStaticIntMethod+0x14f  (jni.cpp:1580)
C  [libPinJNI.so+0x677]  Java_TestPinCaseWithTrace_nativeFuncPin+0x47  (libPinJNI.c:29)
j  TestPinCaseWithTrace.nativeFuncPin(I)I+0
j  TestPinCaseWithTrace.lambda$main$0()V+4
j  TestPinCaseWithTrace$$Lambda+0x00007f856b003438.run()V+0
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@24-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@24-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@24-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@24-internal
J 240  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@24-internal (0 bytes) @ 0x00007f85fc22445c [0x00007f85fc224320+0x000000000000013c]
j  jdk.internal.vm.Continuation.run()V+122 java.base@24-internal
j  java.lang.VirtualThread.runContinuation()V+72 java.base@24-internal
j  java.lang.VirtualThread$$Lambda+0x00007f856b064cb8.run()V+4 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@24-internal
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.Thread.run()V+19 java.base@24-internal
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
V  [libjvm.so+0x91e014]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2f4  (javaCalls.cpp:415)
V  [libjvm.so+0x91fc43]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x223  (javaCalls.cpp:329)
V  [libjvm.so+0x9fa5d3]  thread_entry(JavaThread*, JavaThread*)+0x73  (jvm.cpp:2910)
V  [libjvm.so+0x937c0c]  JavaThread::run()+0x15c  (javaThread.cpp:757)
V  [libjvm.so+0xfbd18f]  Thread::call_run()+0x9f  (thread.cpp:225)
V  [libjvm.so+0xd160aa]  thread_native_entry(Thread*)+0xda  (os_linux.cpp:858)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.VirtualThread$VThreadContinuation.onPinned(Ljdk/internal/vm/Continuation$Pinned;)V+42 java.base@24-internal
j  jdk.internal.vm.Continuation.onPinned0(I)V+5 java.base@24-internal
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+325 java.base@24-internal
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 java.base@24-internal
j  java.lang.VirtualThread.yieldContinuation()Z+8 java.base@24-internal
j  java.lang.VirtualThread.parkNanos(J)V+64 java.base@24-internal
j  java.lang.VirtualThread.sleepNanos(J)V+70 java.base@24-internal
j  java.lang.Thread.sleepNanos(J)V+26 java.base@24-internal
j  java.lang.Thread.sleep(J)V+25 java.base@24-internal
j  TestPinCaseWithTrace.native2Java(I)I+11
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
j  TestPinCaseWithTrace.nativeFuncPin(I)I+0
j  TestPinCaseWithTrace.lambda$main$0()V+4
j  TestPinCaseWithTrace$$Lambda+0x00007f856b003438.run()V+0
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@24-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@24-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@24-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@24-internal
J 240  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@24-internal (0 bytes) @ 0x00007f85fc22445c [0x00007f85fc224320+0x000000000000013c]
j  jdk.internal.vm.Continuation.run()V+122 java.base@24-internal
j  java.lang.VirtualThread.runContinuation()V+72 java.base@24-internal
j  java.lang.VirtualThread$$Lambda+0x00007f856b064cb8.run()V+4 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@24-internal
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.Thread.run()V+19 java.base@24-internal
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
---------------  Dead Lock Stack Trace (the other condition)  ------------
The deadlock related stacktrace:
Thread 24 "pool-1-thread-1" hit Breakpoint 5, JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler (this=0x7fff8fde5940, thread=0x0) at src/hotspot/share/prims/jvmtiThreadState.cpp:256
256     JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler(jthread thread)
(gdb) bt
#0  JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler (this=0x7fff8fde5940, thread=0x0) at src/hotspot/share/prims/jvmtiThreadState.cpp:256
#1  0x00007ffff64c691d in JvmtiEnv::SetThreadLocalStorage (this=this@entry=0x7ffff001a2a0, thread=thread@entry=0x0, data=data@entry=0x7effc0bb) at src/hotspot/share/prims/jvmtiEnv.cpp:152
#2  0x00007ffff6479b8e in jvmti_SetThreadLocalStorage (env=0x7ffff001a2a0, thread=0x0, data=0x7effc0bb) at build/linux-x86_64-server-release/hotspot/variant-server/gensrc/jvmtifiles/jvmtiEnter.cpp:1049
#3  0x00007ffff508ab0f in confirmingTLSSet (jvmtienv=jvmtienv@entry=0x7ffff001a2a0, thread=thread@entry=0x0, newValue=newValue@entry=0x7effc0bb) at src/java.instrument/share/native/libinstrument/Reentrancy.c:73
#4  0x00007ffff508abbc in tryToAcquireReentrancyToken (jvmtienv=0x7ffff001a2a0, thread=thread@entry=0x0) at src/java.instrument/share/native/libinstrument/Reentrancy.c:130
#5  0x00007ffff50883c2 in transformClassFile (agent=0x7ffff001a8e0, jnienv=jnienv@entry=0x7ffff02a89a0, loaderObject=loaderObject@entry=0x0, name=name@entry=0x7fff24105478 "java/lang/PinnedThreadPrinter",
classBeingRedefined=classBeingRedefined@entry=0x0, protectionDomain=protectionDomain@entry=0x0, class_data_len=8100, class_data=0x7fff241034a0 "\312\376\272\276", new_class_data_len=0x7fff8fde5c64, new_class_data=0x7fff8fde5c68,
is_retransformer=0 '\000') at src/java.instrument/share/native/libinstrument/JPLISAgent.c:829
#6  0x00007ffff50872ef in eventHandlerClassFileLoadHook (jvmtienv=, jnienv=0x7ffff02a89a0, class_being_redefined=0x0, loader=0x0, name=0x7fff24105478 "java/lang/PinnedThreadPrinter", protectionDomain=0x0,
class_data_len=8100, class_data=0x7fff241034a0 "\312\376\272\276", new_class_data_len=0x7fff8fde5c64, new_class_data=0x7fff8fde5c68) at src/java.instrument/share/native/libinstrument/InvocationAdapter.c:650
#7  0x00007ffff64ec742 in JvmtiClassFileLoadHookPoster::post_to_env (this=0x7fff8fde5d80, env=0x7ffff001a2a0, caching_needed=) at src/hotspot/share/prims/jvmtiExport.cpp:1014
#8  0x00007ffff64e1965 in JvmtiClassFileLoadHookPoster::post_all_envs (this=0x7fff8fde5d80) at src/hotspot/share/prims/jvmtiExport.cpp:987
#9  JvmtiClassFileLoadHookPoster::post (this=0x7fff8fde5d80) at src/hotspot/share/prims/jvmtiExport.cpp:971
#10 JvmtiExport::post_class_file_load_hook (h_name=h_name@entry=0x7fffac09c2d8, class_loader=..., h_protection_domain=..., data_ptr=data_ptr@entry=0x7fff8fde5e90, end_ptr=end_ptr@entry=0x7fff8fde5e98,
cache_ptr=cache_ptr@entry=0x7fff8fde5e88) at src/hotspot/share/prims/jvmtiExport.cpp:1105
#11 0x00007ffff65119d6 in check_class_file_load_hook (__the_thread__=0x7ffff02a85e0, cached_class_file=0x7fff8fde5e88, protection_domain=..., loader_data=0x7ffff0205b60, name=0x7fffac09c2d8, stream=0x7fff24105448)
at src/hotspot/share/classfile/klassFactory.cpp:148
#12 KlassFactory::create_from_stream (stream=0x7fff24105448, name=name@entry=0x7fffac09c2d8, loader_data=0x7ffff0205b60, cl_info=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/klassFactory.cpp:189
#13 0x00007ffff5fea6de in ClassLoader::load_class (name=name@entry=0x7fffac09c2d8, pkg_entry=pkg_entry@entry=0x7ffff02128e0, search_append_only=search_append_only@entry=false, __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/classLoader.cpp:1205
#14 0x00007ffff6928a35 in SystemDictionary::load_instance_class_impl (class_name=class_name@entry=0x7fffac09c2d8, class_loader=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:1279
#15 0x00007ffff6927388 in SystemDictionary::load_instance_class (name=name@entry=0x7fffac09c2d8, class_loader=class_loader@entry=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:1343
#16 0x00007ffff6927a4f in SystemDictionary::resolve_instance_class_or_null (name=name@entry=0x7fffac09c2d8, class_loader=..., class_loader@entry=..., protection_domain=..., __the_thread__=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:702
#17 0x00007ffff6927e90 in SystemDictionary::resolve_or_null (class_name=class_name@entry=0x7fffac09c2d8, class_loader=..., protection_domain=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:343
#18 0x00007ffff6927fee in SystemDictionary::resolve_or_fail (class_name=class_name@entry=0x7fffac09c2d8, class_loader=..., class_loader@entry=..., protection_domain=..., throw_error=throw_error@entry=true,
__the_thread__=__the_thread__@entry=0x7ffff02a85e0) at src/hotspot/share/classfile/systemDictionary.cpp:321
#19 0x00007ffff606e526 in ConstantPool::klass_at_impl (__the_thread__=0x7ffff02a85e0, cp_index=44, this_cp=...) at src/hotspot/share/oops/constantPool.cpp:599
#20 ConstantPool::klass_at (__the_thread__=0x7ffff02a85e0, cp_index=44, this=) at src/hotspot/share/oops/constantPool.hpp:381
#21 ConstantPool::klass_ref_at (this=, which=which@entry=5, code=code@entry=Bytecodes::_invokestatic, __the_thread__=__the_thread__@entry=0x7ffff02a85e0) at src/hotspot/share/oops/constantPool.cpp:840
#22 0x00007ffff6541216 in LinkInfo::LinkInfo (this=0x7fff8fde6830, pool=..., index=5, code=Bytecodes::_invokestatic, __the_thread__=0x7ffff02a85e0) at src/hotspot/share/interpreter/linkResolver.cpp:278
#23 0x00007ffff654d79a in LinkResolver::resolve_invokestatic (__the_thread__=0x7ffff02a85e0, index=-1881247760, pool=..., result=...) at src/hotspot/share/interpreter/linkResolver.cpp:1745
#24 LinkResolver::resolve_invoke (result=..., recv=recv@entry=..., pool=..., index=index@entry=5, byte=byte@entry=Bytecodes::_invokestatic, __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/interpreter/linkResolver.cpp:1705
#25 0x00007ffff62d2556 in InterpreterRuntime::resolve_invoke (current=0x7ffff02a85e0, bytecode=Bytecodes::_invokestatic) at src/hotspot/share/interpreter/interpreterRuntime.cpp:842
#26 0x00007ffff62d2a25 in InterpreterRuntime::resolve_from_cache (current=0x7ffff02a85e0, bytecode=) at src/hotspot/share/interpreter/interpreterRuntime.cpp:1004
The `JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler` cannot jump out the loop since the vthread-1 itself is in VTMS Transition. (VTMS_transition_mark is true)
OS: linux

-----
Title: [JDK-8337410] The makefiles should set problemlist and adjust timeout basing on the given VM flags
Priority: P4
Type: Enhancement
Component: hotspot
Description: The certain testing like Xcomp/ZGC assume that corresponding problem lists are used. It does make sense to treat them exaclty like ProblemList.txt and use them by default.
There are following lists to be set:
ProblemList-Virtual.txt
ProblemList-Xcomp.txt
ProblemList-generational-zgc.txt
ProblemList-zgc.txt
Also using "-Xcomp" might automatically increase timeoutFactor to 10.

-----
Title: [JDK-8337780] RISC-V: C2: Change C calling convention for sp to NS
Priority: P4
Type: Enhancement
Component: hotspot
Description: We can change the C calling convention for sp to NS as sp is always saved and restored by the prolog/epilog code.
This could reduce the frame size by 16 bytes for each C2 runtime stub as we do not have to save sp on the method entry.
Here is an example, when sp is SOE, the generated code would be:
```
Decoding RuntimeStub - _complete_monitor_locking_Java 0x0000003f676d6a08 [0x0000003f676d6a80, 0x0000003f676d6b08] (136 bytes)
--------------------------------------------------------------------------------
0x0000003f676d6a80:   nop
0x0000003f676d6a84:   addi    sp,sp,-32
0x0000003f676d6a86:   sd      s0,16(sp)
0x0000003f676d6a88:   sd      ra,24(sp)
0x0000003f676d6a8a:   sd      sp,0(sp)
0x0000003f676d6a8c:   sd      sp,928(s7)
0x0000003f676d6a90:   mv      a0,a1
0x0000003f676d6a92:   mv      a1,a2
0x0000003f676d6a94:   mv      a2,s7
0x0000003f676d6a96:   auipc   t1,0x0
0x0000003f676d6a9a:   addi    t1,t1,44 # 0x0000003f676d6ac2
0x0000003f676d6a9e:   lui     t0,0x1fc
0x0000003f676d6aa2:   addi    t0,t0,-108 # 0x00000000001fbf94
0x0000003f676d6aa6:   slli    t0,t0,0xb
0x0000003f676d6aaa:   addi    t0,t0,1589
0x0000003f676d6aae:   slli    t0,t0,0x6
0x0000003f676d6ab2:   addi    t0,t0,14
0x0000003f676d6ab6:   addi    sp,sp,-16
0x0000003f676d6aba:   sd      t1,8(sp)
0x0000003f676d6abe:   jalr    t0
0x0000003f676d6ac2:   nop
0x0000003f676d6ac6:   lui     zero,0x0
0x0000003f676d6aca:   sext.w  zero,zero
0x0000003f676d6ace:   addi    sp,sp,16
0x0000003f676d6ad2:   sd      zero,928(s7)
0x0000003f676d6ad6:   sd      zero,936(s7)
0x0000003f676d6ada:   ld      t2,8(s7)
0x0000003f676d6ade:   bnez    t2,0x0000003f676d6aec
0x0000003f676d6ae2:   ld      sp,0(sp)
0x0000003f676d6ae4:   ld      s0,16(sp)
0x0000003f676d6ae6:   ld      ra,24(sp)
0x0000003f676d6ae8:   addi    sp,sp,32
0x0000003f676d6aea:   ret
0x0000003f676d6aec:   li      t6,0
0x0000003f676d6af0:   lui     t2,0x3f67
0x0000003f676d6af4:   addiw   t2,t2,1487 # 0x0000000003f675cf
0x0000003f676d6af8:   slli    t2,t2,0xc
0x0000003f676d6afa:   addi    t2,t2,832
0x0000003f676d6afe:   ld      sp,0(sp)
0x0000003f676d6b00:   ld      s0,16(sp)
0x0000003f676d6b02:   ld      ra,24(sp)
0x0000003f676d6b04:   addi    sp,sp,32
0x0000003f676d6b06:   jr
```
after we change to NS, it only generates the following code:
```
Decoding RuntimeStub - _complete_monitor_locking_Java 0x0000003f676d6688 [0x0000003f676d6700, 0x0000003f676d6788] (136 bytes)
--------------------------------------------------------------------------------
0x0000003f676d6700:   nop
0x0000003f676d6704:   addi    sp,sp,-16
0x0000003f676d6706:   sd      s0,0(sp)
0x0000003f676d6708:   sd      ra,8(sp)
0x0000003f676d670a:   sd      sp,928(s7)
0x0000003f676d670e:   mv      a0,a1
0x0000003f676d6710:   mv      a1,a2
0x0000003f676d6712:   mv      a2,s7
0x0000003f676d6714:   auipc   t1,0x0
0x0000003f676d6718:   addi    t1,t1,44 # 0x0000003f676d6740
0x0000003f676d671c:   lui     t0,0x1fc
0x0000003f676d6720:   addi    t0,t0,-107 # 0x00000000001fbf95
0x0000003f676d6724:   slli    t0,t0,0xb
0x0000003f676d6728:   addi    t0,t0,316
0x0000003f676d672c:   slli    t0,t0,0x6
0x0000003f676d6730:   addi    t0,t0,12
0x0000003f676d6734:   addi    sp,sp,-16
0x0000003f676d6738:   sd      t1,8(sp)
0x0000003f676d673c:   jalr    t0
0x0000003f676d6740:   nop
0x0000003f676d6744:   lui     zero,0x0
0x0000003f676d6748:   sext.w  zero,zero
0x0000003f676d674c:   addi    sp,sp,16
0x0000003f676d6750:   sd      zero,928(s7)
0x0000003f676d6754:   sd      zero,936(s7)
0x0000003f676d6758:   ld      t2,8(s7)
0x0000003f676d675c:   bnez    t2,0x0000003f676d6768
0x0000003f676d6760:   ld      s0,0(sp)
0x0000003f676d6762:   ld      ra,8(sp)
0x0000003f676d6764:   addi    sp,sp,16
0x0000003f676d6766:   ret
0x0000003f676d6768:   li      t6,0
0x0000003f676d676c:   lui     t2,0x3f67
0x0000003f676d6770:   addiw   t2,t2,1487 # 0x0000000003f675cf
0x0000003f676d6774:   slli    t2,t2,0xc
0x0000003f676d6776:   addi    t2,t2,832
0x0000003f676d677a:   ld      s0,0(sp)
0x0000003f676d677c:   ld      ra,8(sp)
0x0000003f676d677e:   addi    sp,sp,16
0x0000003f676d6780:   jr      t2
```
We also checked the calling convention type for sp on other platforms (AArch64, PPC, x86, x64, S390), and they are all treated as NS.
OS: linux

-----
Title: [JDK-8337810] ProblemList BasicDirectoryModel/LoaderThreadCount.java on Windows
Priority: P4
Type: Sub-task
Component: client-libs
Description: The test BasicDirectoryModel/LoaderThreadCount.java fails rather often in our CI, exclude it for now.

-----
Title: [JDK-8337826] Improve logging in OCSPTimeout and SimpleOCSPResponder to help diagnose JDK-8309754
Priority: P3
Type: Enhancement
Component: security-libs
Description: The OCSPTimeout test introduced in JDK-8179502 had windows that were too tightly bound for some CI infrastructures.  This was largely corrected in JDK-8309740, but OCSPTimeout still has occasional failures, but they are much more rare and very difficult to reproduce.  They may not even be timing related any longer.
This enhancement seeks to add some more detailed log messages on the cert path validator (client) and SimpleOCSPServer (server) sides to the OCSP test so when the issue does happen again we can hopefully get more information to help diagnose or reproduce the failure.

-----
Title: [JDK-8309754] java/security/cert/CertPathValidator/OCSP/OCSPTimeout.java failed with "Expected to pass, found 1 soft fail exceptions"
Priority: P3
Type: Bug
Component: security-libs
Description: The following test failed in the JDK22 CI:
java/security/cert/CertPathValidator/OCSP/OCSPTimeout.java
Here's a snippet from the log file:
#section:main
----------messages:(7/575)----------
command: main -Dcom.sun.security.ocsp.readtimeout=2750ms OCSPTimeout 2000 true
reason: User specified action: run main/othervm -Dcom.sun.security.ocsp.readtimeout=2750ms OCSPTimeout 2000 true
started: Fri Jun 09 21:20:32 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/sun.security.x509=ALL-UNNAMED --add-exports java.base/sun.security.provider.certpath=ALL-UNNAMED --add-exports java.base/sun.security.util=ALL-UNNAMED
finished: Fri Jun 09 21:20:38 UTC 2023
elapsed time (seconds): 5.427
----------configuration:(6/279)----------
Boot Layer
add modules: java.base
add exports: java.base/sun.security.provider.certpath ALL-UNNAMED
java.base/sun.security.util              ALL-UNNAMED
java.base/sun.security.x509              ALL-UNNAMED
----------System.out:(19/658)----------
Generated Root CA KeyPair
Generated End Entity KeyPair
Root CA Created:
Issuer: CN=Root CA Cert, O=SomeCompany
Subject: CN=Root CA Cert, O=SomeCompany
Serial: 1
[MainThread]: nextUpdate set to Fri Jun 09 22:20:34 UTC 2023
[MainThread]: Response Content-Length field disabled
[pool-1-thread-1]: Listening on 0.0.0.0/0.0.0.0:63089
Root OCSP Responder URI is http://localhost:63089
SSL Certificate Created:
Issuer: CN=Root CA Cert, O=SomeCompany
Subject: CN=SSLCertificate, O=SomeCompany
Serial: 4096
[MainThread]: Added entry for serial 4096(CERT_STATUS_GOOD)
[MainThread]: OCSP latency set to 2000 milliseconds.
Test case expects to pass
----------System.err:(11/700)----------
java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions
at OCSPTimeout.main(OCSPTimeout.java:116)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions
----------rerun:(46/6462)*----------
OS: windows

-----
Title: [JDK-8337851] Some tests have name which confuse jtreg
Priority: P4
Type: Bug
Component: tools
Description: When running test/langtools/tools/javac/warnings/Serial.java with `-retain:all`, the ".jtr" files inside the `Serial` directory (e.g., test/langtools/tools/javac/warnings/Serial/Extern.jtr) are deleted. This issue also occurs for test/langtools/tools/javac/generics/ParametricException.java (on case-insensitive file systems) and test/jdk/java/awt/dnd/URLDragTest.java.
This issue occurs when there is a test directory whose name is the same as the test name (without extension).
This behaviour is similar to that reported in https://bugs.openjdk.org/browse/JDK-8318689, and a similar fix should be applied.
OS: generic

-----
Title: [JDK-8337876] [IR Framework] Add support for IR tests with @Stable
Priority: P4
Type: Enhancement
Component: hotspot
Description: It is currently not possible to write IR tests with @Stable because one need to somehow add the IR test classes to the boot classpath.
This RFE should provide easy support to enable that and is motivated by JDK-8333791.

-----
Title: [JDK-8337966] (fs) Files.readAttributes fails with Operation not permitted on older docker releases
Priority: P4
Type: Bug
Component: core-libs
Description: JDK fails with java.nio.file.FileSystemException: Operation not permitted
on the old docker versions (before v19)
Regression is introduced by JDK-8316304 adding a statx syscall
On the old docker versions, statx is not added to the default seccomp white list ( https://github.com/moby/moby/blob/00c1c604d08bbceb73a680d37d7428e6a4e986af/profiles/seccomp/default.json ) It causes EPERM in some systems even if the container image is updated.
```
root@88d002f4c30b:/# /jdk/bin/java -Xdiag -jar ../apps/customjsse.jar
Error: An unexpected error occurred while trying to open file ../apps/customjsse.jar
java.nio.file.FileSystemException: ../apps/customjsse.jar: Operation not permitted
at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)
at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
at java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:56)
at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:163)
at java.base/sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
at java.base/java.nio.file.Files.readAttributes(Files.java:1865)
at java.base/java.util.zip.ZipFile$Source.get(ZipFile.java:1512)
at java.base/java.util.zip.ZipFile$CleanableResource.(ZipFile.java:744)
at java.base/java.util.zip.ZipFile.(ZipFile.java:254)
at java.base/java.util.zip.ZipFile.(ZipFile.java:181)
at java.base/java.util.jar.JarFile.(JarFile.java:345)
at java.base/java.util.jar.JarFile.(JarFile.java:316)
at java.base/java.util.jar.JarFile.(JarFile.java:255)
at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:834)
at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:736)
```
OS: linux

-----
Title: [JDK-8338058] map_or_reserve_memory_aligned Windows enhance remap assertion
Priority: P4
Type: Enhancement
Component: hotspot
Description: In method map_or_reserve_memory_aligned on Windows we should enhance the output in the  remap assertion, to get more details in case of failures.
OS: windows

-----
Title: [JDK-8338101] remove old remap assertion in map_or_reserve_memory_aligned  after JDK-8338058
Priority: P4
Type: Enhancement
Component: hotspot
Description: After JDK-8338058 by mistake an old assertion remained in map_or_reserve_memory_aligned; this has to be removed.
OS: windows

-----
Title: [JDK-8338109] java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java duplicate in ProblemList
Priority: P4
Type: Bug
Component: client-libs
Description: JDK-8337320 regression
java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java 8005021 macosx-all
java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java 8332158 linux-x64

-----
Title: [JDK-8338110] Exclude Fingerprinter::do_type from ubsan checks
Priority: P4
Type: Sub-task
Component: hotspot
Description: For now we still have undefined behavior in Fingerprinter::do_type reorted by ubsan ;  exclude the method from ubsan checks until the signature handling code is adjusted .
OS: generic

-----
Title: [JDK-8338112] Test testlibrary_tests/ir_framework/tests/TestPrivilegedMode.java fails with release build
Priority: P4
Type: Bug
Component: hotspot
Description: Test log snippet:
STDOUT:
IR verification disabled due to not running a debug build (required for PrintIdealand PrintOptoAssembly), running with -Xint, or -Xcomp (use warm-up of 0 instead)
Skip Flag VM due to not performing IR verification.
Run Test VM:
Command line: [/var/tmp/tone/run/jtreg/jdk-repo/build/linux-x86_64-server-release/images/jdk/bin/java -cp /var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/11/testlibrary_tests/ir_framework/tests/TestPrivilegedMode.d:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg/testlibrary_tests/ir_framework/tests:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/11/test/lib:/var/tmp/tone/run/jtreg/jdk-repo/test/lib:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/11:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg:/var/tmp/tone/run/jtreg/jtreg/lib/javatest.jar:/var/tmp/tone/run/jtreg/jtreg/lib/jtreg.jar -Djava.library.path=/var/tmp/tone/run/jtreg/test-images/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.lang.processReaperUseDefaultStackSize=true -Dtest.wisp.socketAddress=www.alibabacloud.com -Xmixed -ea -esa -Dir.framework.server.port=39067 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM ir_framework.tests.TestPrivilegedMode ]
[2024-08-09T10:45:33.519775771Z] Gathering output for process 1022474
[2024-08-09T10:45:33.531373782Z] Waiting for completion for process 1022474
[2024-08-09T10:45:33.863238320Z] Waiting for completion finished for process 1022474
Output and diagnostic info for process 1022474 was saved into 'pid-1022474-output.log'
IR verification disabled either due to no @IR annotations, through explicitly setting -DVerify=false, due to not running a debug build, using a non-whitelisted JTreg VM or Javaopts flag like -Xint, or running the test VM with other VM flags added by user code that make the IR verification impossible (e.g. -XX:-UseCompile, -XX:TieredStopAtLevel=[1,2,3], etc.).
STDERR:
java.lang.RuntimeException: should not reach
at jdk.test.lib.Asserts.fail(Asserts.java:691)
at ir_framework.tests.TestPrivilegedMode.main(TestPrivilegedMode.java:47
OS: generic

-----
Title: [JDK-8338344] Test TestPrivilegedMode.java intermittent fails java.lang.NoClassDefFoundError: jdk/test/lib/Platform
Priority: P4
Type: Bug
Component: hotspot
Description: Command Line:
/var/tmp/tone/run/jtreg/jdk-repo/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5/testlibrary_tests/ir_framework/tests/TestPrivilegedMode.d:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg/testlibrary_tests/ir_framework/tests:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5/test/lib:/var/tmp/tone/run/jtreg/jdk-repo/test/lib:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg:/var/tmp/tone/run/jtreg/jtreg/lib/javatest.jar:/var/tmp/tone/run/jtreg/jtreg/lib/jtreg.jar -Djava.library.path=/var/tmp/tone/run/jtreg/test-images/hotspot/jtreg/native -Xbootclasspath/a:.:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5/testlibrary_tests/ir_framework/tests/TestPrivilegedMode.d -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.lang.processReaperUseDefaultStackSize=true -Dtest.wisp.socketAddress=www.alibabacloud.com -Xmixed -ea -esa -Dir.framework.server.port=37957 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-2568528.log -XX:CompilerDirectivesLimit=11 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM ir_framework.tests.TestPrivilegedMode
Error Output
------------
Exception in thread "main" java.lang.NoClassDefFoundError: jdk/test/lib/Platform
at compiler.lib.ir_framework.test.TestVM.(TestVM.java:78)
OS: linux

-----
Title: [JDK-8338380] Update TLSCommon/interop/AbstractServer to specify an interface to listen for connections
Priority: P4
Type: Bug
Component: security-libs
Description: test/jdk/javax/net/ssl/TLSCommon/interop/AbstractServer.java it can be useful to allow tests to specify a specific interface on which to listen for incoming connections.
Default should be the loopback interface.

-----
Title: [JDK-8338389] [JFR] Long strings should be added to the string pool
Priority: P3
Type: Bug
Component: hotspot
Description: When committing JFR events with string data longer than 128 characters, the string isn't added to the JFR string pool.
In scenarios with many events containing large string values, this can lead to very large JFR recordings. This is mostly the case for custom events, containing f.i. SQL strings, or other data. In the case where the string data consist of mostly duplicate data, adding them to the string pool has been shown to reduce the recording size by a factor of 10.
The current scheme for adding strings to the pool adheres to strings 16-128 characters long. In order for a string to be pooled, potential duplicates are cached and checked in a set of four. With this change, the current scheme still holds for lengths 16-128, but strings longer than 128 characters are always pooled.

-----
Title: [JDK-8338402] GHA: some of bundles may not get removed
Priority: P4
Type: Bug
Component: infrastructure
Description: Some of bundles may not get removed. This is follows JDK-8336928. Problem does not always show up, so I have not seen it in my test runs, but since then I have  seen some GHA runs affected by this.
Details:
Turns out, that call to list artifacts is by default limited to first 30 artifacts. GHA of openjdk currently produces 75 artifacts of which 10 are bundles (built jdk). Problem happens if build on some platform takes too long and enough test results (other platforms) got uploaded in meantime. Bundle can then be shifted down in list and not fall into list of first 30 artifacts. Problem can be fixed by increasing per_page limit (API allows up to 100).

-----
Title: [JDK-8338449] ubsan: division by zero in sharedRuntimeTrans.cpp
Priority: P4
Type: Bug
Component: hotspot
Description: When running with ubsan enabled binaries on Linux ppc64le, these  divisions by zero are detected.
test
java/lang/Math/Log10Tests.java: Tests for {Math, StrictMath}.log10
----------stderr:(4/324)----------
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:219:27: runtime error: division by zero
#0 0x7fffa7e14abc in SharedRuntime::dlog10(double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f4abc)
#1 0x7fff8b8fc8e8  ()
test
java/lang/Math/LogTests.java: Tests for {Math, StrictMath}.log
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:125:27: runtime error: division by zero
#0 0x7fff887f48bc in __ieee754_log(double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f48bc)
#1 0x7fff6b8fc768  ()
test
java/lang/Math/PowTests.java: Tests for {Math, StrictMath}.pow
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:508:23: runtime error: division by zero
#0 0x7fff92fd61f0 in SharedRuntime::dpow(double, double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f61f0)
#1 0x7fff7701c8ec  ()
Might be that these divisions are desired so we could consider excluding the code from ubsan checks.
For some reason I do not see the failures on Linux x86_64 when running those tests .

-----
Title: [JDK-8338550] Do libubsan1 installation in test container only if requested
Priority: P4
Type: Bug
Component: hotspot
Description: After JDK-8333144 docker related tests do not work on manually configured distros other than the 'standard' Ubuntu. This is because the basic generated Dockerfile with the change from JDK-8333144 assumes 'apt-get' being available, which is not the case when one runs the testing on RPM based distributions. This isn't easily noticeable unless one inspects the skipped status of a test or looks at the corresponding jtr file. When the basic container image isn't buildable, the test is skipped and not run at all.
So it is necessary to make the libubsan1 installation optional.
OS: linux

-----
Title: [JDK-8338748] [17u,21u] Test Disconnect.java compile error: cannot find symbol after JDK-8299813
Priority: P3
Type: Bug
Component: core-libs
Description: STDERR:
/var/tmp/tone/run/jtreg/jdk-repo/test/jdk/java/nio/channels/DatagramChannel/Disconnect.java:55: error: cannot find symbol
InetAddress lo4 = InetAddress.ofLiteral("127.0.0.1");
^
symbol:   method ofLiteral(String)
location: class InetAddress
/var/tmp/tone/run/jtreg/jdk-repo/test/jdk/java/nio/channels/DatagramChannel/Disconnect.java:65: error: cannot find symbol
InetAddress lo6 = InetAddress.ofLiteral("::1");
^
symbol:   method ofLiteral(String)
location: class InetAddress
2 errors
TEST RESULT: Failed. Compilation failed: Compilation failed
There is no InetAddress.ofLiteral API in jdk21u and jdk17u, the InetAddress.ofLiteral API was added by JDK-8272215 in jdk22.  Thus the fix applies only to 21 and older.
OS: generic

-----
Title: [JDK-8299813] java/nio/channels/DatagramChannel/Disconnect.java fails with jtreg test timeout due to lost datagram
Priority: P4
Type: Bug
Component: core-libs
Description: ----------messages:(10/289)----------
command: main Disconnect
reason: User specified action: run main Disconnect
started: Mon Jan 09 13:23:41 GMT 2023
Mode: agentvm
Agent id: 15
Timeout refired 480 times
Timeout information:
--- Timeout information end.
finished: Mon Jan 09 13:32:25 GMT 2023
elapsed time (seconds): 524.117
The test is stuck in receive:
"AgentVMThread" #438 [39687] prio=5 os_prio=31 cpu=17.81ms elapsed=490.77s allocated=94064B defined_classes=7 tid=0x00007facbf020000 nid=39687 runnable  [0x000070000b18a000]
java.lang.Thread.State: RUNNABLE
at sun.nio.ch.DatagramChannelImpl.receive0(java.base@21-ea/Native Method)
at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(java.base@21-ea/DatagramChannelImpl.java:789)
at sun.nio.ch.DatagramChannelImpl.receive(java.base@21-ea/DatagramChannelImpl.java:773)
at sun.nio.ch.DatagramChannelImpl.receive(java.base@21-ea/DatagramChannelImpl.java:577)
at Disconnect.test(Disconnect.java:81)
at Disconnect.main(Disconnect.java:45)
at java.lang.invoke.LambdaForm$DMH/0x00000007c0001c00.invokeStatic(java.base@21-ea/LambdaForm$DMH)
at java.lang.invoke.LambdaForm$MH/0x00000007c00cd800.invoke(java.base@21-ea/LambdaForm$MH)
at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@21-ea/Invokers$Holder)
at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@21-ea/DirectMethodHandleAccessor.java:155)
at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@21-ea/DirectMethodHandleAccessor.java:104)
at java.lang.reflect.Method.invoke(java.base@21-ea/Method.java:578)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.lang.Thread.runWith(java.base@21-ea/Thread.java:1636)
at java.lang.Thread.run(java.base@21-ea/Thread.java:1623)
OS: os_x

-----
Title: [JDK-8338751] ConfigureNotify behavior has changed in KWin 6.2
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
According to https://github.com/openjdk/jdk/blob/285ceb9ee51e064687da6fc3fbed984e34cf02e6/src/java.desktop/unix/classes/sun/awt/X11/XWindowPeer.java#L766, it appears like KWin is assumed to always send synthetic ConfigureNotify events. However, the internal KWin implementation details have/will be changed in 6.2 to match the behavior described in ICCCM 4.1.5, i.e. if the client window is resized, no synthetic configure notify event will be sent. The reason for that was to fix some issues during interactive resize.
Unfortunately, it breaks pointer input under certain circumstances.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Have a machine running KWin 6.2, it can be either built from source code (https://develop.kde.org/docs/getting-started/building/kdesrc-build-compile/) or one can download the KDE Neon Testing or Developer edition.
- download JDownloader2 app, and open it
- right click anywhere in the download list, dismiss the popup
- maximize the JDownloader2 window
- right click again, and hover entries in the popup window
- the context menu entries are not highlighted as expected and pointer events have an offset
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
pointer input has some offset after maximizing JDownloader2 window
ACTUAL -
no issues with pointer input
CUSTOMER SUBMITTED WORKAROUND :
If KWin is forced to pretend to be Mutter by changing the WMName property, then the issue cannot be reproduced. The issue is reproducible both in Plasma X11 and Plasma Wayland sessions.
FREQUENCY : always
OS: linux

-----
Title: [JDK-8338759] Add extra diagnostic to java/net/InetAddress/ptr/Lookup.java
Priority: P4
Type: Bug
Component: core-libs
Description: An intermittent failure has been observed in SBR JDK23 b36 run where the test  java/net/InetAddress/ptr/Lookup.java  fails with
java.lang.RuntimeException: Mismatch between default and java.net.preferIPv4Stack=true results
This is due to the java.net.preferIPv4Stack IP reverse  lookup doesn't match that of the dual stack IP reverse lookup.
A possible cause of this is that there is network infra glitch during the dual stack IP reverse lookup, such that the DNS is not available and the hostname of the created InetAddress is populated with the IP address.
The test provides very good diagnostics, but doesn't provide details of the dual stack IP reverse lookup, which is an essential aspect of the test.
Add a diagnostic to output the InetAddress details retrieved for the dual stack lookup
OS: linux_oracle

-----
Title: [JDK-8338924] C1: assert(0 <= i && i < _len) failed: illegal index 5 for length 5
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK24 CI:
runtime/interpreter/LastJsrTest.java
Here's a snippet from the log file:
#section:main
----------messages:(6/230)----------
command: main LastJsrTest
reason: User specified action: run main/othervm LastJsrTest
started: Fri Aug 23 18:24:08 UTC 2024
Mode: othervm [/othervm specified]
finished: Fri Aug 23 18:24:38 UTC 2024
elapsed time (seconds): 30.094
----------configuration:(0/0)----------
----------System.out:(22/2123)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S2259/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7ca5078e-c5e9-48af-ba7c-18c19669cc97/runs/a4e5ab2e-466e-4fe1-a5bc-3627013e5c55/workspace/open/src/hotspot/share/utilities/growableArray.hpp:142), pid=3237428, tid=3237445
#  assert(0 ::at(int) [clone .part.0]+0x24
#
# Core dump will be written. Default location: Core dumps may be processed with "/opt/core.sh %p" (or dumping to /opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S5256/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43d4584c-fdc2-416a-989e-b7a6f6e01ad4/runs/d58513c5-3dcb-47fb-9de8-37c18ba4f338/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/core.3237428)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S5256/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43d4584c-fdc2-416a-989e-b7a6f6e01ad4/runs/d58513c5-3dcb-47fb-9de8-37c18ba4f338/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/hs_err_pid3237428.log
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S5256/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43d4584c-fdc2-416a-989e-b7a6f6e01ad4/runs/d58513c5-3dcb-47fb-9de8-37c18ba4f338/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/replay_pid3237428.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(42/7298)*----------
OS: linux

-----
Title: [JDK-8339080] Bump update version for OpenJDK: jdk-21.0.6
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Development of update 21.0.6 starts in repository jdk21u-dev on Wednesday August 28th, 2024. The first change should be to bump the version.
Release of 21.0.6 is planned for Tuesday January 21th, 2025.
For the date, see also https://wiki.openjdk.org/display/JDKUpdates/JDK%2021u or https://www.oracle.com/security-alerts/

-----
Title: [JDK-8339248] RISC-V: Remove li64 macro assembler routine and related code
Priority: P4
Type: Enhancement
Component: hotspot
Description: The macro assembler routine li64 and related code (is_li64_at, patch_imm_in_li64, get_target_of_li64 and check_li64_data_dependency) is unused for now.
We should remove these unused code, which will save us some unnecessary runtime checks. We can add them back when needed again someday.
OS: linux

-----
Title: [JDK-8339384] Unintentional IOException in jdk.jdi module when JDWP end of stream occurs
Priority: P5
Type: Bug
Component: hotspot
Description: The block of code in com.sun.tools.jdi.TargetVM has a logic error which leads to an IOException being raised every time the JDWP stream that it is parsing reaches the end of stream:
public void run() {
if ((vm.traceFlags & VirtualMachine.TRACE_SENDS) != 0) {
vm.printTrace("Target VM interface thread running");
}
Packet p=null,p2;
String idString;
while (shouldListen) {
boolean done = false;
try {
byte b[] = connection.readPacket();
if (b.length == 0) {
done = true;
}
p = Packet.fromByteArray(b);
} catch (IOException e) {
done = true;
}
The fix for the unintentional IOException is to add an else case if the readPacket() returns 0 length

-----
Title: [JDK-8339386] Assertion on AIX - original PC must be in the main code section of the compiled method
Priority: P4
Type: Bug
Component: hotspot
Description: The test jdk/jfr/tool/TestMetadata.java triggered the following assertion on AIX :
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-jdk-aix_ppc64-dbg/jdk/src/hotspot/cpu/ppc/frame_ppc.inline.hpp:69), pid=14942644, tid=6948
#  assert(_cb == nullptr || _cb-as_nmethod()-insts_contains_inclusive(_pc)) failed: original PC must be in the main code section of the compiled method (or must be immediately following it)
---------------  T H R E A D  ---------------
Current thread (0x00000001178f4370):  JfrThreadSampler "JFR Thread Sampler" [id=6948, stack(0x000000011a640000,0x000000011a85b888) (2158K)] _threads_hazard_ptr=0x0000000116367cb0, _nested_threads_hazard_ptr_cnt=0
Stack: [0x000000011a640000,0x000000011a85b888],  sp=0x000000011a859c80,  free space=2151k
No context given, using current context.
Native frame:
iar:  0x09000000167b35d8 libjvm.so::AixNativeCallstack::print_callstack_for_context(outputStream*, ucontext_t const*, bool, char*, unsigned long)+0x4cc  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:5 parmsonstk:1)
lr:   0x00000000000007d0 (unknown module)::(unknown function)+?
sp:   0x000000011a858f40 (base - 0x2948)
rtoc: 0x08001000a03d9a40
|---stackaddr----|   |----lrsave------|:
0x000000011a859330 - 0x09000000167b3098 libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)
0x000000011a8593b0 - 0x09000000165438d0 libjvm.so::VMError::report(outputStream*, bool)+0x1c0c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)
0x000000011a859c90 - 0x090000001652deb0 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x72c  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)
0x000000011a859ea0 - 0x090000001652d738 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)
0x000000011a859f40 - 0x090000001652d418 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)
0x000000011a859fe0 - 0x0900000016531f28 libjvm.so::frame::setup(frame::kind)+0x28c  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:2 parmsonstk:1)
0x000000011a85a070 - 0x09000000165d77e8 libjvm.so::frame::safe_for_sender(JavaThread*)+0x28c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:9 fixedparms:2 parmsonstk:1)
0x000000011a85a170 - 0x09000000165dda7c libjvm.so::JfrVframeStream::next_vframe()+0x130  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:8 fixedparms:1 parmsonstk:1)
0x000000011a85a260 - 0x0900000016b2a7ec libjvm.so::JfrStackTrace::record_async(JavaThread*, frame const&)+0x314  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:3 parmsonstk:1)
0x000000011a85aaf0 - 0x0900000016b29764 libjvm.so::OSThreadSampler::protected_task(SuspendedThreadTaskContext const&)+0x124  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:2 parmsonstk:1)
0x000000011a85abd0 - 0x0900000016b294e8 libjvm.so::OSThreadSampler::do_task(SuspendedThreadTaskContext const&)+0xd8  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:2 parmsonstk:1)
0x000000011a85af20 - 0x0900000016b2ae30 libjvm.so::SuspendedThreadTask::internal_do_task()+0x6c  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:1 parmsonstk:1)
0x000000011a85afb0 - 0x0900000016b2ad68 libjvm.so::SuspendedThreadTask::run()+0x20  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:1 parmsonstk:1)
0x000000011a85b030 - 0x0900000016b292c0 libjvm.so::JfrThreadSampleClosure::sample_thread_in_java(JavaThread*, JfrStackFrame*, unsigned int)+0xa8  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:7 fixedparms:4 parmsonstk:1)
0x000000011a85b140 - 0x0900000016b28ef4 libjvm.so::JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType)+0x1a8  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:9 fixedparms:5 parmsonstk:1)
0x000000011a85b200 - 0x0900000016b281a4 libjvm.so::JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**)+0x464  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:14 fixedparms:3 parmsonstk:1)
0x000000011a85b570 - 0x0900000016b27ca0 libjvm.so::JfrThreadSampler::run()+0x198  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:12 fixedparms:1 parmsonstk:1)
0x000000011a85b640 - 0x0900000016650b68 libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)
0x000000011a85b6d0 - 0x09000000166500c8 libjvm.so::thread_native_entry(Thread*)+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:10 fixedparms:1 parmsonstk:1)
0x000000011a85b7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )
0x000000011a85b820 - 0x0000000000000000
*** end of backchain ***
-----------------------
OS: aix

-----
Title: [JDK-8339416] [s390x] Provide implementation for resolve_global_jobject
Priority: P4
Type: Enhancement
Component: hotspot
Description: JDK-8299089 port for s390x is missing and method being implemented in that Port is going to be beneficial for JDK-8337753 Port for s390x. So it will be good to have this method and referenced a call to it instead of resolve_jobject in the JDK-8337753 port.
OS: linux

-----
Title: [JDK-8339487] ProcessHandleImpl os_getChildren sysctl call - retry in case of ENOMEM and enhance exception message
Priority: P4
Type: Bug
Component: core-libs
Description: In jtreg test java/lang/ProcessHandle/PermissionTest.java on macOS we ran a few times into this error :
java.lang.RuntimeException: Cannot allocate memory
at java.base/java.lang.ProcessHandleImpl.getProcessPids0(Native Method)
at java.base/java.lang.ProcessHandleImpl.children(ProcessHandleImpl.java:456)
at java.base/java.lang.ProcessHandleImpl.children(ProcessHandleImpl.java:434)
at PermissionTest.childrenWithPermission(PermissionTest.java:84)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
Probably sysctl fails here, but it is not fully clear; it would help to change the exception so that the standard text is shown too.
Also in case of ENOMEM, we can retry the failing sysctl call a few times.
OS: generic

-----
Title: [JDK-8339548] GHA: RISC-V: Use Debian snapshot archive for bootstrap
Priority: P4
Type: Bug
Component: infrastructure
Description: Debian "sid" or "unstable" (https://httpredir.debian.org/debian) that we use for debootstrapping RISC-V breaks very often. Currently, the GHA linux-cross-build for RISC-V would not continue and is simply skipped when this debootstrap for "sid" repos fails. (See JDK-8326960 for more details). This is affecting GHA linux-cross-build for RISC-V for quite some time. As a result, we failed to catch some early build issues.
But I don't think we need to catch up with the latest Debian "unstable" for our GHA verification purpose. So one way would be using some older but working Debian shapshot [1] [2] for our purpose. I find the most recent usable shapshot is https://snapshot.debian.org/archive/debian/20240228T034848Z/. We can switch back to more stable Debian repo once it graduates.
[1] https://snapshot.debian.org/
[2] https://lists.debian.org/debian-snapshot/
OS: linux

-----
Title: [JDK-8339560] Unaddressed comments during code review of JDK-8337664
Priority: P4
Type: Bug
Component: security-libs
Description: During the review, Rajan and Sean had several comments that I was unable to address because of time constraints. Nothing was urgent so it was decided to file a follow-on bug.
1. test/jdk/sun/security/ssl/X509TrustManagerImpl/Entrust/Distrust.java, line 113:
Rajan - "Please update this and other Exception thrown in loadCertificateChain and testTM function to RuntimeException."
2. test/jdk/sun/security/ssl/X509TrustManagerImpl/Entrust/Distrust.java, line 141:
Rajan - "Should this be updated to throw SkippedException so we know that certificates are expired?"
3. Sean - "I noticed we could combine some of the Symantec and Entrust tests, but I think it is too risky at this point."

-----
Title: [JDK-8337664] Distrust TLS server certificates issued after Oct 2024 and anchored by Entrust Root CAs
Priority: P3
Type: Enhancement
Component: security-libs
Description: Google [1] and Mozilla [2] have announced plans to distrust TLS Server certificates issued by Entrust.
This enhancement will implement similar restrictions in the JDK.
The restrictions will be enforced in the SunJSSE Provider of the Java Secure Socket Extension (JSSE) API. A TLS session will not be negotiated if the server's certificate chain is anchored by any of the Certificate Authorities in the table below and the certificate's notBefore date is after October 31, 2024. An application will receive an Exception with a message indicating the trust anchor (root) is not trusted, ex:
"TLS Server certificate issued after 2024-10-31 and anchored by a distrusted legacy Entrust root CA: CN=Entrust.net Certification Authority (2048), OU=(c) 1999 Entrust.net Limited, OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.), O=Entrust.net"
If necessary, you can work around the restrictions by removing "ENTRUST_TLS" from the "jdk.security.caDistrustPolicies" security property.
The restrictions will be imposed on the following Entrust Root certificates (identified by Distinguished Name) included in the JDK (note that AffirmTrust are Entrust CAs):
1. CN=Entrust Root Certification Authority, OU="(c) 2006 Entrust, Inc.",
OU=www.entrust.net/CPS is incorporated by reference, O="Entrust, Inc.", C=US
2. CN=Entrust Root Certification Authority - EC1, OU="(c) 2012 Entrust, Inc. - for authorized use only",
OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US
3. CN=Entrust Root Certification Authority - G2, OU="(c) 2009 Entrust, Inc. - for authorized use only",
OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US
4. CN=Entrust Root Certification Authority - G4, OU="(c) 2015 Entrust, Inc. - for authorized use only",
OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US
5. CN=Entrust.net Certification Authority (2048), OU=(c) 1999 Entrust.net Limited,
OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.), O=Entrust.net
6. CN=AffirmTrust Commercial, O=AffirmTrust, C=US
7. CN=AffirmTrust Networking, O=AffirmTrust, C=US
8. CN=AffirmTrust Premium, O=AffirmTrust, C=US
9. CN=AffirmTrust Premium ECC, O=AffirmTrust, C=US
[1] https://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html
[2] https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/jCvkhBjg9Yw

-----
Title: [JDK-8339591] Mark jdk/jshell/ExceptionMessageTest.java intermittent
Priority: P4
Type: Bug
Component: infrastructure
Description: The test  jdk/jshell/ExceptionMessageTest.java has quite a few intermittent errors/timeouts etc. , so mark the test intermittent .
OS: generic

-----
Title: [JDK-8339637] (tz) Update Timezone Data to 2024b
Priority: P3
Type: Enhancement
Component: core-libs
Description: The 2024b release of the tz code and data is available.
This release is prompted by the accumulated weight of many non-urgent
changes to both code and data.  It changes one timestamp abbreviation,
for the long-obsolete System V setting TZ='MET'; see below.
Otherwise, the timestamps affected by this release all predate April
2008, so you can skip this release if your application uses only
tzdata and does not use older timestamps.
This release contains the following changes:
Briefly:
Improve historical data for Mexico, Mongolia, and Portugal.
System V names are now obsolescent.
The main data form now uses %z.
The code now conforms to RFC 8536 for early timestamps.
Support POSIX.1-2024, which removes asctime_r and ctime_r.
Assume POSIX.2-1992 or later for shell scripts.
SUPPORT_C89 now defaults to 1.
Changes to past timestamps
Asia/Choibalsan is now an alias for Asia/Ulaanbaatar rather than
being a separate Zone with differing behavior before April 2008.
This seems better given our wildly conflicting information about
Mongolia's time zone history.  (Thanks to Heitor David Pinto.)
Historical transitions for Mexico have been updated based on
official Mexican decrees.  The affected timestamps occur during
the years 1921-1927, 1931, 1945, 1949-1970, and 1981-1997.
The affected zones are America/Bahia_Banderas, America/Cancun,
America/Chihuahua, America/Ciudad_Juarez, America/Hermosillo,
America/Mazatlan, America/Merida, America/Mexico_City,
America/Monterrey, America/Ojinaga, and America/Tijuana.
(Thanks to Heitor David Pinto.)
Historical transitions for Portugal, represented by Europe/Lisbon,
Atlantic/Azores, and Atlantic/Madeira, have been updated based on a
close reading of old Portuguese legislation, replacing previous data
mainly originating from Whitman and Shanks & Pottenger.  These
changes affect a few transitions in 1917-1921, 1924, and 1940
throughout these regions by a few hours or days, and various
timestamps between 1977 and 1993 depending on the region.  In
particular, the Azores and Madeira did not observe DST from 1977 to
1981.  Additionally, the adoption of standard zonal time in former
Portuguese colonies have been adjusted: Africa/Maputo in 1909, and
Asia/Dili by 22 minutes at the start of 1912.
(Thanks to Tim Parenti.)
Changes to past tm_isdst flags
The period from 1966-04-03 through 1966-10-02 in Portugal is now
modeled as DST, to more closely reflect how contemporaneous changes
in law entered into force.
Changes to data
Names present only for compatibility with UNIX System V
(last released in the 1990s) have been moved to 'backward'.
These names, which for post-1970 timestamps mostly just duplicate
data of geographical names, were confusing downstream uses.
Names moved to 'backward' are now links to geographical names.
This affects behavior for TZ='EET' for some pre-1981 timestamps,
for TZ='CET' for some pre-1947 timestamps, and for TZ='WET' for
some pre-1996 timestamps.  Also, TZ='MET' now behaves like
TZ='CET' and so uses the abbreviation "CET" rather than "MET".
Those needing the previous TZDB behavior, which does not match any
real-world clocks, can find the old entries in 'backzone'.
(Problem reported by Justin Grant.)
The main source files' time zone abbreviations now use %z,
supported by zic since release 2015f and used in vanguard form
since release 2022b.  For example, America/Sao_Paulo now contains
the zone continuation line "-3:00 Brazil %z", which is less error
prone than the old "-3:00 Brazil -03/-02".  This does not change
the represented data: the generated TZif files are unchanged.
Rearguard form still avoids %z, to support obsolescent parsers.
Asia/Almaty has been removed from zonenow.tab as it now agrees
with Asia/Tashkent for future timestamps, due to Kazakhstan's
2024-02-29 time zone change.  Similarly, America/Scoresbysund
has been removed, as it now agrees with America/Nuuk due to
its 2024-03-31 time zone change.
Changes to code
localtime.c now always uses a TZif file's time type 0 to handle
timestamps before the file's first transition.  Formerly,
localtime.c sometimes inferred a different time type, in order to
handle problematic data generated by zic 2018e or earlier.  As it
is now safe to assume more recent versions of zic, there is no
longer a pressing need to fail to conform RFC 8536 section 3.2,
which requires using time type 0 in this situation.  This change
does not affect behavior when reading TZif files generated by zic
2018f and later.
POSIX.1-2024 removes asctime_r and ctime_r and does not let
libraries define them, so remove them except when needed to
conform to earlier POSIX.  These functions are dangerous as they
can overrun user buffers.  If you still need them, add
-DSUPPORT_POSIX2008 to CFLAGS.
The SUPPORT_C89 option now defaults to 1 instead of 0, fixing a
POSIX-conformance bug introduced in 2023a.
tzselect now supports POSIX.1-2024 proleptic TZ strings.  Also, it
assumes POSIX.2-1992 or later, as practical porting targets now
all support that, and it uses some features from POSIX.1-2024 if
available.
Changes to build procedure
'make check' no longer requires curl and Internet access.
The build procedure now assumes POSIX.2-1992 or later, to simplify
maintenance.  To build on Solaris 10, the only extant system still
defaulting to pre-POSIX, prepend /usr/xpg4/bin to PATH.
Changes to documentation
The documentation now reflects POSIX.1-2024.
Changes to commentary
Commentary about historical transitions in Portugal and her former
colonies has been expanded with links to many relevant legislation.
(Thanks to Tim Parenti.)
Here are links to the release files:
https://www.iana.org/time-zones/repository/releases/tzcode2024b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdata2024b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdb-2024b.tar.lz
The following convenience links are also available, although they may
point to the previous release until the relevant caches are refreshed:
https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz
Links are also available via plain HTTP, and via FTP from
ftp://ftp.iana.org/tz/releases with the same basenames as above.
Each release file has a GPG signature, which can be retrieved by
appending ".asc" to the above URLs. Copies of these signatures are
appended to this message.
This release corresponds to commit
6903dde39ed637adaafc352c4b6993739253f058 dated 2024-09-04 12:27:47 -0700
and tagged '2024b' in the development GitHub repository at
https://github.com/eggert/tz.

-----
Title: [JDK-8339644] Improve parsing of Day/Month in tzdata rules
Priority: P4
Type: Bug
Component: core-libs
Description: TzdbZoneRulesProvider currently parses tzdata rules with the assumption that the shortened Day or Month values will be used (e.g. "Mon" instead of "Monday")
According to the zic man page, which the tzdata format adheres to, the long or short name may be used:
===
IN     Names the month in which the rule takes effect.  Month
names may be abbreviated.
ON     Gives the day on which the rule takes effect.  Recognized
forms include:
5        the fifth of the month
lastSun  the last Sunday in the month
lastMon  the last Monday in the month
Sun=8   first Sunday on or after the eighth
Sun

-----
Title: [JDK-8339648] ZGC: Division by zero in rule_major_allocation_rate
Priority: P4
Type: Enhancement
Component: hotspot
Description: The HS jtreg test gc/stringdedup/TestStringDeduplicationAgeThreshold_ZGenerational
shows this error when running with ubsan enabled :
const double current_old_gc_time_per_bytes_freed = double(old_gc_time) / double(reclaimed_per_old_gc);
gc/stringdedup/TestStringDeduplicationAgeThreshold_ZGenerational.jtr
src/hotspot/share/gc/z/zDirector.cpp:491:74: runtime error: division by zero
#0 0x7f09886401d4 in rule_major_allocation_rate src/hotspot/share/gc/z/zDirector.cpp:491
#1 0x7f09886401d4 in start_gc src/hotspot/share/gc/z/zDirector.cpp:822
#2 0x7f09886401d4 in ZDirector::run_thread() src/hotspot/share/gc/z/zDirector.cpp:912
#3 0x7f098c1404e8 in ZThread::run_service() src/hotspot/share/gc/z/zThread.cpp:29
#4 0x7f09897cac19 in ConcurrentGCThread::run() src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#5 0x7f098bb46b0a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#6 0x7f098b1a9881 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
OS: generic

-----
Title: [JDK-8339725] Concurrent GC crashed due to GetMethodDeclaringClass
Priority: P3
Type: Bug
Component: hotspot
Description: Here is a reproduced test case from async profiler:
https://github.com/async-profiler/async-profiler/pull/981
Both G1 and ZGC crash. The stack traces are G1/ZGC concurrent marking or G1 full gc marking.
Main.java:
===========================================================
import java.util.Base64;
public class Main extends Thread {
public static void main(String[] args) throws Exception {
long last = System.nanoTime();
for (int i = 0;; i++) {
CustomClassLoader loader = new CustomClassLoader();
Class k = loader.findClass("TemplateFFFFFFFF");
Object o = k.getDeclaredConstructor().newInstance();
// call gc every ~1 second.
if ((System.nanoTime() - last) = 1e9) {
System.gc();
last = System.nanoTime();
}
}
}
}
class CustomClassLoader extends ClassLoader {
@Override
public Class findClass(String name) throws ClassNotFoundException {
/*
* Bytecode for:
* public class TemplateFFFFFFFF {
*   public void doTemplateFFFFFFFF() {
*     return;
*   }
* }
*/
byte[] b = Base64.getDecoder()
.decode("yv66vgAAADQADgoAAwALBwAMBwANAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJU" +
"YWJsZQEAEmRvVGVtcGxhdGVGRkZGRkZGRgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZUZGRkZGRkZG" +
"LmphdmEMAAQABQEAEFRlbXBsYXRlRkZGRkZGRkYBABBqYXZhL2xhbmcvT2JqZWN0ACEAAgADAAAA" +
"AAACAAEABAAFAAEABgAAAB0AAQABAAAABSq3AAGxAAAAAQAHAAAABgABAAAAAQABAAgABQABAAYA" +
"AAAZAAAAAQAAAAGxAAAAAQAHAAAABgABAAAAAwABAAkAAAACAAo=");
return defineClass(name, b, 0, b.length);
}
}
=========================================================
repro.cpp:
=========================================================
#include
#include
#include
#include
#include
#include
static jvmtiEnv *jvmti;
static JavaVM *_jvm;
static JNIEnv *_rb_env;
#ifndef WITH_GetClassSignature
#define WITH_GetClassSignature 1
#endif
#ifndef WITH_DeleteLocalRef
#define WITH_DeleteLocalRef 0
#endif
#define BUFFER_SIZE 100000
static size_t ring_buffer[BUFFER_SIZE] = {0};
static volatile int ring_buffer_idx = 0;
static int reader_created = 0;
void *get_method_details(void *arg)
{
jmethodID method = (jmethodID)arg;
jclass method_class;
char *class_name = NULL;
jvmtiError err = JVMTI_ERROR_NONE;
// For JVM 17, 21, 22 calling GetMethodDeclaringClass is enough.
if ((err = jvmti-GetMethodDeclaringClass(method, &method_class)) == 0)
{
if (WITH_DeleteLocalRef)
{
_rb_env-DeleteLocalRef(method_class);
}
if (WITH_GetClassSignature)
{
// JVM 8 needs this to crash
jvmti-GetClassSignature(method_class, &class_name, NULL);
jvmti-Deallocate((unsigned char *)class_name);
}
}
}
void *read_ringbuffer(void *arg)
{
JNIEnv *env;
_jvm-AttachCurrentThread((void **)&env, NULL);
_rb_env = env;
for (;;)
{
size_t id = ring_buffer[rand() % BUFFER_SIZE];
if (id  0)
{
get_method_details((void *)id);
}
}
}
static void JNICALL ClassPrepareCallback(jvmtiEnv *jvmti_env,
JNIEnv *jni_env,
jthread thread,
jclass klass)
{
if (reader_created == 0)
{
pthread_t tid;
pthread_create(&tid, NULL, read_ringbuffer, NULL);
reader_created = 1;
}
// Get the list of methods
jint method_count;
jmethodID *methods;
if (jvmti_env-GetClassMethods(klass, &method_count, &methods) == JVMTI_ERROR_NONE)
{
for (int i = 0; i Deallocate((unsigned char *)methods);
}
}
JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *jvm, char *options, void *reserved)
{
jvmtiEventCallbacks callbacks;
jvmtiError error;
_jvm = jvm;
if (jvm-GetEnv((void **)&jvmti, JVMTI_VERSION_1_0) != JNI_OK)
{
fprintf(stderr, "Unable to access JVMTI!\n");
return JNI_ERR;
}
// Set up the event callbacks
memset(&callbacks, 0, sizeof(callbacks));
callbacks.ClassPrepare = &ClassPrepareCallback;
// Register the callbacks
error = jvmti-SetEventCallbacks(&callbacks, sizeof(callbacks));
if (error != JVMTI_ERROR_NONE)
{
fprintf(stderr, "Error setting event callbacks: %d\n", error);
return JNI_ERR;
}
// Enable the ClassPrepare event
error = jvmti-SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);
if (error != JVMTI_ERROR_NONE)
{
fprintf(stderr, "Error enabling ClassPrepare event: %d\n", error);
return JNI_ERR;
}
return JNI_OK;
}
=============================================================
Steps to reproduce:
javac Main.java
gcc -shared -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -fPIC repro.cpp -orepro.so
# Low Xmx to pressure GC into unloading classes sooner.
java -agentpath:"$(pwd)/repro.so" -Xmx100m Main

-----
Title: [JDK-8339731] java.desktop/share/classes/javax/swing/text/html/default.css typo in margin settings
Priority: P4
Type: Bug
Component: client-libs
Description: java.desktop/share/classes/javax/swing/text/html/default.css:105:    margin-rigth: 0;
seems to be a typo (must be right).
OS: generic

-----
Title: [JDK-8339741] RISC-V: C ABI breakage for integer on stack
Priority: P3
Type: Bug
Component: hotspot
Description: When passing any integer shorter than XLEN(/64) on stack it must be enlarged and sign extended to XLEN(/64).
These are now passed as 32-bit.
Only reason why this is only P3 is because how gcc 'happens' to load integer shorter than XLEN(/64). (lw/lh/lb).
While LLVM uses ld for these thus we immediately get into trouble when calling a native method with enough arguments.

-----
Title: [JDK-8339787] Add some additional diagnostic output to java/net/ipv6tests/UdpTest.java
Priority: P4
Type: Enhancement
Component: core-libs
Description: amendments to open/test/jdk/java/net/ipv6tests/Tests.java
add a diagnostics to print the ports of the two endpoints involved in the datagramEcho test scenario
public static void datagramEcho (DatagramSocket s1, DatagramSocket s2,
InetAddress ia2)
throws Exception {
byte[] ba = "Hello world".getBytes();
DatagramPacket p1;
SocketAddress dest2 = null;
if (ia2 != null) {
dest2 = new InetSocketAddress (ia2, s2.getLocalPort());
p1 = new DatagramPacket (ba, ba.length, dest2);
} else {
p1 = new DatagramPacket (ba, ba.length);
}
dprintln ("dest2 == " + dest2);
dprintln ("sender  endpoint == " + s1.getLocalSocketAddress());
dprintln ("echo endpoint == " + s2.getLocalSocketAddress());
DatagramPacket r1 = new DatagramPacket (new byte[256], 256);
DatagramPacket r2 = new DatagramPacket (new byte[256], 256);
s1.send (p1);
s2.receive (r1);
s2.send (r1);
s1.receive (r2);
comparePackets (p1, r1);
comparePackets (p1, r2);
}

-----
Title: [JDK-8339803] Acknowledge case insensitive unambiguous keywords in tzdata files
Priority: P4
Type: Bug
Component: core-libs
Description: TZDB spec allows not only month/weekday names, but the keywords themselves can be case-insensitive and unambiguous abbreviations.
OS: generic

-----
Title: [JDK-8339892] Several security shell tests don't set TESTJAVAOPTS
Priority: P4
Type: Sub-task
Component: security-libs
Description: The tests
java/security/Security/ClassLoaderDeadlock/ClassLoaderDeadlock.sh
java/security/Security/ClassLoaderDeadlock/Deadlock.sh
java/security/cert/CertificateFactory/slowstream.sh
sun/security/krb5/runNameEquals.sh
sun/security/pkcs11/Provider/MultipleLogins.sh
sun/security/provider/PolicyFile/getinstance/getinstance.sh
sun/security/ssl/SSLSocketImpl/NotifyHandshakeTest.sh
sun/security/util/Pem/encoding.sh
sun/security/validator/certreplace.sh
sun/security/validator/samedn.sh
set TESTVMOPTS only and don't use TESTJAVAOPTS
so ignore the test.java.opts that are -javaoption of jtreg
The CI is set java optsion and not vm options so they should be accepted by all tests.

-----
Title: [JDK-8340007] Refactor KeyEvent/FunctionKeyTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/event/KeyEvent/FunctionKeyTest.java test can be improved:
The class FunctionKeyTester should be moved into FunctionKeyTest;
The constants in switch statement 403, 404 should be replaced with KEY_PRESSED and KEY_RELEASED which are more descriptive;
The `failures` field is of type StringBuilder which is not thread-safe, but it's accessed from two threads.

-----
Title: [JDK-8340008] KeyEvent/KeyTyped/Numpad1KeyTyped.java has 15 seconds timeout
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/event/KeyEvent/KeyTyped/Numpad1KeyTyped.java has a timeout of 15 seconds to wait for a key press to be processed. It is an overkill, 2 seconds is plenty enough.

-----
Title: [JDK-8340109] Ubsan: ciEnv.cpp:1660:65: runtime error: member call on null pointer of type 'struct CompileTask'
Priority: P4
Type: Bug
Component: hotspot
Description: When running ubsan-enabled optimized  binaries on Linux x86_64, test
compiler/startup/StartupOutput.java
triggers this ubsan issue :
jdk/src/hotspot/share/ci/ciEnv.cpp:1660:65: runtime error: member call on null pointer of type 'struct CompileTask'
#0 0x7fe7443fc88d in ciEnv::dump_replay_data_helper(outputStream*) src/hotspot/share/ci/ciEnv.cpp:1660
#1 0x7fe746c22047 in VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long) src/hotspot/share/utilities/vmError.cpp:1872
#2 0x7fe7447dd429 in report_fatal(VMErrorType, char const*, int, char const*, ...) src/hotspot/share/utilities/debug.cpp:214
#3 0x7fe7445c614d in RuntimeStub::new_runtime_stub(char const*, CodeBuffer*, short, int, OopMapSet*, bool, bool) src/hotspot/share/code/codeBlob.cpp:413
#4 0x7fe744259ceb in Runtime1::generate_blob(BufferBlob*, int, char const*, bool, StubAssemblerCodeGenClosure*) src/hotspot/share/c1/c1_Runtime1.cpp:230
#5 0x7fe74425a273 in Runtime1::generate_blob_for(BufferBlob*, Runtime1::StubID) src/hotspot/share/c1/c1_Runtime1.cpp:259
#6 0x7fe74425a273 in Runtime1::initialize(BufferBlob*) src/hotspot/share/c1/c1_Runtime1.cpp:268
#7 0x7fe743fc04a1 in Compiler::init_c1_runtime() src/hotspot/share/c1/c1_Compiler.cpp:53
#8 0x7fe743fc04a1 in Compiler::initialize() src/hotspot/share/c1/c1_Compiler.cpp:74
#9 0x7fe7446aaad7 in CompileBroker::init_compiler_runtime() src/hotspot/share/compiler/compileBroker.cpp:1771
#10 0x7fe7446b83cf in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1913
#11 0x7fe74516edca in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:758
#12 0x7fe7469d3c9a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#13 0x7fe746048cd1 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#14 0x7fe74b1e66e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 052f7e2a0045f08cb7e7a291f8066a4b7be2521d)
#15 0x7fe74aaf158e in clone (/lib64/libc.so.6+0x11858e) (BuildId: cfb059a57e69ac95d5dadab831626b3bd48a4309)
OS: linux

-----
Title: [JDK-8340210] Add positionTestUI() to PassFailJFrame.Builder
Priority: P4
Type: Enhancement
Component: client-libs
Description: We are seeing more instances of multiple test UI in manual test. This requires positioning of the test UI w.r.t instruction frame. positionTestUI() provides a way to add the positioning implementation using the builder pattern and using the functional interface - PositionWindows.

-----
Title: [JDK-8340214] C2 compilation asserts with "no node with a side effect" in PhaseIdealLoop::try_sink_out_of_loop
Priority: P2
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
OpenJDK 64-Bit Server VM (fastdebug 21.0.5+5-Nightly) for linux-amd64
Redhat 8.9
A DESCRIPTION OF THE PROBLEM :
While we were upgrading from java 8 to java 21, we encountered an issue where some of the files that our code writes were corrupted. We traced that to a small method that transfers bytes from an Unsafe based Buffer to java.nioByteBuffer. This was happening right after the method got compiled by C2. We believe that after inlining and loop optimizations, the generated code is incorrect (the update positionAddress instruction was likely moved out of the loop). I think we've confirmed that when we got a crash report by using a fastdebug build of the Java21.
REGRESSION : Last worked in version 8u421
ACTUAL -
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/home/jenkins/node/workspace/Corretto21/generic_linux/x64/build/Corretto21Src/installers/linux/universal/tar/corretto-build/buildRoot/src/hotspot/share/opto/loopopts.cpp:1643), pid=3104989, tid=3105002
# assert(!n-is_Store() && !n-is_LoadStore()) failed: no node with a side effect
#
# JRE version: OpenJDK Runtime Environment Corretto-21.0.5.5.1 (21.0.5+5) (fastdebug build 21.0.5+5-Nightly)
# Java VM: OpenJDK 64-Bit Server VM Corretto-21.0.5.5.1 (fastdebug 21.0.5+5-Nightly, mixed mode, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V [libjvm.so+0x11fb779] PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xc89
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e" (or dumping to xxx/core.3104989)
#
# If you would like to submit a bug report, please visit:
# https://github.com/corretto/corretto-21/issues/
#
---------- BEGIN SOURCE ----------
I haven't been able to create a small reproducer that doesn't use any of our internal code yet. The bug is pretty subtle. I am hoping that the hs_err report file could give us more insight into when it happens so that I can make a small executable test case. Is there any easy way to produce this, perhaps using the compiler replay functionality?
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Using either -XX:-SplitIfBlocks or -XX:CompileCommand=exclude,methodname
We also rewrote the code in a slightly different way so it no longer happens.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8340230] Tests crash: assert(is_in_encoding_range || k->is_interface() || k->is_abstract()) failed: sanity
Priority: P2
Type: Bug
Component: hotspot
Description: Test compiler/arraycopy/TestObjectArrayClone.java
CompileCommand: compileonly compiler/arraycopy/TestObjectArrayClone.testClone* bool compileonly = true
CompileCommand: compileonly jdk/internal/reflect/GeneratedMethodAccessor*.invoke bool compileonly = true
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S144935/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1a4487ac-c1a9-48f2-a0e2-2fb14ee558dc/runs/2bb98958-12aa-4165-b8b3-ef1d44c4a59d/workspace/open/src/hotspot/share/ci/ciKlass.hpp:113), pid=1791476, tid=1791492
#  assert(is_in_encoding_range || k-is_interface() || k-is_abstract()) failed: sanity
#
# JRE version: Java(TM) SE Runtime Environment (24.0+16) (fastdebug build 24-ea+16-1711)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-ea+16-1711, mixed mode, compressed oops, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x8b39c4]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int, Unique_Node_List&)+0x22b4
---------------  T H R E A D  ---------------
Current thread (0x0000ffffa42a0da0):  JavaThread "C2 CompilerThread0" daemon [_thread_in_native, id=1791492, stack(0x0000ffff88aa8000,0x0000ffff88ca6000) (2040K)]
Current CompileTask:
C2:5081   29             compiler.arraycopy.TestObjectArrayClone::testCloneShortObjectArray (47 bytes)
Stack: [0x0000ffff88aa8000,0x0000ffff88ca6000],  sp=0x0000ffff88ca07c0,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8b39c4]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int, Unique_Node_List&)+0x22b4  (ciKlass.hpp:113)
V  [libjvm.so+0x8b4140]  Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&, Unique_Node_List&) [clone .part.0]+0x160  (compile.cpp:3155)
V  [libjvm.so+0x8b49e8]  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&, Unique_Node_List&)+0x148  (compile.cpp:3104)
V  [libjvm.so+0x8bfd08]  Compile::final_graph_reshaping()+0x4b8  (compile.cpp:4012)
V  [libjvm.so+0x8c1444]  Compile::Optimize()+0xb04  (compile.cpp:2486)
V  [libjvm.so+0x8c4150]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x14b0  (compile.cpp:852)
V  [libjvm.so+0x7187b0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x17c  (c2compiler.cpp:142)
V  [libjvm.so+0x8cff94]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x864  (compileBroker.cpp:2303)
V  [libjvm.so+0x8d0b44]  CompileBroker::compiler_thread_loop()+0x514  (compileBroker.cpp:1961)
V  [libjvm.so+0xd2ed70]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:758)
V  [libjvm.so+0x15a9500]  Thread::call_run()+0xac  (thread.cpp:225)
V  [libjvm.so+0x12fc9f4]  thread_native_entry(Thread*)+0x130  (os_linux.cpp:858)
C  [libc.so.6+0x806b8]  start_thread+0x2d8

-----
Title: [JDK-8340306] Add border around instructions in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: Adding a border around instructions in PassFailJFrame makes them easier to read.

-----
Title: [JDK-8340308] PassFailJFrame: Make rows default to number of lines in instructions
Priority: P4
Type: Enhancement
Component: client-libs
Description: It has become quite common to use the following code
.rows((int) INSTRUCTIONS.lines().count() + 1)
to set the number of rows for PassFailJFrame.
This can be made the default.
Examples of the files where the above is used:
test/jdk/java/awt/print/PageFormat/Orient.java
test/jdk/java/awt/print/PageFormat/SetOrient.java
test/jdk/java/awt/print/PrinterJob/Cancel/PrinterJobCancel.java

-----
Title: [JDK-8340365] Position the first window of a window list
Priority: P4
Type: Bug
Component: client-libs
Description: Support of multiple test UI windows in PassFailJFrame is still evolving. After JDK-8340210, the Builder has a method `positionTestUI` to supply an implementation of PositionWindows interface which should handle the positioning of all test UI windows created.
If PositionWindows is not provided, all the test UI windows are left with the default coordinates: 0, 0.
If PassFailJFrame called positionTestWindow for the first window, it would allow the test developer to position other windows based on the position of the first one.
See https://github.com/openjdk/jdk/pull/21029#discussion_r1763744407

-----
Title: [JDK-8340383] VM issues warning failure to find kernel32.dll on Windows nanoserver
Priority: P3
Type: Bug
Component: hotspot
Description: When trying to run jdk-23+37 on Windows nanoserver container, the VM
initilization throws up the warning:
OpenJDK 64-Bit Server VM warning: Failed to determine whether the OS can retrieve version information from kernel32.dll: The system cannot find the file specified
To recreate, start a Windows nanoserver:
docker run -it mcr.microsoft.com/windows/nanoserver:ltsc2022 cmd.exe
# download jdk-23+37...
java -version
I am unclear of the consequences of this warning, or usability of the VM??
I suspect this is because on Windows nanoserver kernel32.dll is not within the
System32 directory itself but within the "forwarders" sub-folder.
Thus this logic probably needs fixing: https://github.com/openjdk/jdk/blob/08a2f841ec78a10f8d6d54b2ac3a92e89f765f14/src/hotspot/os/windows/os_windows.cpp#L4101
OS: windows

-----
Title: [JDK-8340387] Update OS detection code to recognize Windows Server 2025
Priority: P3
Type: Bug
Component: hotspot
Description: Windows Server 2025 will be released in a few months.
The OS detection code of the JVM/JDK should recognize the new Windows server 2025 version.
(currently  Windows server 2022  is printed, that is wrong)
The build numbers of some recent previews documented here
https://learn.microsoft.com/en-us/windows-server/get-started/whats-new-windows-server-2025
are 26080 and 26085 .
The final release version of Windows Server 2025 from Nov 1st, 2025 has an official build number 26100 .
OS: windows

-----
Title: [JDK-8340398] [JVMCI] Unintuitive behavior of UseJVMCICompiler option
Priority: P4
Type: Bug
Component: hotspot
Description: Disabling the JVMCI compiler with `-XX:-UseJVMCICompiler` not only deactivates JVMCI-based CompileBroker compilations but also prevents the loading of the libjvmci compiler. While this works as expected for CompileBroker compilations, it poses issues for the Truffle compiler. When `-XX:-UseJVMCICompiler` is used, Truffle falls back to the jargraal compiler, if available. This behavior may be confusing for Truffle users.
Expected behavior:
With `-XX:+UseGraalJIT`, both CompileBroker compilations and Truffle compilations should utilize the libjvmci compiler, if available.
With `-XX:+EnableJVMCI`, CompileBroker compilations should use the C2 compiler, while only Truffle compilations should leverage the libjvmci compiler, if available.
OS: generic

-----
Title: [JDK-8340418] GHA: MacOS AArch64 bundles can be removed prematurely
Priority: P4
Type: Enhancement
Component: infrastructure
Description: remove-bundles step does not depend on test-macos-aarch64, which means it can run before macos-aarch64 tests start to run, which would fail those steps. This is not frequent, but will happen if macos-aarch64 runners are lagging behind to pick up the jobs.

-----
Title: [JDK-8340461] Amend description for logArea
Priority: P4
Type: Sub-task
Component: client-libs
Description: When generating javadoc for PassFailJFrame, there's an error reported:
PassFailJFrame.java:161: error: text not allowed in  element
*     to add a log area,
The comma has to be inside  elements.
Description of the methods looks overly verbose:
Clears the log area, if enabled by PassFailJFrame.Builder.logArea() or PassFailJFrame.Builder.logArea(int).

-----
Title: [JDK-8340466] Add description for PassFailJFrame constructors
Priority: P4
Type: Sub-task
Component: client-libs
Description: Write missing descriptions for PassFailJFrame constructors.
Perhaps, deprecate the constructors in favour of Builder?

-----
Title: [JDK-8340552] Harden TzdbZoneRulesCompiler against missing zone names
Priority: P5
Type: Bug
Component: infrastructure
Description: If zone names are missing, negative results from the binarySearch() call are written to the output file. This results in an ArrayIndexOutOfBoundsException during loading.
OS: generic

-----
Title: [JDK-8340590] RISC-V: C2: Small improvement to vector gather load and scatter store
Priority: P4
Type: Enhancement
Component: hotspot
Description: This is a small improvement for RISC-V C2 vector gather load and scattter store nodes. There is no need to emit whole vector register move for this nodes. Instead normal vmv.v.v would do here and is more reasonable (moving vector idx to a temp vector register).
OS: generic

-----
Title: [JDK-8340632] ProblemList java/nio/channels/DatagramChannel/ for Macos
Priority: P4
Type: Sub-task
Component: core-libs
Description: ProblemList open/test/jdk/java/nio/channels/DatagramChannel/ for Macos-aarch64 and macos-x64
we are problemlisting this 6 tests
java/nio/channels/DatagramChannel/Promiscuous.java
java/nio/channels/DatagramChannel/MulticastSendReceiveTests.java
java/nio/channels/DatagramChannel/BasicMulticastTests.java
java/nio/channels/DatagramChannel/AdaptorMulticasting.java
java/net/DatagramSocket/DatagramSocketMulticasting.java
java/net/DatagramSocket/DatagramSocketExample.java
----------System.out:(4/90)----------
Test family=INET
dc1 joining [225.4.5.6]:61479 @ en0
dc2 joining [225.4.6.6]:61479 @ en0
----------System.err:(17/1013)----------
java.net.SocketException: Exec format error
at java.base/sun.nio.ch.Net.joinOrDrop4(Native Method)
at java.base/sun.nio.ch.Net.join4(Net.java:543)
at java.base/sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:1002)
at java.base/sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:1020)
at Promiscuous.test(Promiscuous.java:176)
at Promiscuous.main(Promiscuous.java:223)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:834)
JavaTest Message: Test threw exception: java.net.SocketException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Exec format error
test result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Exec format error
OS: os_x

-----
Title: [JDK-8340657] [PPC64] SA determines wrong unextendedSP
Priority: P4
Type: Bug
Component: hotspot
Description: adjustUnextendedSP() determines a wrong value for raw_unextendedSP. It uses the FP which basically pops the frame, so we end up in the wrong frame.
This causes errors like JDK-8339772.

-----
Title: [JDK-8340684] Reading from an input stream backed by a closed ZipFile has no test coverage
Priority: P4
Type: Enhancement
Component: core-libs
Description: While behavior when reading from an input stream backed by a closed ZipFile is not specified, the long standing behavior is to throw an exception.
OpenJDK currently has no test coverage for this behavior, so a test should be added for this.

-----
Title: [JDK-8340785] Update description of PassFailJFrame and samples
Priority: P4
Type: Sub-task
Component: client-libs
Description: Expand the description of PassFailJFrame, add sections, and update samples.
Provide more detailed description of the PassFailJFrame features, reference Builder methods to configure the framework.
The samples should use method references. Mark SampleOldManualTest as obsolete.

-----
Title: [JDK-8340799] Add border inside instruction frame in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: The instruction frame in PassFailJFrame looks very tight without any white-space separating components from the frame edge and each other.
This is especially noticeable with split UI where the border of JSplitPane clashes with the border of JScrollPane that hosts a text component with instructions.

-----
Title: [JDK-8340801] Disable ubsan checks in some awt/2d coding
Priority: P4
Type: Bug
Component: client-libs
Description: There is some old awt/2d coding where warnings occur when running with ubsan enabled binaries.
However at most of these locations the coding should work (at least on our supported platform set) so the warnings can be disabled at least for now.
OS: generic

-----
Title: [JDK-8340804] doc/building.md update Xcode instructions to note that full install is required
Priority: P4
Type: Bug
Component: infrastructure
Description: Since JDK17 there has been a dependency on metal in the macOS builds which is only available as part of the full Xcode IDE (rather than command-line tools). We currently recommend only installing the command-line tools in the building.md doc which is incorrect.
OS: os_x

-----
Title: [JDK-8340812] LambdaForm customization via MethodHandle::updateForm is not thread safe
Priority: P2
Type: Bug
Component: core-libs
Description: This issue originally manifested as intermittent NPEs in invokeBasic with an Oracle internal test:
Stack: [0x0000ffff37606000,0x0000ffff37804000], sp=0x0000ffff37802330, free space=2032k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x677c28] Exceptions::debug_check_abort(char const*, char const*)+0xc8 (exceptions.cpp:569)
V [libjvm.so+0x677e80] Exceptions::debug_check_abort_helper(Handle, char const*)+0x9c (exceptions.cpp:591)
V [libjvm.so+0x678310] Exceptions::_throw(JavaThread*, char const*, int, Handle, char const*)+0xb0 (exceptions.cpp:579)
V [libjvm.so+0xc42d04] SharedRuntime::throw_NullPointerException_at_call(JavaThread*)+0x44 (sharedRuntime.cpp:853)
v ~RuntimeStub::NullPointerException at call throw_exception 0x0000ffff90096eb4
J 112 c2 MemAccessStressModule.test(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)V (23 bytes) @ 0x0000ffff901164c8 [0x0000ffff90116400+0x00000000000000c8]
J 1098 c2 java.lang.Thread.run()V java.base@24-ea (23 bytes) @ 0x0000ffff90258514 [0x0000ffff90258440+0x00000000000000d4]
v ~StubRoutines::call_stub 0x0000ffff9005a114
0x0000ffff901164a4: ; implicit exception: dispatches to 0x0000ffff90116fb0
0x0000ffff901164a4: 4b1d 40b9 | 8b07 0034 | f403 00f9 | ec0b 00f9 | 64fe 40d3 | e20f 40a9 | e10b 40f9 | e503 04aa
0x0000ffff901164c4: ; ImmutableOopMap {[0]=Oop [8]=Oop }
;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
; - java.lang.invoke.LambdaForm$VH/0x0000000201006000::invoke_MT@34
; - MemAccessStressModule::test@8 (line 18)
; {optimized virtual_call}
0x0000ffff901164c4: 6fb9 ff97
0x0000ffff901164c8: ; {post_call_nop}
0x0000ffff901164c8: 1f20 03d5 | 1f68 80f2 | 1f00 80f2 | f403 40f9
Event: 14.595 Thread 0x0000ffff3c238600 NullPointerException in MH adapter 0x0000ffff90104a8c
Event: 14.595 Thread 0x0000ffff3c1cd5d0 NullPointerException in MH adapter 0x0000ffff90104a8c
Event: 14.595 Thread 0x0000ffff3c21efd0 NullPointerException in MH adapter 0x0000ffff90104a8c
I'm starting to suspect that the VarHandle implementation is not thread safe on AArch64 and as a result some internal data structure is not completely initialized. -XX:+VerifyMethodHandles does not reveal anything though.
I disabled the exception handler in SharedRuntime::continuation_for_implicit_exception to enforce an early crash and as expected we SIGSEGV here:
Stack: [0x0000ffff34ec0000,0x0000ffff350be000], sp=0x0000ffff350bc2f0, free space=2032k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 54 java.lang.invoke.MethodHandle.invokeBasic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V java.base@24-internal (0 bytes) @ 0x0000ffffa0bbb88c [0x0000ffffa0bbb880+0x000000000000000c]
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000024
0x0000000000000000: 1F 20 03 D5 nop
0x0000000000000004: 2C 14 40 B9 ldr w12, [x1, #0x14]
0x0000000000000008: 8C 29 40 B9 ldr w12, [x12, #0x28]
0x000000000000000c: 8C 25 40 B9 ldr w12, [x12, #0x24]  a 'java/lang/invoke/MemberName'{0x00000000a5323fd0} = {method} {0x0000ffff70905f18} 'invoke' '(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' in 'java/lang/invoke/LambdaForm$MH+0x0000ffff70906068' (0x8760f900)
- private 'asTypeCache' 'Ljava/lang/invoke/MethodHandle;' @24 null (0x00000000)
- private 'asTypeSoftCache' 'Ljava/lang/ref/SoftReference;' @28 null (0x00000000)
- final 'argL0' 'Ljava/lang/Object;' @32 a 'java/lang/invoke/DirectMethodHandle'{0x000000008768f698} (0x8768f698)
- final 'argL1' 'Ljava/lang/Object;' @36 a 'java/lang/invoke/BoundMethodHandle$Species_LL'{0x000000008768f6c0} (0x8768f6c0)
R12=0x0 is null
So we read the 'form' field from a 'BoundMethodHandle$Species_LL' and then another field from that 'LambdaForm' object at offset 0x28 which is unexpectedly null.
This is code from MethodHandles::jump_to_lambda_form and the second read is from the java_lang_invoke_LambdaForm::vmentry_offset(). I verified this by adding a null check and it triggers.
For some reason LambdaForm::vmentry is null. Maybe a race condition during initialization due to the weak memory model on AArch64.
The vmentry field is not null anymore at the time the hs_err file is generated:
"a 'java/lang/invoke/MemberName'{0x00000000a5323fd0} = {method} {0x0000ffff70905f18} 'invoke' "
Which suggests that this is indeed a race condition.
After digging around in the MethodHandle implementation, I found this suspicious code in MethodHandle::updateForm:
newForm.prepare(); // as in MethodHandle.
UNSAFE.putReference(this, FORM_OFFSET, newForm);
UNSAFE.fullFence();
https://github.com/openjdk/jdk/blob/36314a90c15e2ab2a9b32c2e471655c1b07d452c/src/java.base/share/classes/java/lang/invoke/MethodHandle.java#L1883
The LambdaForm 'newForm' can have 'vmentry`set to null and the field is then set in 'newForm.prepare()'. The LambdaForm is then published by the 'UNSAFE.putReference' store but there is nothing that prevents another thread from observing a not fully initialized object. I.e., another thread can observe 'vmentry == null'. Maybe the 'UNSAFE.fullFence()' was supposed to fix this but then it's at the wrong place. A 'UNSAFE.storeStoreFence()' before publishing should be sufficient. Running more tests to confirm.

-----
Title: [JDK-8340815] Add SECURITY.md file
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Currently the security tab on the GitHub repos is empty with no clear information or links on where to report security vulnerabilities.

-----
Title: [JDK-8340899] Remove wildcard bound in PositionWindows.positionTestWindows
Priority: P3
Type: Bug
Component: client-libs
Description: Currently, PassFailJFrame.PositionWindows.positionTestWindows declares its testWindows parameter with the type of List which was introduced in JDK-8294156 and later made available in JDK-8340210.
Internally, the window list is a simple List.
The wildcard is useful for the return type of the createTestUI method in WindowListCreator so that the code in a test could use List instead of List as well as pass Frame or JFrame.
By the time, PositionWindows.positionTestWindows comes into play, List is enough.
The type of PositionWindows.positionTestWindows can be changed to List.
It is a backwards compatible change, any test which declared its method for positionTestWindows with List continues to compile successfully.
Yet the opposite is not true: List isn't compatible with the current List.

-----
Title: [JDK-8340923] The class LogSelection copies uninitialized memory
Priority: P4
Type: Bug
Component: hotspot
Description: The class LogSelection's custom constructor does not initialize the whole _tags array but is lacking a custom copy constructor and assignment operator. This means that any copy will technically copy uninitialized memory, which is technically undefined behavior.
We fill the whole array to avoid this issue.

-----
Title: [JDK-8341024] [test] build/AbsPathsInImage.java fails with OOM when using ubsan-enabled binaries
Priority: P4
Type: Bug
Component: infrastructure
Description: The jtreg test build/AbsPathsInImage.java fails with OOM when using ubsan-enabled binaries.
Reason seems to be that the ubsan-enabled binaries are much larger than normal product binaries.
(for debug binaries the test is already disabled)
Error is :
java.lang.OutOfMemoryError: Java heap space
at java.base/java.nio.file.Files.read(Files.java:3242)
at java.base/java.nio.file.Files.readAllBytes(Files.java:3299)
at AbsPathsInImage.scanFile(AbsPathsInImage.java:181)
at AbsPathsInImage$1.visitFile(AbsPathsInImage.java:173)
at AbsPathsInImage$1.visitFile(AbsPathsInImage.java:153)
at java.base/java.nio.file.Files.walkFileTree(Files.java:2810)
at java.base/java.nio.file.Files.walkFileTree(Files.java:2881)
at AbsPathsInImage.scanFiles(AbsPathsInImage.java:153)
at AbsPathsInImage.main(AbsPathsInImage.java:119)
at java.base/java.lang.invoke.LambdaForm$DMH/0x00007fb6087003a8.invokeStatic(LambdaForm$DMH)
at java.base/java.lang.invoke.LambdaForm$MH/0x00007fb608a2f3d8.invoke(LambdaForm$MH)
at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.runWith(Thread.java:1589)
at java.base/java.lang.Thread.run(Thread.java:1576)
We could disable the test for ubsanized binaries, or add higher Xmx settings to the test.
OS: linux

-----
Title: [JDK-8341146] RISC-V: Unnecessary fences used for load-acquire in template interpreter
Priority: P4
Type: Enhancement
Component: hotspot
Description: RISC-V does not currently have plain load and store opcodes with aq or rl annotations, load-acquire and
store-release operations are implemented using fences instead. Initially, we followed the RISC-V spec
and placed FENCE RW,RW fence in front of load-acquire operation when porting the template interpreter.
The purpose is to enforce a store-release-to-load-acquire ordering (where there must be a FENCE RW,RW
between the store-release and load-acquire). But it turns out these fences are unnecessary for our use
cases in the template interpreter. In fact, we only need to do a single FENCE R,RW after a normal memory
load in order to implement a load-acquire operation. We should remove those unnecessary fences for both
performance reasons and for consistency with the rest of the port (i.e., C1 and C2 JIT).
OS: linux

-----
Title: [JDK-8341235] Improve default instruction frame title in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: The default title for the instruction frame is "Test Instruction Frame".
Most tests change this default to "Test Instructions" which describes the content and purpose of the frame better.
At the same time, jtreg has a property which describes the test name. Thus, the title could be more specific: " - Test Instructions".

-----
Title: [JDK-8341261] Tests assume UnlockExperimentalVMOptions is disabled by default
Priority: P4
Type: Enhancement
Component: hotspot
Description: My organization is testing a bespoke JDK distribution that includes `libgraal` and GraalJS, which require experimental launch flags to enable. To make this easy for customers to pick up, we have overridden the defaults to set `+UnlockExperimentalVMOptions`, `+EnableJVMCI`, and `+UseJVMCINativeLibrary`. The JDK then "just works" for them by swapping in the custom JDK, without any changes to the code launching their system. On the whole, this is working great.
However, this configuration breaks several jtreg test cases that make assumptions about the default options. It seems reasonable that these assumptions be declared in `@require`, but not all of the right properties are avaliable.
In the draft PR https://github.com/openjdk/jdk/pull/21233 I add a jtreg `@require` property to surface the value of `UnlockExperimentalVMOptions`  and update two tests that assume the flag is false. This makes these tests resilient to changes to the default state of that flag. (I have one or two similar changes in the works for assumptions about the other flags.)
Before taking that PR out of draft, its worth ensuring alignment on the overall approach. My perspective is that centrally encoding such assumptions into the tests is more robust than maintaining problem lists within each distro that diverges from the defaults.

-----
Title: [JDK-8341562] RISC-V: Generate comments in -XX:+PrintInterpreter to link to source code
Priority: P4
Type: Enhancement
Component: hotspot
Description: The command "java -XX:+UnlockDiagnosticVMOptions -XX:+PrintInterpreter" can be used to print a disassembly of the HotSpot interpreter.
In JDK-8204267, the interpreter generate comments to link the instructions back to the C++ source code that generates them, but the releated PR only support x86 backend, I think it's doable on RISC-V either.
OS: generic

-----
Title: [JDK-8341688] Aarch64: Generate comments in -XX:+PrintInterpreter to link to source code
Priority: P4
Type: Enhancement
Component: hotspot
Description: The command "java -XX:+UnlockDiagnosticVMOptions -XX:+PrintInterpreter" can be used to print a disassembly of the HotSpot interpreter.
In JDK-8204267, the interpreter generate comments to link the instructions back to the C++ source code that generates them, but the releated PR only support x86 backend, I think it's doable on aarch64 either.
OS: linux

-----
Title: [JDK-8341722] Fix some warnings as errors when building on Linux with toolchain clang
Priority: P4
Type: Bug
Component: hotspot
Description: There are a few warnings as errors occurring when building on Linux with clang (clang15).  Mostly these are some kind of "unused" warnings.
Examples :
src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp:423:7: error: unused variable 'i' [-Werror,-Wunused-variable]
int i;
jdk/src/jdk.hotspot.agent/linux/native/libsaproc/symtab.c:359:11: error: variable 'rslt' set but not used [-Werror,-Wunused-but-set-variable]
int rslt;
jdk/src/jdk.jpackage/share/native/common/Log.cpp:46:28: error: unused variable 'defaultLogLevel' [-Werror,-Wunused-const-variable]
const Logger::LogLevel defaultLogLevel = Logger::LOG_TRACE;
OS: linux

-----
Title: [JDK-8341806] Gcc version detection failure on Alinux3
Priority: P4
Type: Bug
Component: infrastructure
Description: Auto detection gcc version result:
* Toolchain:      gcc (GNU Compiler Collection)
* C Compiler:     Version 2.32 (at /usr/bin/gcc)
* C++ Compiler:   Version 2.32 (at /usr/bin/g++)
The following warnings were produced. Repeated here for convenience:
WARNING: You are using gcc 2.32 which is older than 10.0. This is not a supported configuration.
configure command:
bash configure --with-jobs=128 --prefix=/home/yansendao/git/jdk/install-slowdebug --verbose --with-debug-level=slowdebug --enable-unlimited-crypto --with-vendor-name=yansendao --with-vendor-url=https://github.com/sendaoYan --with-vendor-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-vendor-vm-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-jvm-variants=server --with-boot-jdk=/home/yansendao/software/jdk/openjdk/jdk-binary --with-gtest=/home/yansendao/git/googletest-v1.14.x --with-jtreg=/home/yansendao/software/jdk/jtreg-7.4 --with-jmh=build/jmh/jars    --with-version-pre='' --with-version-opt=7a1e832e --with-zlib=system --enable-ccache
gcc version:
gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper
Target: x86_64-redhat-linux
Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --disable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --with-isl --enable-gnu-indirect-function --enable-cet --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.2.1 20200825 (Alibaba 10.2.1-3.8 2.32) (GCC)
gcc --version
gcc (GCC) 10.2.1 20200825 (Alibaba 10.2.1-3.8 2.32)
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
OS: linux

-----
Title: [JDK-8341927] Replace hardcoded security providers with new test.provider.name system property
Priority: P2
Type: Enhancement
Component: security-libs
Description: Few tests hardcode "SunJCE" provider name restricting test execution to only SunJCE. This task is filed to utilize test.provider.name property to read provider to test against and default to "SunJCE" if none specified.
For instance -
-        Cipher c = Cipher.getInstance("AES/GCM/NoPadding", "SunJCE");
+        Cipher c = Cipher.getInstance("AES/GCM/NoPadding", System.getProperty("test.provider.name", "SunJCE"));

-----
Title: [JDK-8341997] Tests create files in src tree instead of scratch dir
Priority: P2
Type: Bug
Component: core-libs
Description: There are a handful of nio/io tests that create temporary files in the source tree instead of using the provided jtreg scratch dir. This prevents these tests from running successfully when the src tree is read-only.
This is the list of tests found in current tier2:
java/nio/MappedByteBuffer/ForceViews.java
java/nio/MappedByteBuffer/ForceException.java
java/io/FileInputStream/ReadXBytes.java

-----
Title: [JDK-8342014] RISC-V: ZStoreBarrierStubC2 clobbers rflags
Priority: P4
Type: Bug
Component: hotspot
Description: ZStoreBarrierStubC2 (ZBarriersetAssembler::generate_c2_store_barrier_stub) clobbers rflags (the t1 register) on riscv [1].
And ZStoreBarrierStubC2 is used by z_store_barrier in file gc/z/z_riscv.ad. But the calling instructs in the same ad file
didn't list the rflags as being killed. As the call chain is not simple, this kind of problem could go silently unnoticed.
I would suggest we add clobbering of rflags for all gc-related C2 instructs. This would help reduce the risk of another
PR: https://github.com/openjdk/jdk/pull/21406 which touches g1/x/z prefering t1 for performance reasons.
[1] https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/riscv/gc/z/zBarrierSetAssembler_riscv.cpp#L746
OS: linux

-----
Title: [JDK-8342063] [21u][aix] Backport introduced redundant line in ProblemList
Priority: P4
Type: Bug
Component: core-libs
Description: Bakcport of  https://bugs.openjdk.org/browse/JDK-8316387: Exclude more failing multicast tests on AIX after JDK-8315651 introduced a second line for java/nio/channels/DatagramChannel/AfterDisconnect.java. Remove.

-----
Title: [JDK-8342181] Update tests to use stronger Key and Salt size
Priority: P2
Type: Sub-task
Component: security-libs
Description: Some tests are identified to use weak key sizes and salt in the tests. If the test purpose is not to test with weak keys then these tests should be updated to use stronger key. If the key cannot be updated unless the algorithm is also updated, do not change.

-----
Title: [JDK-8342183] Update tests to use stronger algorithms and keys
Priority: P2
Type: Sub-task
Component: security-libs
Description: Some tests are identified to use weak/legacy algorithms in the tests. If the test purpose is not to test with weak algorithms then these tests should be updated to use stronger algorithms. If the test uses a weak key, update as well.

-----
Title: [JDK-8342188] Update tests to use stronger key parameters and certificates
Priority: P2
Type: Sub-task
Component: security-libs
Description: Some tests are identified to use weak key parameters in the tests (prime modulus, private/public values), tests:
open/test/jdk/com/sun/crypto/provider/Cipher/RSA/TestRSA.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHGenSharedSecret.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyAgreement2.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyAgreement3.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyFactory.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyGenSpeed.java
open/test/jdk/sun/security/pkcs11/KeyAgreement/TestInterop.java
open/test/jdk/com/sun/crypto/provider/TLS/TestLeadingZeroes.java
open/test/jdk/java/security/KeyRep/Serial.java
Also, some tests certificates were generated using weak keys/algorithms, tests:
open/test/jdk/sun/security/ssl/X509TrustManagerImpl/PKIXExtendedTM.java
open/test/jdk/sun/security/ssl/X509TrustManagerImpl/SunX509ExtendedTM.java
open/test/jdk/sun/security/x509/X509CRLImpl/Verify.java
open/test/jdk/sun/security/x509/X509CertImpl/Verify.java

-----
Title: [JDK-8342409] [s390x] C1 unwind_handler fails to unlock synchronized methods with LM_MONITOR
Priority: P4
Type: Bug
Component: hotspot
Description: LIR_Assembler::emit_unwind_handler() calls C1_MacroAssembler::unlock_object() to unlock synchronized methods but there LM_MONITOR is not handled.
OS: linux

-----
Title: [JDK-8342496] C2/Shenandoah: SEGV in compiled code when running jcstress
Priority: P3
Type: Bug
Component: hotspot
Description: $ JAVA_TOOL_OPTIONS="-XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:StressSeed=2039903058" java -jar ./jcstress.jar -c 2 -t org.openjdk.jcstress.tests.copy.manual.objects.plain.StringTest
...
VM output stream:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fa668d00ab0, pid=3266827, tid=3267280
#
# JRE version: OpenJDK Runtime Environment (17.0.14) (build 17.0.14-internal+0-adhoc.roland.jdk17u-dev)
# Java VM: OpenJDK 64-Bit Server VM (17.0.14-internal+0-adhoc.roland.jdk17u-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# J 385 c2 org.openjdk.jcstress.tests.copy.manual.objects.plain.StringTest_jcstress$JcstressThread_ResourceCheck_actor2.jcstress_check_actor2([Lorg/openjdk/jcstress/tests/copy/manual/objects/plain/StringTest;[Lorg/openjdk/jcstress/infra/results/L_Result;I)V (27 bytes) \
@ 0x00007fa668d00ab0 [0x00007fa668d009a0+0x0000000000000110]
We've only seen this with jdk 17 but I wrote a test case and could reproduce it with jdk 24.

-----
Title: [JDK-8342578] GHA: RISC-V: Bootstrap using Debian snapshot is still failing
Priority: P4
Type: Bug
Component: infrastructure
Description: In JDK-8339548, we switched to use Debian snapshot (https://snapshot.debian.org/archive/debian/20240228T034848Z/) for bootstrap.
The reason is that we don't have a stable Debian release for RISC-V yet. And Debian "sid" (https://httpredir.debian.org/debian)
that we use for debootstrapping RISC-V breaks at that time. This works as expected for about one month. But bad news is that GHA
linux-cross-build job for RISC-V starts to fail again this week. Sigh! I guess there might be some change on the distro running
on GHA test machines as same debootstrap command still works on my Ubuntu 22.04.
Good news is that that Debian "sid" can now bootstrap for RISC-V. So one way would be simply switches back to Debian "sid". As the version
of dpkg command on GHA machines is old (1.21.1), we will need one extra option --no-merged-usr for bootstrap command to work.
This is not necessary for newer dpkg versions like 1.22.6.

-----
Title: [JDK-8342607] Enhance register printing on x86_64 platforms
Priority: P4
Type: Enhancement
Component: hotspot
Description: os::print_context prints some registers like RAX.
We could add more registers like XMM0, ..., XMM15 that play a role in the JVM too, maybe also MXCSR.
OS: generic

-----
Title: [JDK-8342669] [21u] Fix TestArrayAllocatorMallocLimit after backport of JDK-8315097
Priority: P4
Type: Bug
Component: hotspot
Description: I had to extend the changes of 8315097 to this file that was removed in head before the original 8315097 was applied. I got one call wrong.
See also https://github.com/openjdk/jdk21u-dev/commit/1f38afa6c6fa7949c5d7171b817f1d7883987cf4#diff-21d07968b5ddcf0fc75f2b6b8c9e05935fe19a819397c6a17a9f4798a0007b85

-----
Title: [JDK-8315097] Rename createJavaProcessBuilder
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename createJavaProcessBuilder so that it is not used by mistake instead of createTestJvm

-----
Title: [JDK-8342681] TestLoadBypassesNullCheck.java fails improperly specified VM option
Priority: P3
Type: Bug
Component: hotspot
Description: Newly added test gc/shenandoah/compiler/TestLoadBypassesNullCheck.java fails, the test log snippet:
Error: VM option 'StressGCM' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'StressGCM'.
Improperly specified VM option 'StressGCM'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
OS: generic

-----
Title: [JDK-8342701] [PPC64] TestOSRLotsOfLocals.java crashes
Priority: P3
Type: Bug
Component: hotspot
Description: PPC64 is affected by the same issue as aarch64 (JDK-8335662).
The new test runs into
assert(nbits == 32 || (-(1

-----
Title: [JDK-8342765] [21u] RTM tests assume UnlockExperimentalVMOptions is disabled by default
Priority: P4
Type: Enhancement
Component: hotspot
Description: Distros with Graal integration will have `UnlockExperimentalVMOptions` enabled, causing several RTM tests to fail:
compiler/rtm/cli/TestRTMAbortThresholdOption.java
compiler/rtm/cli/TestRTMLockingCalculationDelayOption.java
compiler/rtm/cli/TestRTMLockingThresholdOption.java
compiler/rtm/cli/TestRTMSpinLoopCountOption.java
compiler/rtm/cli/TestUseRTMForStackLocksOptionOnUnsupportedConfig.java
compiler/rtm/cli/TestUseRTMXendForLockBusyOption.java
Note that this directory of tests was removed by https://bugs.openjdk.org/browse/JDK-8329141 as part of JDK24.

-----
Title: [JDK-8342823] Ubsan: ciEnv.cpp:1614:65: runtime error: member call on null pointer of type 'struct CompileTask'
Priority: P4
Type: Bug
Component: hotspot
Description: When running with ubsanized binaries on Linux x86_64,
test compiler/startup/StartupOutput.java
shows this issue
jdk/src/hotspot/share/ci/ciEnv.cpp:1614:65: runtime error: member call on null pointer of type 'struct CompileTask'
#0 0x7fcea0810117 in ciEnv::dump_replay_data_helper(outputStream*) src/hotspot/share/ci/ciEnv.cpp:1614
#1 0x7fcea3123577 in VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long) src/hotspot/share/utilities/vmError.cpp:1872
#2 0x7fcea0c01499 in report_fatal(VMErrorType, char const*, int, char const*, ...) src/hotspot/share/utilities/debug.cpp:214
#3 0x7fcea09e9d85 in RuntimeStub::new_runtime_stub(char const*, CodeBuffer*, short, int, OopMapSet*, bool, bool) src/hotspot/share/code/codeBlob.cpp:413
#4 0x7fcea066da1d in Runtime1::generate_blob(BufferBlob*, C1StubId, char const*, bool, StubAssemblerCodeGenClosure*) src/hotspot/share/c1/c1_Runtime1.cpp:233
#5 0x7fcea066dfb0 in Runtime1::generate_blob_for(BufferBlob*, C1StubId) src/hotspot/share/c1/c1_Runtime1.cpp:262
#6 0x7fcea066dfb0 in Runtime1::initialize(BufferBlob*) src/hotspot/share/c1/c1_Runtime1.cpp:272
#7 0x7fcea03d2be1 in Compiler::init_c1_runtime() src/hotspot/share/c1/c1_Compiler.cpp:53
#8 0x7fcea03d2be1 in Compiler::initialize() src/hotspot/share/c1/c1_Compiler.cpp:74
#9 0x7fcea0acc0c2 in CompileBroker::init_compiler_runtime() src/hotspot/share/compiler/compileBroker.cpp:1771
#10 0x7fcea0ad9a3f in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1913
#11 0x7fcea161264a in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:759
#12 0x7fcea2ec739a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:234
#13 0x7fcea251e1d2 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#14 0x7fcea7c6c6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 1b515766201d47a183932ba0c8c8bd0d9ee8755b)
#15 0x7fcea730f58e in clone (/lib64/libc.so.6+0x11858e) (BuildId: 448a3ddd22596e1adb8fb3dec8921ed5b9d54dc2)
OS: linux

-----
Title: [JDK-8342905] Thread.setContextClassloader from thread in FJP commonPool task no longer works after JDK-8327501 redux
Priority: P4
Type: Bug
Component: core-libs
Description: See JDK-8328366 for more details.

-----
Title: [JDK-8327501] Common ForkJoinPool prevents class unloading in some cases
Priority: P4
Type: Bug
Component: core-libs
Description: When the ForkJoinPool.commonPool() creates new worker threads, they capture an AccessControlContext from the location where they were created, which means that the class won't get unloaded for the lifetime of that worker thread.

-----
Title: [JDK-8342962] [s390x] TestOSRLotsOfLocals.java crashes
Priority: P3
Type: Bug
Component: hotspot
Description: s390x might be affected by the same issue as aarch64 (JDK-8335662).
The new test runs into
assert(nbits == 32 || (-(1
OS: linux

-----
Title: [JDK-8343285] java.lang.Process is unresponsive and CPU usage spikes to 100%
Priority: P3
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
A DESCRIPTION OF THE PROBLEM :
In JDK 8, using the Process class to execute the command "/Applications/LibreOffice.app/Contents/MacOS/soffice --help"works as expected. However, after switching to JDK 21, the thread executing the command becomes unresponsive, and the forked process causes CPU usage to spike to 100%.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. install soffice
2. run code
3. switch jdk
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
return immediately
ACTUAL -
no result
---------- BEGIN SOURCE ----------
ProcessBuilder processBuilder = new ProcessBuilder(
"/Applications/LibreOffice.app/Contents/MacOS/soffice",
"--help"
);
Process process = processBuilder.start();
BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
String line;
while ((line = reader.readLine()) != null) {
System.out.println(line);
}
int exitCode = process.waitFor();
System.out.println("Process exited with code: " + exitCode);
---------- END SOURCE ----------
OS: os_x

-----
Title: [JDK-8343474] [updates] Customize README.md to specifics of update project
Priority: P4
Type: Bug
Component: infrastructure
Description: Add some project specific information to README.md, among others to better guide new contributors.
Let’s keep this sufficiently generic so that the information holds for jdkXu and jdkXu-dev
and that the change can easily be backported (by adapting 21-17 etc.).

-----
Title: [JDK-8343506] [s390x] multiple test failures with ubsan
Priority: P4
Type: Bug
Component: hotspot
Description: When enabled UBSAN and fired up tier1, on s390x, you will see multiple test failures with this error:
bt:
/home/amit/ubsan/jdk/src/hotspot/cpu/s390/s390.ad:2550:20: runtime error: signed integer overflow: -9223372036854775808 - 1 cannot be represented in type ‘long int'
#0 0x3ff8e49009b in State::_sub_Op_ConL(Node const*) /home/amit/ubsan/jdk/src/hotspot/cpu/s390/s390.ad:2550
#1 0x3ff8e4b38c9 in State::DFA(int, Node const*) /home/amit/ubsan/jdk/make/hotspot/dfa_s390.cpp:11680
#2 0x3ff8f667853 in Matcher::Label_Root(Node const*, State*, Node*, Node*&) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1752
#3 0x3ff8f667a2d in Matcher::Label_Root(Node const*, State*, Node*, Node*&) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1746
#4 0x3ff8f668ef3 in Matcher::match_tree(Node const*) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1548
#5 0x3ff8f6751ab in Matcher::xform(Node*, int) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1158
#6 0x3ff8f67c8e3 in Matcher::match() /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:368
#7 0x3ff8e28a529 in Compile::Code_Gen() /home/amit/ubsan/jdk/src/hotspot/share/opto/compile.cpp:2935
#8 0x3ff8e294219 in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) /home/amit/ubsan/jdk/src/hotspot/share/opto/compile.cpp:885
#9 0x3ff8ddf6f33 in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) /home/amit/ubsan/jdk/src/hotspot/share/opto/c2compiler.cpp:142
#10 0x3ff8e2b22b3 in CompileBroker::invoke_compiler_on_method(CompileTask*) /home/amit/ubsan/jdk/src/hotspot/share/compiler/compileBroker.cpp:2303
#11 0x3ff8e2b3f3d in CompileBroker::compiler_thread_loop() /home/amit/ubsan/jdk/src/hotspot/share/compiler/compileBroker.cpp:1961
#12 0x3ff8ed01181 in JavaThread::thread_main_inner() /home/amit/ubsan/jdk/src/hotspot/share/runtime/javaThread.cpp:759
#13 0x3ff901169c9 in Thread::call_run() /home/amit/ubsan/jdk/src/hotspot/share/runtime/thread.cpp:234
#14 0x3ff8fa105e7 in thread_native_entry /home/amit/ubsan/jdk/src/hotspot/os/linux/os_linux.cpp:858
#15 0x3ff93316295 in start_thread nptl/pthread_create.c:442
#16 0x3ff9338ff8d  (/lib/s390x-linux-gnu/libc.so.6+0x10ff8d)
OS: linux

-----
Title: [JDK-8343724] [PPC64] Disallow OptoScheduling
Priority: P4
Type: Bug
Component: hotspot
Description: The JVM currently allows switching on -XX:+OptoScheduling.
This should not be allowed because the required information in ppc.ad file is neither accurate nor complete.
JDK-8338446 shows that it implies Undefined Behavior.
We could implement support for OptoScheduling in the future, but the benefit is questionable because modern Power processors use out-of-order scheduling.

-----
Title: [JDK-8343848] Fix typo of property name in TestOAEPPadding after 8341927
Priority: P5
Type: Bug
Component: security-libs
Description: test/jdk/com/sun/crypto/provider/Cipher/RSA/TestOAEPPadding.java
has a typo: "test.providername"
Test executes correct anyways.
Thanks to Lutz for spotting this in review https://github.com/openjdk/jdk21u-dev/pull/1138

-----
Title: [JDK-8343877] Test AsyncClose.java intermittent fails - Socket.getInputStream().read() wasn't preempted
Priority: P3
Type: Bug
Component: core-libs
Description: Test java/net/Socket/asyncClose/AsyncClose.java intermittent fails with VM options -Xcomp -XX:TieredStopAtLevel=1, the test log snippet:
command: main -Djava.net.preferIPv4Stack=true AsyncClose
reason: User specified action: run main/othervm -Djava.net.preferIPv4Stack=true AsyncClose
started: Fri Nov 08 21:07:06 CST 2024
Mode: othervm [/othervm specified]
finished: Fri Nov 08 21:07:12 CST 2024
elapsed time (seconds): 6.014
configuration:
STDOUT:
******************************
Test: Socket.getInputStream().read()
Failed:
- Socket.getInputStream().read() returned unexpectedly!!
- Socket.getInputStream().read() wasn't preempted
OS: linux

-----
Title: [JDK-8343884] [s390x]  Disallow OptoScheduling
Priority: P4
Type: Bug
Component: hotspot
Description: The JVM currently allows switching on -XX:+OptoScheduling.
This should not be allowed because the required information in s390x is not complete.
Till now I have only one test failure: gc/g1/TestFromCardCacheIndex.java
Be noted that I only tested tier1 on fastdebug vm.
This might be targeted in future but benefit is questionable to the effort it will take.
OS: linux

-----
Title: [JDK-8343923] GHA: Switch to Xcode 15 on MacOS AArch64 runners
Priority: P4
Type: Enhancement
Component: infrastructure
Description: We use macos-14 images for macos-aarch64 runners. We use Xcode 14.3.1 there. Xcode 14 goes away from those runners, as per: https://github.com/actions/runner-images/issues/10703. Current GH runner docs say macos-14 image defaults to Xcode 15.4: https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md. We can switch to that.
I think this policy change is why we started seeing GHA failures like:
```
Run # On macOS we need to install some dependencies for testing
== Downloading https://ghcr.io/v2/homebrew/core/make/manifests/4.4.1-1
== Fetching make
== Downloading https://ghcr.io/v2/homebrew/core/make/blobs/sha256:94377dc5a364da305c75fd7aa923a42897993de9edd1eb074428e13c3f2aaf93
== Pouring make--4.4.1.arm64_sonoma.bottle.1.tar.gz
== Caveats
GNU "make" has been installed as "gmake".
If you need to use it as "make", you can add a "gnubin" directory
to your PATH from your bashrc like:
PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"
== Summary
🍺  /opt/homebrew/Cellar/make/4.4.1: 17 files, 1.3MB
xcode-select: error: invalid developer directory '/Applications/Xcode_14.3.1.app/Contents/Developer'
Error: Process completed with exit code 1.
```

-----
Title: [JDK-8344164] [s390x] ProblemList hotspot/jtreg/runtime/NMT/VirtualAllocCommitMerge.java
Priority: P4
Type: Sub-task
Component: hotspot
Description: The failure is weird. It appeared suddenly on all of the jdk versions. I can see it on jdk 21, 23, 24. Till now no reason were found why this is failing at all. No idea if we it could be found any time soon. So I am problemlisting it to make the CI clean.
OS: linux

-----
Title: [JDK-8344628] Test TestEnableJVMCIProduct.java run with virtual thread intermittent fails
Priority: P4
Type: Bug
Component: hotspot
Description: Test compiler/jvmci/TestEnableJVMCIProduct.java intermittent fails when run with virtual thread. Failure probability about 20/10k.
The test log snippet:
jvmci.CompilerCannot use JVMCI compiler: JVMCI compiler 'graal' specified by jvmci.Compiler not found
Cannot use JVMCI compiler: JVMCI compiler 'graal' specified by jvmci.Compiler not found
java.lang.RuntimeException: 'jvmci.Compiler=graal' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:253)
at TestEnableJVMCIProduct.test(TestEnableJVMCIProduct.java:106)
at TestEnableJVMCIProduct.main(TestEnableJVMCIProduct.java:71)
Reproduce test command:
export test=test/hotspot/jtreg/compiler/jvmci/TestEnableJVMCIProduct.java
function runJtreg() { jtreg -J-Djavatest.maxOutputSize=999999999 -testThreadFactoryPath:$PWD/build/linux-`arch`-server-release/images/test/jtreg_test_thread_factory/jtregTestThreadFactory.jar -testThreadFactory:Virtual -ea -esa -timeoutFactor:4 -v:fail,error,time,nopass -nr -w $dir/index-$1 $test & $dir/$1.log ; if [[ 0 -ne $? ]] ; then echo -n "$1 " ; else rm -rf $dir/index-$1 $dir/$1.log ; fi ; } ; export -f runJtreg ; export dir="tmp-jtreg-"`basename ${test##* } .java | sed "s|#|_|"` ; rm -rf $dir ; mkdir -p $dir ; time seq 50000 | xargs -i -n 1 -P `nproc` bash -c "runJtreg {}" ; echo total fail number: `ls $dir/*.log 2 /dev/null | wc | awk '{print $1}'`
OS: linux

-----
Title: [JDK-8344993] [21u] [REDO] Backport JDK-8327501 and JDK-8328366 to JDK 21
Priority: P4
Type: Bug
Component: core-libs
Description: JDK-8327501 and JDK-8328366 got backported to OpenJDK 21.0.5 and backed out with JDK-8341989 in the same release 21.0.5. This is a redo bug for a new attempt to fix the class unloading issue described in JDK-8327501 in a future version of OpenJDK 21.
By backing out JDK-8341989, we plan to re-introduce JDK-8327501 and JDK-8328366 to JDK 21u. Contrary to the initial attempt to have JDK-8327501 and JDK-8328366 in JDK 21u, we will now also backport JDK-8342905 that fixes the issue observed with the previous attempt.
OS: generic

-----
Title: [JDK-8328366] Thread.setContextClassloader from thread in FJP commonPool task no longer works after JDK-8327501
Priority: P3
Type: Bug
Component: core-libs
Description: Christian Wimmer in JDK-8327501 writes:
The fix for JDK-8327501 has a compatibility impact that has been overlooked: Using `InnocuousForkJoinWorkerThread` means that any task that runs in the common pool can no longer use `Thread.currentThread().setContextClassLoader(...)` - that unconditionally throws a `SecurityException`.
This breaks many existing Java libraries and frameworks. One example is Quarkus. See:
https://github.com/quarkusio/quarkus/issues/39526
OS: generic

-----
Title: [JDK-8345055] [21u] ProblemList failing rtm tests on ppc platforms
Priority: P4
Type: Sub-task
Component: hotspot
Description: Exclude  some rtm related test which we see currently failing on some ppc64 platforms.
OS: linux, aix

-----
Title: [JDK-8347010] [21u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 21.0.6
Priority: P4
Type: Bug
Component: infrastructure
Description: As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.
